
Ejemplo15_I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800435c  0800435c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004364  08004364  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800436c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  20000014  08004380  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08004380  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c47  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196a  00000000  00000000  00027cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000838  00000000  00000000  00029638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000063c  00000000  00000000  00029e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015d88  00000000  00000000  0002a4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bdb3  00000000  00000000  00040234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846e2  00000000  00000000  0004bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002044  00000000  00000000  000d06cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d2710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080035c0 	.word	0x080035c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080035c0 	.word	0x080035c0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	4b17      	ldr	r3, [pc, #92]	; (8000538 <MX_GPIO_Init+0x68>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a16      	ldr	r2, [pc, #88]	; (8000538 <MX_GPIO_Init+0x68>)
 80004e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_GPIO_Init+0x68>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_GPIO_Init+0x68>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <MX_GPIO_Init+0x68>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_GPIO_Init+0x68>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_GPIO_Init+0x68>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <MX_GPIO_Init+0x68>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_GPIO_Init+0x68>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800

0800053c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <MX_I2C1_Init+0x50>)
 8000542:	4a13      	ldr	r2, [pc, #76]	; (8000590 <MX_I2C1_Init+0x54>)
 8000544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <MX_I2C1_Init+0x50>)
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_I2C1_Init+0x58>)
 800054a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <MX_I2C1_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000552:	4b0e      	ldr	r3, [pc, #56]	; (800058c <MX_I2C1_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_I2C1_Init+0x50>)
 800055a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800055e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800056c:	4b07      	ldr	r3, [pc, #28]	; (800058c <MX_I2C1_Init+0x50>)
 800056e:	2200      	movs	r2, #0
 8000570:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000572:	4b06      	ldr	r3, [pc, #24]	; (800058c <MX_I2C1_Init+0x50>)
 8000574:	2200      	movs	r2, #0
 8000576:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000578:	4804      	ldr	r0, [pc, #16]	; (800058c <MX_I2C1_Init+0x50>)
 800057a:	f001 fdf7 	bl	800216c <HAL_I2C_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000584:	f000 f932 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000030 	.word	0x20000030
 8000590:	40005400 	.word	0x40005400
 8000594:	00061a80 	.word	0x00061a80

08000598 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a19      	ldr	r2, [pc, #100]	; (800061c <HAL_I2C_MspInit+0x84>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d12c      	bne.n	8000614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_I2C_MspInit+0x88>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_I2C_MspInit+0x88>)
 80005c4:	f043 0302 	orr.w	r3, r3, #2
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_I2C_MspInit+0x88>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0302 	and.w	r3, r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005dc:	2312      	movs	r3, #18
 80005de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005e8:	2304      	movs	r3, #4
 80005ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <HAL_I2C_MspInit+0x8c>)
 80005f4:	f001 fc36 	bl	8001e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <HAL_I2C_MspInit+0x88>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_I2C_MspInit+0x88>)
 8000602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_I2C_MspInit+0x88>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000614:	bf00      	nop
 8000616:	3728      	adds	r7, #40	; 0x28
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40005400 	.word	0x40005400
 8000620:	40023800 	.word	0x40023800
 8000624:	40020400 	.word	0x40020400

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f001 fa9e 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f872 	bl	8000718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f7ff ff4c 	bl	80004d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000638:	f7ff ff80 	bl	800053c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800063c:	f000 f966 	bl	800090c <SSD1306_Init>
  SSD1306_GotoXY(0, 10);
 8000640:	210a      	movs	r1, #10
 8000642:	2000      	movs	r0, #0
 8000644:	f000 facc 	bl	8000be0 <SSD1306_GotoXY>
  SSD1306_Puts("STM32",&Font_11x18,1);
 8000648:	2201      	movs	r2, #1
 800064a:	4930      	ldr	r1, [pc, #192]	; (800070c <main+0xe4>)
 800064c:	4830      	ldr	r0, [pc, #192]	; (8000710 <main+0xe8>)
 800064e:	f000 fb5d 	bl	8000d0c <SSD1306_Puts>
  SSD1306_GotoXY(10,40);
 8000652:	2128      	movs	r1, #40	; 0x28
 8000654:	200a      	movs	r0, #10
 8000656:	f000 fac3 	bl	8000be0 <SSD1306_GotoXY>
  SSD1306_Puts("QHIPA",&Font_11x18,1);
 800065a:	2201      	movs	r2, #1
 800065c:	492b      	ldr	r1, [pc, #172]	; (800070c <main+0xe4>)
 800065e:	482d      	ldr	r0, [pc, #180]	; (8000714 <main+0xec>)
 8000660:	f000 fb54 	bl	8000d0c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000664:	f000 fa16 	bl	8000a94 <SSD1306_UpdateScreen>
  HAL_Delay(3000);
 8000668:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066c:	f001 faf0 	bl	8001c50 <HAL_Delay>
  // SCROLL
  SSD1306_ScrollLeft(0, 8);
 8000670:	2108      	movs	r1, #8
 8000672:	2000      	movs	r0, #0
 8000674:	f000 f8f5 	bl	8000862 <SSD1306_ScrollLeft>
  HAL_Delay(3000);
 8000678:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800067c:	f001 fae8 	bl	8001c50 <HAL_Delay>
  SSD1306_ScrollRight(0, 8);
 8000680:	2108      	movs	r1, #8
 8000682:	2000      	movs	r0, #0
 8000684:	f000 f8b7 	bl	80007f6 <SSD1306_ScrollRight>
  HAL_Delay(3000);
 8000688:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800068c:	f001 fae0 	bl	8001c50 <HAL_Delay>
  SSD1306_Stopscroll();
 8000690:	f000 f91d 	bl	80008ce <SSD1306_Stopscroll>
  HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000698:	f001 fada 	bl	8001c50 <HAL_Delay>
  SSD1306_InvertDisplay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f000 f91f 	bl	80008e0 <SSD1306_InvertDisplay>
  HAL_Delay(3000);
 80006a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006a6:	f001 fad3 	bl	8001c50 <HAL_Delay>
  SSD1306_InvertDisplay(0);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f918 	bl	80008e0 <SSD1306_InvertDisplay>
  HAL_Delay(3000);
 80006b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006b4:	f001 facc 	bl	8001c50 <HAL_Delay>
   TestLines (1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 ffe5 	bl	8001688 <TestLines>
  HAL_Delay(3000);
 80006be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c2:	f001 fac5 	bl	8001c50 <HAL_Delay>
   TestRectangles (1);
 80006c6:	2001      	movs	r0, #1
 80006c8:	f001 f8f5 	bl	80018b6 <TestRectangles>
  HAL_Delay(3000);
 80006cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006d0:	f001 fabe 	bl	8001c50 <HAL_Delay>
   TestFilledRectangles (1);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f001 f921 	bl	800191c <TestFilledRectangles>
  HAL_Delay(3000);
 80006da:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006de:	f001 fab7 	bl	8001c50 <HAL_Delay>
   TestFilledCircles(5, 1);
 80006e2:	2101      	movs	r1, #1
 80006e4:	2005      	movs	r0, #5
 80006e6:	f001 f951 	bl	800198c <TestFilledCircles>
  HAL_Delay(3000);
 80006ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006ee:	f001 faaf 	bl	8001c50 <HAL_Delay>
   TestCircles(5, 1);
 80006f2:	2101      	movs	r1, #1
 80006f4:	2005      	movs	r0, #5
 80006f6:	f001 f984 	bl	8001a02 <TestCircles>
  HAL_Delay(3000);
 80006fa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006fe:	f001 faa7 	bl	8001c50 <HAL_Delay>
   TestTriangles (1);
 8000702:	2001      	movs	r0, #1
 8000704:	f001 f9ba 	bl	8001a7c <TestTriangles>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0xe0>
 800070a:	bf00      	nop
 800070c:	20000000 	.word	0x20000000
 8000710:	080035d8 	.word	0x080035d8
 8000714:	080035e0 	.word	0x080035e0

08000718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071e:	f107 0320 	add.w	r3, r7, #32
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f002 ff1e 	bl	8003568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <SystemClock_Config+0xcc>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a27      	ldr	r2, [pc, #156]	; (80007e4 <SystemClock_Config+0xcc>)
 8000746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <SystemClock_Config+0xd0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000764:	4a20      	ldr	r2, [pc, #128]	; (80007e8 <SystemClock_Config+0xd0>)
 8000766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <SystemClock_Config+0xd0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078c:	2304      	movs	r3, #4
 800078e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000790:	2354      	movs	r3, #84	; 0x54
 8000792:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000794:	2302      	movs	r3, #2
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fa5d 	bl	8002c60 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007ac:	f000 f81e 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2302      	movs	r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	2102      	movs	r1, #2
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fcbf 	bl	8003150 <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d8:	f000 f808 	bl	80007ec <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>

080007f6 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	460a      	mov	r2, r1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	4613      	mov	r3, r2
 8000804:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000806:	2226      	movs	r2, #38	; 0x26
 8000808:	2100      	movs	r1, #0
 800080a:	2078      	movs	r0, #120	; 0x78
 800080c:	f000 feba 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2078      	movs	r0, #120	; 0x78
 8000816:	f000 feb5 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	461a      	mov	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	; 0x78
 8000822:	f000 feaf 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	; 0x78
 800082c:	f000 feaa 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	461a      	mov	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	2078      	movs	r0, #120	; 0x78
 8000838:	f000 fea4 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2078      	movs	r0, #120	; 0x78
 8000842:	f000 fe9f 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000846:	22ff      	movs	r2, #255	; 0xff
 8000848:	2100      	movs	r1, #0
 800084a:	2078      	movs	r0, #120	; 0x78
 800084c:	f000 fe9a 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000850:	222f      	movs	r2, #47	; 0x2f
 8000852:	2100      	movs	r1, #0
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f000 fe95 	bl	8001584 <ssd1306_I2C_Write>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	460a      	mov	r2, r1
 800086c:	71fb      	strb	r3, [r7, #7]
 800086e:	4613      	mov	r3, r2
 8000870:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000872:	2227      	movs	r2, #39	; 0x27
 8000874:	2100      	movs	r1, #0
 8000876:	2078      	movs	r0, #120	; 0x78
 8000878:	f000 fe84 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2078      	movs	r0, #120	; 0x78
 8000882:	f000 fe7f 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	461a      	mov	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	2078      	movs	r0, #120	; 0x78
 800088e:	f000 fe79 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	2078      	movs	r0, #120	; 0x78
 8000898:	f000 fe74 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	461a      	mov	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	; 0x78
 80008a4:	f000 fe6e 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	; 0x78
 80008ae:	f000 fe69 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80008b2:	22ff      	movs	r2, #255	; 0xff
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	; 0x78
 80008b8:	f000 fe64 	bl	8001584 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80008bc:	222f      	movs	r2, #47	; 0x2f
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	; 0x78
 80008c2:	f000 fe5f 	bl	8001584 <ssd1306_I2C_Write>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80008d2:	222e      	movs	r2, #46	; 0x2e
 80008d4:	2100      	movs	r1, #0
 80008d6:	2078      	movs	r0, #120	; 0x78
 80008d8:	f000 fe54 	bl	8001584 <ssd1306_I2C_Write>
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d005      	beq.n	80008fa <SSD1306_InvertDisplay+0x1a>
 80008ee:	22a7      	movs	r2, #167	; 0xa7
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	; 0x78
 80008f4:	f000 fe46 	bl	8001584 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80008f8:	e004      	b.n	8000904 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80008fa:	22a6      	movs	r2, #166	; 0xa6
 80008fc:	2100      	movs	r1, #0
 80008fe:	2078      	movs	r0, #120	; 0x78
 8000900:	f000 fe40 	bl	8001584 <ssd1306_I2C_Write>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000912:	f000 fdbb 	bl	800148c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000916:	f644 6320 	movw	r3, #20000	; 0x4e20
 800091a:	2201      	movs	r2, #1
 800091c:	2178      	movs	r1, #120	; 0x78
 800091e:	485b      	ldr	r0, [pc, #364]	; (8000a8c <SSD1306_Init+0x180>)
 8000920:	f001 fe66 	bl	80025f0 <HAL_I2C_IsDeviceReady>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800092a:	2300      	movs	r3, #0
 800092c:	e0a9      	b.n	8000a82 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800092e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000932:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000934:	e002      	b.n	800093c <SSD1306_Init+0x30>
		p--;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3b01      	subs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f9      	bne.n	8000936 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000942:	22ae      	movs	r2, #174	; 0xae
 8000944:	2100      	movs	r1, #0
 8000946:	2078      	movs	r0, #120	; 0x78
 8000948:	f000 fe1c 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800094c:	2220      	movs	r2, #32
 800094e:	2100      	movs	r1, #0
 8000950:	2078      	movs	r0, #120	; 0x78
 8000952:	f000 fe17 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000956:	2210      	movs	r2, #16
 8000958:	2100      	movs	r1, #0
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 fe12 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000960:	22b0      	movs	r2, #176	; 0xb0
 8000962:	2100      	movs	r1, #0
 8000964:	2078      	movs	r0, #120	; 0x78
 8000966:	f000 fe0d 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800096a:	22c8      	movs	r2, #200	; 0xc8
 800096c:	2100      	movs	r1, #0
 800096e:	2078      	movs	r0, #120	; 0x78
 8000970:	f000 fe08 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2078      	movs	r0, #120	; 0x78
 800097a:	f000 fe03 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800097e:	2210      	movs	r2, #16
 8000980:	2100      	movs	r1, #0
 8000982:	2078      	movs	r0, #120	; 0x78
 8000984:	f000 fdfe 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	; 0x78
 800098e:	f000 fdf9 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000992:	2281      	movs	r2, #129	; 0x81
 8000994:	2100      	movs	r1, #0
 8000996:	2078      	movs	r0, #120	; 0x78
 8000998:	f000 fdf4 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800099c:	22ff      	movs	r2, #255	; 0xff
 800099e:	2100      	movs	r1, #0
 80009a0:	2078      	movs	r0, #120	; 0x78
 80009a2:	f000 fdef 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80009a6:	22a1      	movs	r2, #161	; 0xa1
 80009a8:	2100      	movs	r1, #0
 80009aa:	2078      	movs	r0, #120	; 0x78
 80009ac:	f000 fdea 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009b0:	22a6      	movs	r2, #166	; 0xa6
 80009b2:	2100      	movs	r1, #0
 80009b4:	2078      	movs	r0, #120	; 0x78
 80009b6:	f000 fde5 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80009ba:	22a8      	movs	r2, #168	; 0xa8
 80009bc:	2100      	movs	r1, #0
 80009be:	2078      	movs	r0, #120	; 0x78
 80009c0:	f000 fde0 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80009c4:	223f      	movs	r2, #63	; 0x3f
 80009c6:	2100      	movs	r1, #0
 80009c8:	2078      	movs	r0, #120	; 0x78
 80009ca:	f000 fddb 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009ce:	22a4      	movs	r2, #164	; 0xa4
 80009d0:	2100      	movs	r1, #0
 80009d2:	2078      	movs	r0, #120	; 0x78
 80009d4:	f000 fdd6 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009d8:	22d3      	movs	r2, #211	; 0xd3
 80009da:	2100      	movs	r1, #0
 80009dc:	2078      	movs	r0, #120	; 0x78
 80009de:	f000 fdd1 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2078      	movs	r0, #120	; 0x78
 80009e8:	f000 fdcc 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009ec:	22d5      	movs	r2, #213	; 0xd5
 80009ee:	2100      	movs	r1, #0
 80009f0:	2078      	movs	r0, #120	; 0x78
 80009f2:	f000 fdc7 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80009f6:	22f0      	movs	r2, #240	; 0xf0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2078      	movs	r0, #120	; 0x78
 80009fc:	f000 fdc2 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a00:	22d9      	movs	r2, #217	; 0xd9
 8000a02:	2100      	movs	r1, #0
 8000a04:	2078      	movs	r0, #120	; 0x78
 8000a06:	f000 fdbd 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a0a:	2222      	movs	r2, #34	; 0x22
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2078      	movs	r0, #120	; 0x78
 8000a10:	f000 fdb8 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a14:	22da      	movs	r2, #218	; 0xda
 8000a16:	2100      	movs	r1, #0
 8000a18:	2078      	movs	r0, #120	; 0x78
 8000a1a:	f000 fdb3 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a1e:	2212      	movs	r2, #18
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	; 0x78
 8000a24:	f000 fdae 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a28:	22db      	movs	r2, #219	; 0xdb
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2078      	movs	r0, #120	; 0x78
 8000a2e:	f000 fda9 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a32:	2220      	movs	r2, #32
 8000a34:	2100      	movs	r1, #0
 8000a36:	2078      	movs	r0, #120	; 0x78
 8000a38:	f000 fda4 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a3c:	228d      	movs	r2, #141	; 0x8d
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2078      	movs	r0, #120	; 0x78
 8000a42:	f000 fd9f 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a46:	2214      	movs	r2, #20
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	; 0x78
 8000a4c:	f000 fd9a 	bl	8001584 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a50:	22af      	movs	r2, #175	; 0xaf
 8000a52:	2100      	movs	r1, #0
 8000a54:	2078      	movs	r0, #120	; 0x78
 8000a56:	f000 fd95 	bl	8001584 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a5a:	222e      	movs	r2, #46	; 0x2e
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	; 0x78
 8000a60:	f000 fd90 	bl	8001584 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f843 	bl	8000af0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a6a:	f000 f813 	bl	8000a94 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <SSD1306_Init+0x184>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SSD1306_Init+0x184>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SSD1306_Init+0x184>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000030 	.word	0x20000030
 8000a90:	20000484 	.word	0x20000484

08000a94 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	e01d      	b.n	8000adc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	3b50      	subs	r3, #80	; 0x50
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2078      	movs	r0, #120	; 0x78
 8000aac:	f000 fd6a 	bl	8001584 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2078      	movs	r0, #120	; 0x78
 8000ab6:	f000 fd65 	bl	8001584 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000aba:	2210      	movs	r2, #16
 8000abc:	2100      	movs	r1, #0
 8000abe:	2078      	movs	r0, #120	; 0x78
 8000ac0:	f000 fd60 	bl	8001584 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <SSD1306_UpdateScreen+0x58>)
 8000aca:	441a      	add	r2, r3
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	2078      	movs	r0, #120	; 0x78
 8000ad2:	f000 fcf1 	bl	80014b8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d9de      	bls.n	8000aa0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ae2:	bf00      	nop
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000084 	.word	0x20000084

08000af0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d101      	bne.n	8000b04 <SSD1306_Fill+0x14>
 8000b00:	2300      	movs	r3, #0
 8000b02:	e000      	b.n	8000b06 <SSD1306_Fill+0x16>
 8000b04:	23ff      	movs	r3, #255	; 0xff
 8000b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <SSD1306_Fill+0x2c>)
 8000b0e:	f002 fd2b 	bl	8003568 <memset>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000084 	.word	0x20000084

08000b20 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	70fb      	strb	r3, [r7, #3]
	if (
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b7f      	cmp	r3, #127	; 0x7f
 8000b36:	d848      	bhi.n	8000bca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000b3c:	d845      	bhi.n	8000bca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b3e:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <SSD1306_DrawPixel+0xb8>)
 8000b40:	791b      	ldrb	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d11a      	bne.n	8000b90 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	b298      	uxth	r0, r3
 8000b62:	4603      	mov	r3, r0
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	4413      	add	r3, r2
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <SSD1306_DrawPixel+0xbc>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	b25a      	sxtb	r2, r3
 8000b6e:	88bb      	ldrh	r3, [r7, #4]
 8000b70:	f003 0307 	and.w	r3, r3, #7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	b25b      	sxtb	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b259      	sxtb	r1, r3
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	4603      	mov	r3, r0
 8000b84:	01db      	lsls	r3, r3, #7
 8000b86:	4413      	add	r3, r2
 8000b88:	b2c9      	uxtb	r1, r1
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <SSD1306_DrawPixel+0xbc>)
 8000b8c:	54d1      	strb	r1, [r2, r3]
 8000b8e:	e01d      	b.n	8000bcc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	08db      	lsrs	r3, r3, #3
 8000b96:	b298      	uxth	r0, r3
 8000b98:	4603      	mov	r3, r0
 8000b9a:	01db      	lsls	r3, r3, #7
 8000b9c:	4413      	add	r3, r2
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	; (8000bdc <SSD1306_DrawPixel+0xbc>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	b25a      	sxtb	r2, r3
 8000ba4:	88bb      	ldrh	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	b259      	sxtb	r1, r3
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	01db      	lsls	r3, r3, #7
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2c9      	uxtb	r1, r1
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SSD1306_DrawPixel+0xbc>)
 8000bc6:	54d1      	strb	r1, [r2, r3]
 8000bc8:	e000      	b.n	8000bcc <SSD1306_DrawPixel+0xac>
		return;
 8000bca:	bf00      	nop
	}
}
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000484 	.word	0x20000484
 8000bdc:	20000084 	.word	0x20000084

08000be0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	80fb      	strh	r3, [r7, #6]
 8000bec:	4613      	mov	r3, r2
 8000bee:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SSD1306_GotoXY+0x28>)
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <SSD1306_GotoXY+0x28>)
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	8053      	strh	r3, [r2, #2]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20000484 	.word	0x20000484

08000c0c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
	if (
 8000c28:	2b7f      	cmp	r3, #127	; 0x7f
 8000c2a:	dc07      	bgt.n	8000c3c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c2c:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000c2e:	885b      	ldrh	r3, [r3, #2]
 8000c30:	461a      	mov	r2, r3
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c38:	2b3f      	cmp	r3, #63	; 0x3f
 8000c3a:	dd01      	ble.n	8000c40 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e05e      	b.n	8000cfe <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e04b      	b.n	8000cde <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	3b20      	subs	r3, #32
 8000c4e:	6839      	ldr	r1, [r7, #0]
 8000c50:	7849      	ldrb	r1, [r1, #1]
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	4619      	mov	r1, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	440b      	add	r3, r1
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	e030      	b.n	8000ccc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d010      	beq.n	8000c9c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000c7c:	881a      	ldrh	r2, [r3, #0]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	4413      	add	r3, r2
 8000c84:	b298      	uxth	r0, r3
 8000c86:	4b20      	ldr	r3, [pc, #128]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000c88:	885a      	ldrh	r2, [r3, #2]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	79ba      	ldrb	r2, [r7, #6]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f7ff ff43 	bl	8000b20 <SSD1306_DrawPixel>
 8000c9a:	e014      	b.n	8000cc6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000c9e:	881a      	ldrh	r2, [r3, #0]
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b298      	uxth	r0, r3
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000caa:	885a      	ldrh	r2, [r3, #2]
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf0c      	ite	eq
 8000cba:	2301      	moveq	r3, #1
 8000cbc:	2300      	movne	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f7ff ff2d 	bl	8000b20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d3c8      	bcc.n	8000c6a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d3ad      	bcc.n	8000c46 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4413      	add	r3, r2
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <SSD1306_Putc+0xfc>)
 8000cfa:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000484 	.word	0x20000484

08000d0c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	4613      	mov	r3, r2
 8000d18:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d1a:	e012      	b.n	8000d42 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	79fa      	ldrb	r2, [r7, #7]
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff71 	bl	8000c0c <SSD1306_Putc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d002      	beq.n	8000d3c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	e008      	b.n	8000d4e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1e8      	bne.n	8000d1c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8000d56:	b590      	push	{r4, r7, lr}
 8000d58:	b087      	sub	sp, #28
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	4611      	mov	r1, r2
 8000d62:	461a      	mov	r2, r3
 8000d64:	4623      	mov	r3, r4
 8000d66:	80fb      	strh	r3, [r7, #6]
 8000d68:	4603      	mov	r3, r0
 8000d6a:	80bb      	strh	r3, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
 8000d70:	4613      	mov	r3, r2
 8000d72:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	2b7f      	cmp	r3, #127	; 0x7f
 8000d78:	d901      	bls.n	8000d7e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8000d7a:	237f      	movs	r3, #127	; 0x7f
 8000d7c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	2b7f      	cmp	r3, #127	; 0x7f
 8000d82:	d901      	bls.n	8000d88 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8000d84:	237f      	movs	r3, #127	; 0x7f
 8000d86:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8000d88:	88bb      	ldrh	r3, [r7, #4]
 8000d8a:	2b3f      	cmp	r3, #63	; 0x3f
 8000d8c:	d901      	bls.n	8000d92 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8000d8e:	233f      	movs	r3, #63	; 0x3f
 8000d90:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8000d92:	883b      	ldrh	r3, [r7, #0]
 8000d94:	2b3f      	cmp	r3, #63	; 0x3f
 8000d96:	d901      	bls.n	8000d9c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8000d98:	233f      	movs	r3, #63	; 0x3f
 8000d9a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8000d9c:	88fa      	ldrh	r2, [r7, #6]
 8000d9e:	887b      	ldrh	r3, [r7, #2]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d205      	bcs.n	8000db0 <SSD1306_DrawLine+0x5a>
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	e004      	b.n	8000dba <SSD1306_DrawLine+0x64>
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	b21b      	sxth	r3, r3
 8000dba:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8000dbc:	88ba      	ldrh	r2, [r7, #4]
 8000dbe:	883b      	ldrh	r3, [r7, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d205      	bcs.n	8000dd0 <SSD1306_DrawLine+0x7a>
 8000dc4:	883a      	ldrh	r2, [r7, #0]
 8000dc6:	88bb      	ldrh	r3, [r7, #4]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b21b      	sxth	r3, r3
 8000dce:	e004      	b.n	8000dda <SSD1306_DrawLine+0x84>
 8000dd0:	88ba      	ldrh	r2, [r7, #4]
 8000dd2:	883b      	ldrh	r3, [r7, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d201      	bcs.n	8000de8 <SSD1306_DrawLine+0x92>
 8000de4:	2301      	movs	r3, #1
 8000de6:	e001      	b.n	8000dec <SSD1306_DrawLine+0x96>
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8000dee:	88ba      	ldrh	r2, [r7, #4]
 8000df0:	883b      	ldrh	r3, [r7, #0]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d201      	bcs.n	8000dfa <SSD1306_DrawLine+0xa4>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e001      	b.n	8000dfe <SSD1306_DrawLine+0xa8>
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8000e00:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000e04:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dd06      	ble.n	8000e1a <SSD1306_DrawLine+0xc4>
 8000e0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e10:	0fda      	lsrs	r2, r3, #31
 8000e12:	4413      	add	r3, r2
 8000e14:	105b      	asrs	r3, r3, #1
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	e006      	b.n	8000e28 <SSD1306_DrawLine+0xd2>
 8000e1a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e1e:	0fda      	lsrs	r2, r3, #31
 8000e20:	4413      	add	r3, r2
 8000e22:	105b      	asrs	r3, r3, #1
 8000e24:	425b      	negs	r3, r3
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8000e2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d129      	bne.n	8000e86 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8000e32:	883a      	ldrh	r2, [r7, #0]
 8000e34:	88bb      	ldrh	r3, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d205      	bcs.n	8000e46 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8000e3a:	883b      	ldrh	r3, [r7, #0]
 8000e3c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e42:	893b      	ldrh	r3, [r7, #8]
 8000e44:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000e46:	887a      	ldrh	r2, [r7, #2]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d205      	bcs.n	8000e5a <SSD1306_DrawLine+0x104>
			tmp = x1;
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000e56:	893b      	ldrh	r3, [r7, #8]
 8000e58:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8000e5a:	88bb      	ldrh	r3, [r7, #4]
 8000e5c:	82bb      	strh	r3, [r7, #20]
 8000e5e:	e00c      	b.n	8000e7a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000e60:	8ab9      	ldrh	r1, [r7, #20]
 8000e62:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe59 	bl	8000b20 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8000e6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	82bb      	strh	r3, [r7, #20]
 8000e7a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e7e:	883b      	ldrh	r3, [r7, #0]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dded      	ble.n	8000e60 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8000e84:	e05f      	b.n	8000f46 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8000e86:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d129      	bne.n	8000ee2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8000e8e:	883a      	ldrh	r2, [r7, #0]
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d205      	bcs.n	8000ea2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8000e96:	883b      	ldrh	r3, [r7, #0]
 8000e98:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8000e9a:	88bb      	ldrh	r3, [r7, #4]
 8000e9c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000e9e:	893b      	ldrh	r3, [r7, #8]
 8000ea0:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d205      	bcs.n	8000eb6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8000eaa:	887b      	ldrh	r3, [r7, #2]
 8000eac:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000eb2:	893b      	ldrh	r3, [r7, #8]
 8000eb4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	82bb      	strh	r3, [r7, #20]
 8000eba:	e00c      	b.n	8000ed6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8000ebc:	8abb      	ldrh	r3, [r7, #20]
 8000ebe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ec2:	88b9      	ldrh	r1, [r7, #4]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe2b 	bl	8000b20 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8000eca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	82bb      	strh	r3, [r7, #20]
 8000ed6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dded      	ble.n	8000ebc <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8000ee0:	e031      	b.n	8000f46 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8000ee2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000ee6:	88b9      	ldrh	r1, [r7, #4]
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fe18 	bl	8000b20 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	887b      	ldrh	r3, [r7, #2]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d103      	bne.n	8000f00 <SSD1306_DrawLine+0x1aa>
 8000ef8:	88ba      	ldrh	r2, [r7, #4]
 8000efa:	883b      	ldrh	r3, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d021      	beq.n	8000f44 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8000f00:	8afb      	ldrh	r3, [r7, #22]
 8000f02:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8000f04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f0c:	425b      	negs	r3, r3
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dd08      	ble.n	8000f24 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000f12:	8afa      	ldrh	r2, [r7, #22]
 8000f14:	8a3b      	ldrh	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000f1c:	89fa      	ldrh	r2, [r7, #14]
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	4413      	add	r3, r2
 8000f22:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8000f24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f28:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	dad8      	bge.n	8000ee2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000f30:	8afa      	ldrh	r2, [r7, #22]
 8000f32:	8a7b      	ldrh	r3, [r7, #18]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000f3a:	89ba      	ldrh	r2, [r7, #12]
 8000f3c:	88bb      	ldrh	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000f42:	e7ce      	b.n	8000ee2 <SSD1306_DrawLine+0x18c>
			break;
 8000f44:	bf00      	nop
		} 
	}
}
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}

08000f4c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4604      	mov	r4, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	80fb      	strh	r3, [r7, #6]
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80bb      	strh	r3, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	807b      	strh	r3, [r7, #2]
 8000f66:	4613      	mov	r3, r2
 8000f68:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6e:	d853      	bhi.n	8001018 <SSD1306_DrawRectangle+0xcc>
		x >= SSD1306_WIDTH ||
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	2b3f      	cmp	r3, #63	; 0x3f
 8000f74:	d850      	bhi.n	8001018 <SSD1306_DrawRectangle+0xcc>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8000f76:	88fa      	ldrh	r2, [r7, #6]
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f7e:	dd03      	ble.n	8000f88 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f86:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8000f88:	88ba      	ldrh	r2, [r7, #4]
 8000f8a:	883b      	ldrh	r3, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f90:	dd03      	ble.n	8000f9a <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000f98:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw 4 lines */
	SSD1306_DrawLine(x, y, x + w, y, c);         /* Top line */
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	88bc      	ldrh	r4, [r7, #4]
 8000fa4:	88b9      	ldrh	r1, [r7, #4]
 8000fa6:	88f8      	ldrh	r0, [r7, #6]
 8000fa8:	7e3b      	ldrb	r3, [r7, #24]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4623      	mov	r3, r4
 8000fae:	f7ff fed2 	bl	8000d56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
 8000fb2:	88ba      	ldrh	r2, [r7, #4]
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b299      	uxth	r1, r3
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b29c      	uxth	r4, r3
 8000fc2:	88ba      	ldrh	r2, [r7, #4]
 8000fc4:	883b      	ldrh	r3, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	88f8      	ldrh	r0, [r7, #6]
 8000fcc:	7e3b      	ldrb	r3, [r7, #24]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f7ff febf 	bl	8000d56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
 8000fd8:	88ba      	ldrh	r2, [r7, #4]
 8000fda:	883b      	ldrh	r3, [r7, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b29c      	uxth	r4, r3
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	88b9      	ldrh	r1, [r7, #4]
 8000fe4:	88f8      	ldrh	r0, [r7, #6]
 8000fe6:	7e3b      	ldrb	r3, [r7, #24]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4623      	mov	r3, r4
 8000fec:	f7ff feb3 	bl	8000d56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
 8000ff0:	88fa      	ldrh	r2, [r7, #6]
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	b298      	uxth	r0, r3
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29c      	uxth	r4, r3
 8001000:	88ba      	ldrh	r2, [r7, #4]
 8001002:	883b      	ldrh	r3, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	b29a      	uxth	r2, r3
 8001008:	88b9      	ldrh	r1, [r7, #4]
 800100a:	7e3b      	ldrb	r3, [r7, #24]
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	4613      	mov	r3, r2
 8001010:	4622      	mov	r2, r4
 8001012:	f7ff fea0 	bl	8000d56 <SSD1306_DrawLine>
 8001016:	e000      	b.n	800101a <SSD1306_DrawRectangle+0xce>
		return;
 8001018:	bf00      	nop
}
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}

08001020 <SSD1306_DrawFilledRectangle>:

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b087      	sub	sp, #28
 8001024:	af02      	add	r7, sp, #8
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4623      	mov	r3, r4
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	d836      	bhi.n	80010b2 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	2b3f      	cmp	r3, #63	; 0x3f
 8001048:	d833      	bhi.n	80010b2 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4413      	add	r3, r2
 8001050:	2b7f      	cmp	r3, #127	; 0x7f
 8001052:	dd03      	ble.n	800105c <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800105a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800105c:	88ba      	ldrh	r2, [r7, #4]
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	2b3f      	cmp	r3, #63	; 0x3f
 8001064:	dd03      	ble.n	800106e <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001066:	88bb      	ldrh	r3, [r7, #4]
 8001068:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800106c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e018      	b.n	80010a6 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	b29a      	uxth	r2, r3
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	b299      	uxth	r1, r3
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	887b      	ldrh	r3, [r7, #2]
 8001082:	4413      	add	r3, r2
 8001084:	b29c      	uxth	r4, r3
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	b29a      	uxth	r2, r3
 800108a:	88bb      	ldrh	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	b29a      	uxth	r2, r3
 8001090:	88f8      	ldrh	r0, [r7, #6]
 8001092:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	4613      	mov	r3, r2
 800109a:	4622      	mov	r2, r4
 800109c:	f7ff fe5b 	bl	8000d56 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	3301      	adds	r3, #1
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	883a      	ldrh	r2, [r7, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d2e1      	bcs.n	8001074 <SSD1306_DrawFilledRectangle+0x54>
 80010b0:	e000      	b.n	80010b4 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80010b2:	bf00      	nop
	}
}
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}

080010ba <SSD1306_DrawTriangle>:

void SSD1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, SSD1306_COLOR_t color) {
 80010ba:	b590      	push	{r4, r7, lr}
 80010bc:	b085      	sub	sp, #20
 80010be:	af02      	add	r7, sp, #8
 80010c0:	4604      	mov	r4, r0
 80010c2:	4608      	mov	r0, r1
 80010c4:	4611      	mov	r1, r2
 80010c6:	461a      	mov	r2, r3
 80010c8:	4623      	mov	r3, r4
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4603      	mov	r3, r0
 80010ce:	80bb      	strh	r3, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	803b      	strh	r3, [r7, #0]
	/* Draw lines */
	SSD1306_DrawLine(x1, y1, x2, y2, color);
 80010d8:	883c      	ldrh	r4, [r7, #0]
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	88b9      	ldrh	r1, [r7, #4]
 80010de:	88f8      	ldrh	r0, [r7, #6]
 80010e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4623      	mov	r3, r4
 80010e8:	f7ff fe35 	bl	8000d56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x2, y2, x3, y3, color);
 80010ec:	8bbc      	ldrh	r4, [r7, #28]
 80010ee:	8b3a      	ldrh	r2, [r7, #24]
 80010f0:	8839      	ldrh	r1, [r7, #0]
 80010f2:	8878      	ldrh	r0, [r7, #2]
 80010f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	4623      	mov	r3, r4
 80010fc:	f7ff fe2b 	bl	8000d56 <SSD1306_DrawLine>
	SSD1306_DrawLine(x3, y3, x1, y1, color);
 8001100:	88bc      	ldrh	r4, [r7, #4]
 8001102:	88fa      	ldrh	r2, [r7, #6]
 8001104:	8bb9      	ldrh	r1, [r7, #28]
 8001106:	8b38      	ldrh	r0, [r7, #24]
 8001108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	4623      	mov	r3, r4
 8001110:	f7ff fe21 	bl	8000d56 <SSD1306_DrawLine>
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	bd90      	pop	{r4, r7, pc}

0800111c <SSD1306_DrawCircle>:
		x += xinc2;
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4623      	mov	r3, r4
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	4603      	mov	r3, r0
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	f1c3 0301 	rsb	r3, r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001144:	2301      	movs	r3, #1
 8001146:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	461a      	mov	r2, r3
 800114c:	03d2      	lsls	r2, r2, #15
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 800115e:	88f8      	ldrh	r0, [r7, #6]
 8001160:	88ba      	ldrh	r2, [r7, #4]
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	787a      	ldrb	r2, [r7, #1]
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fcd8 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001170:	88f8      	ldrh	r0, [r7, #6]
 8001172:	88ba      	ldrh	r2, [r7, #4]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	787a      	ldrb	r2, [r7, #1]
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fccf 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001182:	88fa      	ldrh	r2, [r7, #6]
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	88b9      	ldrh	r1, [r7, #4]
 800118c:	787a      	ldrb	r2, [r7, #1]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fcc6 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001194:	88fa      	ldrh	r2, [r7, #6]
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	b29b      	uxth	r3, r3
 800119c:	88b9      	ldrh	r1, [r7, #4]
 800119e:	787a      	ldrb	r2, [r7, #1]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fcbd 	bl	8000b20 <SSD1306_DrawPixel>

    while (x < y) {
 80011a6:	e081      	b.n	80012ac <SSD1306_DrawCircle+0x190>
        if (f >= 0) {
 80011a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0e      	blt.n	80011ce <SSD1306_DrawCircle+0xb2>
            y--;
 80011b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80011bc:	8a7b      	ldrh	r3, [r7, #18]
 80011be:	3302      	adds	r3, #2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80011c4:	8afa      	ldrh	r2, [r7, #22]
 80011c6:	8a7b      	ldrh	r3, [r7, #18]
 80011c8:	4413      	add	r3, r2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80011ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	3302      	adds	r3, #2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80011e2:	8afa      	ldrh	r2, [r7, #22]
 80011e4:	8abb      	ldrh	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	8a3b      	ldrh	r3, [r7, #16]
 80011f0:	4413      	add	r3, r2
 80011f2:	b298      	uxth	r0, r3
 80011f4:	88ba      	ldrh	r2, [r7, #4]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	4413      	add	r3, r2
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	787a      	ldrb	r2, [r7, #1]
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc8e 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8001204:	88fa      	ldrh	r2, [r7, #6]
 8001206:	8a3b      	ldrh	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b298      	uxth	r0, r3
 800120c:	88ba      	ldrh	r2, [r7, #4]
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	4413      	add	r3, r2
 8001212:	b29b      	uxth	r3, r3
 8001214:	787a      	ldrb	r2, [r7, #1]
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc82 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 800121c:	88fa      	ldrh	r2, [r7, #6]
 800121e:	8a3b      	ldrh	r3, [r7, #16]
 8001220:	4413      	add	r3, r2
 8001222:	b298      	uxth	r0, r3
 8001224:	88ba      	ldrh	r2, [r7, #4]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	b29b      	uxth	r3, r3
 800122c:	787a      	ldrb	r2, [r7, #1]
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc76 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8001234:	88fa      	ldrh	r2, [r7, #6]
 8001236:	8a3b      	ldrh	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	b298      	uxth	r0, r3
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b29b      	uxth	r3, r3
 8001244:	787a      	ldrb	r2, [r7, #1]
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fc6a 	bl	8000b20 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	89fb      	ldrh	r3, [r7, #14]
 8001250:	4413      	add	r3, r2
 8001252:	b298      	uxth	r0, r3
 8001254:	88ba      	ldrh	r2, [r7, #4]
 8001256:	8a3b      	ldrh	r3, [r7, #16]
 8001258:	4413      	add	r3, r2
 800125a:	b29b      	uxth	r3, r3
 800125c:	787a      	ldrb	r2, [r7, #1]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc5e 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8001264:	88fa      	ldrh	r2, [r7, #6]
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b298      	uxth	r0, r3
 800126c:	88ba      	ldrh	r2, [r7, #4]
 800126e:	8a3b      	ldrh	r3, [r7, #16]
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	787a      	ldrb	r2, [r7, #1]
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fc52 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 800127c:	88fa      	ldrh	r2, [r7, #6]
 800127e:	89fb      	ldrh	r3, [r7, #14]
 8001280:	4413      	add	r3, r2
 8001282:	b298      	uxth	r0, r3
 8001284:	88ba      	ldrh	r2, [r7, #4]
 8001286:	8a3b      	ldrh	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29b      	uxth	r3, r3
 800128c:	787a      	ldrb	r2, [r7, #1]
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc46 	bl	8000b20 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8001294:	88fa      	ldrh	r2, [r7, #6]
 8001296:	89fb      	ldrh	r3, [r7, #14]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b298      	uxth	r0, r3
 800129c:	88ba      	ldrh	r2, [r7, #4]
 800129e:	8a3b      	ldrh	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	787a      	ldrb	r2, [r7, #1]
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fc3a 	bl	8000b20 <SSD1306_DrawPixel>
    while (x < y) {
 80012ac:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f6ff af77 	blt.w	80011a8 <SSD1306_DrawCircle+0x8c>
    }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	371c      	adds	r7, #28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4604      	mov	r4, r0
 80012cc:	4608      	mov	r0, r1
 80012ce:	4611      	mov	r1, r2
 80012d0:	461a      	mov	r2, r3
 80012d2:	4623      	mov	r3, r4
 80012d4:	80fb      	strh	r3, [r7, #6]
 80012d6:	4603      	mov	r3, r0
 80012d8:	80bb      	strh	r3, [r7, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	807b      	strh	r3, [r7, #2]
 80012de:	4613      	mov	r3, r2
 80012e0:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	f1c3 0301 	rsb	r3, r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	461a      	mov	r2, r3
 80012f4:	03d2      	lsls	r2, r2, #15
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001306:	88f8      	ldrh	r0, [r7, #6]
 8001308:	88ba      	ldrh	r2, [r7, #4]
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	4413      	add	r3, r2
 800130e:	b29b      	uxth	r3, r3
 8001310:	787a      	ldrb	r2, [r7, #1]
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fc04 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001318:	88f8      	ldrh	r0, [r7, #6]
 800131a:	88ba      	ldrh	r2, [r7, #4]
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	787a      	ldrb	r2, [r7, #1]
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fbfb 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	88b9      	ldrh	r1, [r7, #4]
 8001334:	787a      	ldrb	r2, [r7, #1]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fbf2 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800133c:	88fa      	ldrh	r2, [r7, #6]
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	88b9      	ldrh	r1, [r7, #4]
 8001346:	787a      	ldrb	r2, [r7, #1]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fbe9 	bl	8000b20 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800134e:	88fa      	ldrh	r2, [r7, #6]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b298      	uxth	r0, r3
 8001356:	88b9      	ldrh	r1, [r7, #4]
 8001358:	88fa      	ldrh	r2, [r7, #6]
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	4413      	add	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	88bc      	ldrh	r4, [r7, #4]
 8001362:	787b      	ldrb	r3, [r7, #1]
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	4623      	mov	r3, r4
 8001368:	f7ff fcf5 	bl	8000d56 <SSD1306_DrawLine>

    while (x < y) {
 800136c:	e079      	b.n	8001462 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 800136e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0e      	blt.n	8001394 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001376:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800137a:	b29b      	uxth	r3, r3
 800137c:	3b01      	subs	r3, #1
 800137e:	b29b      	uxth	r3, r3
 8001380:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001382:	8a7b      	ldrh	r3, [r7, #18]
 8001384:	3302      	adds	r3, #2
 8001386:	b29b      	uxth	r3, r3
 8001388:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800138a:	8afa      	ldrh	r2, [r7, #22]
 800138c:	8a7b      	ldrh	r3, [r7, #18]
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001394:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80013a0:	8abb      	ldrh	r3, [r7, #20]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80013a8:	8afa      	ldrh	r2, [r7, #22]
 80013aa:	8abb      	ldrh	r3, [r7, #20]
 80013ac:	4413      	add	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	8a3b      	ldrh	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	b298      	uxth	r0, r3
 80013ba:	88ba      	ldrh	r2, [r7, #4]
 80013bc:	89fb      	ldrh	r3, [r7, #14]
 80013be:	4413      	add	r3, r2
 80013c0:	b299      	uxth	r1, r3
 80013c2:	88fa      	ldrh	r2, [r7, #6]
 80013c4:	8a3b      	ldrh	r3, [r7, #16]
 80013c6:	4413      	add	r3, r2
 80013c8:	b29c      	uxth	r4, r3
 80013ca:	88ba      	ldrh	r2, [r7, #4]
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4613      	mov	r3, r2
 80013d8:	4622      	mov	r2, r4
 80013da:	f7ff fcbc 	bl	8000d56 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	8a3b      	ldrh	r3, [r7, #16]
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	88ba      	ldrh	r2, [r7, #4]
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b299      	uxth	r1, r3
 80013ee:	88fa      	ldrh	r2, [r7, #6]
 80013f0:	8a3b      	ldrh	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29c      	uxth	r4, r3
 80013f6:	88ba      	ldrh	r2, [r7, #4]
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	787b      	ldrb	r3, [r7, #1]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4613      	mov	r3, r2
 8001404:	4622      	mov	r2, r4
 8001406:	f7ff fca6 	bl	8000d56 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 800140a:	88fa      	ldrh	r2, [r7, #6]
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	4413      	add	r3, r2
 8001410:	b298      	uxth	r0, r3
 8001412:	88ba      	ldrh	r2, [r7, #4]
 8001414:	8a3b      	ldrh	r3, [r7, #16]
 8001416:	4413      	add	r3, r2
 8001418:	b299      	uxth	r1, r3
 800141a:	88fa      	ldrh	r2, [r7, #6]
 800141c:	89fb      	ldrh	r3, [r7, #14]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b29c      	uxth	r4, r3
 8001422:	88ba      	ldrh	r2, [r7, #4]
 8001424:	8a3b      	ldrh	r3, [r7, #16]
 8001426:	4413      	add	r3, r2
 8001428:	b29a      	uxth	r2, r3
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4613      	mov	r3, r2
 8001430:	4622      	mov	r2, r4
 8001432:	f7ff fc90 	bl	8000d56 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	4413      	add	r3, r2
 800143c:	b298      	uxth	r0, r3
 800143e:	88ba      	ldrh	r2, [r7, #4]
 8001440:	8a3b      	ldrh	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b299      	uxth	r1, r3
 8001446:	88fa      	ldrh	r2, [r7, #6]
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b29c      	uxth	r4, r3
 800144e:	88ba      	ldrh	r2, [r7, #4]
 8001450:	8a3b      	ldrh	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	787b      	ldrb	r3, [r7, #1]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	4622      	mov	r2, r4
 800145e:	f7ff fc7a 	bl	8000d56 <SSD1306_DrawLine>
    while (x < y) {
 8001462:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001466:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146a:	429a      	cmp	r2, r3
 800146c:	f6ff af7f 	blt.w	800136e <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd90      	pop	{r4, r7, pc}

0800147a <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fb36 	bl	8000af0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001484:	f7ff fb06 	bl	8000a94 <SSD1306_UpdateScreen>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <ssd1306_I2C_Init+0x28>)
 8001494:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001496:	e002      	b.n	800149e <ssd1306_I2C_Init+0x12>
		p--;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	0003d090 	.word	0x0003d090

080014b8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b0c7      	sub	sp, #284	; 0x11c
 80014bc:	af02      	add	r7, sp, #8
 80014be:	4604      	mov	r4, r0
 80014c0:	4608      	mov	r0, r1
 80014c2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80014c6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80014ca:	600a      	str	r2, [r1, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014d2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80014d6:	4622      	mov	r2, r4
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014de:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014ee:	460a      	mov	r2, r1
 80014f0:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80014f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80014fe:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001506:	2300      	movs	r3, #0
 8001508:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800150c:	e015      	b.n	800153a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800150e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001512:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001516:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800151a:	6812      	ldr	r2, [r2, #0]
 800151c:	441a      	add	r2, r3
 800151e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001522:	3301      	adds	r3, #1
 8001524:	7811      	ldrb	r1, [r2, #0]
 8001526:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800152a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800152e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001530:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001534:	3301      	adds	r3, #1
 8001536:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800153a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800153e:	b29b      	uxth	r3, r3
 8001540:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001544:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d8df      	bhi.n	800150e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800154e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001552:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b299      	uxth	r1, r3
 800155a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800155e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	f107 020c 	add.w	r2, r7, #12
 800156c:	200a      	movs	r0, #10
 800156e:	9000      	str	r0, [sp, #0]
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <ssd1306_I2C_WriteMulti+0xc8>)
 8001572:	f000 ff3f 	bl	80023f4 <HAL_I2C_Master_Transmit>
}
 8001576:	bf00      	nop
 8001578:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800157c:	46bd      	mov	sp, r7
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	20000030 	.word	0x20000030

08001584 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af02      	add	r7, sp, #8
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800159a:	797b      	ldrb	r3, [r7, #5]
 800159c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	b299      	uxth	r1, r3
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	230a      	movs	r3, #10
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <ssd1306_I2C_Write+0x38>)
 80015ae:	f000 ff21 	bl	80023f4 <HAL_I2C_Master_Transmit>
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000030 	.word	0x20000030

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x4c>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 fad8 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <TestLines>:
#include "ssd1306.h"

#define min(a, b) (((a) < (b)) ? (a) : (b))

void TestLines(uint8_t color)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b087      	sub	sp, #28
 800168c:	af02      	add	r7, sp, #8
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
    uint8_t x1, y1, x2, y2;

    SSD1306_Clear ();
 8001692:	f7ff fef2 	bl	800147a <SSD1306_Clear>

    x1 = y1 = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	737b      	strb	r3, [r7, #13]
 800169a:	7b7b      	ldrb	r3, [r7, #13]
 800169c:	733b      	strb	r3, [r7, #12]
    y2    = SSD1306_HEIGHT - 1;
 800169e:	233f      	movs	r3, #63	; 0x3f
 80016a0:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e014      	b.n	80016d2 <TestLines+0x4a>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 80016a8:	7b3b      	ldrb	r3, [r7, #12]
 80016aa:	b298      	uxth	r0, r3
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	b299      	uxth	r1, r3
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	7bbb      	ldrb	r3, [r7, #14]
 80016b6:	b29c      	uxth	r4, r3
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	f7ff fb4a 	bl	8000d56 <SSD1306_DrawLine>
    		HAL_Delay(1);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f000 fac4 	bl	8001c50 <HAL_Delay>
    		SSD1306_UpdateScreen();
 80016c8:	f7ff f9e4 	bl	8000a94 <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3306      	adds	r3, #6
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	dae6      	bge.n	80016a8 <TestLines+0x20>
    	}
    x2    = SSD1306_WIDTH - 1;
 80016da:	237f      	movs	r3, #127	; 0x7f
 80016dc:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80016de:	2300      	movs	r3, #0
 80016e0:	73bb      	strb	r3, [r7, #14]
 80016e2:	e014      	b.n	800170e <TestLines+0x86>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 80016e4:	7b3b      	ldrb	r3, [r7, #12]
 80016e6:	b298      	uxth	r0, r3
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	b299      	uxth	r1, r3
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	b29c      	uxth	r4, r3
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	f7ff fb2c 	bl	8000d56 <SSD1306_DrawLine>
    		HAL_Delay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f000 faa6 	bl	8001c50 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8001704:	f7ff f9c6 	bl	8000a94 <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	3306      	adds	r3, #6
 800170c:	73bb      	strb	r3, [r7, #14]
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	2b3f      	cmp	r3, #63	; 0x3f
 8001712:	d9e7      	bls.n	80016e4 <TestLines+0x5c>
    	}

    HAL_Delay(10);
 8001714:	200a      	movs	r0, #10
 8001716:	f000 fa9b 	bl	8001c50 <HAL_Delay>


    SSD1306_Clear ();
 800171a:	f7ff feae 	bl	800147a <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 800171e:	237f      	movs	r3, #127	; 0x7f
 8001720:	733b      	strb	r3, [r7, #12]
    y1    = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	737b      	strb	r3, [r7, #13]
    y2    = SSD1306_HEIGHT - 1;
 8001726:	233f      	movs	r3, #63	; 0x3f
 8001728:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e014      	b.n	800175a <TestLines+0xd2>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001730:	7b3b      	ldrb	r3, [r7, #12]
 8001732:	b298      	uxth	r0, r3
 8001734:	7b7b      	ldrb	r3, [r7, #13]
 8001736:	b299      	uxth	r1, r3
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	b29a      	uxth	r2, r3
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	b29c      	uxth	r4, r3
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4623      	mov	r3, r4
 8001746:	f7ff fb06 	bl	8000d56 <SSD1306_DrawLine>
    		SSD1306_UpdateScreen();
 800174a:	f7ff f9a3 	bl	8000a94 <SSD1306_UpdateScreen>
    		HAL_Delay(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f000 fa7e 	bl	8001c50 <HAL_Delay>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	3306      	adds	r3, #6
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	dae6      	bge.n	8001730 <TestLines+0xa8>
    	}
    x2    = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001766:	2300      	movs	r3, #0
 8001768:	73bb      	strb	r3, [r7, #14]
 800176a:	e014      	b.n	8001796 <TestLines+0x10e>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 800176c:	7b3b      	ldrb	r3, [r7, #12]
 800176e:	b298      	uxth	r0, r3
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b299      	uxth	r1, r3
 8001774:	7bfb      	ldrb	r3, [r7, #15]
 8001776:	b29a      	uxth	r2, r3
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	b29c      	uxth	r4, r3
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	4623      	mov	r3, r4
 8001782:	f7ff fae8 	bl	8000d56 <SSD1306_DrawLine>
    		SSD1306_UpdateScreen();
 8001786:	f7ff f985 	bl	8000a94 <SSD1306_UpdateScreen>
    		HAL_Delay(1);
 800178a:	2001      	movs	r0, #1
 800178c:	f000 fa60 	bl	8001c50 <HAL_Delay>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	3306      	adds	r3, #6
 8001794:	73bb      	strb	r3, [r7, #14]
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b3f      	cmp	r3, #63	; 0x3f
 800179a:	d9e7      	bls.n	800176c <TestLines+0xe4>
    	}

    HAL_Delay(10);
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fa57 	bl	8001c50 <HAL_Delay>


    SSD1306_Clear ();
 80017a2:	f7ff fe6a 	bl	800147a <SSD1306_Clear>

    x1    = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 80017aa:	233f      	movs	r3, #63	; 0x3f
 80017ac:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e014      	b.n	80017e2 <TestLines+0x15a>
    {
    	SSD1306_DrawLine(x1, y1, x2, y2, color);
 80017b8:	7b3b      	ldrb	r3, [r7, #12]
 80017ba:	b298      	uxth	r0, r3
 80017bc:	7b7b      	ldrb	r3, [r7, #13]
 80017be:	b299      	uxth	r1, r3
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	7bbb      	ldrb	r3, [r7, #14]
 80017c6:	b29c      	uxth	r4, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	4623      	mov	r3, r4
 80017ce:	f7ff fac2 	bl	8000d56 <SSD1306_DrawLine>
    	HAL_Delay(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f000 fa3c 	bl	8001c50 <HAL_Delay>
    	SSD1306_UpdateScreen();
 80017d8:	f7ff f95c 	bl	8000a94 <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
 80017de:	3306      	adds	r3, #6
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	dae6      	bge.n	80017b8 <TestLines+0x130>
    }
    x2    = SSD1306_WIDTH - 1;
 80017ea:	237f      	movs	r3, #127	; 0x7f
 80017ec:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80017ee:	2300      	movs	r3, #0
 80017f0:	73bb      	strb	r3, [r7, #14]
 80017f2:	e014      	b.n	800181e <TestLines+0x196>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 80017f4:	7b3b      	ldrb	r3, [r7, #12]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	b299      	uxth	r1, r3
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	7bbb      	ldrb	r3, [r7, #14]
 8001802:	b29c      	uxth	r4, r3
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4623      	mov	r3, r4
 800180a:	f7ff faa4 	bl	8000d56 <SSD1306_DrawLine>
    		HAL_Delay(1);
 800180e:	2001      	movs	r0, #1
 8001810:	f000 fa1e 	bl	8001c50 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8001814:	f7ff f93e 	bl	8000a94 <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	3306      	adds	r3, #6
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	2b3f      	cmp	r3, #63	; 0x3f
 8001822:	d9e7      	bls.n	80017f4 <TestLines+0x16c>
    	}

    HAL_Delay(10);
 8001824:	200a      	movs	r0, #10
 8001826:	f000 fa13 	bl	8001c50 <HAL_Delay>


    SSD1306_Clear ();
 800182a:	f7ff fe26 	bl	800147a <SSD1306_Clear>

    x1    = SSD1306_WIDTH - 1;
 800182e:	237f      	movs	r3, #127	; 0x7f
 8001830:	733b      	strb	r3, [r7, #12]
    y1    = SSD1306_HEIGHT - 1;
 8001832:	233f      	movs	r3, #63	; 0x3f
 8001834:	737b      	strb	r3, [r7, #13]
    y2    = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	73bb      	strb	r3, [r7, #14]
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 800183a:	2300      	movs	r3, #0
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	e014      	b.n	800186a <TestLines+0x1e2>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 8001840:	7b3b      	ldrb	r3, [r7, #12]
 8001842:	b298      	uxth	r0, r3
 8001844:	7b7b      	ldrb	r3, [r7, #13]
 8001846:	b299      	uxth	r1, r3
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	b29a      	uxth	r2, r3
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	b29c      	uxth	r4, r3
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4623      	mov	r3, r4
 8001856:	f7ff fa7e 	bl	8000d56 <SSD1306_DrawLine>
    		HAL_Delay(1);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 f9f8 	bl	8001c50 <HAL_Delay>
    		SSD1306_UpdateScreen();
 8001860:	f7ff f918 	bl	8000a94 <SSD1306_UpdateScreen>
    for (x2 = 0; x2 < SSD1306_WIDTH; x2 += 6)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	3306      	adds	r3, #6
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	2b00      	cmp	r3, #0
 8001870:	dae6      	bge.n	8001840 <TestLines+0x1b8>
    	}
    x2    = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 8001876:	2300      	movs	r3, #0
 8001878:	73bb      	strb	r3, [r7, #14]
 800187a:	e014      	b.n	80018a6 <TestLines+0x21e>
    	{
    		SSD1306_DrawLine(x1, y1, x2, y2, color);
 800187c:	7b3b      	ldrb	r3, [r7, #12]
 800187e:	b298      	uxth	r0, r3
 8001880:	7b7b      	ldrb	r3, [r7, #13]
 8001882:	b299      	uxth	r1, r3
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	b29a      	uxth	r2, r3
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	b29c      	uxth	r4, r3
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f7ff fa60 	bl	8000d56 <SSD1306_DrawLine>
    		HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 f9da 	bl	8001c50 <HAL_Delay>
    		SSD1306_UpdateScreen();
 800189c:	f7ff f8fa 	bl	8000a94 <SSD1306_UpdateScreen>
    for (y2 = 0; y2 < SSD1306_HEIGHT; y2 += 6)
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	3306      	adds	r3, #6
 80018a4:	73bb      	strb	r3, [r7, #14]
 80018a6:	7bbb      	ldrb	r3, [r7, #14]
 80018a8:	2b3f      	cmp	r3, #63	; 0x3f
 80018aa:	d9e7      	bls.n	800187c <TestLines+0x1f4>
    	}
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd90      	pop	{r4, r7, pc}

080018b6 <TestRectangles>:


void TestRectangles (uint8_t color)
{
 80018b6:	b590      	push	{r4, r7, lr}
 80018b8:	b087      	sub	sp, #28
 80018ba:	af02      	add	r7, sp, #8
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2;

    SSD1306_Clear ();
 80018c0:	f7ff fddb 	bl	800147a <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 80018c4:	2340      	movs	r3, #64	; 0x40
 80018c6:	73bb      	strb	r3, [r7, #14]

    for (i = 2; i < n; i += 6)
 80018c8:	2302      	movs	r3, #2
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e01d      	b.n	800190a <TestRectangles+0x54>
    {
        i2 = i / 2;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	737b      	strb	r3, [r7, #13]
        SSD1306_DrawRectangle((SSD1306_WIDTH/2) - i2, (SSD1306_HEIGHT/2) - i2, i, i, color);
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80018dc:	b298      	uxth	r0, r3
 80018de:	7b7b      	ldrb	r3, [r7, #13]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	f1c3 0320 	rsb	r3, r3, #32
 80018e6:	b299      	uxth	r1, r3
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	b29c      	uxth	r4, r3
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f7ff fb29 	bl	8000f4c <SSD1306_DrawRectangle>
        SSD1306_UpdateScreen();
 80018fa:	f7ff f8cb 	bl	8000a94 <SSD1306_UpdateScreen>
        HAL_Delay (10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 f9a6 	bl	8001c50 <HAL_Delay>
    for (i = 2; i < n; i += 6)
 8001904:	7bfb      	ldrb	r3, [r7, #15]
 8001906:	3306      	adds	r3, #6
 8001908:	73fb      	strb	r3, [r7, #15]
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	429a      	cmp	r2, r3
 8001910:	d3dd      	bcc.n	80018ce <TestRectangles+0x18>
    }
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}

0800191c <TestFilledRectangles>:

void TestFilledRectangles (uint8_t color)
{
 800191c:	b590      	push	{r4, r7, lr}
 800191e:	b087      	sub	sp, #28
 8001920:	af02      	add	r7, sp, #8
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, i2,
            cx = SSD1306_WIDTH / 2 - 1,
 8001926:	233f      	movs	r3, #63	; 0x3f
 8001928:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 800192a:	231f      	movs	r3, #31
 800192c:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 800192e:	f7ff fda4 	bl	800147a <SSD1306_Clear>

    n = min(SSD1306_WIDTH, SSD1306_HEIGHT);
 8001932:	2340      	movs	r3, #64	; 0x40
 8001934:	733b      	strb	r3, [r7, #12]
    for (i = n; i > 0; i -= 6)
 8001936:	7b3b      	ldrb	r3, [r7, #12]
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e01f      	b.n	800197c <TestFilledRectangles+0x60>
    {
        i2    = i / 2;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	72fb      	strb	r3, [r7, #11]
        SSD1306_DrawFilledRectangle(cx - i2, cy - i2, i, i, color);
 8001942:	7bbb      	ldrb	r3, [r7, #14]
 8001944:	b29a      	uxth	r2, r3
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b298      	uxth	r0, r3
 800194e:	7b7b      	ldrb	r3, [r7, #13]
 8001950:	b29a      	uxth	r2, r3
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	b29b      	uxth	r3, r3
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b299      	uxth	r1, r3
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	b29a      	uxth	r2, r3
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	b29c      	uxth	r4, r3
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4623      	mov	r3, r4
 8001968:	f7ff fb5a 	bl	8001020 <SSD1306_DrawFilledRectangle>
        SSD1306_UpdateScreen();
 800196c:	f7ff f892 	bl	8000a94 <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8001970:	200a      	movs	r0, #10
 8001972:	f000 f96d 	bl	8001c50 <HAL_Delay>
    for (i = n; i > 0; i -= 6)
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	3b06      	subs	r3, #6
 800197a:	73fb      	strb	r3, [r7, #15]
 800197c:	7bfb      	ldrb	r3, [r7, #15]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1dc      	bne.n	800193c <TestFilledRectangles+0x20>
    }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}

0800198c <TestFilledCircles>:

void TestFilledCircles(uint8_t radius, uint16_t color)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	460a      	mov	r2, r1
 8001996:	71fb      	strb	r3, [r7, #7]
 8001998:	4613      	mov	r3, r2
 800199a:	80bb      	strh	r3, [r7, #4]
    uint8_t x, y, w = SSD1306_WIDTH, h = SSD1306_HEIGHT, r2 = radius * 2;
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	737b      	strb	r3, [r7, #13]
 80019a0:	2340      	movs	r3, #64	; 0x40
 80019a2:	733b      	strb	r3, [r7, #12]
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	72fb      	strb	r3, [r7, #11]

    SSD1306_Clear ();
 80019aa:	f7ff fd66 	bl	800147a <SSD1306_Clear>

    for (x = radius; x < w; x += r2)
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	73fb      	strb	r3, [r7, #15]
 80019b2:	e01d      	b.n	80019f0 <TestFilledCircles+0x64>
    {
        for (y = radius; y < h; y += r2)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	73bb      	strb	r3, [r7, #14]
 80019b8:	e012      	b.n	80019e0 <TestFilledCircles+0x54>
        {
            SSD1306_DrawFilledCircle(x, y, radius, color);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b218      	sxth	r0, r3
 80019be:	7bbb      	ldrb	r3, [r7, #14]
 80019c0:	b219      	sxth	r1, r3
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	88bb      	ldrh	r3, [r7, #4]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f7ff fc7b 	bl	80012c4 <SSD1306_DrawFilledCircle>
            SSD1306_UpdateScreen();
 80019ce:	f7ff f861 	bl	8000a94 <SSD1306_UpdateScreen>
            HAL_Delay (10);
 80019d2:	200a      	movs	r0, #10
 80019d4:	f000 f93c 	bl	8001c50 <HAL_Delay>
        for (y = radius; y < h; y += r2)
 80019d8:	7bba      	ldrb	r2, [r7, #14]
 80019da:	7afb      	ldrb	r3, [r7, #11]
 80019dc:	4413      	add	r3, r2
 80019de:	73bb      	strb	r3, [r7, #14]
 80019e0:	7bba      	ldrb	r2, [r7, #14]
 80019e2:	7b3b      	ldrb	r3, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3e8      	bcc.n	80019ba <TestFilledCircles+0x2e>
    for (x = radius; x < w; x += r2)
 80019e8:	7bfa      	ldrb	r2, [r7, #15]
 80019ea:	7afb      	ldrb	r3, [r7, #11]
 80019ec:	4413      	add	r3, r2
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	7b7b      	ldrb	r3, [r7, #13]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3dd      	bcc.n	80019b4 <TestFilledCircles+0x28>
        }
    }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <TestCircles>:

void TestCircles(uint8_t radius, uint16_t color)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460a      	mov	r2, r1
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	80bb      	strh	r3, [r7, #4]
	SSD1306_Clear ();
 8001a12:	f7ff fd32 	bl	800147a <SSD1306_Clear>

	uint8_t x, y, r2 = radius * 2,
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	737b      	strb	r3, [r7, #13]
            w = SSD1306_WIDTH + radius,
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3b80      	subs	r3, #128	; 0x80
 8001a20:	733b      	strb	r3, [r7, #12]
            h = SSD1306_HEIGHT + radius;
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	3340      	adds	r3, #64	; 0x40
 8001a26:	72fb      	strb	r3, [r7, #11]

    for (x = 0; x < w; x += r2)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
 8001a2c:	e01d      	b.n	8001a6a <TestCircles+0x68>
    {
        for (y = 0; y < h; y += r2)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73bb      	strb	r3, [r7, #14]
 8001a32:	e012      	b.n	8001a5a <TestCircles+0x58>
        {
            SSD1306_DrawCircle(x, y, radius, color);
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	b218      	sxth	r0, r3
 8001a38:	7bbb      	ldrb	r3, [r7, #14]
 8001a3a:	b219      	sxth	r1, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	b21a      	sxth	r2, r3
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f7ff fb6a 	bl	800111c <SSD1306_DrawCircle>
            SSD1306_UpdateScreen();
 8001a48:	f7ff f824 	bl	8000a94 <SSD1306_UpdateScreen>
            HAL_Delay (10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f000 f8ff 	bl	8001c50 <HAL_Delay>
        for (y = 0; y < h; y += r2)
 8001a52:	7bba      	ldrb	r2, [r7, #14]
 8001a54:	7b7b      	ldrb	r3, [r7, #13]
 8001a56:	4413      	add	r3, r2
 8001a58:	73bb      	strb	r3, [r7, #14]
 8001a5a:	7bba      	ldrb	r2, [r7, #14]
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3e8      	bcc.n	8001a34 <TestCircles+0x32>
    for (x = 0; x < w; x += r2)
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	7b7b      	ldrb	r3, [r7, #13]
 8001a66:	4413      	add	r3, r2
 8001a68:	73fb      	strb	r3, [r7, #15]
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	7b3b      	ldrb	r3, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3dd      	bcc.n	8001a2e <TestCircles+0x2c>
        }
    }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <TestTriangles>:

void TestTriangles(uint8_t color)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
    uint8_t n, i, cx = SSD1306_WIDTH  / 2 - 1,
 8001a86:	233f      	movs	r3, #63	; 0x3f
 8001a88:	73bb      	strb	r3, [r7, #14]
            cy = SSD1306_HEIGHT / 2 - 1;
 8001a8a:	231f      	movs	r3, #31
 8001a8c:	737b      	strb	r3, [r7, #13]

    SSD1306_Clear ();
 8001a8e:	f7ff fcf4 	bl	800147a <SSD1306_Clear>

    n = min(cx, cy);
 8001a92:	7b7a      	ldrb	r2, [r7, #13]
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	4293      	cmp	r3, r2
 8001a98:	bf28      	it	cs
 8001a9a:	4613      	movcs	r3, r2
 8001a9c:	733b      	strb	r3, [r7, #12]
    for (i = 0; i < n; i += 5)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e030      	b.n	8001b06 <TestTriangles+0x8a>
    {
        SSD1306_DrawTriangle(cx , cy - i, cx - i, cy + i, cx + i, cy + i, color);
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	b298      	uxth	r0, r3
 8001aa8:	7b7b      	ldrb	r3, [r7, #13]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	b29c      	uxth	r4, r3
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29d      	uxth	r5, r3
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29e      	uxth	r6, r3
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	7b7a      	ldrb	r2, [r7, #13]
 8001ada:	b291      	uxth	r1, r2
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	440a      	add	r2, r1
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	79f9      	ldrb	r1, [r7, #7]
 8001ae6:	9102      	str	r1, [sp, #8]
 8001ae8:	9201      	str	r2, [sp, #4]
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	4633      	mov	r3, r6
 8001aee:	462a      	mov	r2, r5
 8001af0:	4621      	mov	r1, r4
 8001af2:	f7ff fae2 	bl	80010ba <SSD1306_DrawTriangle>
        SSD1306_UpdateScreen();
 8001af6:	f7fe ffcd 	bl	8000a94 <SSD1306_UpdateScreen>
        HAL_Delay (10);
 8001afa:	200a      	movs	r0, #10
 8001afc:	f000 f8a8 	bl	8001c50 <HAL_Delay>
    for (i = 0; i < n; i += 5)
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	3305      	adds	r3, #5
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d3ca      	bcc.n	8001aa4 <TestTriangles+0x28>
    }

}
 8001b0e:	bf00      	nop
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b42:	f7ff fd8f 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f001 fd17 	bl	8003578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe fd6d 	bl	8000628 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b5c:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 8001b60:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b64:	20000490 	.word	0x20000490

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f931 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fd0e 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f93b 	bl	8001e4a <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f911 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010
 8001c34:	2000048c 	.word	0x2000048c

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000048c 	.word	0x2000048c

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000010 	.word	0x20000010

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff47 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff5c 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ffb0 	bl	8001db8 <SysTick_Config>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e159      	b.n	8002134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8148 	bne.w	800212e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d005      	beq.n	8001eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d130      	bne.n	8001f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eec:	2201      	movs	r2, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 0201 	and.w	r2, r3, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b03      	cmp	r3, #3
 8001f22:	d017      	beq.n	8001f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80a2 	beq.w	800212e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_GPIO_Init+0x2e8>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a56      	ldr	r2, [pc, #344]	; (800214c <HAL_GPIO_Init+0x2e8>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b54      	ldr	r3, [pc, #336]	; (800214c <HAL_GPIO_Init+0x2e8>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_GPIO_Init+0x2ec>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a49      	ldr	r2, [pc, #292]	; (8002154 <HAL_GPIO_Init+0x2f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x202>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a48      	ldr	r2, [pc, #288]	; (8002158 <HAL_GPIO_Init+0x2f4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x1fe>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a47      	ldr	r2, [pc, #284]	; (800215c <HAL_GPIO_Init+0x2f8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x1fa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a46      	ldr	r2, [pc, #280]	; (8002160 <HAL_GPIO_Init+0x2fc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x1f6>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a45      	ldr	r2, [pc, #276]	; (8002164 <HAL_GPIO_Init+0x300>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x1f2>
 8002052:	2304      	movs	r3, #4
 8002054:	e008      	b.n	8002068 <HAL_GPIO_Init+0x204>
 8002056:	2307      	movs	r3, #7
 8002058:	e006      	b.n	8002068 <HAL_GPIO_Init+0x204>
 800205a:	2303      	movs	r3, #3
 800205c:	e004      	b.n	8002068 <HAL_GPIO_Init+0x204>
 800205e:	2302      	movs	r3, #2
 8002060:	e002      	b.n	8002068 <HAL_GPIO_Init+0x204>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_GPIO_Init+0x204>
 8002066:	2300      	movs	r3, #0
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f002 0203 	and.w	r2, r2, #3
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	4093      	lsls	r3, r2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002078:	4935      	ldr	r1, [pc, #212]	; (8002150 <HAL_GPIO_Init+0x2ec>)
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020aa:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <HAL_GPIO_Init+0x304>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_GPIO_Init+0x304>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020d4:	4a24      	ldr	r2, [pc, #144]	; (8002168 <HAL_GPIO_Init+0x304>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020da:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_GPIO_Init+0x304>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x304>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002128:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_GPIO_Init+0x304>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3301      	adds	r3, #1
 8002132:	61fb      	str	r3, [r7, #28]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2b0f      	cmp	r3, #15
 8002138:	f67f aea2 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e12b      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe fa00 	bl	8000598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2224      	movs	r2, #36	; 0x24
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021d0:	f001 f9b6 	bl	8003540 <HAL_RCC_GetPCLK1Freq>
 80021d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a81      	ldr	r2, [pc, #516]	; (80023e0 <HAL_I2C_Init+0x274>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d807      	bhi.n	80021f0 <HAL_I2C_Init+0x84>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a80      	ldr	r2, [pc, #512]	; (80023e4 <HAL_I2C_Init+0x278>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	e006      	b.n	80021fe <HAL_I2C_Init+0x92>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4a7d      	ldr	r2, [pc, #500]	; (80023e8 <HAL_I2C_Init+0x27c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	bf94      	ite	ls
 80021f8:	2301      	movls	r3, #1
 80021fa:	2300      	movhi	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0e7      	b.n	80023d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4a78      	ldr	r2, [pc, #480]	; (80023ec <HAL_I2C_Init+0x280>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0c9b      	lsrs	r3, r3, #18
 8002210:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4a6a      	ldr	r2, [pc, #424]	; (80023e0 <HAL_I2C_Init+0x274>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d802      	bhi.n	8002240 <HAL_I2C_Init+0xd4>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	3301      	adds	r3, #1
 800223e:	e009      	b.n	8002254 <HAL_I2C_Init+0xe8>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	4a69      	ldr	r2, [pc, #420]	; (80023f0 <HAL_I2C_Init+0x284>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	099b      	lsrs	r3, r3, #6
 8002252:	3301      	adds	r3, #1
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	430b      	orrs	r3, r1
 800225a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002266:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	495c      	ldr	r1, [pc, #368]	; (80023e0 <HAL_I2C_Init+0x274>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d819      	bhi.n	80022a8 <HAL_I2C_Init+0x13c>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e59      	subs	r1, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002282:	1c59      	adds	r1, r3, #1
 8002284:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002288:	400b      	ands	r3, r1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_I2C_Init+0x138>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1e59      	subs	r1, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fbb1 f3f3 	udiv	r3, r1, r3
 800229c:	3301      	adds	r3, #1
 800229e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a2:	e051      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a4:	2304      	movs	r3, #4
 80022a6:	e04f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_I2C_Init+0x168>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e58      	subs	r0, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e012      	b.n	80022fa <HAL_I2C_Init+0x18e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e58      	subs	r0, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	0099      	lsls	r1, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x196>
 80022fe:	2301      	movs	r3, #1
 8002300:	e022      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10e      	bne.n	8002328 <HAL_I2C_Init+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e58      	subs	r0, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	fbb0 f3f3 	udiv	r3, r0, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	e00f      	b.n	8002348 <HAL_I2C_Init+0x1dc>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e58      	subs	r0, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	0099      	lsls	r1, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	fbb0 f3f3 	udiv	r3, r0, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	6809      	ldr	r1, [r1, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69da      	ldr	r2, [r3, #28]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6911      	ldr	r1, [r2, #16]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68d2      	ldr	r2, [r2, #12]
 8002382:	4311      	orrs	r1, r2
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2220      	movs	r2, #32
 80023c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	000186a0 	.word	0x000186a0
 80023e4:	001e847f 	.word	0x001e847f
 80023e8:	003d08ff 	.word	0x003d08ff
 80023ec:	431bde83 	.word	0x431bde83
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	460b      	mov	r3, r1
 8002402:	817b      	strh	r3, [r7, #10]
 8002404:	4613      	mov	r3, r2
 8002406:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002408:	f7ff fc16 	bl	8001c38 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	f040 80e0 	bne.w	80025dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	2319      	movs	r3, #25
 8002422:	2201      	movs	r2, #1
 8002424:	4970      	ldr	r1, [pc, #448]	; (80025e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fa92 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	e0d3      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_I2C_Master_Transmit+0x50>
 8002440:	2302      	movs	r3, #2
 8002442:	e0cc      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d007      	beq.n	800246a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 0201 	orr.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002478:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2221      	movs	r2, #33	; 0x21
 800247e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2210      	movs	r2, #16
 8002486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	893a      	ldrh	r2, [r7, #8]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a50      	ldr	r2, [pc, #320]	; (80025ec <HAL_I2C_Master_Transmit+0x1f8>)
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024ac:	8979      	ldrh	r1, [r7, #10]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f9ca 	bl	800284c <I2C_MasterRequestWrite>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e08d      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d8:	e066      	b.n	80025a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	6a39      	ldr	r1, [r7, #32]
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fb0c 	bl	8002afc <I2C_WaitOnTXEFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00d      	beq.n	8002506 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d107      	bne.n	8002502 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002500:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e06b      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	781a      	ldrb	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b04      	cmp	r3, #4
 8002542:	d11b      	bne.n	800257c <HAL_I2C_Master_Transmit+0x188>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	781a      	ldrb	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002566:	b29b      	uxth	r3, r3
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	6a39      	ldr	r1, [r7, #32]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 fafc 	bl	8002b7e <I2C_WaitOnBTFFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00d      	beq.n	80025a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	2b04      	cmp	r3, #4
 8002592:	d107      	bne.n	80025a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e01a      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d194      	bne.n	80024da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	00100002 	.word	0x00100002
 80025ec:	ffff0000 	.word	0xffff0000

080025f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff fb1a 	bl	8001c38 <HAL_GetTick>
 8002604:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	f040 8111 	bne.w	800283a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2319      	movs	r3, #25
 800261e:	2201      	movs	r2, #1
 8002620:	4988      	ldr	r1, [pc, #544]	; (8002844 <HAL_I2C_IsDeviceReady+0x254>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 f994 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	e104      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2C_IsDeviceReady+0x50>
 800263c:	2302      	movs	r3, #2
 800263e:	e0fd      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d007      	beq.n	8002666 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002674:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2224      	movs	r2, #36	; 0x24
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a70      	ldr	r2, [pc, #448]	; (8002848 <HAL_I2C_IsDeviceReady+0x258>)
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002698:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f952 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c0:	d103      	bne.n	80026ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0b6      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80026de:	f7ff faab 	bl	8001c38 <HAL_GetTick>
 80026e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	bf0c      	ite	eq
 80026f2:	2301      	moveq	r3, #1
 80026f4:	2300      	movne	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002712:	e025      	b.n	8002760 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002714:	f7ff fa90 	bl	8001c38 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <HAL_I2C_IsDeviceReady+0x13a>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d103      	bne.n	8002732 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22a0      	movs	r2, #160	; 0xa0
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b02      	cmp	r3, #2
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2ba0      	cmp	r3, #160	; 0xa0
 800276a:	d005      	beq.n	8002778 <HAL_I2C_IsDeviceReady+0x188>
 800276c:	7dfb      	ldrb	r3, [r7, #23]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_I2C_IsDeviceReady+0x188>
 8002772:	7dbb      	ldrb	r3, [r7, #22]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0cd      	beq.n	8002714 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d129      	bne.n	80027e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2319      	movs	r3, #25
 80027ba:	2201      	movs	r2, #1
 80027bc:	4921      	ldr	r1, [pc, #132]	; (8002844 <HAL_I2C_IsDeviceReady+0x254>)
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f8c6 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e036      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e02c      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2319      	movs	r3, #25
 8002802:	2201      	movs	r2, #1
 8002804:	490f      	ldr	r1, [pc, #60]	; (8002844 <HAL_I2C_IsDeviceReady+0x254>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f8a2 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e012      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	3301      	adds	r3, #1
 800281a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	f4ff af32 	bcc.w	800268a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00100002 	.word	0x00100002
 8002848:	ffff0000 	.word	0xffff0000

0800284c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	607a      	str	r2, [r7, #4]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	460b      	mov	r3, r1
 800285a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b08      	cmp	r3, #8
 8002866:	d006      	beq.n	8002876 <I2C_MasterRequestWrite+0x2a>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d003      	beq.n	8002876 <I2C_MasterRequestWrite+0x2a>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002874:	d108      	bne.n	8002888 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	e00b      	b.n	80028a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	2b12      	cmp	r3, #18
 800288e:	d107      	bne.n	80028a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f84f 	bl	8002950 <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00d      	beq.n	80028d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c6:	d103      	bne.n	80028d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e035      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028dc:	d108      	bne.n	80028f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028ec:	611a      	str	r2, [r3, #16]
 80028ee:	e01b      	b.n	8002928 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028f0:	897b      	ldrh	r3, [r7, #10]
 80028f2:	11db      	asrs	r3, r3, #7
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	f003 0306 	and.w	r3, r3, #6
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f063 030f 	orn	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	490e      	ldr	r1, [pc, #56]	; (8002948 <I2C_MasterRequestWrite+0xfc>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f875 	bl	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e010      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <I2C_MasterRequestWrite+0x100>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f865 	bl	80029fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	00010008 	.word	0x00010008
 800294c:	00010002 	.word	0x00010002

08002950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002960:	e025      	b.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002968:	d021      	beq.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7ff f965 	bl	8001c38 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e023      	b.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10d      	bne.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	e00c      	b.n	80029ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bf0c      	ite	eq
 80029e6:	2301      	moveq	r3, #1
 80029e8:	2300      	movne	r3, #0
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d0b6      	beq.n	8002962 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b084      	sub	sp, #16
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a0c:	e051      	b.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1c:	d123      	bne.n	8002a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f043 0204 	orr.w	r2, r3, #4
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e046      	b.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d021      	beq.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff f8e3 	bl	8001c38 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d116      	bne.n	8002ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e020      	b.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10c      	bne.n	8002ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	43da      	mvns	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	e00b      	b.n	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d18d      	bne.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b08:	e02d      	b.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f878 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e02d      	b.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b20:	d021      	beq.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b22:	f7ff f889 	bl	8001c38 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0220 	orr.w	r2, r3, #32
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e007      	b.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b80      	cmp	r3, #128	; 0x80
 8002b72:	d1ca      	bne.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b084      	sub	sp, #16
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b8a:	e02d      	b.n	8002be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f837 	bl	8002c00 <I2C_IsAcknowledgeFailed>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e02d      	b.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba2:	d021      	beq.n	8002be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba4:	f7ff f848 	bl	8001c38 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d302      	bcc.n	8002bba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d116      	bne.n	8002be8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e007      	b.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d1ca      	bne.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c16:	d11b      	bne.n	8002c50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f043 0204 	orr.w	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e267      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d075      	beq.n	8002d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d00c      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8a:	4b85      	ldr	r3, [pc, #532]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d112      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c96:	4b82      	ldr	r3, [pc, #520]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca2:	d10b      	bne.n	8002cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca4:	4b7e      	ldr	r3, [pc, #504]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05b      	beq.n	8002d68 <HAL_RCC_OscConfig+0x108>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d157      	bne.n	8002d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e242      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x74>
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	e01d      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x98>
 8002cde:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6f      	ldr	r2, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a6c      	ldr	r2, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e00b      	b.n	8002d10 <HAL_RCC_OscConfig+0xb0>
 8002cf8:	4b69      	ldr	r3, [pc, #420]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a68      	ldr	r2, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d18:	f7fe ff8e 	bl	8001c38 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fe ff8a 	bl	8001c38 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e207      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0xc0>
 8002d3e:	e014      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fe ff7a 	bl	8001c38 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fe ff76 	bl	8001c38 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1f3      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5a:	4b51      	ldr	r3, [pc, #324]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f0      	bne.n	8002d48 <HAL_RCC_OscConfig+0xe8>
 8002d66:	e000      	b.n	8002d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d063      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d82:	4b47      	ldr	r3, [pc, #284]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d11c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8e:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d116      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9a:	4b41      	ldr	r3, [pc, #260]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d005      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e1c7      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db2:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4937      	ldr	r1, [pc, #220]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	e03a      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd0:	4b34      	ldr	r3, [pc, #208]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe ff2f 	bl	8001c38 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe ff2b 	bl	8001c38 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1a8      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0f0      	beq.n	8002dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	600b      	str	r3, [r1, #0]
 8002e10:	e015      	b.n	8002e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x244>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7fe ff0e 	bl	8001c38 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e20:	f7fe ff0a 	bl	8001c38 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e187      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d036      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d016      	beq.n	8002e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe feee 	bl	8001c38 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7fe feea 	bl	8001c38 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e167      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x200>
 8002e7e:	e01b      	b.n	8002eb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <HAL_RCC_OscConfig+0x248>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e86:	f7fe fed7 	bl	8001c38 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	e00e      	b.n	8002eac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8e:	f7fe fed3 	bl	8001c38 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d907      	bls.n	8002eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e150      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b88      	ldr	r3, [pc, #544]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ea      	bne.n	8002e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8097 	beq.w	8002ff4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10f      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef6:	4b77      	ldr	r3, [pc, #476]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f02:	4b74      	ldr	r3, [pc, #464]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a73      	ldr	r2, [pc, #460]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fe93 	bl	8001c38 <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7fe fe8f 	bl	8001c38 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e10c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <HAL_RCC_OscConfig+0x474>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x2ea>
 8002f3c:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	4a63      	ldr	r2, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	6713      	str	r3, [r2, #112]	; 0x70
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x30c>
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a5e      	ldr	r2, [pc, #376]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b5c      	ldr	r3, [pc, #368]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a5b      	ldr	r2, [pc, #364]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0x324>
 8002f6c:	4b58      	ldr	r3, [pc, #352]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a57      	ldr	r2, [pc, #348]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f023 0304 	bic.w	r3, r3, #4
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8c:	f7fe fe54 	bl	8001c38 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f94:	f7fe fe50 	bl	8001c38 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e0cb      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ee      	beq.n	8002f94 <HAL_RCC_OscConfig+0x334>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fe3e 	bl	8001c38 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fe3a 	bl	8001c38 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0b5      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1ee      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a38      	ldr	r2, [pc, #224]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8002fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a1 	beq.w	8003140 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffe:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b08      	cmp	r3, #8
 8003008:	d05c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d141      	bne.n	8003096 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003018:	f7fe fe0e 	bl	8001c38 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe fe0a 	bl	8001c38 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e087      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f0      	bne.n	8003020 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	019b      	lsls	r3, r3, #6
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	3b01      	subs	r3, #1
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	491b      	ldr	r1, [pc, #108]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306e:	f7fe fde3 	bl	8001c38 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003076:	f7fe fddf 	bl	8001c38 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e05c      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x416>
 8003094:	e054      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_RCC_OscConfig+0x478>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fdcc 	bl	8001c38 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fdc8 	bl	8001c38 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e045      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x444>
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e038      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
 80030d0:	40023800 	.word	0x40023800
 80030d4:	40007000 	.word	0x40007000
 80030d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <HAL_RCC_OscConfig+0x4ec>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d028      	beq.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d121      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003102:	429a      	cmp	r2, r3
 8003104:	d11a      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800310c:	4013      	ands	r3, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003112:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003114:	4293      	cmp	r3, r2
 8003116:	d111      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e0cc      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d90c      	bls.n	800318c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b63      	ldr	r3, [pc, #396]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0b8      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d020      	beq.n	80031da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031bc:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	494d      	ldr	r1, [pc, #308]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d044      	beq.n	8003270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d119      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e07f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d003      	beq.n	800320e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800320a:	2b03      	cmp	r3, #3
 800320c:	d107      	bne.n	800321e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320e:	4b3f      	ldr	r3, [pc, #252]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d109      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e067      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f023 0203 	bic.w	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4934      	ldr	r1, [pc, #208]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003240:	f7fe fcfa 	bl	8001c38 <HAL_GetTick>
 8003244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	e00a      	b.n	800325e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fcf6 	bl	8001c38 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	; 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e04f      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325e:	4b2b      	ldr	r3, [pc, #172]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 020c 	and.w	r2, r3, #12
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	429a      	cmp	r2, r3
 800326e:	d1eb      	bne.n	8003248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20c      	bcs.n	8003298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b22      	ldr	r3, [pc, #136]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e032      	b.n	80032fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4916      	ldr	r1, [pc, #88]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032c2:	4b12      	ldr	r3, [pc, #72]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	490e      	ldr	r1, [pc, #56]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d6:	f000 f821 	bl	800331c <HAL_RCC_GetSysClockFreq>
 80032da:	4602      	mov	r2, r0
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	490a      	ldr	r1, [pc, #40]	; (8003310 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	5ccb      	ldrb	r3, [r1, r3]
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fc5a 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023c00 	.word	0x40023c00
 800330c:	40023800 	.word	0x40023800
 8003310:	08004344 	.word	0x08004344
 8003314:	20000008 	.word	0x20000008
 8003318:	2000000c 	.word	0x2000000c

0800331c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800331c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003320:	b094      	sub	sp, #80	; 0x50
 8003322:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	2300      	movs	r3, #0
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800332c:	2300      	movs	r3, #0
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003334:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b08      	cmp	r3, #8
 800333e:	d00d      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x40>
 8003340:	2b08      	cmp	r3, #8
 8003342:	f200 80e1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_RCC_GetSysClockFreq+0x34>
 800334a:	2b04      	cmp	r3, #4
 800334c:	d003      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x3a>
 800334e:	e0db      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003350:	4b73      	ldr	r3, [pc, #460]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 8003352:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003354:	e0db      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003356:	4b73      	ldr	r3, [pc, #460]	; (8003524 <HAL_RCC_GetSysClockFreq+0x208>)
 8003358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800335a:	e0d8      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d063      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b6a      	ldr	r3, [pc, #424]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	2200      	movs	r2, #0
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
 800337c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
 800338a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800338e:	4622      	mov	r2, r4
 8003390:	462b      	mov	r3, r5
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4621      	mov	r1, r4
 80033a8:	1a51      	subs	r1, r2, r1
 80033aa:	6139      	str	r1, [r7, #16]
 80033ac:	4629      	mov	r1, r5
 80033ae:	eb63 0301 	sbc.w	r3, r3, r1
 80033b2:	617b      	str	r3, [r7, #20]
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033c0:	4659      	mov	r1, fp
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	4651      	mov	r1, sl
 80033c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033ca:	4651      	mov	r1, sl
 80033cc:	018a      	lsls	r2, r1, #6
 80033ce:	4651      	mov	r1, sl
 80033d0:	ebb2 0801 	subs.w	r8, r2, r1
 80033d4:	4659      	mov	r1, fp
 80033d6:	eb63 0901 	sbc.w	r9, r3, r1
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	eb18 0303 	adds.w	r3, r8, r3
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	462b      	mov	r3, r5
 80033fc:	eb49 0303 	adc.w	r3, r9, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340e:	4629      	mov	r1, r5
 8003410:	024b      	lsls	r3, r1, #9
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003418:	4621      	mov	r1, r4
 800341a:	024a      	lsls	r2, r1, #9
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003422:	2200      	movs	r2, #0
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 8003426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003428:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800342c:	f7fc fed2 	bl	80001d4 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	e058      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	099b      	lsrs	r3, r3, #6
 8003440:	2200      	movs	r2, #0
 8003442:	4618      	mov	r0, r3
 8003444:	4611      	mov	r1, r2
 8003446:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	2300      	movs	r3, #0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
 8003450:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	0159      	lsls	r1, r3, #5
 8003462:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003466:	0150      	lsls	r0, r2, #5
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4641      	mov	r1, r8
 800346e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003472:	4649      	mov	r1, r9
 8003474:	eb63 0b01 	sbc.w	fp, r3, r1
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003484:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003488:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800348c:	ebb2 040a 	subs.w	r4, r2, sl
 8003490:	eb63 050b 	sbc.w	r5, r3, fp
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	4643      	mov	r3, r8
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	464b      	mov	r3, r9
 80034b0:	eb45 0303 	adc.w	r3, r5, r3
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034c2:	4629      	mov	r1, r5
 80034c4:	028b      	lsls	r3, r1, #10
 80034c6:	4621      	mov	r1, r4
 80034c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034cc:	4621      	mov	r1, r4
 80034ce:	028a      	lsls	r2, r1, #10
 80034d0:	4610      	mov	r0, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	61fa      	str	r2, [r7, #28]
 80034dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034e0:	f7fc fe78 	bl	80001d4 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034ec:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	f003 0303 	and.w	r3, r3, #3
 80034f6:	3301      	adds	r3, #1
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003500:	fbb2 f3f3 	udiv	r3, r2, r3
 8003504:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetSysClockFreq+0x204>)
 800350a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800350c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003510:	4618      	mov	r0, r3
 8003512:	3750      	adds	r7, #80	; 0x50
 8003514:	46bd      	mov	sp, r7
 8003516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351a:	bf00      	nop
 800351c:	40023800 	.word	0x40023800
 8003520:	00f42400 	.word	0x00f42400
 8003524:	007a1200 	.word	0x007a1200

08003528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <HAL_RCC_GetHCLKFreq+0x14>)
 800352e:	681b      	ldr	r3, [r3, #0]
}
 8003530:	4618      	mov	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	20000008 	.word	0x20000008

08003540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003544:	f7ff fff0 	bl	8003528 <HAL_RCC_GetHCLKFreq>
 8003548:	4602      	mov	r2, r0
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a9b      	lsrs	r3, r3, #10
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	4903      	ldr	r1, [pc, #12]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800355c:	4618      	mov	r0, r3
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40023800 	.word	0x40023800
 8003564:	08004354 	.word	0x08004354

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <__libc_init_array>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4d0d      	ldr	r5, [pc, #52]	; (80035b0 <__libc_init_array+0x38>)
 800357c:	4c0d      	ldr	r4, [pc, #52]	; (80035b4 <__libc_init_array+0x3c>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	2600      	movs	r6, #0
 8003584:	42a6      	cmp	r6, r4
 8003586:	d109      	bne.n	800359c <__libc_init_array+0x24>
 8003588:	4d0b      	ldr	r5, [pc, #44]	; (80035b8 <__libc_init_array+0x40>)
 800358a:	4c0c      	ldr	r4, [pc, #48]	; (80035bc <__libc_init_array+0x44>)
 800358c:	f000 f818 	bl	80035c0 <_init>
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	2600      	movs	r6, #0
 8003596:	42a6      	cmp	r6, r4
 8003598:	d105      	bne.n	80035a6 <__libc_init_array+0x2e>
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a0:	4798      	blx	r3
 80035a2:	3601      	adds	r6, #1
 80035a4:	e7ee      	b.n	8003584 <__libc_init_array+0xc>
 80035a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035aa:	4798      	blx	r3
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7f2      	b.n	8003596 <__libc_init_array+0x1e>
 80035b0:	08004364 	.word	0x08004364
 80035b4:	08004364 	.word	0x08004364
 80035b8:	08004364 	.word	0x08004364
 80035bc:	08004368 	.word	0x08004368

080035c0 <_init>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

080035cc <_fini>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr


Ejemplo41_USB_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800840c  0800840c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008414  08008414  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800841c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  2000007c  08008498  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009a8  08008498  000209a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013bd2  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003710  00000000  00000000  00033cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  000373d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00038108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191d5  00000000  00000000  00038af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138c0  00000000  00000000  00051cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be83  00000000  00000000  00065585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039dc  00000000  00000000  000f1408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f4de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fa0 	.word	0x08007fa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007fa0 	.word	0x08007fa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <USBH_HID_EventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

char mensaje_Tx[100];
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost){
 800057c:	b580      	push	{r7, lr}
 800057e:	b08e      	sub	sp, #56	; 0x38
 8000580:	af04      	add	r7, sp, #16
 8000582:	6078      	str	r0, [r7, #4]


	if (USBH_HID_GetDeviceType(phost) == HID_MOUSE) {
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f004 fdbf 	bl	8005108 <USBH_HID_GetDeviceType>
 800058a:	4603      	mov	r3, r0
 800058c:	2b01      	cmp	r3, #1
 800058e:	d12f      	bne.n	80005f0 <USBH_HID_EventCallback+0x74>
		HID_MOUSE_Info_TypeDef *Mouse_data;
		Mouse_data = USBH_HID_GetMouseInfo(phost);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f005 f80b 	bl	80055ac <USBH_HID_GetMouseInfo>
 8000596:	61f8      	str	r0, [r7, #28]
		int x = Mouse_data->x;
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
		int y = Mouse_data->y;
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	623b      	str	r3, [r7, #32]

		if (x >127) {
 80005a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a6:	2b7f      	cmp	r3, #127	; 0x7f
 80005a8:	dd02      	ble.n	80005b0 <USBH_HID_EventCallback+0x34>
			x -=255;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3bff      	subs	r3, #255	; 0xff
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (y >127) {
 80005b0:	6a3b      	ldr	r3, [r7, #32]
 80005b2:	2b7f      	cmp	r3, #127	; 0x7f
 80005b4:	dd02      	ble.n	80005bc <USBH_HID_EventCallback+0x40>
			y -=255;
 80005b6:	6a3b      	ldr	r3, [r7, #32]
 80005b8:	3bff      	subs	r3, #255	; 0xff
 80005ba:	623b      	str	r3, [r7, #32]
		}

		int len = sprintf(mensaje_Tx,"X_axis =%d , Y_Axis=%d ,Boton1=%d , Boton2=%d , Boton3=%d\n\r",x,y,Mouse_data->buttons[0],Mouse_data->buttons[1],Mouse_data->buttons[2]);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	461a      	mov	r2, r3
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	78db      	ldrb	r3, [r3, #3]
 80005c6:	4619      	mov	r1, r3
 80005c8:	69fb      	ldr	r3, [r7, #28]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	9302      	str	r3, [sp, #8]
 80005ce:	9101      	str	r1, [sp, #4]
 80005d0:	9200      	str	r2, [sp, #0]
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d6:	4917      	ldr	r1, [pc, #92]	; (8000634 <USBH_HID_EventCallback+0xb8>)
 80005d8:	4817      	ldr	r0, [pc, #92]	; (8000638 <USBH_HID_EventCallback+0xbc>)
 80005da:	f007 f8e9 	bl	80077b0 <siprintf>
 80005de:	61b8      	str	r0, [r7, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)mensaje_Tx, len, 20000);
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80005e8:	4913      	ldr	r1, [pc, #76]	; (8000638 <USBH_HID_EventCallback+0xbc>)
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <USBH_HID_EventCallback+0xc0>)
 80005ec:	f002 fe6d 	bl	80032ca <HAL_UART_Transmit>
	}

	if (USBH_HID_GetDeviceType(phost) == HID_KEYBOARD) {
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f004 fd89 	bl	8005108 <USBH_HID_GetDeviceType>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d117      	bne.n	800062c <USBH_HID_EventCallback+0xb0>
		HID_KEYBD_Info_TypeDef *Key_Info;
		Key_Info = USBH_HID_GetKeybdInfo(phost);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f004 febb 	bl	8005378 <USBH_HID_GetKeybdInfo>
 8000602:	6178      	str	r0, [r7, #20]
		char key = USBH_HID_GetASCIICode(Key_Info);
 8000604:	6978      	ldr	r0, [r7, #20]
 8000606:	f004 ff5b 	bl	80054c0 <USBH_HID_GetASCIICode>
 800060a:	4603      	mov	r3, r0
 800060c:	74fb      	strb	r3, [r7, #19]
		int len = sprintf(mensaje_Tx,"Tecla Pulsada : %c\n\r",key);
 800060e:	7cfb      	ldrb	r3, [r7, #19]
 8000610:	461a      	mov	r2, r3
 8000612:	490b      	ldr	r1, [pc, #44]	; (8000640 <USBH_HID_EventCallback+0xc4>)
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <USBH_HID_EventCallback+0xbc>)
 8000616:	f007 f8cb 	bl	80077b0 <siprintf>
 800061a:	60f8      	str	r0, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t *)mensaje_Tx, len, 20000);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	b29a      	uxth	r2, r3
 8000620:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <USBH_HID_EventCallback+0xbc>)
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <USBH_HID_EventCallback+0xc0>)
 8000628:	f002 fe4f 	bl	80032ca <HAL_UART_Transmit>
	}
}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	08007fb8 	.word	0x08007fb8
 8000638:	200000dc 	.word	0x200000dc
 800063c:	20000098 	.word	0x20000098
 8000640:	08007ff4 	.word	0x08007ff4

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fa0a 	bl	8000a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f80a 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f89a 	bl	8000788 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000654:	f000 f86e 	bl	8000734 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000658:	f006 fce2 	bl	8007020 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800065c:	f006 fd06 	bl	800706c <MX_USB_HOST_Process>
 8000660:	e7fc      	b.n	800065c <main+0x18>
	...

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f007 f8bc 	bl	80077f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <SystemClock_Config+0xc8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b21      	ldr	r3, [pc, #132]	; (8000730 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a20      	ldr	r2, [pc, #128]	; (8000730 <SystemClock_Config+0xcc>)
 80006ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d8:	2348      	movs	r3, #72	; 0x48
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f909 	bl	8002900 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f898 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2102      	movs	r1, #2
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fb6b 	bl	8002df0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000720:	f000 f882 	bl	8000828 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	; 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART2_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART2_UART_Init+0x4c>)
 800076c:	f002 fd60 	bl	8003230 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f857 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000098 	.word	0x20000098
 8000784:	40004400 	.word	0x40004400

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_GPIO_Init+0x98>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1e      	ldr	r2, [pc, #120]	; (8000820 <MX_GPIO_Init+0x98>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_GPIO_Init+0x98>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_GPIO_Init+0x98>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_GPIO_Init+0x98>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_GPIO_Init+0x98>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_GPIO_Init+0x98>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <MX_GPIO_Init+0x98>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_GPIO_Init+0x98>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2101      	movs	r1, #1
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_GPIO_Init+0x9c>)
 80007f8:	f000 fc5e 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007fc:	2301      	movs	r3, #1
 80007fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_GPIO_Init+0x9c>)
 8000814:	f000 facc 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40023800 	.word	0x40023800
 8000824:	40020800 	.word	0x40020800

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	e7fe      	b.n	8000830 <Error_Handler+0x8>
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_UART_MspInit+0x84>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d12b      	bne.n	80008fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x88>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a17      	ldr	r2, [pc, #92]	; (800090c <HAL_UART_MspInit+0x88>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x88>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_UART_MspInit+0x88>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a10      	ldr	r2, [pc, #64]	; (800090c <HAL_UART_MspInit+0x88>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <HAL_UART_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008de:	230c      	movs	r3, #12
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_UART_MspInit+0x8c>)
 80008fa:	f000 fa59 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fe:	bf00      	nop
 8000900:	3728      	adds	r7, #40	; 0x28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40004400 	.word	0x40004400
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f8d0 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <OTG_FS_IRQHandler+0x10>)
 800096e:	f000 fe27 	bl	80015c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000055c 	.word	0x2000055c

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f006 ff38 	bl	8007820 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20020000 	.word	0x20020000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	20000140 	.word	0x20000140
 80009e4:	200009a8 	.word	0x200009a8

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a12:	490e      	ldr	r1, [pc, #56]	; (8000a4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a28:	4c0b      	ldr	r4, [pc, #44]	; (8000a58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a36:	f7ff ffd7 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f006 fef7 	bl	800782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3e:	f7ff fe01 	bl	8000644 <main>
  bx  lr    
 8000a42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000a50:	0800841c 	.word	0x0800841c
  ldr r2, =_sbss
 8000a54:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000a58:	200009a8 	.word	0x200009a8

08000a5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <HAL_Init+0x40>)
 8000a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <HAL_Init+0x40>)
 8000a76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x40>)
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f94f 	bl	8000d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	200f      	movs	r0, #15
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fece 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023c00 	.word	0x40023c00

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f967 	bl	8000d96 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f92f 	bl	8000d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000144 	.word	0x20000144

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000144 	.word	0x20000144

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
	...

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf8:	d301      	bcc.n	8000cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00f      	b.n	8000d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <SysTick_Config+0x40>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d06:	210f      	movs	r1, #15
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f7ff ff8e 	bl	8000c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <SysTick_Config+0x40>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <SysTick_Config+0x40>)
 8000d18:	2207      	movs	r2, #7
 8000d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	e000e010 	.word	0xe000e010

08000d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f7ff ff29 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b086      	sub	sp, #24
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	60b9      	str	r1, [r7, #8]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d54:	f7ff ff3e 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff ff8e 	bl	8000c80 <NVIC_EncodePriority>
 8000d64:	4602      	mov	r2, r0
 8000d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff5d 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff31 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff ffa2 	bl	8000ce8 <SysTick_Config>
 8000da4:	4603      	mov	r3, r0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	e159      	b.n	8001080 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	697a      	ldr	r2, [r7, #20]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	f040 8148 	bne.w	800107a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d005      	beq.n	8000e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d130      	bne.n	8000e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	091b      	lsrs	r3, r3, #4
 8000e4e:	f003 0201 	and.w	r2, r3, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d017      	beq.n	8000ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d123      	bne.n	8000ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	08da      	lsrs	r2, r3, #3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3208      	adds	r2, #8
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	f003 0307 	and.w	r3, r3, #7
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	220f      	movs	r2, #15
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	69b9      	ldr	r1, [r7, #24]
 8000ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0203 	and.w	r2, r3, #3
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 80a2 	beq.w	800107a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b57      	ldr	r3, [pc, #348]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	4a56      	ldr	r2, [pc, #344]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f44:	6453      	str	r3, [r2, #68]	; 0x44
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f52:	4a52      	ldr	r2, [pc, #328]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3302      	adds	r3, #2
 8000f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	220f      	movs	r2, #15
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a49      	ldr	r2, [pc, #292]	; (80010a0 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d019      	beq.n	8000fb2 <HAL_GPIO_Init+0x202>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a48      	ldr	r2, [pc, #288]	; (80010a4 <HAL_GPIO_Init+0x2f4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d013      	beq.n	8000fae <HAL_GPIO_Init+0x1fe>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_GPIO_Init+0x2f8>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d00d      	beq.n	8000faa <HAL_GPIO_Init+0x1fa>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_GPIO_Init+0x2fc>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x1f6>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a45      	ldr	r2, [pc, #276]	; (80010b0 <HAL_GPIO_Init+0x300>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d101      	bne.n	8000fa2 <HAL_GPIO_Init+0x1f2>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x204>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a24      	ldr	r2, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <HAL_GPIO_Init+0x304>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x304>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f aea2 	bls.w	8000dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80010ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ec:	b08f      	sub	sp, #60	; 0x3c
 80010ee:	af0a      	add	r7, sp, #40	; 0x28
 80010f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e054      	b.n	80011a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f005 ffe0 	bl	80070dc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fcac 	bl	8003a98 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	687e      	ldr	r6, [r7, #4]
 8001148:	466d      	mov	r5, sp
 800114a:	f106 0410 	add.w	r4, r6, #16
 800114e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001150:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001156:	e894 0003 	ldmia.w	r4, {r0, r1}
 800115a:	e885 0003 	stmia.w	r5, {r0, r1}
 800115e:	1d33      	adds	r3, r6, #4
 8001160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001162:	6838      	ldr	r0, [r7, #0]
 8001164:	f002 fc26 	bl	80039b4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	4618      	mov	r0, r3
 8001170:	f002 fca3 	bl	8003aba <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	687e      	ldr	r6, [r7, #4]
 800117c:	466d      	mov	r5, sp
 800117e:	f106 0410 	add.w	r4, r6, #16
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800118a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800118e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001192:	1d33      	adds	r3, r6, #4
 8001194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001196:	6838      	ldr	r0, [r7, #0]
 8001198:	f002 fe2c 	bl	8003df4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011ae:	b590      	push	{r4, r7, lr}
 80011b0:	b089      	sub	sp, #36	; 0x24
 80011b2:	af04      	add	r7, sp, #16
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	4608      	mov	r0, r1
 80011b8:	4611      	mov	r1, r2
 80011ba:	461a      	mov	r2, r3
 80011bc:	4603      	mov	r3, r0
 80011be:	70fb      	strb	r3, [r7, #3]
 80011c0:	460b      	mov	r3, r1
 80011c2:	70bb      	strb	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d101      	bne.n	80011d6 <HAL_HCD_HC_Init+0x28>
 80011d2:	2302      	movs	r3, #2
 80011d4:	e076      	b.n	80012c4 <HAL_HCD_HC_Init+0x116>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80011de:	78fb      	ldrb	r3, [r7, #3]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	212c      	movs	r1, #44	; 0x2c
 80011e4:	fb01 f303 	mul.w	r3, r1, r3
 80011e8:	4413      	add	r3, r2
 80011ea:	333d      	adds	r3, #61	; 0x3d
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	212c      	movs	r1, #44	; 0x2c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	3338      	adds	r3, #56	; 0x38
 80011fe:	787a      	ldrb	r2, [r7, #1]
 8001200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	212c      	movs	r1, #44	; 0x2c
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	4413      	add	r3, r2
 800120e:	3340      	adds	r3, #64	; 0x40
 8001210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001212:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	212c      	movs	r1, #44	; 0x2c
 800121a:	fb01 f303 	mul.w	r3, r1, r3
 800121e:	4413      	add	r3, r2
 8001220:	3339      	adds	r3, #57	; 0x39
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	212c      	movs	r1, #44	; 0x2c
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	333f      	adds	r3, #63	; 0x3f
 8001234:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001238:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	78ba      	ldrb	r2, [r7, #2]
 800123e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001242:	b2d0      	uxtb	r0, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	212c      	movs	r1, #44	; 0x2c
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	333a      	adds	r3, #58	; 0x3a
 8001250:	4602      	mov	r2, r0
 8001252:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001254:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da09      	bge.n	8001270 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800125c:	78fb      	ldrb	r3, [r7, #3]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	333b      	adds	r3, #59	; 0x3b
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e008      	b.n	8001282 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	212c      	movs	r1, #44	; 0x2c
 8001276:	fb01 f303 	mul.w	r3, r1, r3
 800127a:	4413      	add	r3, r2
 800127c:	333b      	adds	r3, #59	; 0x3b
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	212c      	movs	r1, #44	; 0x2c
 8001288:	fb01 f303 	mul.w	r3, r1, r3
 800128c:	4413      	add	r3, r2
 800128e:	333c      	adds	r3, #60	; 0x3c
 8001290:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001294:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	787c      	ldrb	r4, [r7, #1]
 800129c:	78ba      	ldrb	r2, [r7, #2]
 800129e:	78f9      	ldrb	r1, [r7, #3]
 80012a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4623      	mov	r3, r4
 80012b2:	f002 ff25 	bl	8004100 <USB_HC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_HCD_HC_Halt+0x1e>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e00f      	b.n	800130a <HAL_HCD_HC_Halt+0x3e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f003 f975 	bl	80045ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	70fb      	strb	r3, [r7, #3]
 8001326:	460b      	mov	r3, r1
 8001328:	70bb      	strb	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800132e:	78fb      	ldrb	r3, [r7, #3]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	212c      	movs	r1, #44	; 0x2c
 8001334:	fb01 f303 	mul.w	r3, r1, r3
 8001338:	4413      	add	r3, r2
 800133a:	333b      	adds	r3, #59	; 0x3b
 800133c:	78ba      	ldrb	r2, [r7, #2]
 800133e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	212c      	movs	r1, #44	; 0x2c
 8001346:	fb01 f303 	mul.w	r3, r1, r3
 800134a:	4413      	add	r3, r2
 800134c:	333f      	adds	r3, #63	; 0x3f
 800134e:	787a      	ldrb	r2, [r7, #1]
 8001350:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001352:	7c3b      	ldrb	r3, [r7, #16]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d112      	bne.n	800137e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	212c      	movs	r1, #44	; 0x2c
 800135e:	fb01 f303 	mul.w	r3, r1, r3
 8001362:	4413      	add	r3, r2
 8001364:	3342      	adds	r3, #66	; 0x42
 8001366:	2203      	movs	r2, #3
 8001368:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800136a:	78fb      	ldrb	r3, [r7, #3]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	212c      	movs	r1, #44	; 0x2c
 8001370:	fb01 f303 	mul.w	r3, r1, r3
 8001374:	4413      	add	r3, r2
 8001376:	333d      	adds	r3, #61	; 0x3d
 8001378:	7f3a      	ldrb	r2, [r7, #28]
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e008      	b.n	8001390 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	212c      	movs	r1, #44	; 0x2c
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	3342      	adds	r3, #66	; 0x42
 800138c:	2202      	movs	r2, #2
 800138e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b03      	cmp	r3, #3
 8001394:	f200 80c6 	bhi.w	8001524 <HAL_HCD_HC_SubmitRequest+0x210>
 8001398:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013b1 	.word	0x080013b1
 80013a4:	08001511 	.word	0x08001511
 80013a8:	08001415 	.word	0x08001415
 80013ac:	08001493 	.word	0x08001493
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013b0:	7c3b      	ldrb	r3, [r7, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	f040 80b8 	bne.w	8001528 <HAL_HCD_HC_SubmitRequest+0x214>
 80013b8:	78bb      	ldrb	r3, [r7, #2]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f040 80b4 	bne.w	8001528 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80013c0:	8b3b      	ldrh	r3, [r7, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d108      	bne.n	80013d8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	212c      	movs	r1, #44	; 0x2c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3355      	adds	r3, #85	; 0x55
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013d8:	78fb      	ldrb	r3, [r7, #3]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	212c      	movs	r1, #44	; 0x2c
 80013de:	fb01 f303 	mul.w	r3, r1, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	3355      	adds	r3, #85	; 0x55
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d109      	bne.n	8001400 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	212c      	movs	r1, #44	; 0x2c
 80013f2:	fb01 f303 	mul.w	r3, r1, r3
 80013f6:	4413      	add	r3, r2
 80013f8:	3342      	adds	r3, #66	; 0x42
 80013fa:	2200      	movs	r2, #0
 80013fc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80013fe:	e093      	b.n	8001528 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	212c      	movs	r1, #44	; 0x2c
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4413      	add	r3, r2
 800140c:	3342      	adds	r3, #66	; 0x42
 800140e:	2202      	movs	r2, #2
 8001410:	701a      	strb	r2, [r3, #0]
      break;
 8001412:	e089      	b.n	8001528 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001414:	78bb      	ldrb	r3, [r7, #2]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d11d      	bne.n	8001456 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	212c      	movs	r1, #44	; 0x2c
 8001420:	fb01 f303 	mul.w	r3, r1, r3
 8001424:	4413      	add	r3, r2
 8001426:	3355      	adds	r3, #85	; 0x55
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d109      	bne.n	8001442 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	212c      	movs	r1, #44	; 0x2c
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	3342      	adds	r3, #66	; 0x42
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001440:	e073      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001442:	78fb      	ldrb	r3, [r7, #3]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	212c      	movs	r1, #44	; 0x2c
 8001448:	fb01 f303 	mul.w	r3, r1, r3
 800144c:	4413      	add	r3, r2
 800144e:	3342      	adds	r3, #66	; 0x42
 8001450:	2202      	movs	r2, #2
 8001452:	701a      	strb	r2, [r3, #0]
      break;
 8001454:	e069      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001456:	78fb      	ldrb	r3, [r7, #3]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	212c      	movs	r1, #44	; 0x2c
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	3354      	adds	r3, #84	; 0x54
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800146a:	78fb      	ldrb	r3, [r7, #3]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	212c      	movs	r1, #44	; 0x2c
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	3342      	adds	r3, #66	; 0x42
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
      break;
 800147c:	e055      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	212c      	movs	r1, #44	; 0x2c
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	3342      	adds	r3, #66	; 0x42
 800148c:	2202      	movs	r2, #2
 800148e:	701a      	strb	r2, [r3, #0]
      break;
 8001490:	e04b      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001492:	78bb      	ldrb	r3, [r7, #2]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d11d      	bne.n	80014d4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	212c      	movs	r1, #44	; 0x2c
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	4413      	add	r3, r2
 80014a4:	3355      	adds	r3, #85	; 0x55
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	212c      	movs	r1, #44	; 0x2c
 80014b2:	fb01 f303 	mul.w	r3, r1, r3
 80014b6:	4413      	add	r3, r2
 80014b8:	3342      	adds	r3, #66	; 0x42
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014be:	e034      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3342      	adds	r3, #66	; 0x42
 80014ce:	2202      	movs	r2, #2
 80014d0:	701a      	strb	r2, [r3, #0]
      break;
 80014d2:	e02a      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	3354      	adds	r3, #84	; 0x54
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	212c      	movs	r1, #44	; 0x2c
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	3342      	adds	r3, #66	; 0x42
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
      break;
 80014fa:	e016      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014fc:	78fb      	ldrb	r3, [r7, #3]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	212c      	movs	r1, #44	; 0x2c
 8001502:	fb01 f303 	mul.w	r3, r1, r3
 8001506:	4413      	add	r3, r2
 8001508:	3342      	adds	r3, #66	; 0x42
 800150a:	2202      	movs	r2, #2
 800150c:	701a      	strb	r2, [r3, #0]
      break;
 800150e:	e00c      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	212c      	movs	r1, #44	; 0x2c
 8001516:	fb01 f303 	mul.w	r3, r1, r3
 800151a:	4413      	add	r3, r2
 800151c:	3342      	adds	r3, #66	; 0x42
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
      break;
 8001522:	e002      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001528:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	212c      	movs	r1, #44	; 0x2c
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	4413      	add	r3, r2
 8001536:	3344      	adds	r3, #68	; 0x44
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	8b3a      	ldrh	r2, [r7, #24]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	fb00 f303 	mul.w	r3, r0, r3
 8001548:	440b      	add	r3, r1
 800154a:	334c      	adds	r3, #76	; 0x4c
 800154c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800154e:	78fb      	ldrb	r3, [r7, #3]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	3360      	adds	r3, #96	; 0x60
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001560:	78fb      	ldrb	r3, [r7, #3]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	212c      	movs	r1, #44	; 0x2c
 8001566:	fb01 f303 	mul.w	r3, r1, r3
 800156a:	4413      	add	r3, r2
 800156c:	3350      	adds	r3, #80	; 0x50
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	212c      	movs	r1, #44	; 0x2c
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	3339      	adds	r3, #57	; 0x39
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	212c      	movs	r1, #44	; 0x2c
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	3361      	adds	r3, #97	; 0x61
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	222c      	movs	r2, #44	; 0x2c
 800159e:	fb02 f303 	mul.w	r3, r2, r3
 80015a2:	3338      	adds	r3, #56	; 0x38
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	18d1      	adds	r1, r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	461a      	mov	r2, r3
 80015b0:	f002 fec8 	bl	8004344 <USB_HC_StartXfer>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop

080015c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fbc9 	bl	8003d6e <USB_GetMode>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 80f6 	bne.w	80017d0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fbad 	bl	8003d48 <USB_ReadInterrupts>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80ec 	beq.w	80017ce <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fba4 	bl	8003d48 <USB_ReadInterrupts>
 8001600:	4603      	mov	r3, r0
 8001602:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800160a:	d104      	bne.n	8001616 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001614:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fb94 	bl	8003d48 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800162a:	d104      	bne.n	8001636 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fb84 	bl	8003d48 <USB_ReadInterrupts>
 8001640:	4603      	mov	r3, r0
 8001642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001646:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800164a:	d104      	bne.n	8001656 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f002 fb74 	bl	8003d48 <USB_ReadInterrupts>
 8001660:	4603      	mov	r3, r0
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b02      	cmp	r3, #2
 8001668:	d103      	bne.n	8001672 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2202      	movs	r2, #2
 8001670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fb66 	bl	8003d48 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001686:	d11c      	bne.n	80016c2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001690:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80016a2:	2110      	movs	r1, #16
 80016a4:	6938      	ldr	r0, [r7, #16]
 80016a6:	f002 fa55 	bl	8003b54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80016aa:	6938      	ldr	r0, [r7, #16]
 80016ac:	f002 fa86 	bl	8003bbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2101      	movs	r1, #1
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 fc5c 	bl	8003f74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f005 fd7d 	bl	80071bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fb3e 	bl	8003d48 <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d6:	d102      	bne.n	80016de <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f001 f89e 	bl	800281a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fb30 	bl	8003d48 <USB_ReadInterrupts>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d106      	bne.n	8001700 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f005 fd46 	bl	8007184 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2208      	movs	r2, #8
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fb1f 	bl	8003d48 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b10      	cmp	r3, #16
 8001712:	d101      	bne.n	8001718 <HAL_HCD_IRQHandler+0x158>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_HCD_IRQHandler+0x15a>
 8001718:	2300      	movs	r3, #0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d012      	beq.n	8001744 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	699a      	ldr	r2, [r3, #24]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0210 	bic.w	r2, r2, #16
 800172c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 ffa1 	bl	8002676 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0210 	orr.w	r2, r2, #16
 8001742:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f002 fafd 	bl	8003d48 <USB_ReadInterrupts>
 800174e:	4603      	mov	r3, r0
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001758:	d13a      	bne.n	80017d0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f002 ff32 	bl	80045c8 <USB_HC_ReadInterrupt>
 8001764:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e025      	b.n	80017b8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	fa22 f303 	lsr.w	r3, r2, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d018      	beq.n	80017b2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001796:	d106      	bne.n	80017a6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8ab 	bl	80018fa <HCD_HC_IN_IRQHandler>
 80017a4:	e005      	b.n	80017b2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fbf9 	bl	8001fa4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3d4      	bcc.n	800176c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	e000      	b.n	80017d0 <HAL_HCD_IRQHandler+0x210>
      return;
 80017ce:	bf00      	nop
    }
  }
}
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_HCD_Start+0x16>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e013      	b.n	8001814 <HAL_HCD_Start+0x3e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fc1e 	bl	800403c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f002 f936 	bl	8003a76 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_HCD_Stop+0x16>
 800182e:	2302      	movs	r3, #2
 8001830:	e00d      	b.n	800184e <HAL_HCD_Stop+0x32>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f80c 	bl	800485c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fbc0 	bl	8003fe8 <USB_ResetPort>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	212c      	movs	r1, #44	; 0x2c
 8001884:	fb01 f303 	mul.w	r3, r1, r3
 8001888:	4413      	add	r3, r2
 800188a:	3360      	adds	r3, #96	; 0x60
 800188c:	781b      	ldrb	r3, [r3, #0]
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3350      	adds	r3, #80	; 0x50
 80018b4:	681b      	ldr	r3, [r3, #0]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 fc04 	bl	80040dc <USB_GetCurrentFrame>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fbdf 	bl	80040ae <USB_GetHostSpeed>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	4413      	add	r3, r2
 800191c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b04      	cmp	r3, #4
 8001928:	d11a      	bne.n	8001960 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4413      	add	r3, r2
 8001932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001936:	461a      	mov	r2, r3
 8001938:	2304      	movs	r3, #4
 800193a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3361      	adds	r3, #97	; 0x61
 800194a:	2206      	movs	r2, #6
 800194c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f002 fe46 	bl	80045ea <USB_HC_Halt>
 800195e:	e0af      	b.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4413      	add	r3, r2
 8001968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d11b      	bne.n	80019b0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	015a      	lsls	r2, r3, #5
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4413      	add	r3, r2
 8001980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001984:	461a      	mov	r2, r3
 8001986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800198a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3361      	adds	r3, #97	; 0x61
 800199a:	2207      	movs	r2, #7
 800199c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	4611      	mov	r1, r2
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fe1e 	bl	80045ea <USB_HC_Halt>
 80019ae:	e087      	b.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d109      	bne.n	80019da <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d2:	461a      	mov	r2, r3
 80019d4:	2320      	movs	r3, #32
 80019d6:	6093      	str	r3, [r2, #8]
 80019d8:	e072      	b.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	015a      	lsls	r2, r3, #5
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4413      	add	r3, r2
 80019e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d11a      	bne.n	8001a26 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	015a      	lsls	r2, r3, #5
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4413      	add	r3, r2
 80019f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fc:	461a      	mov	r2, r3
 80019fe:	2308      	movs	r3, #8
 8001a00:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3361      	adds	r3, #97	; 0x61
 8001a10:	2205      	movs	r2, #5
 8001a12:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fde3 	bl	80045ea <USB_HC_Halt>
 8001a24:	e04c      	b.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	015a      	lsls	r2, r3, #5
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a3c:	d11b      	bne.n	8001a76 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a50:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3361      	adds	r3, #97	; 0x61
 8001a60:	2208      	movs	r2, #8
 8001a62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fdbb 	bl	80045ea <USB_HC_Halt>
 8001a74:	e024      	b.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a88:	2b80      	cmp	r3, #128	; 0x80
 8001a8a:	d119      	bne.n	8001ac0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	015a      	lsls	r2, r3, #5
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4413      	add	r3, r2
 8001a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3361      	adds	r3, #97	; 0x61
 8001aac:	2206      	movs	r2, #6
 8001aae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	4611      	mov	r1, r2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fd95 	bl	80045ea <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad6:	d112      	bne.n	8001afe <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fd81 	bl	80045ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	015a      	lsls	r2, r3, #5
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af4:	461a      	mov	r2, r3
 8001af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001afa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001afc:	e24e      	b.n	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	015a      	lsls	r2, r3, #5
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f040 80df 	bne.w	8001cd4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d019      	beq.n	8001b52 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3348      	adds	r3, #72	; 0x48
 8001b2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0159      	lsls	r1, r3, #5
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	202c      	movs	r0, #44	; 0x2c
 8001b48:	fb00 f303 	mul.w	r3, r0, r3
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3350      	adds	r3, #80	; 0x50
 8001b50:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	212c      	movs	r1, #44	; 0x2c
 8001b58:	fb01 f303 	mul.w	r3, r1, r3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3361      	adds	r3, #97	; 0x61
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	335c      	adds	r3, #92	; 0x5c
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b82:	461a      	mov	r2, r3
 8001b84:	2301      	movs	r3, #1
 8001b86:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	333f      	adds	r3, #63	; 0x3f
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d009      	beq.n	8001bb0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	333f      	adds	r3, #63	; 0x3f
 8001baa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d111      	bne.n	8001bd4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 fd15 	bl	80045ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2310      	movs	r3, #16
 8001bd0:	6093      	str	r3, [r2, #8]
 8001bd2:	e03a      	b.n	8001c4a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	333f      	adds	r3, #63	; 0x3f
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d009      	beq.n	8001bfc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	333f      	adds	r3, #63	; 0x3f
 8001bf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d126      	bne.n	8001c4a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	015a      	lsls	r2, r3, #5
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68fa      	ldr	r2, [r7, #12]
 8001c0c:	0151      	lsls	r1, r2, #5
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	440a      	add	r2, r1
 8001c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c1a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	212c      	movs	r1, #44	; 0x2c
 8001c22:	fb01 f303 	mul.w	r3, r1, r3
 8001c26:	4413      	add	r3, r2
 8001c28:	3360      	adds	r3, #96	; 0x60
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	b2d9      	uxtb	r1, r3
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	202c      	movs	r0, #44	; 0x2c
 8001c38:	fb00 f303 	mul.w	r3, r0, r3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3360      	adds	r3, #96	; 0x60
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 fac7 	bl	80071d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d12b      	bne.n	8001caa <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3348      	adds	r3, #72	; 0x48
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	202c      	movs	r0, #44	; 0x2c
 8001c68:	fb00 f202 	mul.w	r2, r0, r2
 8001c6c:	440a      	add	r2, r1
 8001c6e:	3240      	adds	r2, #64	; 0x40
 8001c70:	8812      	ldrh	r2, [r2, #0]
 8001c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 818e 	beq.w	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3354      	adds	r3, #84	; 0x54
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	f083 0301 	eor.w	r3, r3, #1
 8001c94:	b2d8      	uxtb	r0, r3
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	212c      	movs	r1, #44	; 0x2c
 8001c9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3354      	adds	r3, #84	; 0x54
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	701a      	strb	r2, [r3, #0]
}
 8001ca8:	e178      	b.n	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	212c      	movs	r1, #44	; 0x2c
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3354      	adds	r3, #84	; 0x54
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2d8      	uxtb	r0, r3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	212c      	movs	r1, #44	; 0x2c
 8001cc6:	fb01 f303 	mul.w	r3, r1, r3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3354      	adds	r3, #84	; 0x54
 8001cce:	4602      	mov	r2, r0
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	e163      	b.n	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	f040 80f6 	bne.w	8001ed8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	212c      	movs	r1, #44	; 0x2c
 8001cf2:	fb01 f303 	mul.w	r3, r1, r3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3361      	adds	r3, #97	; 0x61
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d109      	bne.n	8001d14 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e0c9      	b.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	212c      	movs	r1, #44	; 0x2c
 8001d1a:	fb01 f303 	mul.w	r3, r1, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	3361      	adds	r3, #97	; 0x61
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d109      	bne.n	8001d3c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3360      	adds	r3, #96	; 0x60
 8001d36:	2205      	movs	r2, #5
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e0b5      	b.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3361      	adds	r3, #97	; 0x61
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d009      	beq.n	8001d64 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	212c      	movs	r1, #44	; 0x2c
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	3361      	adds	r3, #97	; 0x61
 8001d5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d150      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	335c      	adds	r3, #92	; 0x5c
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	202c      	movs	r0, #44	; 0x2c
 8001d7c:	fb00 f303 	mul.w	r3, r0, r3
 8001d80:	440b      	add	r3, r1
 8001d82:	335c      	adds	r3, #92	; 0x5c
 8001d84:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	335c      	adds	r3, #92	; 0x5c
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d912      	bls.n	8001dc0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	335c      	adds	r3, #92	; 0x5c
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	212c      	movs	r1, #44	; 0x2c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3360      	adds	r3, #96	; 0x60
 8001dba:	2204      	movs	r2, #4
 8001dbc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001dbe:	e073      	b.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	212c      	movs	r1, #44	; 0x2c
 8001dc6:	fb01 f303 	mul.w	r3, r1, r3
 8001dca:	4413      	add	r3, r2
 8001dcc:	3360      	adds	r3, #96	; 0x60
 8001dce:	2202      	movs	r2, #2
 8001dd0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001de8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e04:	e050      	b.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	3361      	adds	r3, #97	; 0x61
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d122      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3360      	adds	r3, #96	; 0x60
 8001e28:	2202      	movs	r2, #2
 8001e2a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	015a      	lsls	r2, r3, #5
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4413      	add	r3, r2
 8001e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e42:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e023      	b.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3361      	adds	r3, #97	; 0x61
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b07      	cmp	r3, #7
 8001e72:	d119      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	212c      	movs	r1, #44	; 0x2c
 8001e7a:	fb01 f303 	mul.w	r3, r1, r3
 8001e7e:	4413      	add	r3, r2
 8001e80:	335c      	adds	r3, #92	; 0x5c
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	202c      	movs	r0, #44	; 0x2c
 8001e8c:	fb00 f303 	mul.w	r3, r0, r3
 8001e90:	440b      	add	r3, r1
 8001e92:	335c      	adds	r3, #92	; 0x5c
 8001e94:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3360      	adds	r3, #96	; 0x60
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	b2d9      	uxtb	r1, r3
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	202c      	movs	r0, #44	; 0x2c
 8001ec4:	fb00 f303 	mul.w	r3, r0, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3360      	adds	r3, #96	; 0x60
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f005 f981 	bl	80071d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001ed6:	e061      	b.n	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d156      	bne.n	8001f9c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	333f      	adds	r3, #63	; 0x3f
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d111      	bne.n	8001f26 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	335c      	adds	r3, #92	; 0x5c
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fb63 	bl	80045ea <USB_HC_Halt>
 8001f24:	e031      	b.n	8001f8a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	333f      	adds	r3, #63	; 0x3f
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	333f      	adds	r3, #63	; 0x3f
 8001f48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d11d      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	335c      	adds	r3, #92	; 0x5c
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d110      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	212c      	movs	r1, #44	; 0x2c
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	4413      	add	r3, r2
 8001f74:	3361      	adds	r3, #97	; 0x61
 8001f76:	2203      	movs	r2, #3
 8001f78:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fb30 	bl	80045ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	461a      	mov	r2, r3
 8001f98:	2310      	movs	r3, #16
 8001f9a:	6093      	str	r3, [r2, #8]
}
 8001f9c:	bf00      	nop
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d11a      	bne.n	800200a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	015a      	lsls	r2, r3, #5
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	212c      	movs	r1, #44	; 0x2c
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3361      	adds	r3, #97	; 0x61
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f002 faf1 	bl	80045ea <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002008:	e331      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b20      	cmp	r3, #32
 800201e:	d12e      	bne.n	800207e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	461a      	mov	r2, r3
 800202e:	2320      	movs	r3, #32
 8002030:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	212c      	movs	r1, #44	; 0x2c
 8002038:	fb01 f303 	mul.w	r3, r1, r3
 800203c:	4413      	add	r3, r2
 800203e:	333d      	adds	r3, #61	; 0x3d
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	f040 8313 	bne.w	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	212c      	movs	r1, #44	; 0x2c
 800204e:	fb01 f303 	mul.w	r3, r1, r3
 8002052:	4413      	add	r3, r2
 8002054:	333d      	adds	r3, #61	; 0x3d
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	2202      	movs	r2, #2
 800206a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fab7 	bl	80045ea <USB_HC_Halt>
}
 800207c:	e2f7      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002094:	d112      	bne.n	80020bc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	4413      	add	r3, r2
 800209e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a2:	461a      	mov	r2, r3
 80020a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f002 fa98 	bl	80045ea <USB_HC_Halt>
}
 80020ba:	e2d8      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d140      	bne.n	8002154 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	212c      	movs	r1, #44	; 0x2c
 80020d8:	fb01 f303 	mul.w	r3, r1, r3
 80020dc:	4413      	add	r3, r2
 80020de:	335c      	adds	r3, #92	; 0x5c
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	2b40      	cmp	r3, #64	; 0x40
 80020f8:	d111      	bne.n	800211e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	333d      	adds	r3, #61	; 0x3d
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2340      	movs	r3, #64	; 0x40
 800211c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	015a      	lsls	r2, r3, #5
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4413      	add	r3, r2
 8002126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212a:	461a      	mov	r2, r3
 800212c:	2301      	movs	r3, #1
 800212e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fa4c 	bl	80045ea <USB_HC_Halt>
}
 8002152:	e28c      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d12c      	bne.n	80021c4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	212c      	movs	r1, #44	; 0x2c
 8002170:	fb01 f303 	mul.w	r3, r1, r3
 8002174:	4413      	add	r3, r2
 8002176:	3361      	adds	r3, #97	; 0x61
 8002178:	2204      	movs	r2, #4
 800217a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	333d      	adds	r3, #61	; 0x3d
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	335c      	adds	r3, #92	; 0x5c
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fa1d 	bl	80045ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	2340      	movs	r3, #64	; 0x40
 80021c0:	6093      	str	r3, [r2, #8]
}
 80021c2:	e254      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	015a      	lsls	r2, r3, #5
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	4413      	add	r3, r2
 80021cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d11a      	bne.n	8002210 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	015a      	lsls	r2, r3, #5
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4413      	add	r3, r2
 80021e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e6:	461a      	mov	r2, r3
 80021e8:	2308      	movs	r3, #8
 80021ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3361      	adds	r3, #97	; 0x61
 80021fa:	2205      	movs	r2, #5
 80021fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f002 f9ee 	bl	80045ea <USB_HC_Halt>
}
 800220e:	e22e      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	4413      	add	r3, r2
 8002218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b10      	cmp	r3, #16
 8002224:	d140      	bne.n	80022a8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	212c      	movs	r1, #44	; 0x2c
 800222c:	fb01 f303 	mul.w	r3, r1, r3
 8002230:	4413      	add	r3, r2
 8002232:	335c      	adds	r3, #92	; 0x5c
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	212c      	movs	r1, #44	; 0x2c
 800223e:	fb01 f303 	mul.w	r3, r1, r3
 8002242:	4413      	add	r3, r2
 8002244:	3361      	adds	r3, #97	; 0x61
 8002246:	2203      	movs	r2, #3
 8002248:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	212c      	movs	r1, #44	; 0x2c
 8002250:	fb01 f303 	mul.w	r3, r1, r3
 8002254:	4413      	add	r3, r2
 8002256:	333d      	adds	r3, #61	; 0x3d
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d112      	bne.n	8002284 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333c      	adds	r3, #60	; 0x3c
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	333d      	adds	r3, #61	; 0x3d
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f002 f9ab 	bl	80045ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	4413      	add	r3, r2
 800229c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a0:	461a      	mov	r2, r3
 80022a2:	2310      	movs	r3, #16
 80022a4:	6093      	str	r3, [r2, #8]
}
 80022a6:	e1e2      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d164      	bne.n	8002388 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d111      	bne.n	80022ea <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3361      	adds	r3, #97	; 0x61
 80022d4:	2206      	movs	r2, #6
 80022d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	4618      	mov	r0, r3
 80022e4:	f002 f981 	bl	80045ea <USB_HC_Halt>
 80022e8:	e044      	b.n	8002374 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	212c      	movs	r1, #44	; 0x2c
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	4413      	add	r3, r2
 80022f6:	335c      	adds	r3, #92	; 0x5c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	202c      	movs	r0, #44	; 0x2c
 8002302:	fb00 f303 	mul.w	r3, r0, r3
 8002306:	440b      	add	r3, r1
 8002308:	335c      	adds	r3, #92	; 0x5c
 800230a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	335c      	adds	r3, #92	; 0x5c
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d920      	bls.n	8002362 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	335c      	adds	r3, #92	; 0x5c
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3360      	adds	r3, #96	; 0x60
 8002340:	2204      	movs	r2, #4
 8002342:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	b2d9      	uxtb	r1, r3
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	202c      	movs	r0, #44	; 0x2c
 800234e:	fb00 f303 	mul.w	r3, r0, r3
 8002352:	4413      	add	r3, r2
 8002354:	3360      	adds	r3, #96	; 0x60
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f004 ff3c 	bl	80071d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002360:	e008      	b.n	8002374 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	2202      	movs	r2, #2
 8002372:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	461a      	mov	r2, r3
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	6093      	str	r3, [r2, #8]
}
 8002386:	e172      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239e:	d11b      	bne.n	80023d8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	2208      	movs	r2, #8
 80023b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f002 f914 	bl	80045ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ce:	461a      	mov	r2, r3
 80023d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023d4:	6093      	str	r3, [r2, #8]
}
 80023d6:	e14a      	b.n	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 813f 	bne.w	800266e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3361      	adds	r3, #97	; 0x61
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d17d      	bne.n	8002500 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3360      	adds	r3, #96	; 0x60
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	333f      	adds	r3, #63	; 0x3f
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d00a      	beq.n	8002440 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333f      	adds	r3, #63	; 0x3f
 8002438:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800243a:	2b03      	cmp	r3, #3
 800243c:	f040 8100 	bne.w	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d113      	bne.n	8002470 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	212c      	movs	r1, #44	; 0x2c
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	3355      	adds	r3, #85	; 0x55
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2d8      	uxtb	r0, r3
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	3355      	adds	r3, #85	; 0x55
 800246c:	4602      	mov	r2, r0
 800246e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 80e3 	bne.w	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	212c      	movs	r1, #44	; 0x2c
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	334c      	adds	r3, #76	; 0x4c
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 80d8 	beq.w	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	334c      	adds	r3, #76	; 0x4c
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	202c      	movs	r0, #44	; 0x2c
 80024a6:	fb00 f202 	mul.w	r2, r0, r2
 80024aa:	440a      	add	r2, r1
 80024ac:	3240      	adds	r2, #64	; 0x40
 80024ae:	8812      	ldrh	r2, [r2, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	202c      	movs	r0, #44	; 0x2c
 80024ba:	fb00 f202 	mul.w	r2, r0, r2
 80024be:	440a      	add	r2, r1
 80024c0:	3240      	adds	r2, #64	; 0x40
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80b5 	beq.w	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3355      	adds	r3, #85	; 0x55
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	f083 0301 	eor.w	r3, r3, #1
 80024ea:	b2d8      	uxtb	r0, r3
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	212c      	movs	r1, #44	; 0x2c
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4413      	add	r3, r2
 80024f8:	3355      	adds	r3, #85	; 0x55
 80024fa:	4602      	mov	r2, r0
 80024fc:	701a      	strb	r2, [r3, #0]
 80024fe:	e09f      	b.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3361      	adds	r3, #97	; 0x61
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d109      	bne.n	8002528 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3360      	adds	r3, #96	; 0x60
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
 8002526:	e08b      	b.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d109      	bne.n	8002550 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	3360      	adds	r3, #96	; 0x60
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e077      	b.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	3361      	adds	r3, #97	; 0x61
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b05      	cmp	r3, #5
 8002562:	d109      	bne.n	8002578 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3360      	adds	r3, #96	; 0x60
 8002572:	2205      	movs	r2, #5
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e063      	b.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3361      	adds	r3, #97	; 0x61
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d009      	beq.n	80025a0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800259c:	2b08      	cmp	r3, #8
 800259e:	d14f      	bne.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	335c      	adds	r3, #92	; 0x5c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	202c      	movs	r0, #44	; 0x2c
 80025b8:	fb00 f303 	mul.w	r3, r0, r3
 80025bc:	440b      	add	r3, r1
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	212c      	movs	r1, #44	; 0x2c
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	4413      	add	r3, r2
 80025ce:	335c      	adds	r3, #92	; 0x5c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d912      	bls.n	80025fc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3360      	adds	r3, #96	; 0x60
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e021      	b.n	8002640 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	fb01 f303 	mul.w	r3, r1, r3
 8002606:	4413      	add	r3, r2
 8002608:	3360      	adds	r3, #96	; 0x60
 800260a:	2202      	movs	r2, #2
 800260c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002624:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800262c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2302      	movs	r3, #2
 8002650:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	b2d9      	uxtb	r1, r3
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	4413      	add	r3, r2
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f004 fdb5 	bl	80071d8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800266e:	bf00      	nop
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b08a      	sub	sp, #40	; 0x28
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	0c5b      	lsrs	r3, r3, #17
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026aa:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HCD_RXQLVL_IRQHandler+0x46>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	f000 80a9 	beq.w	800280c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80026ba:	e0aa      	b.n	8002812 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 80a6 	beq.w	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3344      	adds	r3, #68	; 0x44
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 809b 	beq.w	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3350      	adds	r3, #80	; 0x50
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	441a      	add	r2, r3
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	202c      	movs	r0, #44	; 0x2c
 80026f4:	fb00 f303 	mul.w	r3, r0, r3
 80026f8:	440b      	add	r3, r1
 80026fa:	334c      	adds	r3, #76	; 0x4c
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d87a      	bhi.n	80027f8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	3344      	adds	r3, #68	; 0x44
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	b292      	uxth	r2, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f001 fabc 	bl	8003c98 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3344      	adds	r3, #68	; 0x44
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	441a      	add	r2, r3
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	202c      	movs	r0, #44	; 0x2c
 800273a:	fb00 f303 	mul.w	r3, r0, r3
 800273e:	440b      	add	r3, r1
 8002740:	3344      	adds	r3, #68	; 0x44
 8002742:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3350      	adds	r3, #80	; 0x50
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	441a      	add	r2, r3
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	fb00 f303 	mul.w	r3, r0, r3
 8002762:	440b      	add	r3, r1
 8002764:	3350      	adds	r3, #80	; 0x50
 8002766:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	0cdb      	lsrs	r3, r3, #19
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	3340      	adds	r3, #64	; 0x40
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4293      	cmp	r3, r2
 8002794:	d13c      	bne.n	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d039      	beq.n	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80027b2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ba:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3354      	adds	r3, #84	; 0x54
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f083 0301 	eor.w	r3, r3, #1
 80027e2:	b2d8      	uxtb	r0, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3354      	adds	r3, #84	; 0x54
 80027f2:	4602      	mov	r2, r0
 80027f4:	701a      	strb	r2, [r3, #0]
      break;
 80027f6:	e00b      	b.n	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3360      	adds	r3, #96	; 0x60
 8002806:	2204      	movs	r2, #4
 8002808:	701a      	strb	r2, [r3, #0]
      break;
 800280a:	e001      	b.n	8002810 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800280c:	bf00      	nop
 800280e:	e000      	b.n	8002812 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002810:	bf00      	nop
  }
}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002846:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d10b      	bne.n	800286a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f004 fc9f 	bl	80071a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f043 0302 	orr.w	r3, r3, #2
 8002868:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b08      	cmp	r3, #8
 8002872:	d132      	bne.n	80028da <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d126      	bne.n	80028d4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d113      	bne.n	80028b6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002894:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002898:	d106      	bne.n	80028a8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2102      	movs	r1, #2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 fb67 	bl	8003f74 <USB_InitFSLSPClkSel>
 80028a6:	e011      	b.n	80028cc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2101      	movs	r1, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f001 fb60 	bl	8003f74 <USB_InitFSLSPClkSel>
 80028b4:	e00a      	b.n	80028cc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d106      	bne.n	80028cc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028c4:	461a      	mov	r2, r3
 80028c6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028ca:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f004 fc91 	bl	80071f4 <HAL_HCD_PortEnabled_Callback>
 80028d2:	e002      	b.n	80028da <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f004 fc9b 	bl	8007210 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d103      	bne.n	80028ec <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f043 0320 	orr.w	r3, r3, #32
 80028ea:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80028f2:	461a      	mov	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6013      	str	r3, [r2, #0]
}
 80028f8:	bf00      	nop
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e267      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d075      	beq.n	8002a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800291e:	4b88      	ldr	r3, [pc, #544]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b04      	cmp	r3, #4
 8002928:	d00c      	beq.n	8002944 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800292a:	4b85      	ldr	r3, [pc, #532]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d112      	bne.n	800295c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002942:	d10b      	bne.n	800295c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002944:	4b7e      	ldr	r3, [pc, #504]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d05b      	beq.n	8002a08 <HAL_RCC_OscConfig+0x108>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d157      	bne.n	8002a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e242      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002964:	d106      	bne.n	8002974 <HAL_RCC_OscConfig+0x74>
 8002966:	4b76      	ldr	r3, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a75      	ldr	r2, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e01d      	b.n	80029b0 <HAL_RCC_OscConfig+0xb0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x98>
 800297e:	4b70      	ldr	r3, [pc, #448]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a6f      	ldr	r2, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b6d      	ldr	r3, [pc, #436]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6c      	ldr	r2, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0xb0>
 8002998:	4b69      	ldr	r3, [pc, #420]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a68      	ldr	r2, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b66      	ldr	r3, [pc, #408]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a65      	ldr	r2, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b8:	f7fe f8b8 	bl	8000b2c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c0:	f7fe f8b4 	bl	8000b2c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b64      	cmp	r3, #100	; 0x64
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e207      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0xc0>
 80029de:	e014      	b.n	8002a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7fe f8a4 	bl	8000b2c <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e8:	f7fe f8a0 	bl	8000b2c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1f3      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0xe8>
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a16:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 030c 	and.w	r3, r3, #12
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a22:	4b47      	ldr	r3, [pc, #284]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d11c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2e:	4b44      	ldr	r3, [pc, #272]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d116      	bne.n	8002a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_RCC_OscConfig+0x152>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e1c7      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4937      	ldr	r1, [pc, #220]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	e03a      	b.n	8002ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <HAL_RCC_OscConfig+0x244>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe f859 	bl	8000b2c <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe f855 	bl	8000b2c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e1a8      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4925      	ldr	r1, [pc, #148]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
 8002ab0:	e015      	b.n	8002ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b24      	ldr	r3, [pc, #144]	; (8002b44 <HAL_RCC_OscConfig+0x244>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe f838 	bl	8000b2c <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac0:	f7fe f834 	bl	8000b2c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e187      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d036      	beq.n	8002b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d016      	beq.n	8002b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af2:	4b15      	ldr	r3, [pc, #84]	; (8002b48 <HAL_RCC_OscConfig+0x248>)
 8002af4:	2201      	movs	r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af8:	f7fe f818 	bl	8000b2c <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	e008      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b00:	f7fe f814 	bl	8000b2c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e167      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x240>)
 8002b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d0f0      	beq.n	8002b00 <HAL_RCC_OscConfig+0x200>
 8002b1e:	e01b      	b.n	8002b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x248>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe f801 	bl	8000b2c <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	e00e      	b.n	8002b4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2e:	f7fd fffd 	bl	8000b2c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d907      	bls.n	8002b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e150      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
 8002b40:	40023800 	.word	0x40023800
 8002b44:	42470000 	.word	0x42470000
 8002b48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b4c:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ea      	bne.n	8002b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8097 	beq.w	8002c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b6a:	4b81      	ldr	r3, [pc, #516]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b7d      	ldr	r3, [pc, #500]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a7c      	ldr	r2, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b7a      	ldr	r3, [pc, #488]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b92:	2301      	movs	r3, #1
 8002b94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b77      	ldr	r3, [pc, #476]	; (8002d74 <HAL_RCC_OscConfig+0x474>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d118      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b74      	ldr	r3, [pc, #464]	; (8002d74 <HAL_RCC_OscConfig+0x474>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a73      	ldr	r2, [pc, #460]	; (8002d74 <HAL_RCC_OscConfig+0x474>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bae:	f7fd ffbd 	bl	8000b2c <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb6:	f7fd ffb9 	bl	8000b2c <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e10c      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc8:	4b6a      	ldr	r3, [pc, #424]	; (8002d74 <HAL_RCC_OscConfig+0x474>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_OscConfig+0x2ea>
 8002bdc:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	4a63      	ldr	r2, [pc, #396]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6713      	str	r3, [r2, #112]	; 0x70
 8002be8:	e01c      	b.n	8002c24 <HAL_RCC_OscConfig+0x324>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2b05      	cmp	r3, #5
 8002bf0:	d10c      	bne.n	8002c0c <HAL_RCC_OscConfig+0x30c>
 8002bf2:	4b5f      	ldr	r3, [pc, #380]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	4a5e      	ldr	r2, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	f043 0304 	orr.w	r3, r3, #4
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a5b      	ldr	r2, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	e00b      	b.n	8002c24 <HAL_RCC_OscConfig+0x324>
 8002c0c:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a57      	ldr	r2, [pc, #348]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	4b55      	ldr	r3, [pc, #340]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1c:	4a54      	ldr	r2, [pc, #336]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	f023 0304 	bic.w	r3, r3, #4
 8002c22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fd ff7e 	bl	8000b2c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c34:	f7fd ff7a 	bl	8000b2c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e0cb      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c4a:	4b49      	ldr	r3, [pc, #292]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0ee      	beq.n	8002c34 <HAL_RCC_OscConfig+0x334>
 8002c56:	e014      	b.n	8002c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fd ff68 	bl	8000b2c <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fd ff64 	bl	8000b2c <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0b5      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c76:	4b3e      	ldr	r3, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1ee      	bne.n	8002c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c82:	7dfb      	ldrb	r3, [r7, #23]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	4a38      	ldr	r2, [pc, #224]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a1 	beq.w	8002de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c9e:	4b34      	ldr	r3, [pc, #208]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 030c 	and.w	r3, r3, #12
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d05c      	beq.n	8002d64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d141      	bne.n	8002d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCC_OscConfig+0x478>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ff38 	bl	8000b2c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fd ff34 	bl	8000b2c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e087      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd2:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	019b      	lsls	r3, r3, #6
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	041b      	lsls	r3, r3, #16
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	491b      	ldr	r1, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x478>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fd ff0d 	bl	8000b2c <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d16:	f7fd ff09 	bl	8000b2c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e05c      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x416>
 8002d34:	e054      	b.n	8002de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_RCC_OscConfig+0x478>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7fd fef6 	bl	8000b2c <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d44:	f7fd fef2 	bl	8000b2c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e045      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_OscConfig+0x470>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x444>
 8002d62:	e03d      	b.n	8002de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e038      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40007000 	.word	0x40007000
 8002d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d7c:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <HAL_RCC_OscConfig+0x4ec>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d028      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d121      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d11a      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d111      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0cc      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d90c      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1a:	4b63      	ldr	r3, [pc, #396]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0b8      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e44:	4b59      	ldr	r3, [pc, #356]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a58      	ldr	r2, [pc, #352]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e5c:	4b53      	ldr	r3, [pc, #332]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	4a52      	ldr	r2, [pc, #328]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b50      	ldr	r3, [pc, #320]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	494d      	ldr	r1, [pc, #308]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d044      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d119      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e07f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e067      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b37      	ldr	r3, [pc, #220]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4934      	ldr	r1, [pc, #208]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fd fe24 	bl	8000b2c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fd fe20 	bl	8000b2c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e04f      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d20c      	bcs.n	8002f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b22      	ldr	r3, [pc, #136]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e032      	b.n	8002f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4916      	ldr	r1, [pc, #88]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	490e      	ldr	r1, [pc, #56]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f76:	f000 f821 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	490a      	ldr	r1, [pc, #40]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	5ccb      	ldrb	r3, [r1, r3]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a09      	ldr	r2, [pc, #36]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fd84 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023c00 	.word	0x40023c00
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08008010 	.word	0x08008010
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	20000004 	.word	0x20000004

08002fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc0:	b094      	sub	sp, #80	; 0x50
 8002fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc8:	2300      	movs	r3, #0
 8002fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fcc:	2300      	movs	r3, #0
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd4:	4b79      	ldr	r3, [pc, #484]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 030c 	and.w	r3, r3, #12
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d00d      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x40>
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	f200 80e1 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fee:	e0db      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b73      	ldr	r3, [pc, #460]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ff2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ff4:	e0db      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ff6:	4b73      	ldr	r3, [pc, #460]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ff8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffa:	e0d8      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003006:	4b6d      	ldr	r3, [pc, #436]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003012:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	099b      	lsrs	r3, r3, #6
 8003018:	2200      	movs	r2, #0
 800301a:	63bb      	str	r3, [r7, #56]	; 0x38
 800301c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800301e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
 8003026:	2300      	movs	r3, #0
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
 800302a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800302e:	4622      	mov	r2, r4
 8003030:	462b      	mov	r3, r5
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f04f 0100 	mov.w	r1, #0
 800303a:	0159      	lsls	r1, r3, #5
 800303c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003040:	0150      	lsls	r0, r2, #5
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4621      	mov	r1, r4
 8003048:	1a51      	subs	r1, r2, r1
 800304a:	6139      	str	r1, [r7, #16]
 800304c:	4629      	mov	r1, r5
 800304e:	eb63 0301 	sbc.w	r3, r3, r1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003060:	4659      	mov	r1, fp
 8003062:	018b      	lsls	r3, r1, #6
 8003064:	4651      	mov	r1, sl
 8003066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800306a:	4651      	mov	r1, sl
 800306c:	018a      	lsls	r2, r1, #6
 800306e:	4651      	mov	r1, sl
 8003070:	ebb2 0801 	subs.w	r8, r2, r1
 8003074:	4659      	mov	r1, fp
 8003076:	eb63 0901 	sbc.w	r9, r3, r1
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800308a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800308e:	4690      	mov	r8, r2
 8003090:	4699      	mov	r9, r3
 8003092:	4623      	mov	r3, r4
 8003094:	eb18 0303 	adds.w	r3, r8, r3
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	462b      	mov	r3, r5
 800309c:	eb49 0303 	adc.w	r3, r9, r3
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030ae:	4629      	mov	r1, r5
 80030b0:	024b      	lsls	r3, r1, #9
 80030b2:	4621      	mov	r1, r4
 80030b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030b8:	4621      	mov	r1, r4
 80030ba:	024a      	lsls	r2, r1, #9
 80030bc:	4610      	mov	r0, r2
 80030be:	4619      	mov	r1, r3
 80030c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c2:	2200      	movs	r2, #0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030cc:	f7fd f8d8 	bl	8000280 <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d8:	e058      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	2200      	movs	r2, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	4611      	mov	r1, r2
 80030e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ea:	623b      	str	r3, [r7, #32]
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
 80030f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030f4:	4642      	mov	r2, r8
 80030f6:	464b      	mov	r3, r9
 80030f8:	f04f 0000 	mov.w	r0, #0
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	0159      	lsls	r1, r3, #5
 8003102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003106:	0150      	lsls	r0, r2, #5
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4641      	mov	r1, r8
 800310e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003112:	4649      	mov	r1, r9
 8003114:	eb63 0b01 	sbc.w	fp, r3, r1
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800312c:	ebb2 040a 	subs.w	r4, r2, sl
 8003130:	eb63 050b 	sbc.w	r5, r3, fp
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	00eb      	lsls	r3, r5, #3
 800313e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003142:	00e2      	lsls	r2, r4, #3
 8003144:	4614      	mov	r4, r2
 8003146:	461d      	mov	r5, r3
 8003148:	4643      	mov	r3, r8
 800314a:	18e3      	adds	r3, r4, r3
 800314c:	603b      	str	r3, [r7, #0]
 800314e:	464b      	mov	r3, r9
 8003150:	eb45 0303 	adc.w	r3, r5, r3
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003162:	4629      	mov	r1, r5
 8003164:	028b      	lsls	r3, r1, #10
 8003166:	4621      	mov	r1, r4
 8003168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800316c:	4621      	mov	r1, r4
 800316e:	028a      	lsls	r2, r1, #10
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003176:	2200      	movs	r2, #0
 8003178:	61bb      	str	r3, [r7, #24]
 800317a:	61fa      	str	r2, [r7, #28]
 800317c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003180:	f7fd f87e 	bl	8000280 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetSysClockFreq+0x200>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800319c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800319e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031a6:	e002      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3750      	adds	r7, #80	; 0x50
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	08008020 	.word	0x08008020

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800320c:	f7ff ffdc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	08008020 	.word	0x08008020

08003230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03f      	b.n	80032c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd fb14 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f929 	bl	80034cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08a      	sub	sp, #40	; 0x28
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d17c      	bne.n	80033e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Transmit+0x2c>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e075      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Transmit+0x3e>
 8003304:	2302      	movs	r3, #2
 8003306:	e06e      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2221      	movs	r2, #33	; 0x21
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331e:	f7fd fc05 	bl	8000b2c <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d108      	bne.n	800334c <HAL_UART_Transmit+0x82>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e003      	b.n	8003354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800335c:	e02a      	b.n	80033b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f840 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e007      	b.n	80033a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1cf      	bne.n	800335e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f810 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e006      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b090      	sub	sp, #64	; 0x40
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e050      	b.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	d04c      	beq.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340a:	2b00      	cmp	r3, #0
 800340c:	d007      	beq.n	800341e <UART_WaitOnFlagUntilTimeout+0x30>
 800340e:	f7fd fb8d 	bl	8000b2c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341a:	429a      	cmp	r2, r3
 800341c:	d241      	bcs.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	330c      	adds	r3, #12
 8003424:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	330c      	adds	r3, #12
 800343c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800343e:	637a      	str	r2, [r7, #52]	; 0x34
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e5      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	613b      	str	r3, [r7, #16]
   return(result);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3314      	adds	r3, #20
 8003470:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003472:	623a      	str	r2, [r7, #32]
 8003474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	69f9      	ldr	r1, [r7, #28]
 8003478:	6a3a      	ldr	r2, [r7, #32]
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e00f      	b.n	80034c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	4013      	ands	r3, r2
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	79fb      	ldrb	r3, [r7, #7]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d09f      	beq.n	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3740      	adds	r7, #64	; 0x40
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034d0:	b0c0      	sub	sp, #256	; 0x100
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	68d9      	ldr	r1, [r3, #12]
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	ea40 0301 	orr.w	r3, r0, r1
 80034f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	431a      	orrs	r2, r3
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	431a      	orrs	r2, r3
 800350c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003524:	f021 010c 	bic.w	r1, r1, #12
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003532:	430b      	orrs	r3, r1
 8003534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	6999      	ldr	r1, [r3, #24]
 8003548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	ea40 0301 	orr.w	r3, r0, r1
 8003552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	4b8f      	ldr	r3, [pc, #572]	; (8003798 <UART_SetConfig+0x2cc>)
 800355c:	429a      	cmp	r2, r3
 800355e:	d005      	beq.n	800356c <UART_SetConfig+0xa0>
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b8d      	ldr	r3, [pc, #564]	; (800379c <UART_SetConfig+0x2d0>)
 8003568:	429a      	cmp	r2, r3
 800356a:	d104      	bne.n	8003576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800356c:	f7ff fe4c 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8003570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003574:	e003      	b.n	800357e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003576:	f7ff fe33 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 800357a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800357e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003588:	f040 810c 	bne.w	80037a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800358c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003590:	2200      	movs	r2, #0
 8003592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800359a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800359e:	4622      	mov	r2, r4
 80035a0:	462b      	mov	r3, r5
 80035a2:	1891      	adds	r1, r2, r2
 80035a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80035a6:	415b      	adcs	r3, r3
 80035a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035ae:	4621      	mov	r1, r4
 80035b0:	eb12 0801 	adds.w	r8, r2, r1
 80035b4:	4629      	mov	r1, r5
 80035b6:	eb43 0901 	adc.w	r9, r3, r1
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ce:	4690      	mov	r8, r2
 80035d0:	4699      	mov	r9, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	eb18 0303 	adds.w	r3, r8, r3
 80035d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035dc:	462b      	mov	r3, r5
 80035de:	eb49 0303 	adc.w	r3, r9, r3
 80035e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035fa:	460b      	mov	r3, r1
 80035fc:	18db      	adds	r3, r3, r3
 80035fe:	653b      	str	r3, [r7, #80]	; 0x50
 8003600:	4613      	mov	r3, r2
 8003602:	eb42 0303 	adc.w	r3, r2, r3
 8003606:	657b      	str	r3, [r7, #84]	; 0x54
 8003608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800360c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003610:	f7fc fe36 	bl	8000280 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <UART_SetConfig+0x2d4>)
 800361a:	fba3 2302 	umull	r2, r3, r3, r2
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	011c      	lsls	r4, r3, #4
 8003622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003626:	2200      	movs	r2, #0
 8003628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800362c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003634:	4642      	mov	r2, r8
 8003636:	464b      	mov	r3, r9
 8003638:	1891      	adds	r1, r2, r2
 800363a:	64b9      	str	r1, [r7, #72]	; 0x48
 800363c:	415b      	adcs	r3, r3
 800363e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003644:	4641      	mov	r1, r8
 8003646:	eb12 0a01 	adds.w	sl, r2, r1
 800364a:	4649      	mov	r1, r9
 800364c:	eb43 0b01 	adc.w	fp, r3, r1
 8003650:	f04f 0200 	mov.w	r2, #0
 8003654:	f04f 0300 	mov.w	r3, #0
 8003658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800365c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003664:	4692      	mov	sl, r2
 8003666:	469b      	mov	fp, r3
 8003668:	4643      	mov	r3, r8
 800366a:	eb1a 0303 	adds.w	r3, sl, r3
 800366e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003672:	464b      	mov	r3, r9
 8003674:	eb4b 0303 	adc.w	r3, fp, r3
 8003678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800368c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003690:	460b      	mov	r3, r1
 8003692:	18db      	adds	r3, r3, r3
 8003694:	643b      	str	r3, [r7, #64]	; 0x40
 8003696:	4613      	mov	r3, r2
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	647b      	str	r3, [r7, #68]	; 0x44
 800369e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036a6:	f7fc fdeb 	bl	8000280 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <UART_SetConfig+0x2d4>)
 80036b2:	fba3 2301 	umull	r2, r3, r3, r1
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	2264      	movs	r2, #100	; 0x64
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	1acb      	subs	r3, r1, r3
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <UART_SetConfig+0x2d4>)
 80036c8:	fba3 2302 	umull	r2, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036d4:	441c      	add	r4, r3
 80036d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036e8:	4642      	mov	r2, r8
 80036ea:	464b      	mov	r3, r9
 80036ec:	1891      	adds	r1, r2, r2
 80036ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80036f0:	415b      	adcs	r3, r3
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036f8:	4641      	mov	r1, r8
 80036fa:	1851      	adds	r1, r2, r1
 80036fc:	6339      	str	r1, [r7, #48]	; 0x30
 80036fe:	4649      	mov	r1, r9
 8003700:	414b      	adcs	r3, r1
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003710:	4659      	mov	r1, fp
 8003712:	00cb      	lsls	r3, r1, #3
 8003714:	4651      	mov	r1, sl
 8003716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800371a:	4651      	mov	r1, sl
 800371c:	00ca      	lsls	r2, r1, #3
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	4603      	mov	r3, r0
 8003724:	4642      	mov	r2, r8
 8003726:	189b      	adds	r3, r3, r2
 8003728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800372c:	464b      	mov	r3, r9
 800372e:	460a      	mov	r2, r1
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800374c:	460b      	mov	r3, r1
 800374e:	18db      	adds	r3, r3, r3
 8003750:	62bb      	str	r3, [r7, #40]	; 0x28
 8003752:	4613      	mov	r3, r2
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800375e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003762:	f7fc fd8d 	bl	8000280 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <UART_SetConfig+0x2d4>)
 800376c:	fba3 1302 	umull	r1, r3, r3, r2
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	2164      	movs	r1, #100	; 0x64
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	3332      	adds	r3, #50	; 0x32
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <UART_SetConfig+0x2d4>)
 8003780:	fba2 2303 	umull	r2, r3, r2, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	f003 0207 	and.w	r2, r3, #7
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4422      	add	r2, r4
 8003792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003794:	e106      	b.n	80039a4 <UART_SetConfig+0x4d8>
 8003796:	bf00      	nop
 8003798:	40011000 	.word	0x40011000
 800379c:	40011400 	.word	0x40011400
 80037a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037b6:	4642      	mov	r2, r8
 80037b8:	464b      	mov	r3, r9
 80037ba:	1891      	adds	r1, r2, r2
 80037bc:	6239      	str	r1, [r7, #32]
 80037be:	415b      	adcs	r3, r3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037c6:	4641      	mov	r1, r8
 80037c8:	1854      	adds	r4, r2, r1
 80037ca:	4649      	mov	r1, r9
 80037cc:	eb43 0501 	adc.w	r5, r3, r1
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	00eb      	lsls	r3, r5, #3
 80037da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037de:	00e2      	lsls	r2, r4, #3
 80037e0:	4614      	mov	r4, r2
 80037e2:	461d      	mov	r5, r3
 80037e4:	4643      	mov	r3, r8
 80037e6:	18e3      	adds	r3, r4, r3
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037ec:	464b      	mov	r3, r9
 80037ee:	eb45 0303 	adc.w	r3, r5, r3
 80037f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003812:	4629      	mov	r1, r5
 8003814:	008b      	lsls	r3, r1, #2
 8003816:	4621      	mov	r1, r4
 8003818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800381c:	4621      	mov	r1, r4
 800381e:	008a      	lsls	r2, r1, #2
 8003820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003824:	f7fc fd2c 	bl	8000280 <__aeabi_uldivmod>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4b60      	ldr	r3, [pc, #384]	; (80039b0 <UART_SetConfig+0x4e4>)
 800382e:	fba3 2302 	umull	r2, r3, r3, r2
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	011c      	lsls	r4, r3, #4
 8003836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800383a:	2200      	movs	r2, #0
 800383c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003848:	4642      	mov	r2, r8
 800384a:	464b      	mov	r3, r9
 800384c:	1891      	adds	r1, r2, r2
 800384e:	61b9      	str	r1, [r7, #24]
 8003850:	415b      	adcs	r3, r3
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003858:	4641      	mov	r1, r8
 800385a:	1851      	adds	r1, r2, r1
 800385c:	6139      	str	r1, [r7, #16]
 800385e:	4649      	mov	r1, r9
 8003860:	414b      	adcs	r3, r1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003870:	4659      	mov	r1, fp
 8003872:	00cb      	lsls	r3, r1, #3
 8003874:	4651      	mov	r1, sl
 8003876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800387a:	4651      	mov	r1, sl
 800387c:	00ca      	lsls	r2, r1, #3
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	4603      	mov	r3, r0
 8003884:	4642      	mov	r2, r8
 8003886:	189b      	adds	r3, r3, r2
 8003888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800388c:	464b      	mov	r3, r9
 800388e:	460a      	mov	r2, r1
 8003890:	eb42 0303 	adc.w	r3, r2, r3
 8003894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80038a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038b0:	4649      	mov	r1, r9
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	4641      	mov	r1, r8
 80038b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ba:	4641      	mov	r1, r8
 80038bc:	008a      	lsls	r2, r1, #2
 80038be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038c2:	f7fc fcdd 	bl	8000280 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <UART_SetConfig+0x4e4>)
 80038ce:	fba3 2301 	umull	r2, r3, r3, r1
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2264      	movs	r2, #100	; 0x64
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	3332      	adds	r3, #50	; 0x32
 80038e0:	4a33      	ldr	r2, [pc, #204]	; (80039b0 <UART_SetConfig+0x4e4>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ec:	441c      	add	r4, r3
 80038ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f2:	2200      	movs	r2, #0
 80038f4:	673b      	str	r3, [r7, #112]	; 0x70
 80038f6:	677a      	str	r2, [r7, #116]	; 0x74
 80038f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038fc:	4642      	mov	r2, r8
 80038fe:	464b      	mov	r3, r9
 8003900:	1891      	adds	r1, r2, r2
 8003902:	60b9      	str	r1, [r7, #8]
 8003904:	415b      	adcs	r3, r3
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390c:	4641      	mov	r1, r8
 800390e:	1851      	adds	r1, r2, r1
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	4649      	mov	r1, r9
 8003914:	414b      	adcs	r3, r1
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003924:	4659      	mov	r1, fp
 8003926:	00cb      	lsls	r3, r1, #3
 8003928:	4651      	mov	r1, sl
 800392a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392e:	4651      	mov	r1, sl
 8003930:	00ca      	lsls	r2, r1, #3
 8003932:	4610      	mov	r0, r2
 8003934:	4619      	mov	r1, r3
 8003936:	4603      	mov	r3, r0
 8003938:	4642      	mov	r2, r8
 800393a:	189b      	adds	r3, r3, r2
 800393c:	66bb      	str	r3, [r7, #104]	; 0x68
 800393e:	464b      	mov	r3, r9
 8003940:	460a      	mov	r2, r1
 8003942:	eb42 0303 	adc.w	r3, r2, r3
 8003946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	663b      	str	r3, [r7, #96]	; 0x60
 8003952:	667a      	str	r2, [r7, #100]	; 0x64
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003960:	4649      	mov	r1, r9
 8003962:	008b      	lsls	r3, r1, #2
 8003964:	4641      	mov	r1, r8
 8003966:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800396a:	4641      	mov	r1, r8
 800396c:	008a      	lsls	r2, r1, #2
 800396e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003972:	f7fc fc85 	bl	8000280 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <UART_SetConfig+0x4e4>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <UART_SetConfig+0x4e4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 020f 	and.w	r2, r3, #15
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4422      	add	r2, r4
 80039a2:	609a      	str	r2, [r3, #8]
}
 80039a4:	bf00      	nop
 80039a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039aa:	46bd      	mov	sp, r7
 80039ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039b0:	51eb851f 	.word	0x51eb851f

080039b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039b4:	b084      	sub	sp, #16
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	f107 001c 	add.w	r0, r7, #28
 80039c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d122      	bne.n	8003a12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f9c0 	bl	8003d8c <USB_CoreReset>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e01a      	b.n	8003a48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f9b4 	bl	8003d8c <USB_CoreReset>
 8003a24:	4603      	mov	r3, r0
 8003a26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	639a      	str	r2, [r3, #56]	; 0x38
 8003a3a:	e005      	b.n	8003a48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d10b      	bne.n	8003a66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f043 0206 	orr.w	r2, r3, #6
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f043 0220 	orr.w	r2, r3, #32
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a72:	b004      	add	sp, #16
 8003a74:	4770      	bx	lr

08003a76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f043 0201 	orr.w	r2, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 0201 	bic.w	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d115      	bne.n	8003b08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ae8:	2001      	movs	r0, #1
 8003aea:	f7fd f82b 	bl	8000b44 <HAL_Delay>
      ms++;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f93a 	bl	8003d6e <USB_GetMode>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d01e      	beq.n	8003b3e <USB_SetCurrentMode+0x84>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b31      	cmp	r3, #49	; 0x31
 8003b04:	d9f0      	bls.n	8003ae8 <USB_SetCurrentMode+0x2e>
 8003b06:	e01a      	b.n	8003b3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d115      	bne.n	8003b3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f7fd f812 	bl	8000b44 <HAL_Delay>
      ms++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f921 	bl	8003d6e <USB_GetMode>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d005      	beq.n	8003b3e <USB_SetCurrentMode+0x84>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b31      	cmp	r3, #49	; 0x31
 8003b36:	d9f0      	bls.n	8003b1a <USB_SetCurrentMode+0x60>
 8003b38:	e001      	b.n	8003b3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e005      	b.n	8003b4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b32      	cmp	r3, #50	; 0x32
 8003b42:	d101      	bne.n	8003b48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3301      	adds	r3, #1
 8003b66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <USB_FlushTxFifo+0x64>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e01b      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	daf2      	bge.n	8003b62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4a08      	ldr	r2, [pc, #32]	; (8003bb8 <USB_FlushTxFifo+0x64>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e006      	b.n	8003bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d0f0      	beq.n	8003b8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	00030d40 	.word	0x00030d40

08003bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4a11      	ldr	r2, [pc, #68]	; (8003c18 <USB_FlushRxFifo+0x5c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d901      	bls.n	8003bda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e018      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	daf2      	bge.n	8003bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2210      	movs	r2, #16
 8003bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <USB_FlushRxFifo+0x5c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d901      	bls.n	8003bfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e006      	b.n	8003c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d0f0      	beq.n	8003bec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	00030d40 	.word	0x00030d40

08003c1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4611      	mov	r1, r2
 8003c28:	461a      	mov	r2, r3
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	71fb      	strb	r3, [r7, #7]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003c3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d123      	bne.n	8003c8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c42:	88bb      	ldrh	r3, [r7, #4]
 8003c44:	3303      	adds	r3, #3
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e018      	b.n	8003c82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	031a      	lsls	r2, r3, #12
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d3e2      	bcc.n	8003c50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b08b      	sub	sp, #44	; 0x2c
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	089b      	lsrs	r3, r3, #2
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	e014      	b.n	8003cee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	601a      	str	r2, [r3, #0]
    pDest++;
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	3301      	adds	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	3301      	adds	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	3301      	adds	r3, #1
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	6a3a      	ldr	r2, [r7, #32]
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d3e6      	bcc.n	8003cc4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003cf6:	8bfb      	ldrh	r3, [r7, #30]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01e      	beq.n	8003d3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d06:	461a      	mov	r2, r3
 8003d08:	f107 0310 	add.w	r3, r7, #16
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	701a      	strb	r2, [r3, #0]
      i++;
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	3301      	adds	r3, #1
 8003d26:	623b      	str	r3, [r7, #32]
      pDest++;
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003d2e:	8bfb      	ldrh	r3, [r7, #30]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003d34:	8bfb      	ldrh	r3, [r7, #30]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ea      	bne.n	8003d10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	372c      	adds	r7, #44	; 0x2c
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d60:	68fb      	ldr	r3, [r7, #12]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <USB_CoreReset+0x64>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01b      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	daf2      	bge.n	8003d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <USB_CoreReset+0x64>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d0f0      	beq.n	8003dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	00030d40 	.word	0x00030d40

08003df4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df4:	b084      	sub	sp, #16
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2300      	movs	r3, #0
 8003e18:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d018      	beq.n	8003e7c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10a      	bne.n	8003e66 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	e014      	b.n	8003e90 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e009      	b.n	8003e90 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e90:	2110      	movs	r1, #16
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe5e 	bl	8003b54 <USB_FlushTxFifo>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fe8a 	bl	8003bbc <USB_FlushRxFifo>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	e015      	b.n	8003ee4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d3e5      	bcc.n	8003eb8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <USB_HostInit+0x16c>)
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <USB_HostInit+0x170>)
 8003f18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003f1c:	e009      	b.n	8003f32 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a10      	ldr	r2, [pc, #64]	; (8003f68 <USB_HostInit+0x174>)
 8003f28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <USB_HostInit+0x178>)
 8003f2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	f043 0210 	orr.w	r2, r3, #16
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <USB_HostInit+0x17c>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f5c:	b004      	add	sp, #16
 8003f5e:	4770      	bx	lr
 8003f60:	01000200 	.word	0x01000200
 8003f64:	00e00300 	.word	0x00e00300
 8003f68:	00600080 	.word	0x00600080
 8003f6c:	004000e0 	.word	0x004000e0
 8003f70:	a3200008 	.word	0xa3200008

08003f74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f92:	f023 0303 	bic.w	r3, r3, #3
 8003f96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	68f9      	ldr	r1, [r7, #12]
 8003fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d107      	bne.n	8003fc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003fc2:	6053      	str	r3, [r2, #4]
 8003fc4:	e009      	b.n	8003fda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d106      	bne.n	8003fda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8003fd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004008:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004016:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004018:	2064      	movs	r0, #100	; 0x64
 800401a:	f7fc fd93 	bl	8000b44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800402c:	200a      	movs	r0, #10
 800402e:	f7fc fd89 	bl	8000b44 <HAL_Delay>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004060:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <USB_DriveVbus+0x44>
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d106      	bne.n	8004080 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800407a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800407e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d109      	bne.n	80040a0 <USB_DriveVbus+0x64>
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d106      	bne.n	80040a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800409a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800409e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	0c5b      	lsrs	r3, r3, #17
 80040cc:	f003 0303 	and.w	r3, r3, #3
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	b29b      	uxth	r3, r3
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
	...

08004100 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4603      	mov	r3, r0
 8004110:	70fb      	strb	r3, [r7, #3]
 8004112:	460b      	mov	r3, r1
 8004114:	70bb      	strb	r3, [r7, #2]
 8004116:	4613      	mov	r3, r2
 8004118:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800413a:	2b03      	cmp	r3, #3
 800413c:	d87e      	bhi.n	800423c <USB_HC_Init+0x13c>
 800413e:	a201      	add	r2, pc, #4	; (adr r2, 8004144 <USB_HC_Init+0x44>)
 8004140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004144:	08004155 	.word	0x08004155
 8004148:	080041ff 	.word	0x080041ff
 800414c:	08004155 	.word	0x08004155
 8004150:	080041c1 	.word	0x080041c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004160:	461a      	mov	r2, r3
 8004162:	f240 439d 	movw	r3, #1181	; 0x49d
 8004166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	da10      	bge.n	8004192 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	440a      	add	r2, r1
 8004186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800418a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004190:	e057      	b.n	8004242 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d051      	beq.n	8004242 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	78fa      	ldrb	r2, [r7, #3]
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041bc:	60d3      	str	r3, [r2, #12]
      break;
 80041be:	e040      	b.n	8004242 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041cc:	461a      	mov	r2, r3
 80041ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80041d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80041d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da34      	bge.n	8004246 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	0151      	lsls	r1, r2, #5
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	440a      	add	r2, r1
 80041f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80041fc:	e023      	b.n	8004246 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4413      	add	r3, r2
 8004206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420a:	461a      	mov	r2, r3
 800420c:	f240 2325 	movw	r3, #549	; 0x225
 8004210:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004212:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004216:	2b00      	cmp	r3, #0
 8004218:	da17      	bge.n	800424a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800421a:	78fb      	ldrb	r3, [r7, #3]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4413      	add	r3, r2
 8004222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	0151      	lsls	r1, r2, #5
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	440a      	add	r2, r1
 8004230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004234:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004238:	60d3      	str	r3, [r2, #12]
      }
      break;
 800423a:	e006      	b.n	800424a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	77fb      	strb	r3, [r7, #31]
      break;
 8004240:	e004      	b.n	800424c <USB_HC_Init+0x14c>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <USB_HC_Init+0x14c>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <USB_HC_Init+0x14c>
      break;
 800424a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	440a      	add	r2, r1
 8004262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004266:	f043 0302 	orr.w	r3, r3, #2
 800426a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	2101      	movs	r1, #1
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	6939      	ldr	r1, [r7, #16]
 8004282:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004286:	4313      	orrs	r3, r2
 8004288:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004296:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da03      	bge.n	80042a6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800429e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e001      	b.n	80042aa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff feff 	bl	80040ae <USB_GetHostSpeed>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80042b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d106      	bne.n	80042c8 <USB_HC_Init+0x1c8>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d003      	beq.n	80042c8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80042c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e001      	b.n	80042cc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042cc:	787b      	ldrb	r3, [r7, #1]
 80042ce:	059b      	lsls	r3, r3, #22
 80042d0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80042d4:	78bb      	ldrb	r3, [r7, #2]
 80042d6:	02db      	lsls	r3, r3, #11
 80042d8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042dc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80042de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042e2:	049b      	lsls	r3, r3, #18
 80042e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80042e8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042ea:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80042ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80042f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	0159      	lsls	r1, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	440b      	add	r3, r1
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004308:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800430a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800430e:	2b03      	cmp	r3, #3
 8004310:	d003      	beq.n	800431a <USB_HC_Init+0x21a>
 8004312:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10f      	bne.n	800433a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	440a      	add	r2, r1
 8004330:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004338:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800433a:	7ffb      	ldrb	r3, [r7, #31]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800435c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004360:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d02d      	beq.n	80043ca <USB_HC_StartXfer+0x86>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	791b      	ldrb	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d129      	bne.n	80043ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d117      	bne.n	80043ac <USB_HC_StartXfer+0x68>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	79db      	ldrb	r3, [r3, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <USB_HC_StartXfer+0x48>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	79db      	ldrb	r3, [r3, #7]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d10f      	bne.n	80043ac <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	4413      	add	r3, r2
 8004394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	0151      	lsls	r1, r2, #5
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	440a      	add	r2, r1
 80043a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80043ac:	79fb      	ldrb	r3, [r7, #7]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <USB_HC_StartXfer+0x86>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	795b      	ldrb	r3, [r3, #5]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d107      	bne.n	80043ca <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	785b      	ldrb	r3, [r3, #1]
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fa0f 	bl	80047e4 <USB_DoPing>
      return HAL_OK;
 80043c6:	2300      	movs	r3, #0
 80043c8:	e0f8      	b.n	80045bc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	8912      	ldrh	r2, [r2, #8]
 80043da:	4413      	add	r3, r2
 80043dc:	3b01      	subs	r3, #1
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	8912      	ldrh	r2, [r2, #8]
 80043e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80043e6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80043e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043ea:	8b7b      	ldrh	r3, [r7, #26]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d90b      	bls.n	8004408 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80043f0:	8b7b      	ldrh	r3, [r7, #26]
 80043f2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	8912      	ldrh	r2, [r2, #8]
 80043fa:	fb03 f202 	mul.w	r2, r3, r2
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	611a      	str	r2, [r3, #16]
 8004402:	e001      	b.n	8004408 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004404:	2301      	movs	r3, #1
 8004406:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	78db      	ldrb	r3, [r3, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004410:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	8912      	ldrh	r2, [r2, #8]
 8004416:	fb03 f202 	mul.w	r2, r3, r2
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e003      	b.n	8004428 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004432:	04d9      	lsls	r1, r3, #19
 8004434:	4b63      	ldr	r3, [pc, #396]	; (80045c4 <USB_HC_StartXfer+0x280>)
 8004436:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004438:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	7a9b      	ldrb	r3, [r3, #10]
 800443e:	075b      	lsls	r3, r3, #29
 8004440:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004444:	69f9      	ldr	r1, [r7, #28]
 8004446:	0148      	lsls	r0, r1, #5
 8004448:	6a39      	ldr	r1, [r7, #32]
 800444a:	4401      	add	r1, r0
 800444c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004450:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004452:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004454:	79fb      	ldrb	r3, [r7, #7]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	68d9      	ldr	r1, [r3, #12]
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	460a      	mov	r2, r1
 800446c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69fa      	ldr	r2, [r7, #28]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	440a      	add	r2, r1
 800449c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	7e7b      	ldrb	r3, [r7, #25]
 80044b6:	075b      	lsls	r3, r3, #29
 80044b8:	69f9      	ldr	r1, [r7, #28]
 80044ba:	0148      	lsls	r0, r1, #5
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	4401      	add	r1, r0
 80044c0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044de:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	78db      	ldrb	r3, [r3, #3]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d004      	beq.n	80044f2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e003      	b.n	80044fa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044f8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004500:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	4413      	add	r3, r2
 800450a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800450e:	461a      	mov	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004514:	79fb      	ldrb	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e04e      	b.n	80045bc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	78db      	ldrb	r3, [r3, #3]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d149      	bne.n	80045ba <USB_HC_StartXfer+0x276>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d045      	beq.n	80045ba <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	79db      	ldrb	r3, [r3, #7]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d830      	bhi.n	8004598 <USB_HC_StartXfer+0x254>
 8004536:	a201      	add	r2, pc, #4	; (adr r2, 800453c <USB_HC_StartXfer+0x1f8>)
 8004538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453c:	0800454d 	.word	0x0800454d
 8004540:	08004571 	.word	0x08004571
 8004544:	0800454d 	.word	0x0800454d
 8004548:	08004571 	.word	0x08004571
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	3303      	adds	r3, #3
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004556:	8afa      	ldrh	r2, [r7, #22]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	b29b      	uxth	r3, r3
 800455e:	429a      	cmp	r2, r3
 8004560:	d91c      	bls.n	800459c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f043 0220 	orr.w	r2, r3, #32
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	619a      	str	r2, [r3, #24]
        }
        break;
 800456e:	e015      	b.n	800459c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	3303      	adds	r3, #3
 8004576:	089b      	lsrs	r3, r3, #2
 8004578:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800457a:	8afa      	ldrh	r2, [r7, #22]
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	b29b      	uxth	r3, r3
 8004586:	429a      	cmp	r2, r3
 8004588:	d90a      	bls.n	80045a0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	619a      	str	r2, [r3, #24]
        }
        break;
 8004596:	e003      	b.n	80045a0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004598:	bf00      	nop
 800459a:	e002      	b.n	80045a2 <USB_HC_StartXfer+0x25e>
        break;
 800459c:	bf00      	nop
 800459e:	e000      	b.n	80045a2 <USB_HC_StartXfer+0x25e>
        break;
 80045a0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	68d9      	ldr	r1, [r3, #12]
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	785a      	ldrb	r2, [r3, #1]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2000      	movs	r0, #0
 80045b2:	9000      	str	r0, [sp, #0]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff fb31 	bl	8003c1c <USB_WritePacket>
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	; 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	1ff80000 	.word	0x1ff80000

080045c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	b29b      	uxth	r3, r3
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b089      	sub	sp, #36	; 0x24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0c9b      	lsrs	r3, r3, #18
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	0fdb      	lsrs	r3, r3, #31
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b20      	cmp	r3, #32
 8004638:	d104      	bne.n	8004644 <USB_HC_Halt+0x5a>
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e0c8      	b.n	80047d6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <USB_HC_Halt+0x66>
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d163      	bne.n	8004718 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	0151      	lsls	r1, r2, #5
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	440a      	add	r2, r1
 8004666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800466a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800466e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0320 	and.w	r3, r3, #32
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 80ab 	bne.w	80047d4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d133      	bne.n	80046f2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046a8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	0151      	lsls	r1, r2, #5
 80046bc:	69fa      	ldr	r2, [r7, #28]
 80046be:	440a      	add	r2, r1
 80046c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046c8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d6:	d81d      	bhi.n	8004714 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ee:	d0ec      	beq.n	80046ca <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046f0:	e070      	b.n	80047d4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800470c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004710:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004712:	e05f      	b.n	80047d4 <USB_HC_Halt+0x1ea>
            break;
 8004714:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004716:	e05d      	b.n	80047d4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	4413      	add	r3, r2
 8004720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	440a      	add	r2, r1
 800472e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004736:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d133      	bne.n	80047b0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	440a      	add	r2, r1
 800475e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004766:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	440a      	add	r2, r1
 800477e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004782:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004786:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004794:	d81d      	bhi.n	80047d2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	4413      	add	r3, r2
 800479e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ac:	d0ec      	beq.n	8004788 <USB_HC_Halt+0x19e>
 80047ae:	e011      	b.n	80047d4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	e000      	b.n	80047d4 <USB_HC_Halt+0x1ea>
          break;
 80047d2:	bf00      	nop
    }
  }

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3724      	adds	r7, #36	; 0x24
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
	...

080047e4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80047f8:	2301      	movs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	04da      	lsls	r2, r3, #19
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <USB_DoPing+0x74>)
 8004802:	4013      	ands	r3, r2
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	440a      	add	r2, r1
 800480c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004814:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4413      	add	r3, r2
 800481e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004834:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	1ff80000 	.word	0x1ff80000

0800485c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff f911 	bl	8003a98 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004876:	2110      	movs	r1, #16
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f96b 	bl	8003b54 <USB_FlushTxFifo>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff f997 	bl	8003bbc <USB_FlushRxFifo>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004898:	2300      	movs	r3, #0
 800489a:	61bb      	str	r3, [r7, #24]
 800489c:	e01f      	b.n	80048de <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048b4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048bc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048c4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	3301      	adds	r3, #1
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b0f      	cmp	r3, #15
 80048e2:	d9dc      	bls.n	800489e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e034      	b.n	8004954 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004900:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004908:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004910:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	4413      	add	r3, r2
 800491a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800491e:	461a      	mov	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004930:	d80c      	bhi.n	800494c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004948:	d0ec      	beq.n	8004924 <USB_StopHost+0xc8>
 800494a:	e000      	b.n	800494e <USB_StopHost+0xf2>
        break;
 800494c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	3301      	adds	r3, #1
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d9c7      	bls.n	80048ea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004960:	461a      	mov	r2, r3
 8004962:	f04f 33ff 	mov.w	r3, #4294967295
 8004966:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f04f 32ff 	mov.w	r2, #4294967295
 800496e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff f880 	bl	8003a76 <USB_EnableGlobalInt>

  return ret;
 8004976:	7ffb      	ldrb	r3, [r7, #31]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004980:	b590      	push	{r4, r7, lr}
 8004982:	b08b      	sub	sp, #44	; 0x2c
 8004984:	af04      	add	r7, sp, #16
 8004986:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004992:	7919      	ldrb	r1, [r3, #4]
 8004994:	23ff      	movs	r3, #255	; 0xff
 8004996:	2201      	movs	r2, #1
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 ffe5 	bl	8005968 <USBH_FindInterface>
 800499e:	4603      	mov	r3, r0
 80049a0:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80049a2:	7dbb      	ldrb	r3, [r7, #22]
 80049a4:	2bff      	cmp	r3, #255	; 0xff
 80049a6:	d002      	beq.n	80049ae <USBH_HID_InterfaceInit+0x2e>
 80049a8:	7dbb      	ldrb	r3, [r7, #22]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d901      	bls.n	80049b2 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80049ae:	2302      	movs	r3, #2
 80049b0:	e108      	b.n	8004bc4 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 80049b2:	7dbb      	ldrb	r3, [r7, #22]
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 ffba 	bl	8005930 <USBH_SelectInterface>
 80049bc:	4603      	mov	r3, r0
 80049be:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80049c0:	7d7b      	ldrb	r3, [r7, #21]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0fc      	b.n	8004bc4 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80049d0:	2034      	movs	r0, #52	; 0x34
 80049d2:	f002 fe31 	bl	8007638 <malloc>
 80049d6:	4603      	mov	r3, r0
 80049d8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80049ea:	2302      	movs	r3, #2
 80049ec:	e0ea      	b.n	8004bc4 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80049ee:	2234      	movs	r2, #52	; 0x34
 80049f0:	2100      	movs	r1, #0
 80049f2:	6938      	ldr	r0, [r7, #16]
 80049f4:	f002 fefc 	bl	80077f0 <memset>

  HID_Handle->state = HID_ERROR;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2207      	movs	r2, #7
 80049fc:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80049fe:	7dbb      	ldrb	r3, [r7, #22]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	211a      	movs	r1, #26
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4413      	add	r3, r2
 8004a0a:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d103      	bne.n	8004a1c <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <USBH_HID_InterfaceInit+0x24c>)
 8004a18:	631a      	str	r2, [r3, #48]	; 0x30
 8004a1a:	e010      	b.n	8004a3e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004a1c:	7dbb      	ldrb	r3, [r7, #22]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	211a      	movs	r1, #26
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d103      	bne.n	8004a3a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4a66      	ldr	r2, [pc, #408]	; (8004bd0 <USBH_HID_InterfaceInit+0x250>)
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
 8004a38:	e001      	b.n	8004a3e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0c2      	b.n	8004bc4 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2200      	movs	r2, #0
 8004a42:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2200      	movs	r2, #0
 8004a48:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a4a:	7dbb      	ldrb	r3, [r7, #22]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	211a      	movs	r1, #26
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	4413      	add	r3, r2
 8004a56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a60:	7dbb      	ldrb	r3, [r7, #22]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	211a      	movs	r1, #26
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a70:	881a      	ldrh	r2, [r3, #0]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004a76:	7dbb      	ldrb	r3, [r7, #22]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	211a      	movs	r1, #26
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	4413      	add	r3, r2
 8004a82:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	8b9b      	ldrh	r3, [r3, #28]
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	d802      	bhi.n	8004a9c <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	220a      	movs	r2, #10
 8004a9a:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	211a      	movs	r1, #26
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	bf28      	it	cs
 8004ab2:	2302      	movcs	r3, #2
 8004ab4:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
 8004aba:	e07d      	b.n	8004bb8 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8004abc:	7dbb      	ldrb	r3, [r7, #22]
 8004abe:	7df9      	ldrb	r1, [r7, #23]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	3101      	adds	r1, #1
 8004ac4:	00c9      	lsls	r1, r1, #3
 8004ac6:	201a      	movs	r0, #26
 8004ac8:	fb00 f303 	mul.w	r3, r0, r3
 8004acc:	440b      	add	r3, r1
 8004ace:	4413      	add	r3, r2
 8004ad0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da35      	bge.n	8004b48 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004adc:	7dbb      	ldrb	r3, [r7, #22]
 8004ade:	7df9      	ldrb	r1, [r7, #23]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	3101      	adds	r1, #1
 8004ae4:	00c9      	lsls	r1, r1, #3
 8004ae6:	201a      	movs	r0, #26
 8004ae8:	fb00 f303 	mul.w	r3, r0, r3
 8004aec:	440b      	add	r3, r1
 8004aee:	4413      	add	r3, r2
 8004af0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004af4:	781a      	ldrb	r2, [r3, #0]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f002 fa2a 	bl	8006f5a <USBH_AllocPipe>
 8004b06:	4603      	mov	r3, r0
 8004b08:	461a      	mov	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	7859      	ldrb	r1, [r3, #1]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	7918      	ldrb	r0, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	8b12      	ldrh	r2, [r2, #24]
 8004b26:	9202      	str	r2, [sp, #8]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	9201      	str	r2, [sp, #4]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4623      	mov	r3, r4
 8004b30:	4602      	mov	r2, r0
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f002 f9e2 	bl	8006efc <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f002 fcf5 	bl	8007530 <USBH_LL_SetToggle>
 8004b46:	e034      	b.n	8004bb2 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004b48:	7dbb      	ldrb	r3, [r7, #22]
 8004b4a:	7df9      	ldrb	r1, [r7, #23]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	3101      	adds	r1, #1
 8004b50:	00c9      	lsls	r1, r1, #3
 8004b52:	201a      	movs	r0, #26
 8004b54:	fb00 f303 	mul.w	r3, r0, r3
 8004b58:	440b      	add	r3, r1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f002 f9f4 	bl	8006f5a <USBH_AllocPipe>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461a      	mov	r2, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	7819      	ldrb	r1, [r3, #0]
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	78d8      	ldrb	r0, [r3, #3]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	8b12      	ldrh	r2, [r2, #24]
 8004b92:	9202      	str	r2, [sp, #8]
 8004b94:	2203      	movs	r2, #3
 8004b96:	9201      	str	r2, [sp, #4]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f002 f9ac 	bl	8006efc <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4619      	mov	r1, r3
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f002 fcbf 	bl	8007530 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	75fb      	strb	r3, [r7, #23]
 8004bb8:	7dfa      	ldrb	r2, [r7, #23]
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f4ff af7d 	bcc.w	8004abc <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd90      	pop	{r4, r7, pc}
 8004bcc:	080052d1 	.word	0x080052d1
 8004bd0:	08005519 	.word	0x08005519

08004bd4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	785b      	ldrb	r3, [r3, #1]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00e      	beq.n	8004c0c <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f002 f9a0 	bl	8006f3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f002 f9cb 	bl	8006f9c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00e      	beq.n	8004c32 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f002 f98d 	bl	8006f3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f002 f9b8 	bl	8006f9c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fcfe 	bl	8007648 <free>
    phost->pActiveClass->pData = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	795b      	ldrb	r3, [r3, #5]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d860      	bhi.n	8004d44 <USBH_HID_ClassRequest+0xe4>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <USBH_HID_ClassRequest+0x28>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004ca1 	.word	0x08004ca1
 8004c8c:	08004d45 	.word	0x08004d45
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ca1 	.word	0x08004ca1
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004d0f 	.word	0x08004d0f
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	331c      	adds	r3, #28
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f000 f9cd 	bl	800504c <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2202      	movs	r2, #2
 8004cb6:	715a      	strb	r2, [r3, #5]

      break;
 8004cb8:	e04b      	b.n	8004d52 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f930 	bl	8004f26 <USBH_HID_GetHIDReportDescriptor>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004cca:	7bbb      	ldrb	r3, [r7, #14]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8004cd6:	e037      	b.n	8004d48 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004cd8:	7bbb      	ldrb	r3, [r7, #14]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d134      	bne.n	8004d48 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce2:	e031      	b.n	8004d48 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f935 	bl	8004f58 <USBH_HID_SetIdle>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8004cf2:	7bbb      	ldrb	r3, [r7, #14]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d103      	bne.n	8004d00 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2205      	movs	r2, #5
 8004cfc:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8004cfe:	e025      	b.n	8004d4c <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d00:	7bbb      	ldrb	r3, [r7, #14]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d122      	bne.n	8004d4c <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2205      	movs	r2, #5
 8004d0a:	715a      	strb	r2, [r3, #5]
      break;
 8004d0c:	e01e      	b.n	8004d4c <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004d0e:	2100      	movs	r1, #0
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f975 	bl	8005000 <USBH_HID_SetProtocol>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8004d1a:	7bbb      	ldrb	r3, [r7, #14]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2201      	movs	r2, #1
 8004d24:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
        status = USBH_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8004d36:	e00b      	b.n	8004d50 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d38:	7bbb      	ldrb	r3, [r7, #14]
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d108      	bne.n	8004d50 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8004d3e:	2302      	movs	r3, #2
 8004d40:	73fb      	strb	r3, [r7, #15]
      break;
 8004d42:	e005      	b.n	8004d50 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8004d44:	bf00      	nop
 8004d46:	e004      	b.n	8004d52 <USBH_HID_ClassRequest+0xf2>
      break;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <USBH_HID_ClassRequest+0xf2>
      break;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <USBH_HID_ClassRequest+0xf2>
      break;
 8004d50:	bf00      	nop
  }

  return status;
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d6e:	69db      	ldr	r3, [r3, #28]
 8004d70:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	789b      	ldrb	r3, [r3, #2]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	f200 80a9 	bhi.w	8004ece <USBH_HID_Process+0x172>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <USBH_HID_Process+0x28>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004da1 	.word	0x08004da1
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004ecf 	.word	0x08004ecf
 8004d90:	08004ecf 	.word	0x08004ecf
 8004d94:	08004e21 	.word	0x08004e21
 8004d98:	08004e0b 	.word	0x08004e0b
 8004d9c:	08004e4f 	.word	0x08004e4f
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2201      	movs	r2, #1
 8004dac:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004dae:	e093      	b.n	8004ed8 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	8b1b      	ldrh	r3, [r3, #24]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f8f0 	bl	8004fa8 <USBH_HID_GetReport>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2205      	movs	r2, #5
 8004dd6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004dd8:	e07e      	b.n	8004ed8 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d105      	bne.n	8004dec <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2201      	movs	r2, #1
 8004de4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dea:	e075      	b.n	8004ed8 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004dec:	7dfb      	ldrb	r3, [r7, #23]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d105      	bne.n	8004dfe <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2205      	movs	r2, #5
 8004df6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfc:	e06c      	b.n	8004ed8 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	2207      	movs	r2, #7
 8004e02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004e04:	2302      	movs	r3, #2
 8004e06:	75fb      	strb	r3, [r7, #23]
      break;
 8004e08:	e066      	b.n	8004ed8 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8004e1e:	e058      	b.n	8004ed2 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	785b      	ldrb	r3, [r3, #1]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f002 f845 	bl	8006ebe <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2206      	movs	r2, #6
 8004e38:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8004e4c:	e044      	b.n	8004ed8 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f002 fb2f 	bl	80074b8 <USBH_LL_GetURBState>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d120      	bne.n	8004ea2 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f002 fa94 	bl	8007394 <USBH_LL_GetLastXferSize>
 8004e6c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d12e      	bne.n	8004ed6 <USBH_HID_Process+0x17a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d02b      	beq.n	8004ed6 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f103 0008 	add.w	r0, r3, #8
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	6959      	ldr	r1, [r3, #20]
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	8b1b      	ldrh	r3, [r3, #24]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f000 f9ca 	bl	8005226 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fb fb6e 	bl	800057c <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8004ea0:	e019      	b.n	8004ed6 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f002 fb05 	bl	80074b8 <USBH_LL_GetURBState>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b05      	cmp	r3, #5
 8004eb2:	d110      	bne.n	8004ed6 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	7e9b      	ldrb	r3, [r3, #26]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 fb21 	bl	8006502 <USBH_ClrFeature>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	2204      	movs	r2, #4
 8004eca:	709a      	strb	r2, [r3, #2]
      break;
 8004ecc:	e003      	b.n	8004ed6 <USBH_HID_Process+0x17a>

    default:
      break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <USBH_HID_Process+0x17c>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <USBH_HID_Process+0x17c>
      break;
 8004ed6:	bf00      	nop
  }

  return status;
 8004ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3718      	adds	r7, #24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop

08004ee4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	789b      	ldrb	r3, [r3, #2]
 8004efa:	2b06      	cmp	r3, #6
 8004efc:	d10c      	bne.n	8004f18 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	8b92      	ldrh	r2, [r2, #28]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d302      	bcc.n	8004f18 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2204      	movs	r2, #4
 8004f16:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af02      	add	r7, sp, #8
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004f42:	2101      	movs	r1, #1
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 fa3c 	bl	80063c2 <USBH_GetDescriptor>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
 8004f64:	4613      	mov	r3, r2
 8004f66:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2221      	movs	r2, #33	; 0x21
 8004f6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	220a      	movs	r2, #10
 8004f72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	78bb      	ldrb	r3, [r7, #2]
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 fd81 	bl	8006aa0 <USBH_CtlReq>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	607b      	str	r3, [r7, #4]
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	72fb      	strb	r3, [r7, #11]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22a1      	movs	r2, #161	; 0xa1
 8004fbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	7abb      	ldrb	r3, [r7, #10]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8004fe0:	7e3b      	ldrb	r3, [r7, #24]
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8004fe8:	7e3b      	ldrb	r3, [r7, #24]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f001 fd55 	bl	8006aa0 <USBH_CtlReq>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2221      	movs	r2, #33	; 0x21
 8005010:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	220b      	movs	r2, #11
 8005016:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	825a      	strh	r2, [r3, #18]
 8005024:	e002      	b.n	800502c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8005038:	2200      	movs	r2, #0
 800503a:	2100      	movs	r1, #0
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f001 fd2f 	bl	8006aa0 <USBH_CtlReq>
 8005042:	4603      	mov	r3, r0

}
 8005044:	4618      	mov	r0, r3
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3302      	adds	r3, #2
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	b29a      	uxth	r2, r3
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3303      	adds	r3, #3
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29b      	uxth	r3, r3
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	b29b      	uxth	r3, r3
 800506e:	4313      	orrs	r3, r2
 8005070:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8005072:	897b      	ldrh	r3, [r7, #10]
 8005074:	2b09      	cmp	r3, #9
 8005076:	d943      	bls.n	8005100 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8005078:	2309      	movs	r3, #9
 800507a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800507c:	e03c      	b.n	80050f8 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800507e:	f107 0308 	add.w	r3, r7, #8
 8005082:	4619      	mov	r1, r3
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f001 fcf0 	bl	8006a6a <USBH_GetNextDesc>
 800508a:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b21      	cmp	r3, #33	; 0x21
 8005092:	d131      	bne.n	80050f8 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	781a      	ldrb	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	785a      	ldrb	r2, [r3, #1]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3302      	adds	r3, #2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	3303      	adds	r3, #3
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	4313      	orrs	r3, r2
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	791a      	ldrb	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	795a      	ldrb	r2, [r3, #5]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	799a      	ldrb	r2, [r3, #6]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3307      	adds	r3, #7
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3308      	adds	r3, #8
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	811a      	strh	r2, [r3, #8]
        break;
 80050f4:	bf00      	nop
      }
    }
  }
}
 80050f6:	e003      	b.n	8005100 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80050f8:	893b      	ldrh	r3, [r7, #8]
 80050fa:	897a      	ldrh	r2, [r7, #10]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d8be      	bhi.n	800507e <USBH_HID_ParseHIDDesc+0x32>
}
 8005100:	bf00      	nop
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005110:	23ff      	movs	r3, #255	; 0xff
 8005112:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b0b      	cmp	r3, #11
 800511c:	d117      	bne.n	800514e <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005124:	4619      	mov	r1, r3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	231a      	movs	r3, #26
 800512a:	fb01 f303 	mul.w	r3, r1, r3
 800512e:	4413      	add	r3, r2
 8005130:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d102      	bne.n	8005144 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800513e:	2302      	movs	r3, #2
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e004      	b.n	800514e <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8005144:	7bbb      	ldrb	r3, [r7, #14]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d101      	bne.n	800514e <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800514a:	2301      	movs	r3, #1
 800514c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	601a      	str	r2, [r3, #0]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	7a9b      	ldrb	r3, [r3, #10]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d131      	bne.n	8005212 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	82fb      	strh	r3, [r7, #22]
 80051b8:	e027      	b.n	800520a <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88da      	ldrh	r2, [r3, #6]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	889b      	ldrh	r3, [r3, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d019      	beq.n	80051fa <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	88d2      	ldrh	r2, [r2, #6]
 80051ce:	441a      	add	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1c59      	adds	r1, r3, #1
 80051d4:	6139      	str	r1, [r7, #16]
 80051d6:	7812      	ldrb	r2, [r2, #0]
 80051d8:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88db      	ldrh	r3, [r3, #6]
 80051de:	3301      	adds	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	88da      	ldrh	r2, [r3, #6]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	891b      	ldrh	r3, [r3, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d108      	bne.n	8005204 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	80da      	strh	r2, [r3, #6]
 80051f8:	e004      	b.n	8005204 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	729a      	strb	r2, [r3, #10]
        return i;
 8005200:	8afb      	ldrh	r3, [r7, #22]
 8005202:	e00a      	b.n	800521a <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005204:	8afb      	ldrh	r3, [r7, #22]
 8005206:	3301      	adds	r3, #1
 8005208:	82fb      	strh	r3, [r7, #22]
 800520a:	8afa      	ldrh	r2, [r7, #22]
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3d3      	bcc.n	80051ba <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005218:	88fb      	ldrh	r3, [r7, #6]
}
 800521a:	4618      	mov	r0, r3
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	4613      	mov	r3, r2
 8005232:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	7a9b      	ldrb	r3, [r3, #10]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d13c      	bne.n	80052ba <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005246:	2300      	movs	r3, #0
 8005248:	82fb      	strh	r3, [r7, #22]
 800524a:	e032      	b.n	80052b2 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	889b      	ldrh	r3, [r3, #4]
 8005250:	3301      	adds	r3, #1
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	88d2      	ldrh	r2, [r2, #6]
 8005256:	4293      	cmp	r3, r2
 8005258:	d00a      	beq.n	8005270 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	889b      	ldrh	r3, [r3, #4]
 800525e:	3301      	adds	r3, #1
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88db      	ldrh	r3, [r3, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	729a      	strb	r2, [r3, #10]
        return i;
 8005276:	8afb      	ldrh	r3, [r7, #22]
 8005278:	e023      	b.n	80052c2 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	613a      	str	r2, [r7, #16]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	68f9      	ldr	r1, [r7, #12]
 8005286:	8889      	ldrh	r1, [r1, #4]
 8005288:	440a      	add	r2, r1
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	7013      	strb	r3, [r2, #0]
        f->head++;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	889b      	ldrh	r3, [r3, #4]
 8005292:	3301      	adds	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	889a      	ldrh	r2, [r3, #4]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	891b      	ldrh	r3, [r3, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d102      	bne.n	80052ac <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80052ac:	8afb      	ldrh	r3, [r7, #22]
 80052ae:	3301      	adds	r3, #1
 80052b0:	82fb      	strh	r3, [r7, #22]
 80052b2:	8afa      	ldrh	r2, [r7, #22]
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3c8      	bcc.n	800524c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80052c0:	88fb      	ldrh	r3, [r7, #6]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
	...

080052d0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80052e8:	4b20      	ldr	r3, [pc, #128]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80052ee:	4b1f      	ldr	r3, [pc, #124]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 80052fa:	4b1c      	ldr	r3, [pc, #112]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8005300:	4b1a      	ldr	r3, [pc, #104]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 8005302:	2200      	movs	r2, #0
 8005304:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 8005306:	4b19      	ldr	r3, [pc, #100]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 8005308:	2200      	movs	r2, #0
 800530a:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800530c:	4b17      	ldr	r3, [pc, #92]	; (800536c <USBH_HID_KeybdInit+0x9c>)
 800530e:	2200      	movs	r2, #0
 8005310:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	e00c      	b.n	8005332 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8005318:	4a15      	ldr	r2, [pc, #84]	; (8005370 <USBH_HID_KeybdInit+0xa0>)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2100      	movs	r1, #0
 800531e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005322:	4a14      	ldr	r2, [pc, #80]	; (8005374 <USBH_HID_KeybdInit+0xa4>)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2100      	movs	r1, #0
 8005328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d9ef      	bls.n	8005318 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	8b1b      	ldrh	r3, [r3, #24]
 800533c:	2b08      	cmp	r3, #8
 800533e:	d902      	bls.n	8005346 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2208      	movs	r2, #8
 8005344:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a0a      	ldr	r2, [pc, #40]	; (8005374 <USBH_HID_KeybdInit+0xa4>)
 800534a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f103 0008 	add.w	r0, r3, #8
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005358:	2250      	movs	r2, #80	; 0x50
 800535a:	4619      	mov	r1, r3
 800535c:	f7ff fefe 	bl	800515c <USBH_HID_FifoInit>

  return USBH_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000148 	.word	0x20000148
 8005370:	20000160 	.word	0x20000160
 8005374:	20000158 	.word	0x20000158

08005378 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f80d 	bl	80053a0 <USBH_HID_KeybdDecode>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <USBH_HID_GetKeybdInfo+0x24>)
 800538e:	e000      	b.n	8005392 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 8005390:	2300      	movs	r3, #0
  }
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	20000148 	.word	0x20000148

080053a0 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	8b1b      	ldrh	r3, [r3, #24]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 80053ba:	2302      	movs	r3, #2
 80053bc:	e066      	b.n	800548c <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f103 0008 	add.w	r0, r3, #8
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	8b1b      	ldrh	r3, [r3, #24]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4932      	ldr	r1, [pc, #200]	; (8005494 <USBH_HID_KeybdDecode+0xf4>)
 80053cc:	f7ff fee2 	bl	8005194 <USBH_HID_FifoRead>
 80053d0:	4603      	mov	r3, r0
 80053d2:	461a      	mov	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	8b1b      	ldrh	r3, [r3, #24]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d156      	bne.n	800548a <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 80053dc:	2100      	movs	r1, #0
 80053de:	482e      	ldr	r0, [pc, #184]	; (8005498 <USBH_HID_KeybdDecode+0xf8>)
 80053e0:	f000 f954 	bl	800568c <HID_ReadItem>
 80053e4:	4603      	mov	r3, r0
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b2c      	ldr	r3, [pc, #176]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 80053ea:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 80053ec:	2100      	movs	r1, #0
 80053ee:	482c      	ldr	r0, [pc, #176]	; (80054a0 <USBH_HID_KeybdDecode+0x100>)
 80053f0:	f000 f94c 	bl	800568c <HID_ReadItem>
 80053f4:	4603      	mov	r3, r0
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	4b28      	ldr	r3, [pc, #160]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 80053fa:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 80053fc:	2100      	movs	r1, #0
 80053fe:	4829      	ldr	r0, [pc, #164]	; (80054a4 <USBH_HID_KeybdDecode+0x104>)
 8005400:	f000 f944 	bl	800568c <HID_ReadItem>
 8005404:	4603      	mov	r3, r0
 8005406:	b2da      	uxtb	r2, r3
 8005408:	4b24      	ldr	r3, [pc, #144]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800540a:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800540c:	2100      	movs	r1, #0
 800540e:	4826      	ldr	r0, [pc, #152]	; (80054a8 <USBH_HID_KeybdDecode+0x108>)
 8005410:	f000 f93c 	bl	800568c <HID_ReadItem>
 8005414:	4603      	mov	r3, r0
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800541a:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800541c:	2100      	movs	r1, #0
 800541e:	4823      	ldr	r0, [pc, #140]	; (80054ac <USBH_HID_KeybdDecode+0x10c>)
 8005420:	f000 f934 	bl	800568c <HID_ReadItem>
 8005424:	4603      	mov	r3, r0
 8005426:	b2da      	uxtb	r2, r3
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800542a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800542c:	2100      	movs	r1, #0
 800542e:	4820      	ldr	r0, [pc, #128]	; (80054b0 <USBH_HID_KeybdDecode+0x110>)
 8005430:	f000 f92c 	bl	800568c <HID_ReadItem>
 8005434:	4603      	mov	r3, r0
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b18      	ldr	r3, [pc, #96]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800543a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800543c:	2100      	movs	r1, #0
 800543e:	481d      	ldr	r0, [pc, #116]	; (80054b4 <USBH_HID_KeybdDecode+0x114>)
 8005440:	f000 f924 	bl	800568c <HID_ReadItem>
 8005444:	4603      	mov	r3, r0
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800544a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800544c:	2100      	movs	r1, #0
 800544e:	481a      	ldr	r0, [pc, #104]	; (80054b8 <USBH_HID_KeybdDecode+0x118>)
 8005450:	f000 f91c 	bl	800568c <HID_ReadItem>
 8005454:	4603      	mov	r3, r0
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 800545a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	e00e      	b.n	8005480 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	4619      	mov	r1, r3
 8005466:	4815      	ldr	r0, [pc, #84]	; (80054bc <USBH_HID_KeybdDecode+0x11c>)
 8005468:	f000 f910 	bl	800568c <HID_ReadItem>
 800546c:	4602      	mov	r2, r0
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	b2d1      	uxtb	r1, r2
 8005472:	4a0a      	ldr	r2, [pc, #40]	; (800549c <USBH_HID_KeybdDecode+0xfc>)
 8005474:	4413      	add	r3, r2
 8005476:	460a      	mov	r2, r1
 8005478:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	3301      	adds	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
 8005480:	7bfb      	ldrb	r3, [r7, #15]
 8005482:	2b05      	cmp	r3, #5
 8005484:	d9ed      	bls.n	8005462 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 8005486:	2300      	movs	r3, #0
 8005488:	e000      	b.n	800548c <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800548a:	2302      	movs	r3, #2
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000160 	.word	0x20000160
 8005498:	08008028 	.word	0x08008028
 800549c:	20000148 	.word	0x20000148
 80054a0:	08008048 	.word	0x08008048
 80054a4:	08008068 	.word	0x08008068
 80054a8:	08008088 	.word	0x08008088
 80054ac:	080080a8 	.word	0x080080a8
 80054b0:	080080c8 	.word	0x080080c8
 80054b4:	080080e8 	.word	0x080080e8
 80054b8:	08008108 	.word	0x08008108
 80054bc:	08008128 	.word	0x08008128

080054c0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	789b      	ldrb	r3, [r3, #2]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <USBH_HID_GetASCIICode+0x18>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	799b      	ldrb	r3, [r3, #6]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	7a5b      	ldrb	r3, [r3, #9]
 80054dc:	461a      	mov	r2, r3
 80054de:	4b0b      	ldr	r3, [pc, #44]	; (800550c <USBH_HID_GetASCIICode+0x4c>)
 80054e0:	5c9b      	ldrb	r3, [r3, r2]
 80054e2:	461a      	mov	r2, r3
 80054e4:	4b0a      	ldr	r3, [pc, #40]	; (8005510 <USBH_HID_GetASCIICode+0x50>)
 80054e6:	5c9b      	ldrb	r3, [r3, r2]
 80054e8:	73fb      	strb	r3, [r7, #15]
 80054ea:	e008      	b.n	80054fe <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7a5b      	ldrb	r3, [r3, #9]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <USBH_HID_GetASCIICode+0x4c>)
 80054f4:	5c9b      	ldrb	r3, [r3, r2]
 80054f6:	461a      	mov	r2, r3
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <USBH_HID_GetASCIICode+0x54>)
 80054fa:	5c9b      	ldrb	r3, [r3, r2]
 80054fc:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	08008250 	.word	0x08008250
 8005510:	080081cc 	.word	0x080081cc
 8005514:	08008148 	.word	0x08008148

08005518 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800552a:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <USBH_HID_MouseInit+0x88>)
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005530:	4b1b      	ldr	r3, [pc, #108]	; (80055a0 <USBH_HID_MouseInit+0x88>)
 8005532:	2200      	movs	r2, #0
 8005534:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005536:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <USBH_HID_MouseInit+0x88>)
 8005538:	2200      	movs	r2, #0
 800553a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800553c:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <USBH_HID_MouseInit+0x88>)
 800553e:	2200      	movs	r2, #0
 8005540:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <USBH_HID_MouseInit+0x88>)
 8005544:	2200      	movs	r2, #0
 8005546:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e00c      	b.n	8005568 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800554e:	4a15      	ldr	r2, [pc, #84]	; (80055a4 <USBH_HID_MouseInit+0x8c>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2100      	movs	r1, #0
 8005554:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <USBH_HID_MouseInit+0x90>)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2100      	movs	r1, #0
 800555e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3301      	adds	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d9ef      	bls.n	800554e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	8b1b      	ldrh	r3, [r3, #24]
 8005572:	2b08      	cmp	r3, #8
 8005574:	d902      	bls.n	800557c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2208      	movs	r2, #8
 800557a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a0a      	ldr	r2, [pc, #40]	; (80055a8 <USBH_HID_MouseInit+0x90>)
 8005580:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f103 0008 	add.w	r0, r3, #8
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800558e:	2250      	movs	r2, #80	; 0x50
 8005590:	4619      	mov	r1, r3
 8005592:	f7ff fde3 	bl	800515c <USBH_HID_FifoInit>

  return USBH_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20000168 	.word	0x20000168
 80055a4:	20000170 	.word	0x20000170
 80055a8:	20000178 	.word	0x20000178

080055ac <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f80d 	bl	80055d4 <USBH_HID_MouseDecode>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <USBH_HID_GetMouseInfo+0x24>)
 80055c2:	e000      	b.n	80055c6 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 80055c4:	2300      	movs	r3, #0
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000168 	.word	0x20000168

080055d4 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	8b1b      	ldrh	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 80055ee:	2302      	movs	r3, #2
 80055f0:	e039      	b.n	8005666 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f103 0008 	add.w	r0, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8b1b      	ldrh	r3, [r3, #24]
 80055fc:	461a      	mov	r2, r3
 80055fe:	491c      	ldr	r1, [pc, #112]	; (8005670 <USBH_HID_MouseDecode+0x9c>)
 8005600:	f7ff fdc8 	bl	8005194 <USBH_HID_FifoRead>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8b1b      	ldrh	r3, [r3, #24]
 800560c:	429a      	cmp	r2, r3
 800560e:	d129      	bne.n	8005664 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8005610:	2100      	movs	r1, #0
 8005612:	4818      	ldr	r0, [pc, #96]	; (8005674 <USBH_HID_MouseDecode+0xa0>)
 8005614:	f000 f83a 	bl	800568c <HID_ReadItem>
 8005618:	4603      	mov	r3, r0
 800561a:	b2da      	uxtb	r2, r3
 800561c:	4b16      	ldr	r3, [pc, #88]	; (8005678 <USBH_HID_MouseDecode+0xa4>)
 800561e:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8005620:	2100      	movs	r1, #0
 8005622:	4816      	ldr	r0, [pc, #88]	; (800567c <USBH_HID_MouseDecode+0xa8>)
 8005624:	f000 f832 	bl	800568c <HID_ReadItem>
 8005628:	4603      	mov	r3, r0
 800562a:	b2da      	uxtb	r2, r3
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <USBH_HID_MouseDecode+0xa4>)
 800562e:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8005630:	2100      	movs	r1, #0
 8005632:	4813      	ldr	r0, [pc, #76]	; (8005680 <USBH_HID_MouseDecode+0xac>)
 8005634:	f000 f82a 	bl	800568c <HID_ReadItem>
 8005638:	4603      	mov	r3, r0
 800563a:	b2da      	uxtb	r2, r3
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <USBH_HID_MouseDecode+0xa4>)
 800563e:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8005640:	2100      	movs	r1, #0
 8005642:	4810      	ldr	r0, [pc, #64]	; (8005684 <USBH_HID_MouseDecode+0xb0>)
 8005644:	f000 f822 	bl	800568c <HID_ReadItem>
 8005648:	4603      	mov	r3, r0
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b0a      	ldr	r3, [pc, #40]	; (8005678 <USBH_HID_MouseDecode+0xa4>)
 800564e:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8005650:	2100      	movs	r1, #0
 8005652:	480d      	ldr	r0, [pc, #52]	; (8005688 <USBH_HID_MouseDecode+0xb4>)
 8005654:	f000 f81a 	bl	800568c <HID_ReadItem>
 8005658:	4603      	mov	r3, r0
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <USBH_HID_MouseDecode+0xa4>)
 800565e:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8005664:	2302      	movs	r3, #2
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	20000170 	.word	0x20000170
 8005674:	08008398 	.word	0x08008398
 8005678:	20000168 	.word	0x20000168
 800567c:	080083b8 	.word	0x080083b8
 8005680:	08008338 	.word	0x08008338
 8005684:	08008358 	.word	0x08008358
 8005688:	08008378 	.word	0x08008378

0800568c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800568c:	b480      	push	{r7}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7a1b      	ldrb	r3, [r3, #8]
 80056aa:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7a5b      	ldrb	r3, [r3, #9]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	7a5b      	ldrb	r3, [r3, #9]
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d301      	bcc.n	80056c2 <HID_ReadItem+0x36>
    {
      return (0U);
 80056be:	2300      	movs	r3, #0
 80056c0:	e078      	b.n	80057b4 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6852      	ldr	r2, [r2, #4]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	08db      	lsrs	r3, r3, #3
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e00a      	b.n	8005706 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	461a      	mov	r2, r3
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	3301      	adds	r3, #1
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	2b00      	cmp	r3, #0
 8005710:	d004      	beq.n	800571c <HID_ReadItem+0x90>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	08db      	lsrs	r3, r3, #3
 8005718:	3301      	adds	r3, #1
 800571a:	e002      	b.n	8005722 <HID_ReadItem+0x96>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	08db      	lsrs	r3, r3, #3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4293      	cmp	r3, r2
 8005726:	d8e3      	bhi.n	80056f0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	40da      	lsrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f04f 31ff 	mov.w	r1, #4294967295
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	43db      	mvns	r3, r3
 800573c:	4013      	ands	r3, r2
 800573e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	69fa      	ldr	r2, [r7, #28]
 8005746:	429a      	cmp	r2, r3
 8005748:	d304      	bcc.n	8005754 <HID_ReadItem+0xc8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	429a      	cmp	r2, r3
 8005752:	d901      	bls.n	8005758 <HID_ReadItem+0xcc>
  {
    return (0U);
 8005754:	2300      	movs	r3, #0
 8005756:	e02d      	b.n	80057b4 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7a9b      	ldrb	r3, [r3, #10]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01e      	beq.n	800579e <HID_ReadItem+0x112>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	3b01      	subs	r3, #1
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d014      	beq.n	800579e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	fa02 f303 	lsl.w	r3, r2, r3
 800577e:	425b      	negs	r3, r3
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	4313      	orrs	r3, r2
 8005784:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	e010      	b.n	80057b4 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	e00a      	b.n	80057b4 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d101      	bne.n	80057aa <HID_ReadItem+0x11e>
    {
      return (val);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	e004      	b.n	80057b4 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3724      	adds	r7, #36	; 0x24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4613      	mov	r3, r2
 80057cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80057d4:	2302      	movs	r3, #2
 80057d6:	e029      	b.n	800582c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	79fa      	ldrb	r2, [r7, #7]
 80057dc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f000 f81f 	bl	8005834 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f001 fd01 	bl	800722c <USBH_LL_Init>

  return USBH_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e009      	b.n	800585a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	33e0      	adds	r3, #224	; 0xe0
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	2200      	movs	r2, #0
 8005852:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b0f      	cmp	r3, #15
 800585e:	d9f2      	bls.n	8005846 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e009      	b.n	800587a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005880:	d3f1      	bcc.n	8005866 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d016      	beq.n	800591e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10e      	bne.n	8005918 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005900:	1c59      	adds	r1, r3, #1
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	33de      	adds	r3, #222	; 0xde
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
 8005916:	e004      	b.n	8005922 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005918:	2302      	movs	r3, #2
 800591a:	73fb      	strb	r3, [r7, #15]
 800591c:	e001      	b.n	8005922 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800591e:	2302      	movs	r3, #2
 8005920:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005922:	7bfb      	ldrb	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	429a      	cmp	r2, r3
 800594a:	d204      	bcs.n	8005956 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005954:	e001      	b.n	800595a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005956:	2302      	movs	r3, #2
 8005958:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	4608      	mov	r0, r1
 8005972:	4611      	mov	r1, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4603      	mov	r3, r0
 8005978:	70fb      	strb	r3, [r7, #3]
 800597a:	460b      	mov	r3, r1
 800597c:	70bb      	strb	r3, [r7, #2]
 800597e:	4613      	mov	r3, r2
 8005980:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005990:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005992:	e025      	b.n	80059e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	221a      	movs	r2, #26
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	3308      	adds	r3, #8
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	3302      	adds	r3, #2
 80059a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	795b      	ldrb	r3, [r3, #5]
 80059aa:	78fa      	ldrb	r2, [r7, #3]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d002      	beq.n	80059b6 <USBH_FindInterface+0x4e>
 80059b0:	78fb      	ldrb	r3, [r7, #3]
 80059b2:	2bff      	cmp	r3, #255	; 0xff
 80059b4:	d111      	bne.n	80059da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80059ba:	78ba      	ldrb	r2, [r7, #2]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d002      	beq.n	80059c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80059c0:	78bb      	ldrb	r3, [r7, #2]
 80059c2:	2bff      	cmp	r3, #255	; 0xff
 80059c4:	d109      	bne.n	80059da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80059ca:	787a      	ldrb	r2, [r7, #1]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d002      	beq.n	80059d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80059d0:	787b      	ldrb	r3, [r7, #1]
 80059d2:	2bff      	cmp	r3, #255	; 0xff
 80059d4:	d101      	bne.n	80059da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	e006      	b.n	80059e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80059da:	7dfb      	ldrb	r3, [r7, #23]
 80059dc:	3301      	adds	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d9d6      	bls.n	8005994 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80059e6:	23ff      	movs	r3, #255	; 0xff
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	371c      	adds	r7, #28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 fc51 	bl	80072a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005a02:	2101      	movs	r1, #1
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f001 fd6b 	bl	80074e0 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af04      	add	r7, sp, #16
 8005a1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d102      	bne.n	8005a36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2203      	movs	r2, #3
 8005a34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b0b      	cmp	r3, #11
 8005a3e:	f200 81be 	bhi.w	8005dbe <USBH_Process+0x3aa>
 8005a42:	a201      	add	r2, pc, #4	; (adr r2, 8005a48 <USBH_Process+0x34>)
 8005a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a48:	08005a79 	.word	0x08005a79
 8005a4c:	08005aab 	.word	0x08005aab
 8005a50:	08005b13 	.word	0x08005b13
 8005a54:	08005d59 	.word	0x08005d59
 8005a58:	08005dbf 	.word	0x08005dbf
 8005a5c:	08005bb7 	.word	0x08005bb7
 8005a60:	08005cff 	.word	0x08005cff
 8005a64:	08005bed 	.word	0x08005bed
 8005a68:	08005c0d 	.word	0x08005c0d
 8005a6c:	08005c2d 	.word	0x08005c2d
 8005a70:	08005c71 	.word	0x08005c71
 8005a74:	08005d41 	.word	0x08005d41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 819e 	beq.w	8005dc2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005a8c:	20c8      	movs	r0, #200	; 0xc8
 8005a8e:	f001 fd7f 	bl	8007590 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fc63 	bl	800735e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005aa8:	e18b      	b.n	8005dc2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d107      	bne.n	8005ac4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005ac2:	e18d      	b.n	8005de0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ace:	d914      	bls.n	8005afa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	d903      	bls.n	8005af2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	220d      	movs	r2, #13
 8005aee:	701a      	strb	r2, [r3, #0]
      break;
 8005af0:	e176      	b.n	8005de0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	701a      	strb	r2, [r3, #0]
      break;
 8005af8:	e172      	b.n	8005de0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b00:	f103 020a 	add.w	r2, r3, #10
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005b0a:	200a      	movs	r0, #10
 8005b0c:	f001 fd40 	bl	8007590 <USBH_Delay>
      break;
 8005b10:	e166      	b.n	8005de0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b22:	2104      	movs	r1, #4
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005b28:	2064      	movs	r0, #100	; 0x64
 8005b2a:	f001 fd31 	bl	8007590 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fbee 	bl	8007310 <USBH_LL_GetSpeed>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2205      	movs	r2, #5
 8005b42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005b44:	2100      	movs	r1, #0
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fa07 	bl	8006f5a <USBH_AllocPipe>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005b54:	2180      	movs	r1, #128	; 0x80
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f9ff 	bl	8006f5a <USBH_AllocPipe>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	7919      	ldrb	r1, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	9202      	str	r2, [sp, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	9201      	str	r2, [sp, #4]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	4603      	mov	r3, r0
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 f9b8 	bl	8006efc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	7959      	ldrb	r1, [r3, #5]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ba0:	b292      	uxth	r2, r2
 8005ba2:	9202      	str	r2, [sp, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	9201      	str	r2, [sp, #4]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4603      	mov	r3, r0
 8005bac:	2200      	movs	r2, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 f9a4 	bl	8006efc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005bb4:	e114      	b.n	8005de0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f918 	bl	8005dec <USBH_HandleEnum>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f040 80fe 	bne.w	8005dc6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d103      	bne.n	8005be4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2208      	movs	r2, #8
 8005be0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005be2:	e0f0      	b.n	8005dc6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2207      	movs	r2, #7
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e0ec      	b.n	8005dc6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 80e9 	beq.w	8005dca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bfe:	2101      	movs	r1, #1
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2208      	movs	r2, #8
 8005c08:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005c0a:	e0de      	b.n	8005dca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fc2c 	bl	8006474 <USBH_SetCfg>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f040 80d5 	bne.w	8005dce <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2209      	movs	r2, #9
 8005c28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c2a:	e0d0      	b.n	8005dce <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d016      	beq.n	8005c68 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fc3c 	bl	80064ba <USBH_SetFeature>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	220a      	movs	r2, #10
 8005c52:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005c54:	e0bd      	b.n	8005dd2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	f040 80b9 	bne.w	8005dd2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	220a      	movs	r2, #10
 8005c64:	701a      	strb	r2, [r3, #0]
      break;
 8005c66:	e0b4      	b.n	8005dd2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	220a      	movs	r2, #10
 8005c6c:	701a      	strb	r2, [r3, #0]
      break;
 8005c6e:	e0b0      	b.n	8005dd2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80ad 	beq.w	8005dd6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e016      	b.n	8005cb8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005c8a:	7bfa      	ldrb	r2, [r7, #15]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	32de      	adds	r2, #222	; 0xde
 8005c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c94:	791a      	ldrb	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d108      	bne.n	8005cb2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005ca0:	7bfa      	ldrb	r2, [r7, #15]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	32de      	adds	r2, #222	; 0xde
 8005ca6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005cb0:	e005      	b.n	8005cbe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0e5      	beq.n	8005c8a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d016      	beq.n	8005cf6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2206      	movs	r2, #6
 8005cde:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ce6:	2103      	movs	r1, #3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005cec:	e073      	b.n	8005dd6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	220d      	movs	r2, #13
 8005cf2:	701a      	strb	r2, [r3, #0]
      break;
 8005cf4:	e06f      	b.n	8005dd6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	220d      	movs	r2, #13
 8005cfa:	701a      	strb	r2, [r3, #0]
      break;
 8005cfc:	e06b      	b.n	8005dd6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d017      	beq.n	8005d38 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	4798      	blx	r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	220b      	movs	r2, #11
 8005d24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d26:	e058      	b.n	8005dda <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d154      	bne.n	8005dda <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	220d      	movs	r2, #13
 8005d34:	701a      	strb	r2, [r3, #0]
      break;
 8005d36:	e050      	b.n	8005dda <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	220d      	movs	r2, #13
 8005d3c:	701a      	strb	r2, [r3, #0]
      break;
 8005d3e:	e04c      	b.n	8005dda <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d049      	beq.n	8005dde <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4798      	blx	r3
      }
      break;
 8005d56:	e042      	b.n	8005dde <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fd67 	bl	8005834 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d005      	beq.n	8005d9a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d94:	2105      	movs	r1, #5
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d107      	bne.n	8005db6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fe20 	bl	80059f4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005db4:	e014      	b.n	8005de0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fa74 	bl	80072a4 <USBH_LL_Start>
      break;
 8005dbc:	e010      	b.n	8005de0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e00e      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e00c      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e00a      	b.n	8005de0 <USBH_Process+0x3cc>
    break;
 8005dca:	bf00      	nop
 8005dcc:	e008      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e006      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dd2:	bf00      	nop
 8005dd4:	e004      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e002      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <USBH_Process+0x3cc>
      break;
 8005dde:	bf00      	nop
  }
  return USBH_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop

08005dec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af04      	add	r7, sp, #16
 8005df2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b07      	cmp	r3, #7
 8005e02:	f200 81c1 	bhi.w	8006188 <USBH_HandleEnum+0x39c>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USBH_HandleEnum+0x20>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e2d 	.word	0x08005e2d
 8005e10:	08005eeb 	.word	0x08005eeb
 8005e14:	08005f55 	.word	0x08005f55
 8005e18:	08005fe3 	.word	0x08005fe3
 8005e1c:	0800604d 	.word	0x0800604d
 8005e20:	080060bd 	.word	0x080060bd
 8005e24:	08006103 	.word	0x08006103
 8005e28:	08006149 	.word	0x08006149
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005e2c:	2108      	movs	r1, #8
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa50 	bl	80062d4 <USBH_Get_DevDesc>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d130      	bne.n	8005ea0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	7919      	ldrb	r1, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005e62:	b292      	uxth	r2, r2
 8005e64:	9202      	str	r2, [sp, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	9201      	str	r2, [sp, #4]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2280      	movs	r2, #128	; 0x80
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 f843 	bl	8006efc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	7959      	ldrb	r1, [r3, #5]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	9202      	str	r2, [sp, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	9201      	str	r2, [sp, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	4603      	mov	r3, r0
 8005e96:	2200      	movs	r2, #0
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 f82f 	bl	8006efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005e9e:	e175      	b.n	800618c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	f040 8172 	bne.w	800618c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eae:	3301      	adds	r3, #1
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d903      	bls.n	8005eca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	220d      	movs	r2, #13
 8005ec6:	701a      	strb	r2, [r3, #0]
      break;
 8005ec8:	e160      	b.n	800618c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	795b      	ldrb	r3, [r3, #5]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 f863 	bl	8006f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	791b      	ldrb	r3, [r3, #4]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 f85d 	bl	8006f9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
      break;
 8005ee8:	e150      	b.n	800618c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005eea:	2112      	movs	r1, #18
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 f9f1 	bl	80062d4 <USBH_Get_DevDesc>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d103      	bne.n	8005f04 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005f02:	e145      	b.n	8006190 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f04:	7bbb      	ldrb	r3, [r7, #14]
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	f040 8142 	bne.w	8006190 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f12:	3301      	adds	r3, #1
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d903      	bls.n	8005f2e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	220d      	movs	r2, #13
 8005f2a:	701a      	strb	r2, [r3, #0]
      break;
 8005f2c:	e130      	b.n	8006190 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	795b      	ldrb	r3, [r3, #5]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 f831 	bl	8006f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	791b      	ldrb	r3, [r3, #4]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f001 f82b 	bl	8006f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
      break;
 8005f52:	e11d      	b.n	8006190 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005f54:	2101      	movs	r1, #1
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa68 	bl	800642c <USBH_SetAddress>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f60:	7bbb      	ldrb	r3, [r7, #14]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d132      	bne.n	8005fcc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005f66:	2002      	movs	r0, #2
 8005f68:	f001 fb12 	bl	8007590 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2203      	movs	r2, #3
 8005f78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7919      	ldrb	r1, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	9202      	str	r2, [sp, #8]
 8005f92:	2200      	movs	r2, #0
 8005f94:	9201      	str	r2, [sp, #4]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2280      	movs	r2, #128	; 0x80
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ffad 	bl	8006efc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7959      	ldrb	r1, [r3, #5]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	9202      	str	r2, [sp, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	9201      	str	r2, [sp, #4]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 ff99 	bl	8006efc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005fca:	e0e3      	b.n	8006194 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b03      	cmp	r3, #3
 8005fd0:	f040 80e0 	bne.w	8006194 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	220d      	movs	r2, #13
 8005fd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	705a      	strb	r2, [r3, #1]
      break;
 8005fe0:	e0d8      	b.n	8006194 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005fe2:	2109      	movs	r1, #9
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f99d 	bl	8006324 <USBH_Get_CfgDesc>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d103      	bne.n	8005ffc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005ffa:	e0cd      	b.n	8006198 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ffc:	7bbb      	ldrb	r3, [r7, #14]
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	f040 80ca 	bne.w	8006198 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800600a:	3301      	adds	r3, #1
 800600c:	b2da      	uxtb	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800601a:	2b03      	cmp	r3, #3
 800601c:	d903      	bls.n	8006026 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	220d      	movs	r2, #13
 8006022:	701a      	strb	r2, [r3, #0]
      break;
 8006024:	e0b8      	b.n	8006198 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	795b      	ldrb	r3, [r3, #5]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ffb5 	bl	8006f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	791b      	ldrb	r3, [r3, #4]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 ffaf 	bl	8006f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e0a5      	b.n	8006198 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f965 	bl	8006324 <USBH_Get_CfgDesc>
 800605a:	4603      	mov	r3, r0
 800605c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2205      	movs	r2, #5
 8006068:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800606a:	e097      	b.n	800619c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800606c:	7bbb      	ldrb	r3, [r7, #14]
 800606e:	2b03      	cmp	r3, #3
 8006070:	f040 8094 	bne.w	800619c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800607a:	3301      	adds	r3, #1
 800607c:	b2da      	uxtb	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800608a:	2b03      	cmp	r3, #3
 800608c:	d903      	bls.n	8006096 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	220d      	movs	r2, #13
 8006092:	701a      	strb	r2, [r3, #0]
      break;
 8006094:	e082      	b.n	800619c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	795b      	ldrb	r3, [r3, #5]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 ff7d 	bl	8006f9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 ff77 	bl	8006f9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
      break;
 80060ba:	e06f      	b.n	800619c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d019      	beq.n	80060fa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80060d2:	23ff      	movs	r3, #255	; 0xff
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f949 	bl	800636c <USBH_Get_StringDesc>
 80060da:	4603      	mov	r3, r0
 80060dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80060de:	7bbb      	ldrb	r3, [r7, #14]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2206      	movs	r2, #6
 80060e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80060ea:	e059      	b.n	80061a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d156      	bne.n	80061a0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2206      	movs	r2, #6
 80060f6:	705a      	strb	r2, [r3, #1]
      break;
 80060f8:	e052      	b.n	80061a0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2206      	movs	r2, #6
 80060fe:	705a      	strb	r2, [r3, #1]
      break;
 8006100:	e04e      	b.n	80061a0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006118:	23ff      	movs	r3, #255	; 0xff
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f926 	bl	800636c <USBH_Get_StringDesc>
 8006120:	4603      	mov	r3, r0
 8006122:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2207      	movs	r2, #7
 800612e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006130:	e038      	b.n	80061a4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b03      	cmp	r3, #3
 8006136:	d135      	bne.n	80061a4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2207      	movs	r2, #7
 800613c:	705a      	strb	r2, [r3, #1]
      break;
 800613e:	e031      	b.n	80061a4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2207      	movs	r2, #7
 8006144:	705a      	strb	r2, [r3, #1]
      break;
 8006146:	e02d      	b.n	80061a4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800614e:	2b00      	cmp	r3, #0
 8006150:	d017      	beq.n	8006182 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800615e:	23ff      	movs	r3, #255	; 0xff
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f903 	bl	800636c <USBH_Get_StringDesc>
 8006166:	4603      	mov	r3, r0
 8006168:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006174:	e018      	b.n	80061a8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006176:	7bbb      	ldrb	r3, [r7, #14]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d115      	bne.n	80061a8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e012      	b.n	80061a8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
      break;
 8006186:	e00f      	b.n	80061a8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006188:	bf00      	nop
 800618a:	e00e      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 800618c:	bf00      	nop
 800618e:	e00c      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 8006190:	bf00      	nop
 8006192:	e00a      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 8006194:	bf00      	nop
 8006196:	e008      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 8006198:	bf00      	nop
 800619a:	e006      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 800619c:	bf00      	nop
 800619e:	e004      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 80061a0:	bf00      	nop
 80061a2:	e002      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <USBH_HandleEnum+0x3be>
      break;
 80061a8:	bf00      	nop
  }
  return Status;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f804 	bl	80061f6 <USBH_HandleSof>
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b0b      	cmp	r3, #11
 8006206:	d10a      	bne.n	800621e <USBH_HandleSof+0x28>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
  }
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006226:	b480      	push	{r7}
 8006228:	b083      	sub	sp, #12
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006236:	bf00      	nop
}
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006252:	bf00      	nop
}
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f814 	bl	80072da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	791b      	ldrb	r3, [r3, #4]
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fe6f 	bl	8006f9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	795b      	ldrb	r3, [r3, #5]
 80062c2:	4619      	mov	r1, r3
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 fe69 	bl	8006f9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af02      	add	r7, sp, #8
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	b29b      	uxth	r3, r3
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062f2:	2100      	movs	r1, #0
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f864 	bl	80063c2 <USBH_GetDescriptor>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f203 3026 	addw	r0, r3, #806	; 0x326
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006310:	78fa      	ldrb	r2, [r7, #3]
 8006312:	b292      	uxth	r2, r2
 8006314:	4619      	mov	r1, r3
 8006316:	f000 f919 	bl	800654c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af02      	add	r7, sp, #8
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	331c      	adds	r3, #28
 8006334:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006336:	887b      	ldrh	r3, [r7, #2]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006340:	2100      	movs	r1, #0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 f83d 	bl	80063c2 <USBH_GetDescriptor>
 8006348:	4603      	mov	r3, r0
 800634a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	461a      	mov	r2, r3
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f989 	bl	8006670 <USBH_ParseCfgDesc>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b088      	sub	sp, #32
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	607a      	str	r2, [r7, #4]
 8006376:	461a      	mov	r2, r3
 8006378:	460b      	mov	r3, r1
 800637a:	72fb      	strb	r3, [r7, #11]
 800637c:	4613      	mov	r3, r2
 800637e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006380:	7afb      	ldrb	r3, [r7, #11]
 8006382:	b29b      	uxth	r3, r3
 8006384:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006388:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006390:	893b      	ldrh	r3, [r7, #8]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	460b      	mov	r3, r1
 8006396:	2100      	movs	r1, #0
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f812 	bl	80063c2 <USBH_GetDescriptor>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d107      	bne.n	80063b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80063ae:	893a      	ldrh	r2, [r7, #8]
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fb26 	bl	8006a04 <USBH_ParseStringDesc>
  }

  return status;
 80063b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	72fb      	strb	r3, [r7, #11]
 80063d0:	4613      	mov	r3, r2
 80063d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	789b      	ldrb	r3, [r3, #2]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d11c      	bne.n	8006416 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2206      	movs	r2, #6
 80063ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	893a      	ldrh	r2, [r7, #8]
 80063f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80063f4:	893b      	ldrh	r3, [r7, #8]
 80063f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063fe:	d104      	bne.n	800640a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f240 4209 	movw	r2, #1033	; 0x409
 8006406:	829a      	strh	r2, [r3, #20]
 8006408:	e002      	b.n	8006410 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8b3a      	ldrh	r2, [r7, #24]
 8006414:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006416:	8b3b      	ldrh	r3, [r7, #24]
 8006418:	461a      	mov	r2, r3
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fb3f 	bl	8006aa0 <USBH_CtlReq>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10f      	bne.n	8006460 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2205      	movs	r2, #5
 800644a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	b29a      	uxth	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006460:	2200      	movs	r2, #0
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 fb1b 	bl	8006aa0 <USBH_CtlReq>
 800646a:	4603      	mov	r3, r0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	789b      	ldrb	r3, [r3, #2]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10e      	bne.n	80064a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2209      	movs	r2, #9
 8006492:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	887a      	ldrh	r2, [r7, #2]
 8006498:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 faf8 	bl	8006aa0 <USBH_CtlReq>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10f      	bne.n	80064ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2203      	movs	r2, #3
 80064d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80064da:	78fb      	ldrb	r3, [r7, #3]
 80064dc:	b29a      	uxth	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80064ee:	2200      	movs	r2, #0
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fad4 	bl	8006aa0 <USBH_CtlReq>
 80064f8:	4603      	mov	r3, r0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	460b      	mov	r3, r1
 800650c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	789b      	ldrb	r3, [r3, #2]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10f      	bne.n	8006536 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2202      	movs	r2, #2
 800651a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	b29a      	uxth	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006536:	2200      	movs	r2, #0
 8006538:	2100      	movs	r1, #0
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fab0 	bl	8006aa0 <USBH_CtlReq>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	781a      	ldrb	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	785a      	ldrb	r2, [r3, #1]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3302      	adds	r3, #2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b29a      	uxth	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	3303      	adds	r3, #3
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	021b      	lsls	r3, r3, #8
 800657c:	b29b      	uxth	r3, r3
 800657e:	4313      	orrs	r3, r2
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	791a      	ldrb	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	795a      	ldrb	r2, [r3, #5]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	799a      	ldrb	r2, [r3, #6]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	79da      	ldrb	r2, [r3, #7]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	79db      	ldrb	r3, [r3, #7]
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	dc0f      	bgt.n	80065ce <USBH_ParseDevDesc+0x82>
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	db14      	blt.n	80065dc <USBH_ParseDevDesc+0x90>
 80065b2:	3b08      	subs	r3, #8
 80065b4:	4a2d      	ldr	r2, [pc, #180]	; (800666c <USBH_ParseDevDesc+0x120>)
 80065b6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf14      	ite	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	2300      	moveq	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <USBH_ParseDevDesc+0x86>
 80065cc:	e006      	b.n	80065dc <USBH_ParseDevDesc+0x90>
 80065ce:	2b40      	cmp	r3, #64	; 0x40
 80065d0:	d104      	bne.n	80065dc <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	79da      	ldrb	r2, [r3, #7]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	71da      	strb	r2, [r3, #7]
      break;
 80065da:	e003      	b.n	80065e4 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2240      	movs	r2, #64	; 0x40
 80065e0:	71da      	strb	r2, [r3, #7]
      break;
 80065e2:	bf00      	nop
  }

  if (length > 8U)
 80065e4:	88fb      	ldrh	r3, [r7, #6]
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d939      	bls.n	800665e <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3308      	adds	r3, #8
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3309      	adds	r3, #9
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	021b      	lsls	r3, r3, #8
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	4313      	orrs	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	330a      	adds	r3, #10
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b29a      	uxth	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	330b      	adds	r3, #11
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	b29b      	uxth	r3, r3
 800661a:	4313      	orrs	r3, r2
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	330c      	adds	r3, #12
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b29a      	uxth	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	330d      	adds	r3, #13
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	b29b      	uxth	r3, r3
 8006636:	4313      	orrs	r3, r2
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	7b9a      	ldrb	r2, [r3, #14]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	7bda      	ldrb	r2, [r3, #15]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	7c1a      	ldrb	r2, [r3, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	7c5a      	ldrb	r2, [r3, #17]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	745a      	strb	r2, [r3, #17]
  }
}
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	01000101 	.word	0x01000101

08006670 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006684:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781a      	ldrb	r2, [r3, #0]
 80066a4:	6a3b      	ldr	r3, [r7, #32]
 80066a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	785a      	ldrb	r2, [r3, #1]
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	3302      	adds	r3, #2
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3303      	adds	r3, #3
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066cc:	bf28      	it	cs
 80066ce:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	791a      	ldrb	r2, [r3, #4]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	795a      	ldrb	r2, [r3, #5]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	799a      	ldrb	r2, [r3, #6]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	79da      	ldrb	r2, [r3, #7]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	7a1a      	ldrb	r2, [r3, #8]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b09      	cmp	r3, #9
 8006706:	d002      	beq.n	800670e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006708:	6a3b      	ldr	r3, [r7, #32]
 800670a:	2209      	movs	r2, #9
 800670c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800670e:	88fb      	ldrh	r3, [r7, #6]
 8006710:	2b09      	cmp	r3, #9
 8006712:	f240 809d 	bls.w	8006850 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006716:	2309      	movs	r3, #9
 8006718:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800671e:	e081      	b.n	8006824 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006720:	f107 0316 	add.w	r3, r7, #22
 8006724:	4619      	mov	r1, r3
 8006726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006728:	f000 f99f 	bl	8006a6a <USBH_GetNextDesc>
 800672c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b04      	cmp	r3, #4
 8006734:	d176      	bne.n	8006824 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	2b09      	cmp	r3, #9
 800673c:	d002      	beq.n	8006744 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	2209      	movs	r2, #9
 8006742:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006748:	221a      	movs	r2, #26
 800674a:	fb02 f303 	mul.w	r3, r2, r3
 800674e:	3308      	adds	r3, #8
 8006750:	6a3a      	ldr	r2, [r7, #32]
 8006752:	4413      	add	r3, r2
 8006754:	3302      	adds	r3, #2
 8006756:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800675a:	69f8      	ldr	r0, [r7, #28]
 800675c:	f000 f87e 	bl	800685c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006766:	2300      	movs	r3, #0
 8006768:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800676a:	e043      	b.n	80067f4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800676c:	f107 0316 	add.w	r3, r7, #22
 8006770:	4619      	mov	r1, r3
 8006772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006774:	f000 f979 	bl	8006a6a <USBH_GetNextDesc>
 8006778:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	2b05      	cmp	r3, #5
 8006780:	d138      	bne.n	80067f4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	795b      	ldrb	r3, [r3, #5]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d10f      	bne.n	80067aa <USBH_ParseCfgDesc+0x13a>
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	799b      	ldrb	r3, [r3, #6]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d10b      	bne.n	80067aa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	79db      	ldrb	r3, [r3, #7]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10f      	bne.n	80067ba <USBH_ParseCfgDesc+0x14a>
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d00b      	beq.n	80067ba <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	2209      	movs	r2, #9
 80067a6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80067a8:	e007      	b.n	80067ba <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80067aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b07      	cmp	r3, #7
 80067b0:	d004      	beq.n	80067bc <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2207      	movs	r2, #7
 80067b6:	701a      	strb	r2, [r3, #0]
 80067b8:	e000      	b.n	80067bc <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80067ba:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80067bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067c4:	3201      	adds	r2, #1
 80067c6:	00d2      	lsls	r2, r2, #3
 80067c8:	211a      	movs	r1, #26
 80067ca:	fb01 f303 	mul.w	r3, r1, r3
 80067ce:	4413      	add	r3, r2
 80067d0:	3308      	adds	r3, #8
 80067d2:	6a3a      	ldr	r2, [r7, #32]
 80067d4:	4413      	add	r3, r2
 80067d6:	3304      	adds	r3, #4
 80067d8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	69b9      	ldr	r1, [r7, #24]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f86b 	bl	80068ba <USBH_ParseEPDesc>
 80067e4:	4603      	mov	r3, r0
 80067e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80067ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80067ee:	3301      	adds	r3, #1
 80067f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	791b      	ldrb	r3, [r3, #4]
 80067f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d204      	bcs.n	800680a <USBH_ParseCfgDesc+0x19a>
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	885a      	ldrh	r2, [r3, #2]
 8006804:	8afb      	ldrh	r3, [r7, #22]
 8006806:	429a      	cmp	r2, r3
 8006808:	d8b0      	bhi.n	800676c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006812:	429a      	cmp	r2, r3
 8006814:	d201      	bcs.n	800681a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006816:	2303      	movs	r3, #3
 8006818:	e01c      	b.n	8006854 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800681a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800681e:	3301      	adds	r3, #1
 8006820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006828:	2b01      	cmp	r3, #1
 800682a:	d805      	bhi.n	8006838 <USBH_ParseCfgDesc+0x1c8>
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	885a      	ldrh	r2, [r3, #2]
 8006830:	8afb      	ldrh	r3, [r7, #22]
 8006832:	429a      	cmp	r2, r3
 8006834:	f63f af74 	bhi.w	8006720 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	791b      	ldrb	r3, [r3, #4]
 800683c:	2b02      	cmp	r3, #2
 800683e:	bf28      	it	cs
 8006840:	2302      	movcs	r3, #2
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006848:	429a      	cmp	r2, r3
 800684a:	d201      	bcs.n	8006850 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800684c:	2303      	movs	r3, #3
 800684e:	e001      	b.n	8006854 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006854:	4618      	mov	r0, r3
 8006856:	3730      	adds	r7, #48	; 0x30
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785a      	ldrb	r2, [r3, #1]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	789a      	ldrb	r2, [r3, #2]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	78da      	ldrb	r2, [r3, #3]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	791a      	ldrb	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	795a      	ldrb	r2, [r3, #5]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	799a      	ldrb	r2, [r3, #6]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	79da      	ldrb	r2, [r3, #7]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	7a1a      	ldrb	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	721a      	strb	r2, [r3, #8]
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b087      	sub	sp, #28
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	781a      	ldrb	r2, [r3, #0]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	785a      	ldrb	r2, [r3, #1]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	789a      	ldrb	r2, [r3, #2]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	78da      	ldrb	r2, [r3, #3]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3305      	adds	r3, #5
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	4313      	orrs	r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	799a      	ldrb	r2, [r3, #6]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	889b      	ldrh	r3, [r3, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d102      	bne.n	800691c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006916:	2303      	movs	r3, #3
 8006918:	75fb      	strb	r3, [r7, #23]
 800691a:	e033      	b.n	8006984 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	889b      	ldrh	r3, [r3, #4]
 8006920:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006924:	f023 0307 	bic.w	r3, r3, #7
 8006928:	b29a      	uxth	r2, r3
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	889b      	ldrh	r3, [r3, #4]
 8006932:	b21a      	sxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	b299      	uxth	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	3305      	adds	r3, #5
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	021b      	lsls	r3, r3, #8
 8006946:	b29b      	uxth	r3, r3
 8006948:	430b      	orrs	r3, r1
 800694a:	b29b      	uxth	r3, r3
 800694c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006950:	2b00      	cmp	r3, #0
 8006952:	d110      	bne.n	8006976 <USBH_ParseEPDesc+0xbc>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b299      	uxth	r1, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3305      	adds	r3, #5
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	b29b      	uxth	r3, r3
 8006968:	430b      	orrs	r3, r1
 800696a:	b29b      	uxth	r3, r3
 800696c:	b21b      	sxth	r3, r3
 800696e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006972:	b21b      	sxth	r3, r3
 8006974:	e001      	b.n	800697a <USBH_ParseEPDesc+0xc0>
 8006976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800697a:	4313      	orrs	r3, r2
 800697c:	b21b      	sxth	r3, r3
 800697e:	b29a      	uxth	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800698a:	2b00      	cmp	r3, #0
 800698c:	d116      	bne.n	80069bc <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	78db      	ldrb	r3, [r3, #3]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	2b01      	cmp	r3, #1
 8006998:	d005      	beq.n	80069a6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	78db      	ldrb	r3, [r3, #3]
 800699e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d127      	bne.n	80069f6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	799b      	ldrb	r3, [r3, #6]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <USBH_ParseEPDesc+0xfc>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	799b      	ldrb	r3, [r3, #6]
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d91f      	bls.n	80069f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80069b6:	2303      	movs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
 80069ba:	e01c      	b.n	80069f6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10a      	bne.n	80069de <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	799b      	ldrb	r3, [r3, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <USBH_ParseEPDesc+0x11e>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	799b      	ldrb	r3, [r3, #6]
 80069d4:	2b10      	cmp	r3, #16
 80069d6:	d90e      	bls.n	80069f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80069d8:	2303      	movs	r3, #3
 80069da:	75fb      	strb	r3, [r7, #23]
 80069dc:	e00b      	b.n	80069f6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d105      	bne.n	80069f6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	799b      	ldrb	r3, [r3, #6]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80069f2:	2303      	movs	r3, #3
 80069f4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d120      	bne.n	8006a5e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	1e9a      	subs	r2, r3, #2
 8006a22:	88fb      	ldrh	r3, [r7, #6]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf28      	it	cs
 8006a28:	4613      	movcs	r3, r2
 8006a2a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3302      	adds	r3, #2
 8006a30:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006a32:	2300      	movs	r3, #0
 8006a34:	82fb      	strh	r3, [r7, #22]
 8006a36:	e00b      	b.n	8006a50 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006a38:	8afb      	ldrh	r3, [r7, #22]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	3301      	adds	r3, #1
 8006a48:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006a4a:	8afb      	ldrh	r3, [r7, #22]
 8006a4c:	3302      	adds	r3, #2
 8006a4e:	82fb      	strh	r3, [r7, #22]
 8006a50:	8afa      	ldrh	r2, [r7, #22]
 8006a52:	8abb      	ldrh	r3, [r7, #20]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3ef      	bcc.n	8006a38 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	701a      	strb	r2, [r3, #0]
  }
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	881a      	ldrh	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	4413      	add	r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4413      	add	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	789b      	ldrb	r3, [r3, #2]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d002      	beq.n	8006ac0 <USBH_CtlReq+0x20>
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d00f      	beq.n	8006ade <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006abe:	e027      	b.n	8006b10 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	88fa      	ldrh	r2, [r7, #6]
 8006aca:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	e018      	b.n	8006b10 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f000 f81c 	bl	8006b1c <USBH_HandleControl>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <USBH_CtlReq+0x54>
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d106      	bne.n	8006b02 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	761a      	strb	r2, [r3, #24]
      break;
 8006b00:	e005      	b.n	8006b0e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d102      	bne.n	8006b0e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	709a      	strb	r2, [r3, #2]
      break;
 8006b0e:	bf00      	nop
  }
  return status;
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006b24:	2301      	movs	r3, #1
 8006b26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7e1b      	ldrb	r3, [r3, #24]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	2b0a      	cmp	r3, #10
 8006b34:	f200 8156 	bhi.w	8006de4 <USBH_HandleControl+0x2c8>
 8006b38:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBH_HandleControl+0x24>)
 8006b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3e:	bf00      	nop
 8006b40:	08006b6d 	.word	0x08006b6d
 8006b44:	08006b87 	.word	0x08006b87
 8006b48:	08006bf1 	.word	0x08006bf1
 8006b4c:	08006c17 	.word	0x08006c17
 8006b50:	08006c4f 	.word	0x08006c4f
 8006b54:	08006c79 	.word	0x08006c79
 8006b58:	08006ccb 	.word	0x08006ccb
 8006b5c:	08006ced 	.word	0x08006ced
 8006b60:	08006d29 	.word	0x08006d29
 8006b64:	08006d4f 	.word	0x08006d4f
 8006b68:	08006d8d 	.word	0x08006d8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f103 0110 	add.w	r1, r3, #16
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	795b      	ldrb	r3, [r3, #5]
 8006b76:	461a      	mov	r2, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 f943 	bl	8006e04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2202      	movs	r2, #2
 8006b82:	761a      	strb	r2, [r3, #24]
      break;
 8006b84:	e139      	b.n	8006dfa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	795b      	ldrb	r3, [r3, #5]
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc93 	bl	80074b8 <USBH_LL_GetURBState>
 8006b92:	4603      	mov	r3, r0
 8006b94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d11e      	bne.n	8006bda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	7c1b      	ldrb	r3, [r3, #16]
 8006ba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ba4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8adb      	ldrh	r3, [r3, #22]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d103      	bne.n	8006bbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bba:	e115      	b.n	8006de8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2205      	movs	r2, #5
 8006bc0:	761a      	strb	r2, [r3, #24]
      break;
 8006bc2:	e111      	b.n	8006de8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006bc4:	7b7b      	ldrb	r3, [r7, #13]
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	d103      	bne.n	8006bd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2209      	movs	r2, #9
 8006bce:	761a      	strb	r2, [r3, #24]
      break;
 8006bd0:	e10a      	b.n	8006de8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2207      	movs	r2, #7
 8006bd6:	761a      	strb	r2, [r3, #24]
      break;
 8006bd8:	e106      	b.n	8006de8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d003      	beq.n	8006be8 <USBH_HandleControl+0xcc>
 8006be0:	7bbb      	ldrb	r3, [r7, #14]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	f040 8100 	bne.w	8006de8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	220b      	movs	r2, #11
 8006bec:	761a      	strb	r2, [r3, #24]
      break;
 8006bee:	e0fb      	b.n	8006de8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	899a      	ldrh	r2, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	791b      	ldrb	r3, [r3, #4]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 f93a 	bl	8006e82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2204      	movs	r2, #4
 8006c12:	761a      	strb	r2, [r3, #24]
      break;
 8006c14:	e0f1      	b.n	8006dfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	791b      	ldrb	r3, [r3, #4]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fc4b 	bl	80074b8 <USBH_LL_GetURBState>
 8006c22:	4603      	mov	r3, r0
 8006c24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d102      	bne.n	8006c32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2209      	movs	r2, #9
 8006c30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	d102      	bne.n	8006c3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c3c:	e0d6      	b.n	8006dec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006c3e:	7bbb      	ldrb	r3, [r7, #14]
 8006c40:	2b04      	cmp	r3, #4
 8006c42:	f040 80d3 	bne.w	8006dec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	220b      	movs	r2, #11
 8006c4a:	761a      	strb	r2, [r3, #24]
      break;
 8006c4c:	e0ce      	b.n	8006dec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6899      	ldr	r1, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	899a      	ldrh	r2, [r3, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	795b      	ldrb	r3, [r3, #5]
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	9000      	str	r0, [sp, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8ea 	bl	8006e38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2206      	movs	r2, #6
 8006c74:	761a      	strb	r2, [r3, #24]
      break;
 8006c76:	e0c0      	b.n	8006dfa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	795b      	ldrb	r3, [r3, #5]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc1a 	bl	80074b8 <USBH_LL_GetURBState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006c88:	7bbb      	ldrb	r3, [r7, #14]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d103      	bne.n	8006c96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2207      	movs	r2, #7
 8006c92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c94:	e0ac      	b.n	8006df0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	2b05      	cmp	r3, #5
 8006c9a:	d105      	bne.n	8006ca8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	220c      	movs	r2, #12
 8006ca0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca6:	e0a3      	b.n	8006df0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ca8:	7bbb      	ldrb	r3, [r7, #14]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d103      	bne.n	8006cb6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2205      	movs	r2, #5
 8006cb2:	761a      	strb	r2, [r3, #24]
      break;
 8006cb4:	e09c      	b.n	8006df0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	f040 8099 	bne.w	8006df0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	220b      	movs	r2, #11
 8006cc2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cc8:	e092      	b.n	8006df0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f8d5 	bl	8006e82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2208      	movs	r2, #8
 8006ce8:	761a      	strb	r2, [r3, #24]

      break;
 8006cea:	e086      	b.n	8006dfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fbe0 	bl	80074b8 <USBH_LL_GetURBState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d105      	bne.n	8006d0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	220d      	movs	r2, #13
 8006d06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d0c:	e072      	b.n	8006df4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d103      	bne.n	8006d1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	220b      	movs	r2, #11
 8006d18:	761a      	strb	r2, [r3, #24]
      break;
 8006d1a:	e06b      	b.n	8006df4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d168      	bne.n	8006df4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006d22:	2303      	movs	r3, #3
 8006d24:	73fb      	strb	r3, [r7, #15]
      break;
 8006d26:	e065      	b.n	8006df4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	795b      	ldrb	r3, [r3, #5]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	9200      	str	r2, [sp, #0]
 8006d30:	2200      	movs	r2, #0
 8006d32:	2100      	movs	r1, #0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f87f 	bl	8006e38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	220a      	movs	r2, #10
 8006d4a:	761a      	strb	r2, [r3, #24]
      break;
 8006d4c:	e055      	b.n	8006dfa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	795b      	ldrb	r3, [r3, #5]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fbaf 	bl	80074b8 <USBH_LL_GetURBState>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d105      	bne.n	8006d70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	220d      	movs	r2, #13
 8006d6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d6e:	e043      	b.n	8006df8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d103      	bne.n	8006d7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2209      	movs	r2, #9
 8006d7a:	761a      	strb	r2, [r3, #24]
      break;
 8006d7c:	e03c      	b.n	8006df8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d139      	bne.n	8006df8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	220b      	movs	r2, #11
 8006d88:	761a      	strb	r2, [r3, #24]
      break;
 8006d8a:	e035      	b.n	8006df8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7e5b      	ldrb	r3, [r3, #25]
 8006d90:	3301      	adds	r3, #1
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	765a      	strb	r2, [r3, #25]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	7e5b      	ldrb	r3, [r3, #25]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d806      	bhi.n	8006dae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006dac:	e025      	b.n	8006dfa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006db4:	2106      	movs	r1, #6
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	795b      	ldrb	r3, [r3, #5]
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f8e8 	bl	8006f9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	791b      	ldrb	r3, [r3, #4]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f8e2 	bl	8006f9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	73fb      	strb	r3, [r7, #15]
      break;
 8006de2:	e00a      	b.n	8006dfa <USBH_HandleControl+0x2de>

    default:
      break;
 8006de4:	bf00      	nop
 8006de6:	e008      	b.n	8006dfa <USBH_HandleControl+0x2de>
      break;
 8006de8:	bf00      	nop
 8006dea:	e006      	b.n	8006dfa <USBH_HandleControl+0x2de>
      break;
 8006dec:	bf00      	nop
 8006dee:	e004      	b.n	8006dfa <USBH_HandleControl+0x2de>
      break;
 8006df0:	bf00      	nop
 8006df2:	e002      	b.n	8006dfa <USBH_HandleControl+0x2de>
      break;
 8006df4:	bf00      	nop
 8006df6:	e000      	b.n	8006dfa <USBH_HandleControl+0x2de>
      break;
 8006df8:	bf00      	nop
  }

  return status;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af04      	add	r7, sp, #16
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e12:	79f9      	ldrb	r1, [r7, #7]
 8006e14:	2300      	movs	r3, #0
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	2308      	movs	r3, #8
 8006e1a:	9302      	str	r3, [sp, #8]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	2300      	movs	r3, #0
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	2300      	movs	r3, #0
 8006e26:	2200      	movs	r2, #0
 8006e28:	68f8      	ldr	r0, [r7, #12]
 8006e2a:	f000 fb14 	bl	8007456 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af04      	add	r7, sp, #16
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	460b      	mov	r3, r1
 8006e48:	80fb      	strh	r3, [r7, #6]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e5c:	7979      	ldrb	r1, [r7, #5]
 8006e5e:	7e3b      	ldrb	r3, [r7, #24]
 8006e60:	9303      	str	r3, [sp, #12]
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	9302      	str	r3, [sp, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	9301      	str	r3, [sp, #4]
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2200      	movs	r2, #0
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 faef 	bl	8007456 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b088      	sub	sp, #32
 8006e86:	af04      	add	r7, sp, #16
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	461a      	mov	r2, r3
 8006e90:	460b      	mov	r3, r1
 8006e92:	80fb      	strh	r3, [r7, #6]
 8006e94:	4613      	mov	r3, r2
 8006e96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e98:	7979      	ldrb	r1, [r7, #5]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9303      	str	r3, [sp, #12]
 8006e9e:	88fb      	ldrh	r3, [r7, #6]
 8006ea0:	9302      	str	r3, [sp, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2201      	movs	r2, #1
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 fad1 	bl	8007456 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006eb4:	2300      	movs	r3, #0

}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b088      	sub	sp, #32
 8006ec2:	af04      	add	r7, sp, #16
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	4611      	mov	r1, r2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	460b      	mov	r3, r1
 8006ece:	71fb      	strb	r3, [r7, #7]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	79b9      	ldrb	r1, [r7, #6]
 8006eda:	2200      	movs	r2, #0
 8006edc:	9203      	str	r2, [sp, #12]
 8006ede:	9302      	str	r3, [sp, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	2303      	movs	r3, #3
 8006eea:	2201      	movs	r2, #1
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fab2 	bl	8007456 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af04      	add	r7, sp, #16
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	4608      	mov	r0, r1
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	70fb      	strb	r3, [r7, #3]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70bb      	strb	r3, [r7, #2]
 8006f12:	4613      	mov	r3, r2
 8006f14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006f16:	7878      	ldrb	r0, [r7, #1]
 8006f18:	78ba      	ldrb	r2, [r7, #2]
 8006f1a:	78f9      	ldrb	r1, [r7, #3]
 8006f1c:	8b3b      	ldrh	r3, [r7, #24]
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	7d3b      	ldrb	r3, [r7, #20]
 8006f22:	9301      	str	r3, [sp, #4]
 8006f24:	7c3b      	ldrb	r3, [r7, #16]
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	4603      	mov	r3, r0
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa45 	bl	80073ba <USBH_LL_OpenPipe>

  return USBH_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa64 	bl	8007418 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3708      	adds	r7, #8
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f836 	bl	8006fd8 <USBH_GetFreePipe>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f70:	89fb      	ldrh	r3, [r7, #14]
 8006f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00a      	beq.n	8006f90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006f7a:	78fa      	ldrb	r2, [r7, #3]
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	33e0      	adds	r3, #224	; 0xe0
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006f90:	89fb      	ldrh	r3, [r7, #14]
 8006f92:	b2db      	uxtb	r3, r3
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006fa8:	78fb      	ldrb	r3, [r7, #3]
 8006faa:	2b0f      	cmp	r3, #15
 8006fac:	d80d      	bhi.n	8006fca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	33e0      	adds	r3, #224	; 0xe0
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	33e0      	adds	r3, #224	; 0xe0
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	73fb      	strb	r3, [r7, #15]
 8006fe8:	e00f      	b.n	800700a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	33e0      	adds	r3, #224	; 0xe0
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d102      	bne.n	8007004 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	b29b      	uxth	r3, r3
 8007002:	e007      	b.n	8007014 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	3301      	adds	r3, #1
 8007008:	73fb      	strb	r3, [r7, #15]
 800700a:	7bfb      	ldrb	r3, [r7, #15]
 800700c:	2b0f      	cmp	r3, #15
 800700e:	d9ec      	bls.n	8006fea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007010:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007024:	2201      	movs	r2, #1
 8007026:	490e      	ldr	r1, [pc, #56]	; (8007060 <MX_USB_HOST_Init+0x40>)
 8007028:	480e      	ldr	r0, [pc, #56]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800702a:	f7fe fbc9 	bl	80057c0 <USBH_Init>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d001      	beq.n	8007038 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007034:	f7f9 fbf8 	bl	8000828 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8007038:	490b      	ldr	r1, [pc, #44]	; (8007068 <MX_USB_HOST_Init+0x48>)
 800703a:	480a      	ldr	r0, [pc, #40]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800703c:	f7fe fc4e 	bl	80058dc <USBH_RegisterClass>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007046:	f7f9 fbef 	bl	8000828 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800704a:	4806      	ldr	r0, [pc, #24]	; (8007064 <MX_USB_HOST_Init+0x44>)
 800704c:	f7fe fcd2 	bl	80059f4 <USBH_Start>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007056:	f7f9 fbe7 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	08007081 	.word	0x08007081
 8007064:	20000180 	.word	0x20000180
 8007068:	2000000c 	.word	0x2000000c

0800706c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007070:	4802      	ldr	r0, [pc, #8]	; (800707c <MX_USB_HOST_Process+0x10>)
 8007072:	f7fe fccf 	bl	8005a14 <USBH_Process>
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000180 	.word	0x20000180

08007080 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	460b      	mov	r3, r1
 800708a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	3b01      	subs	r3, #1
 8007090:	2b04      	cmp	r3, #4
 8007092:	d819      	bhi.n	80070c8 <USBH_UserProcess+0x48>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <USBH_UserProcess+0x1c>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	080070b9 	.word	0x080070b9
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070c1 	.word	0x080070c1
 80070ac:	080070b1 	.word	0x080070b1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80070b0:	4b09      	ldr	r3, [pc, #36]	; (80070d8 <USBH_UserProcess+0x58>)
 80070b2:	2203      	movs	r2, #3
 80070b4:	701a      	strb	r2, [r3, #0]
  break;
 80070b6:	e008      	b.n	80070ca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80070b8:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <USBH_UserProcess+0x58>)
 80070ba:	2202      	movs	r2, #2
 80070bc:	701a      	strb	r2, [r3, #0]
  break;
 80070be:	e004      	b.n	80070ca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80070c0:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <USBH_UserProcess+0x58>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	701a      	strb	r2, [r3, #0]
  break;
 80070c6:	e000      	b.n	80070ca <USBH_UserProcess+0x4a>

  default:
  break;
 80070c8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	20000558 	.word	0x20000558

080070dc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	; 0x28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070e4:	f107 0314 	add.w	r3, r7, #20
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	605a      	str	r2, [r3, #4]
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	60da      	str	r2, [r3, #12]
 80070f2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070fc:	d13a      	bne.n	8007174 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_HCD_MspInit+0xa0>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_HCD_MspInit+0xa0>)
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	6313      	str	r3, [r2, #48]	; 0x30
 800710e:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_HCD_MspInit+0xa0>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800711a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800711e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007120:	2302      	movs	r3, #2
 8007122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007128:	2303      	movs	r3, #3
 800712a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800712c:	230a      	movs	r3, #10
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	4619      	mov	r1, r3
 8007136:	4812      	ldr	r0, [pc, #72]	; (8007180 <HAL_HCD_MspInit+0xa4>)
 8007138:	f7f9 fe3a 	bl	8000db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800713c:	4b0f      	ldr	r3, [pc, #60]	; (800717c <HAL_HCD_MspInit+0xa0>)
 800713e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007140:	4a0e      	ldr	r2, [pc, #56]	; (800717c <HAL_HCD_MspInit+0xa0>)
 8007142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007146:	6353      	str	r3, [r2, #52]	; 0x34
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_HCD_MspInit+0xa0>)
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	4a0a      	ldr	r2, [pc, #40]	; (800717c <HAL_HCD_MspInit+0xa0>)
 8007152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007156:	6453      	str	r3, [r2, #68]	; 0x44
 8007158:	4b08      	ldr	r3, [pc, #32]	; (800717c <HAL_HCD_MspInit+0xa0>)
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007164:	2200      	movs	r2, #0
 8007166:	2100      	movs	r1, #0
 8007168:	2043      	movs	r0, #67	; 0x43
 800716a:	f7f9 fdea 	bl	8000d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800716e:	2043      	movs	r0, #67	; 0x43
 8007170:	f7f9 fe03 	bl	8000d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007174:	bf00      	nop
 8007176:	3728      	adds	r7, #40	; 0x28
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	40023800 	.word	0x40023800
 8007180:	40020000 	.word	0x40020000

08007184 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff f81d 	bl	80061d2 <USBH_LL_IncTimer>
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff f855 	bl	800625e <USBH_LL_Connect>
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071ca:	4618      	mov	r0, r3
 80071cc:	f7ff f85e 	bl	800628c <USBH_LL_Disconnect>
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
 80071e4:	4613      	mov	r3, r2
 80071e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff f80f 	bl	8006226 <USBH_LL_PortEnabled>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff f80f 	bl	8006242 <USBH_LL_PortDisabled>
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800723a:	2b01      	cmp	r3, #1
 800723c:	d12a      	bne.n	8007294 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800723e:	4a18      	ldr	r2, [pc, #96]	; (80072a0 <USBH_LL_Init+0x74>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a15      	ldr	r2, [pc, #84]	; (80072a0 <USBH_LL_Init+0x74>)
 800724a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800724e:	4b14      	ldr	r3, [pc, #80]	; (80072a0 <USBH_LL_Init+0x74>)
 8007250:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007254:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007256:	4b12      	ldr	r3, [pc, #72]	; (80072a0 <USBH_LL_Init+0x74>)
 8007258:	2208      	movs	r2, #8
 800725a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <USBH_LL_Init+0x74>)
 800725e:	2201      	movs	r2, #1
 8007260:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007262:	4b0f      	ldr	r3, [pc, #60]	; (80072a0 <USBH_LL_Init+0x74>)
 8007264:	2200      	movs	r2, #0
 8007266:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <USBH_LL_Init+0x74>)
 800726a:	2202      	movs	r2, #2
 800726c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <USBH_LL_Init+0x74>)
 8007270:	2200      	movs	r2, #0
 8007272:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007274:	480a      	ldr	r0, [pc, #40]	; (80072a0 <USBH_LL_Init+0x74>)
 8007276:	f7f9 ff38 	bl	80010ea <HAL_HCD_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007280:	f7f9 fad2 	bl	8000828 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007284:	4806      	ldr	r0, [pc, #24]	; (80072a0 <USBH_LL_Init+0x74>)
 8007286:	f7fa fb1c 	bl	80018c2 <HAL_HCD_GetCurrentFrame>
 800728a:	4603      	mov	r3, r0
 800728c:	4619      	mov	r1, r3
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7fe ff90 	bl	80061b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	2000055c 	.word	0x2000055c

080072a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fa fa8b 	bl	80017d6 <HAL_HCD_Start>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 f96e 	bl	80075a8 <USBH_Get_USB_Status>
 80072cc:	4603      	mov	r3, r0
 80072ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fa fa93 	bl	800181c <HAL_HCD_Stop>
 80072f6:	4603      	mov	r3, r0
 80072f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f953 	bl	80075a8 <USBH_Get_USB_Status>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007306:	7bbb      	ldrb	r3, [r7, #14]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007322:	4618      	mov	r0, r3
 8007324:	f7fa fadb 	bl	80018de <HAL_HCD_GetCurrentSpeed>
 8007328:	4603      	mov	r3, r0
 800732a:	2b02      	cmp	r3, #2
 800732c:	d00c      	beq.n	8007348 <USBH_LL_GetSpeed+0x38>
 800732e:	2b02      	cmp	r3, #2
 8007330:	d80d      	bhi.n	800734e <USBH_LL_GetSpeed+0x3e>
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <USBH_LL_GetSpeed+0x2c>
 8007336:	2b01      	cmp	r3, #1
 8007338:	d003      	beq.n	8007342 <USBH_LL_GetSpeed+0x32>
 800733a:	e008      	b.n	800734e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
    break;
 8007340:	e008      	b.n	8007354 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007342:	2301      	movs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
    break;
 8007346:	e005      	b.n	8007354 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007348:	2302      	movs	r3, #2
 800734a:	73fb      	strb	r3, [r7, #15]
    break;
 800734c:	e002      	b.n	8007354 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
    break;
 8007352:	bf00      	nop
  }
  return  speed;
 8007354:	7bfb      	ldrb	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007374:	4618      	mov	r0, r3
 8007376:	f7fa fa6e 	bl	8001856 <HAL_HCD_ResetPort>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f911 	bl	80075a8 <USBH_Get_USB_Status>
 8007386:	4603      	mov	r3, r0
 8007388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800738a:	7bbb      	ldrb	r3, [r7, #14]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073a6:	78fa      	ldrb	r2, [r7, #3]
 80073a8:	4611      	mov	r1, r2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fa fa75 	bl	800189a <HAL_HCD_HC_GetXferCount>
 80073b0:	4603      	mov	r3, r0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80073ba:	b590      	push	{r4, r7, lr}
 80073bc:	b089      	sub	sp, #36	; 0x24
 80073be:	af04      	add	r7, sp, #16
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	4608      	mov	r0, r1
 80073c4:	4611      	mov	r1, r2
 80073c6:	461a      	mov	r2, r3
 80073c8:	4603      	mov	r3, r0
 80073ca:	70fb      	strb	r3, [r7, #3]
 80073cc:	460b      	mov	r3, r1
 80073ce:	70bb      	strb	r3, [r7, #2]
 80073d0:	4613      	mov	r3, r2
 80073d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073d4:	2300      	movs	r3, #0
 80073d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80073e2:	787c      	ldrb	r4, [r7, #1]
 80073e4:	78ba      	ldrb	r2, [r7, #2]
 80073e6:	78f9      	ldrb	r1, [r7, #3]
 80073e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80073f0:	9301      	str	r3, [sp, #4]
 80073f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	4623      	mov	r3, r4
 80073fa:	f7f9 fed8 	bl	80011ae <HAL_HCD_HC_Init>
 80073fe:	4603      	mov	r3, r0
 8007400:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f8cf 	bl	80075a8 <USBH_Get_USB_Status>
 800740a:	4603      	mov	r3, r0
 800740c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800740e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	bd90      	pop	{r4, r7, pc}

08007418 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007432:	78fa      	ldrb	r2, [r7, #3]
 8007434:	4611      	mov	r1, r2
 8007436:	4618      	mov	r0, r3
 8007438:	f7f9 ff48 	bl	80012cc <HAL_HCD_HC_Halt>
 800743c:	4603      	mov	r3, r0
 800743e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f8b0 	bl	80075a8 <USBH_Get_USB_Status>
 8007448:	4603      	mov	r3, r0
 800744a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800744c:	7bbb      	ldrb	r3, [r7, #14]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007456:	b590      	push	{r4, r7, lr}
 8007458:	b089      	sub	sp, #36	; 0x24
 800745a:	af04      	add	r7, sp, #16
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	4608      	mov	r0, r1
 8007460:	4611      	mov	r1, r2
 8007462:	461a      	mov	r2, r3
 8007464:	4603      	mov	r3, r0
 8007466:	70fb      	strb	r3, [r7, #3]
 8007468:	460b      	mov	r3, r1
 800746a:	70bb      	strb	r3, [r7, #2]
 800746c:	4613      	mov	r3, r2
 800746e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007474:	2300      	movs	r3, #0
 8007476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800747e:	787c      	ldrb	r4, [r7, #1]
 8007480:	78ba      	ldrb	r2, [r7, #2]
 8007482:	78f9      	ldrb	r1, [r7, #3]
 8007484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800748c:	9302      	str	r3, [sp, #8]
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	4623      	mov	r3, r4
 800749a:	f7f9 ff3b 	bl	8001314 <HAL_HCD_HC_SubmitRequest>
 800749e:	4603      	mov	r3, r0
 80074a0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 f87f 	bl	80075a8 <USBH_Get_USB_Status>
 80074aa:	4603      	mov	r3, r0
 80074ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd90      	pop	{r4, r7, pc}

080074b8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fa f9cf 	bl	8001872 <HAL_HCD_HC_GetURBState>
 80074d4:	4603      	mov	r3, r0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d103      	bne.n	80074fe <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f881 	bl	8007600 <MX_DriverVbusFS>
  }
  if (state == 1) {
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d105      	bne.n	8007510 <USBH_LL_DriverVBUS+0x30>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8007504:	2200      	movs	r2, #0
 8007506:	2101      	movs	r1, #1
 8007508:	4808      	ldr	r0, [pc, #32]	; (800752c <USBH_LL_DriverVBUS+0x4c>)
 800750a:	f7f9 fdd5 	bl	80010b8 <HAL_GPIO_WritePin>
 800750e:	e004      	b.n	800751a <USBH_LL_DriverVBUS+0x3a>

}
  else {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8007510:	2201      	movs	r2, #1
 8007512:	2101      	movs	r1, #1
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <USBH_LL_DriverVBUS+0x4c>)
 8007516:	f7f9 fdcf 	bl	80010b8 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800751a:	20c8      	movs	r0, #200	; 0xc8
 800751c:	f7f9 fb12 	bl	8000b44 <HAL_Delay>
  return USBH_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	40020800 	.word	0x40020800

08007530 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
 800753c:	4613      	mov	r3, r2
 800753e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007546:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	212c      	movs	r1, #44	; 0x2c
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	333b      	adds	r3, #59	; 0x3b
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	212c      	movs	r1, #44	; 0x2c
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	4413      	add	r3, r2
 8007568:	3354      	adds	r3, #84	; 0x54
 800756a:	78ba      	ldrb	r2, [r7, #2]
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e008      	b.n	8007582 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	212c      	movs	r1, #44	; 0x2c
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	3355      	adds	r3, #85	; 0x55
 800757e:	78ba      	ldrb	r2, [r7, #2]
 8007580:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7f9 fad3 	bl	8000b44 <HAL_Delay>
}
 800759e:	bf00      	nop
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d817      	bhi.n	80075ec <USBH_Get_USB_Status+0x44>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <USBH_Get_USB_Status+0x1c>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	080075db 	.word	0x080075db
 80075cc:	080075e1 	.word	0x080075e1
 80075d0:	080075e7 	.word	0x080075e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73fb      	strb	r3, [r7, #15]
    break;
 80075d8:	e00b      	b.n	80075f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80075da:	2302      	movs	r3, #2
 80075dc:	73fb      	strb	r3, [r7, #15]
    break;
 80075de:	e008      	b.n	80075f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
    break;
 80075e4:	e005      	b.n	80075f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80075e6:	2302      	movs	r3, #2
 80075e8:	73fb      	strb	r3, [r7, #15]
    break;
 80075ea:	e002      	b.n	80075f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80075ec:	2302      	movs	r3, #2
 80075ee:	73fb      	strb	r3, [r7, #15]
    break;
 80075f0:	bf00      	nop
  }
  return usb_status;
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	4603      	mov	r3, r0
 8007608:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d102      	bne.n	800761a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
 8007618:	e001      	b.n	800761e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	461a      	mov	r2, r3
 8007622:	2101      	movs	r1, #1
 8007624:	4803      	ldr	r0, [pc, #12]	; (8007634 <MX_DriverVbusFS+0x34>)
 8007626:	f7f9 fd47 	bl	80010b8 <HAL_GPIO_WritePin>
}
 800762a:	bf00      	nop
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	40020800 	.word	0x40020800

08007638 <malloc>:
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <malloc+0xc>)
 800763a:	4601      	mov	r1, r0
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	f000 b82b 	b.w	8007698 <_malloc_r>
 8007642:	bf00      	nop
 8007644:	20000078 	.word	0x20000078

08007648 <free>:
 8007648:	4b02      	ldr	r3, [pc, #8]	; (8007654 <free+0xc>)
 800764a:	4601      	mov	r1, r0
 800764c:	6818      	ldr	r0, [r3, #0]
 800764e:	f000 b913 	b.w	8007878 <_free_r>
 8007652:	bf00      	nop
 8007654:	20000078 	.word	0x20000078

08007658 <sbrk_aligned>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	4e0e      	ldr	r6, [pc, #56]	; (8007694 <sbrk_aligned+0x3c>)
 800765c:	460c      	mov	r4, r1
 800765e:	6831      	ldr	r1, [r6, #0]
 8007660:	4605      	mov	r5, r0
 8007662:	b911      	cbnz	r1, 800766a <sbrk_aligned+0x12>
 8007664:	f000 f8cc 	bl	8007800 <_sbrk_r>
 8007668:	6030      	str	r0, [r6, #0]
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 f8c7 	bl	8007800 <_sbrk_r>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d00a      	beq.n	800768c <sbrk_aligned+0x34>
 8007676:	1cc4      	adds	r4, r0, #3
 8007678:	f024 0403 	bic.w	r4, r4, #3
 800767c:	42a0      	cmp	r0, r4
 800767e:	d007      	beq.n	8007690 <sbrk_aligned+0x38>
 8007680:	1a21      	subs	r1, r4, r0
 8007682:	4628      	mov	r0, r5
 8007684:	f000 f8bc 	bl	8007800 <_sbrk_r>
 8007688:	3001      	adds	r0, #1
 800768a:	d101      	bne.n	8007690 <sbrk_aligned+0x38>
 800768c:	f04f 34ff 	mov.w	r4, #4294967295
 8007690:	4620      	mov	r0, r4
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	20000864 	.word	0x20000864

08007698 <_malloc_r>:
 8007698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800769c:	1ccd      	adds	r5, r1, #3
 800769e:	f025 0503 	bic.w	r5, r5, #3
 80076a2:	3508      	adds	r5, #8
 80076a4:	2d0c      	cmp	r5, #12
 80076a6:	bf38      	it	cc
 80076a8:	250c      	movcc	r5, #12
 80076aa:	2d00      	cmp	r5, #0
 80076ac:	4607      	mov	r7, r0
 80076ae:	db01      	blt.n	80076b4 <_malloc_r+0x1c>
 80076b0:	42a9      	cmp	r1, r5
 80076b2:	d905      	bls.n	80076c0 <_malloc_r+0x28>
 80076b4:	230c      	movs	r3, #12
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	2600      	movs	r6, #0
 80076ba:	4630      	mov	r0, r6
 80076bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007794 <_malloc_r+0xfc>
 80076c4:	f000 f868 	bl	8007798 <__malloc_lock>
 80076c8:	f8d8 3000 	ldr.w	r3, [r8]
 80076cc:	461c      	mov	r4, r3
 80076ce:	bb5c      	cbnz	r4, 8007728 <_malloc_r+0x90>
 80076d0:	4629      	mov	r1, r5
 80076d2:	4638      	mov	r0, r7
 80076d4:	f7ff ffc0 	bl	8007658 <sbrk_aligned>
 80076d8:	1c43      	adds	r3, r0, #1
 80076da:	4604      	mov	r4, r0
 80076dc:	d155      	bne.n	800778a <_malloc_r+0xf2>
 80076de:	f8d8 4000 	ldr.w	r4, [r8]
 80076e2:	4626      	mov	r6, r4
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	d145      	bne.n	8007774 <_malloc_r+0xdc>
 80076e8:	2c00      	cmp	r4, #0
 80076ea:	d048      	beq.n	800777e <_malloc_r+0xe6>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	4631      	mov	r1, r6
 80076f0:	4638      	mov	r0, r7
 80076f2:	eb04 0903 	add.w	r9, r4, r3
 80076f6:	f000 f883 	bl	8007800 <_sbrk_r>
 80076fa:	4581      	cmp	r9, r0
 80076fc:	d13f      	bne.n	800777e <_malloc_r+0xe6>
 80076fe:	6821      	ldr	r1, [r4, #0]
 8007700:	1a6d      	subs	r5, r5, r1
 8007702:	4629      	mov	r1, r5
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff ffa7 	bl	8007658 <sbrk_aligned>
 800770a:	3001      	adds	r0, #1
 800770c:	d037      	beq.n	800777e <_malloc_r+0xe6>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	442b      	add	r3, r5
 8007712:	6023      	str	r3, [r4, #0]
 8007714:	f8d8 3000 	ldr.w	r3, [r8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d038      	beq.n	800778e <_malloc_r+0xf6>
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	42a2      	cmp	r2, r4
 8007720:	d12b      	bne.n	800777a <_malloc_r+0xe2>
 8007722:	2200      	movs	r2, #0
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	e00f      	b.n	8007748 <_malloc_r+0xb0>
 8007728:	6822      	ldr	r2, [r4, #0]
 800772a:	1b52      	subs	r2, r2, r5
 800772c:	d41f      	bmi.n	800776e <_malloc_r+0xd6>
 800772e:	2a0b      	cmp	r2, #11
 8007730:	d917      	bls.n	8007762 <_malloc_r+0xca>
 8007732:	1961      	adds	r1, r4, r5
 8007734:	42a3      	cmp	r3, r4
 8007736:	6025      	str	r5, [r4, #0]
 8007738:	bf18      	it	ne
 800773a:	6059      	strne	r1, [r3, #4]
 800773c:	6863      	ldr	r3, [r4, #4]
 800773e:	bf08      	it	eq
 8007740:	f8c8 1000 	streq.w	r1, [r8]
 8007744:	5162      	str	r2, [r4, r5]
 8007746:	604b      	str	r3, [r1, #4]
 8007748:	4638      	mov	r0, r7
 800774a:	f104 060b 	add.w	r6, r4, #11
 800774e:	f000 f829 	bl	80077a4 <__malloc_unlock>
 8007752:	f026 0607 	bic.w	r6, r6, #7
 8007756:	1d23      	adds	r3, r4, #4
 8007758:	1af2      	subs	r2, r6, r3
 800775a:	d0ae      	beq.n	80076ba <_malloc_r+0x22>
 800775c:	1b9b      	subs	r3, r3, r6
 800775e:	50a3      	str	r3, [r4, r2]
 8007760:	e7ab      	b.n	80076ba <_malloc_r+0x22>
 8007762:	42a3      	cmp	r3, r4
 8007764:	6862      	ldr	r2, [r4, #4]
 8007766:	d1dd      	bne.n	8007724 <_malloc_r+0x8c>
 8007768:	f8c8 2000 	str.w	r2, [r8]
 800776c:	e7ec      	b.n	8007748 <_malloc_r+0xb0>
 800776e:	4623      	mov	r3, r4
 8007770:	6864      	ldr	r4, [r4, #4]
 8007772:	e7ac      	b.n	80076ce <_malloc_r+0x36>
 8007774:	4634      	mov	r4, r6
 8007776:	6876      	ldr	r6, [r6, #4]
 8007778:	e7b4      	b.n	80076e4 <_malloc_r+0x4c>
 800777a:	4613      	mov	r3, r2
 800777c:	e7cc      	b.n	8007718 <_malloc_r+0x80>
 800777e:	230c      	movs	r3, #12
 8007780:	603b      	str	r3, [r7, #0]
 8007782:	4638      	mov	r0, r7
 8007784:	f000 f80e 	bl	80077a4 <__malloc_unlock>
 8007788:	e797      	b.n	80076ba <_malloc_r+0x22>
 800778a:	6025      	str	r5, [r4, #0]
 800778c:	e7dc      	b.n	8007748 <_malloc_r+0xb0>
 800778e:	605b      	str	r3, [r3, #4]
 8007790:	deff      	udf	#255	; 0xff
 8007792:	bf00      	nop
 8007794:	20000860 	.word	0x20000860

08007798 <__malloc_lock>:
 8007798:	4801      	ldr	r0, [pc, #4]	; (80077a0 <__malloc_lock+0x8>)
 800779a:	f000 b86b 	b.w	8007874 <__retarget_lock_acquire_recursive>
 800779e:	bf00      	nop
 80077a0:	200009a4 	.word	0x200009a4

080077a4 <__malloc_unlock>:
 80077a4:	4801      	ldr	r0, [pc, #4]	; (80077ac <__malloc_unlock+0x8>)
 80077a6:	f000 b866 	b.w	8007876 <__retarget_lock_release_recursive>
 80077aa:	bf00      	nop
 80077ac:	200009a4 	.word	0x200009a4

080077b0 <siprintf>:
 80077b0:	b40e      	push	{r1, r2, r3}
 80077b2:	b500      	push	{lr}
 80077b4:	b09c      	sub	sp, #112	; 0x70
 80077b6:	ab1d      	add	r3, sp, #116	; 0x74
 80077b8:	9002      	str	r0, [sp, #8]
 80077ba:	9006      	str	r0, [sp, #24]
 80077bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077c0:	4809      	ldr	r0, [pc, #36]	; (80077e8 <siprintf+0x38>)
 80077c2:	9107      	str	r1, [sp, #28]
 80077c4:	9104      	str	r1, [sp, #16]
 80077c6:	4909      	ldr	r1, [pc, #36]	; (80077ec <siprintf+0x3c>)
 80077c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077cc:	9105      	str	r1, [sp, #20]
 80077ce:	6800      	ldr	r0, [r0, #0]
 80077d0:	9301      	str	r3, [sp, #4]
 80077d2:	a902      	add	r1, sp, #8
 80077d4:	f000 f8f6 	bl	80079c4 <_svfiprintf_r>
 80077d8:	9b02      	ldr	r3, [sp, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	701a      	strb	r2, [r3, #0]
 80077de:	b01c      	add	sp, #112	; 0x70
 80077e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e4:	b003      	add	sp, #12
 80077e6:	4770      	bx	lr
 80077e8:	20000078 	.word	0x20000078
 80077ec:	ffff0208 	.word	0xffff0208

080077f0 <memset>:
 80077f0:	4402      	add	r2, r0
 80077f2:	4603      	mov	r3, r0
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d100      	bne.n	80077fa <memset+0xa>
 80077f8:	4770      	bx	lr
 80077fa:	f803 1b01 	strb.w	r1, [r3], #1
 80077fe:	e7f9      	b.n	80077f4 <memset+0x4>

08007800 <_sbrk_r>:
 8007800:	b538      	push	{r3, r4, r5, lr}
 8007802:	4d06      	ldr	r5, [pc, #24]	; (800781c <_sbrk_r+0x1c>)
 8007804:	2300      	movs	r3, #0
 8007806:	4604      	mov	r4, r0
 8007808:	4608      	mov	r0, r1
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	f7f9 f8b6 	bl	800097c <_sbrk>
 8007810:	1c43      	adds	r3, r0, #1
 8007812:	d102      	bne.n	800781a <_sbrk_r+0x1a>
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	b103      	cbz	r3, 800781a <_sbrk_r+0x1a>
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	200009a0 	.word	0x200009a0

08007820 <__errno>:
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <__errno+0x8>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	20000078 	.word	0x20000078

0800782c <__libc_init_array>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4d0d      	ldr	r5, [pc, #52]	; (8007864 <__libc_init_array+0x38>)
 8007830:	4c0d      	ldr	r4, [pc, #52]	; (8007868 <__libc_init_array+0x3c>)
 8007832:	1b64      	subs	r4, r4, r5
 8007834:	10a4      	asrs	r4, r4, #2
 8007836:	2600      	movs	r6, #0
 8007838:	42a6      	cmp	r6, r4
 800783a:	d109      	bne.n	8007850 <__libc_init_array+0x24>
 800783c:	4d0b      	ldr	r5, [pc, #44]	; (800786c <__libc_init_array+0x40>)
 800783e:	4c0c      	ldr	r4, [pc, #48]	; (8007870 <__libc_init_array+0x44>)
 8007840:	f000 fbae 	bl	8007fa0 <_init>
 8007844:	1b64      	subs	r4, r4, r5
 8007846:	10a4      	asrs	r4, r4, #2
 8007848:	2600      	movs	r6, #0
 800784a:	42a6      	cmp	r6, r4
 800784c:	d105      	bne.n	800785a <__libc_init_array+0x2e>
 800784e:	bd70      	pop	{r4, r5, r6, pc}
 8007850:	f855 3b04 	ldr.w	r3, [r5], #4
 8007854:	4798      	blx	r3
 8007856:	3601      	adds	r6, #1
 8007858:	e7ee      	b.n	8007838 <__libc_init_array+0xc>
 800785a:	f855 3b04 	ldr.w	r3, [r5], #4
 800785e:	4798      	blx	r3
 8007860:	3601      	adds	r6, #1
 8007862:	e7f2      	b.n	800784a <__libc_init_array+0x1e>
 8007864:	08008414 	.word	0x08008414
 8007868:	08008414 	.word	0x08008414
 800786c:	08008414 	.word	0x08008414
 8007870:	08008418 	.word	0x08008418

08007874 <__retarget_lock_acquire_recursive>:
 8007874:	4770      	bx	lr

08007876 <__retarget_lock_release_recursive>:
 8007876:	4770      	bx	lr

08007878 <_free_r>:
 8007878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800787a:	2900      	cmp	r1, #0
 800787c:	d044      	beq.n	8007908 <_free_r+0x90>
 800787e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007882:	9001      	str	r0, [sp, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f1a1 0404 	sub.w	r4, r1, #4
 800788a:	bfb8      	it	lt
 800788c:	18e4      	addlt	r4, r4, r3
 800788e:	f7ff ff83 	bl	8007798 <__malloc_lock>
 8007892:	4a1e      	ldr	r2, [pc, #120]	; (800790c <_free_r+0x94>)
 8007894:	9801      	ldr	r0, [sp, #4]
 8007896:	6813      	ldr	r3, [r2, #0]
 8007898:	b933      	cbnz	r3, 80078a8 <_free_r+0x30>
 800789a:	6063      	str	r3, [r4, #4]
 800789c:	6014      	str	r4, [r2, #0]
 800789e:	b003      	add	sp, #12
 80078a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078a4:	f7ff bf7e 	b.w	80077a4 <__malloc_unlock>
 80078a8:	42a3      	cmp	r3, r4
 80078aa:	d908      	bls.n	80078be <_free_r+0x46>
 80078ac:	6825      	ldr	r5, [r4, #0]
 80078ae:	1961      	adds	r1, r4, r5
 80078b0:	428b      	cmp	r3, r1
 80078b2:	bf01      	itttt	eq
 80078b4:	6819      	ldreq	r1, [r3, #0]
 80078b6:	685b      	ldreq	r3, [r3, #4]
 80078b8:	1949      	addeq	r1, r1, r5
 80078ba:	6021      	streq	r1, [r4, #0]
 80078bc:	e7ed      	b.n	800789a <_free_r+0x22>
 80078be:	461a      	mov	r2, r3
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	b10b      	cbz	r3, 80078c8 <_free_r+0x50>
 80078c4:	42a3      	cmp	r3, r4
 80078c6:	d9fa      	bls.n	80078be <_free_r+0x46>
 80078c8:	6811      	ldr	r1, [r2, #0]
 80078ca:	1855      	adds	r5, r2, r1
 80078cc:	42a5      	cmp	r5, r4
 80078ce:	d10b      	bne.n	80078e8 <_free_r+0x70>
 80078d0:	6824      	ldr	r4, [r4, #0]
 80078d2:	4421      	add	r1, r4
 80078d4:	1854      	adds	r4, r2, r1
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	6011      	str	r1, [r2, #0]
 80078da:	d1e0      	bne.n	800789e <_free_r+0x26>
 80078dc:	681c      	ldr	r4, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	440c      	add	r4, r1
 80078e4:	6014      	str	r4, [r2, #0]
 80078e6:	e7da      	b.n	800789e <_free_r+0x26>
 80078e8:	d902      	bls.n	80078f0 <_free_r+0x78>
 80078ea:	230c      	movs	r3, #12
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	e7d6      	b.n	800789e <_free_r+0x26>
 80078f0:	6825      	ldr	r5, [r4, #0]
 80078f2:	1961      	adds	r1, r4, r5
 80078f4:	428b      	cmp	r3, r1
 80078f6:	bf04      	itt	eq
 80078f8:	6819      	ldreq	r1, [r3, #0]
 80078fa:	685b      	ldreq	r3, [r3, #4]
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	bf04      	itt	eq
 8007900:	1949      	addeq	r1, r1, r5
 8007902:	6021      	streq	r1, [r4, #0]
 8007904:	6054      	str	r4, [r2, #4]
 8007906:	e7ca      	b.n	800789e <_free_r+0x26>
 8007908:	b003      	add	sp, #12
 800790a:	bd30      	pop	{r4, r5, pc}
 800790c:	20000860 	.word	0x20000860

08007910 <__ssputs_r>:
 8007910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007914:	688e      	ldr	r6, [r1, #8]
 8007916:	461f      	mov	r7, r3
 8007918:	42be      	cmp	r6, r7
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	4682      	mov	sl, r0
 800791e:	460c      	mov	r4, r1
 8007920:	4690      	mov	r8, r2
 8007922:	d82c      	bhi.n	800797e <__ssputs_r+0x6e>
 8007924:	898a      	ldrh	r2, [r1, #12]
 8007926:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800792a:	d026      	beq.n	800797a <__ssputs_r+0x6a>
 800792c:	6965      	ldr	r5, [r4, #20]
 800792e:	6909      	ldr	r1, [r1, #16]
 8007930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007934:	eba3 0901 	sub.w	r9, r3, r1
 8007938:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800793c:	1c7b      	adds	r3, r7, #1
 800793e:	444b      	add	r3, r9
 8007940:	106d      	asrs	r5, r5, #1
 8007942:	429d      	cmp	r5, r3
 8007944:	bf38      	it	cc
 8007946:	461d      	movcc	r5, r3
 8007948:	0553      	lsls	r3, r2, #21
 800794a:	d527      	bpl.n	800799c <__ssputs_r+0x8c>
 800794c:	4629      	mov	r1, r5
 800794e:	f7ff fea3 	bl	8007698 <_malloc_r>
 8007952:	4606      	mov	r6, r0
 8007954:	b360      	cbz	r0, 80079b0 <__ssputs_r+0xa0>
 8007956:	6921      	ldr	r1, [r4, #16]
 8007958:	464a      	mov	r2, r9
 800795a:	f000 fadb 	bl	8007f14 <memcpy>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007968:	81a3      	strh	r3, [r4, #12]
 800796a:	6126      	str	r6, [r4, #16]
 800796c:	6165      	str	r5, [r4, #20]
 800796e:	444e      	add	r6, r9
 8007970:	eba5 0509 	sub.w	r5, r5, r9
 8007974:	6026      	str	r6, [r4, #0]
 8007976:	60a5      	str	r5, [r4, #8]
 8007978:	463e      	mov	r6, r7
 800797a:	42be      	cmp	r6, r7
 800797c:	d900      	bls.n	8007980 <__ssputs_r+0x70>
 800797e:	463e      	mov	r6, r7
 8007980:	6820      	ldr	r0, [r4, #0]
 8007982:	4632      	mov	r2, r6
 8007984:	4641      	mov	r1, r8
 8007986:	f000 faab 	bl	8007ee0 <memmove>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	1b9b      	subs	r3, r3, r6
 800798e:	60a3      	str	r3, [r4, #8]
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	4433      	add	r3, r6
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2000      	movs	r0, #0
 8007998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799c:	462a      	mov	r2, r5
 800799e:	f000 fac7 	bl	8007f30 <_realloc_r>
 80079a2:	4606      	mov	r6, r0
 80079a4:	2800      	cmp	r0, #0
 80079a6:	d1e0      	bne.n	800796a <__ssputs_r+0x5a>
 80079a8:	6921      	ldr	r1, [r4, #16]
 80079aa:	4650      	mov	r0, sl
 80079ac:	f7ff ff64 	bl	8007878 <_free_r>
 80079b0:	230c      	movs	r3, #12
 80079b2:	f8ca 3000 	str.w	r3, [sl]
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079bc:	81a3      	strh	r3, [r4, #12]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e7e9      	b.n	8007998 <__ssputs_r+0x88>

080079c4 <_svfiprintf_r>:
 80079c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c8:	4698      	mov	r8, r3
 80079ca:	898b      	ldrh	r3, [r1, #12]
 80079cc:	061b      	lsls	r3, r3, #24
 80079ce:	b09d      	sub	sp, #116	; 0x74
 80079d0:	4607      	mov	r7, r0
 80079d2:	460d      	mov	r5, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	d50e      	bpl.n	80079f6 <_svfiprintf_r+0x32>
 80079d8:	690b      	ldr	r3, [r1, #16]
 80079da:	b963      	cbnz	r3, 80079f6 <_svfiprintf_r+0x32>
 80079dc:	2140      	movs	r1, #64	; 0x40
 80079de:	f7ff fe5b 	bl	8007698 <_malloc_r>
 80079e2:	6028      	str	r0, [r5, #0]
 80079e4:	6128      	str	r0, [r5, #16]
 80079e6:	b920      	cbnz	r0, 80079f2 <_svfiprintf_r+0x2e>
 80079e8:	230c      	movs	r3, #12
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	e0d0      	b.n	8007b94 <_svfiprintf_r+0x1d0>
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	616b      	str	r3, [r5, #20]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9309      	str	r3, [sp, #36]	; 0x24
 80079fa:	2320      	movs	r3, #32
 80079fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a00:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a04:	2330      	movs	r3, #48	; 0x30
 8007a06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007bac <_svfiprintf_r+0x1e8>
 8007a0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a0e:	f04f 0901 	mov.w	r9, #1
 8007a12:	4623      	mov	r3, r4
 8007a14:	469a      	mov	sl, r3
 8007a16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a1a:	b10a      	cbz	r2, 8007a20 <_svfiprintf_r+0x5c>
 8007a1c:	2a25      	cmp	r2, #37	; 0x25
 8007a1e:	d1f9      	bne.n	8007a14 <_svfiprintf_r+0x50>
 8007a20:	ebba 0b04 	subs.w	fp, sl, r4
 8007a24:	d00b      	beq.n	8007a3e <_svfiprintf_r+0x7a>
 8007a26:	465b      	mov	r3, fp
 8007a28:	4622      	mov	r2, r4
 8007a2a:	4629      	mov	r1, r5
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f7ff ff6f 	bl	8007910 <__ssputs_r>
 8007a32:	3001      	adds	r0, #1
 8007a34:	f000 80a9 	beq.w	8007b8a <_svfiprintf_r+0x1c6>
 8007a38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a3a:	445a      	add	r2, fp
 8007a3c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80a1 	beq.w	8007b8a <_svfiprintf_r+0x1c6>
 8007a48:	2300      	movs	r3, #0
 8007a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a52:	f10a 0a01 	add.w	sl, sl, #1
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	9307      	str	r3, [sp, #28]
 8007a5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a5e:	931a      	str	r3, [sp, #104]	; 0x68
 8007a60:	4654      	mov	r4, sl
 8007a62:	2205      	movs	r2, #5
 8007a64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a68:	4850      	ldr	r0, [pc, #320]	; (8007bac <_svfiprintf_r+0x1e8>)
 8007a6a:	f7f8 fbb9 	bl	80001e0 <memchr>
 8007a6e:	9a04      	ldr	r2, [sp, #16]
 8007a70:	b9d8      	cbnz	r0, 8007aaa <_svfiprintf_r+0xe6>
 8007a72:	06d0      	lsls	r0, r2, #27
 8007a74:	bf44      	itt	mi
 8007a76:	2320      	movmi	r3, #32
 8007a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a7c:	0711      	lsls	r1, r2, #28
 8007a7e:	bf44      	itt	mi
 8007a80:	232b      	movmi	r3, #43	; 0x2b
 8007a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a86:	f89a 3000 	ldrb.w	r3, [sl]
 8007a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a8c:	d015      	beq.n	8007aba <_svfiprintf_r+0xf6>
 8007a8e:	9a07      	ldr	r2, [sp, #28]
 8007a90:	4654      	mov	r4, sl
 8007a92:	2000      	movs	r0, #0
 8007a94:	f04f 0c0a 	mov.w	ip, #10
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a9e:	3b30      	subs	r3, #48	; 0x30
 8007aa0:	2b09      	cmp	r3, #9
 8007aa2:	d94d      	bls.n	8007b40 <_svfiprintf_r+0x17c>
 8007aa4:	b1b0      	cbz	r0, 8007ad4 <_svfiprintf_r+0x110>
 8007aa6:	9207      	str	r2, [sp, #28]
 8007aa8:	e014      	b.n	8007ad4 <_svfiprintf_r+0x110>
 8007aaa:	eba0 0308 	sub.w	r3, r0, r8
 8007aae:	fa09 f303 	lsl.w	r3, r9, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	46a2      	mov	sl, r4
 8007ab8:	e7d2      	b.n	8007a60 <_svfiprintf_r+0x9c>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d19      	adds	r1, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9103      	str	r1, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfbb      	ittet	lt
 8007ac6:	425b      	neglt	r3, r3
 8007ac8:	f042 0202 	orrlt.w	r2, r2, #2
 8007acc:	9307      	strge	r3, [sp, #28]
 8007ace:	9307      	strlt	r3, [sp, #28]
 8007ad0:	bfb8      	it	lt
 8007ad2:	9204      	strlt	r2, [sp, #16]
 8007ad4:	7823      	ldrb	r3, [r4, #0]
 8007ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ad8:	d10c      	bne.n	8007af4 <_svfiprintf_r+0x130>
 8007ada:	7863      	ldrb	r3, [r4, #1]
 8007adc:	2b2a      	cmp	r3, #42	; 0x2a
 8007ade:	d134      	bne.n	8007b4a <_svfiprintf_r+0x186>
 8007ae0:	9b03      	ldr	r3, [sp, #12]
 8007ae2:	1d1a      	adds	r2, r3, #4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	9203      	str	r2, [sp, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bfb8      	it	lt
 8007aec:	f04f 33ff 	movlt.w	r3, #4294967295
 8007af0:	3402      	adds	r4, #2
 8007af2:	9305      	str	r3, [sp, #20]
 8007af4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007bbc <_svfiprintf_r+0x1f8>
 8007af8:	7821      	ldrb	r1, [r4, #0]
 8007afa:	2203      	movs	r2, #3
 8007afc:	4650      	mov	r0, sl
 8007afe:	f7f8 fb6f 	bl	80001e0 <memchr>
 8007b02:	b138      	cbz	r0, 8007b14 <_svfiprintf_r+0x150>
 8007b04:	9b04      	ldr	r3, [sp, #16]
 8007b06:	eba0 000a 	sub.w	r0, r0, sl
 8007b0a:	2240      	movs	r2, #64	; 0x40
 8007b0c:	4082      	lsls	r2, r0
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	3401      	adds	r4, #1
 8007b12:	9304      	str	r3, [sp, #16]
 8007b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b18:	4825      	ldr	r0, [pc, #148]	; (8007bb0 <_svfiprintf_r+0x1ec>)
 8007b1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b1e:	2206      	movs	r2, #6
 8007b20:	f7f8 fb5e 	bl	80001e0 <memchr>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d038      	beq.n	8007b9a <_svfiprintf_r+0x1d6>
 8007b28:	4b22      	ldr	r3, [pc, #136]	; (8007bb4 <_svfiprintf_r+0x1f0>)
 8007b2a:	bb1b      	cbnz	r3, 8007b74 <_svfiprintf_r+0x1b0>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	3307      	adds	r3, #7
 8007b30:	f023 0307 	bic.w	r3, r3, #7
 8007b34:	3308      	adds	r3, #8
 8007b36:	9303      	str	r3, [sp, #12]
 8007b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3a:	4433      	add	r3, r6
 8007b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3e:	e768      	b.n	8007a12 <_svfiprintf_r+0x4e>
 8007b40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b44:	460c      	mov	r4, r1
 8007b46:	2001      	movs	r0, #1
 8007b48:	e7a6      	b.n	8007a98 <_svfiprintf_r+0xd4>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	9305      	str	r3, [sp, #20]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f04f 0c0a 	mov.w	ip, #10
 8007b56:	4620      	mov	r0, r4
 8007b58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b5c:	3a30      	subs	r2, #48	; 0x30
 8007b5e:	2a09      	cmp	r2, #9
 8007b60:	d903      	bls.n	8007b6a <_svfiprintf_r+0x1a6>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0c6      	beq.n	8007af4 <_svfiprintf_r+0x130>
 8007b66:	9105      	str	r1, [sp, #20]
 8007b68:	e7c4      	b.n	8007af4 <_svfiprintf_r+0x130>
 8007b6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b6e:	4604      	mov	r4, r0
 8007b70:	2301      	movs	r3, #1
 8007b72:	e7f0      	b.n	8007b56 <_svfiprintf_r+0x192>
 8007b74:	ab03      	add	r3, sp, #12
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	462a      	mov	r2, r5
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <_svfiprintf_r+0x1f4>)
 8007b7c:	a904      	add	r1, sp, #16
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f3af 8000 	nop.w
 8007b84:	1c42      	adds	r2, r0, #1
 8007b86:	4606      	mov	r6, r0
 8007b88:	d1d6      	bne.n	8007b38 <_svfiprintf_r+0x174>
 8007b8a:	89ab      	ldrh	r3, [r5, #12]
 8007b8c:	065b      	lsls	r3, r3, #25
 8007b8e:	f53f af2d 	bmi.w	80079ec <_svfiprintf_r+0x28>
 8007b92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b94:	b01d      	add	sp, #116	; 0x74
 8007b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9a:	ab03      	add	r3, sp, #12
 8007b9c:	9300      	str	r3, [sp, #0]
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <_svfiprintf_r+0x1f4>)
 8007ba2:	a904      	add	r1, sp, #16
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f000 f879 	bl	8007c9c <_printf_i>
 8007baa:	e7eb      	b.n	8007b84 <_svfiprintf_r+0x1c0>
 8007bac:	080083d8 	.word	0x080083d8
 8007bb0:	080083e2 	.word	0x080083e2
 8007bb4:	00000000 	.word	0x00000000
 8007bb8:	08007911 	.word	0x08007911
 8007bbc:	080083de 	.word	0x080083de

08007bc0 <_printf_common>:
 8007bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	4699      	mov	r9, r3
 8007bc8:	688a      	ldr	r2, [r1, #8]
 8007bca:	690b      	ldr	r3, [r1, #16]
 8007bcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	bfb8      	it	lt
 8007bd4:	4613      	movlt	r3, r2
 8007bd6:	6033      	str	r3, [r6, #0]
 8007bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bdc:	4607      	mov	r7, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	b10a      	cbz	r2, 8007be6 <_printf_common+0x26>
 8007be2:	3301      	adds	r3, #1
 8007be4:	6033      	str	r3, [r6, #0]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	0699      	lsls	r1, r3, #26
 8007bea:	bf42      	ittt	mi
 8007bec:	6833      	ldrmi	r3, [r6, #0]
 8007bee:	3302      	addmi	r3, #2
 8007bf0:	6033      	strmi	r3, [r6, #0]
 8007bf2:	6825      	ldr	r5, [r4, #0]
 8007bf4:	f015 0506 	ands.w	r5, r5, #6
 8007bf8:	d106      	bne.n	8007c08 <_printf_common+0x48>
 8007bfa:	f104 0a19 	add.w	sl, r4, #25
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	6832      	ldr	r2, [r6, #0]
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dc26      	bgt.n	8007c56 <_printf_common+0x96>
 8007c08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c0c:	1e13      	subs	r3, r2, #0
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	bf18      	it	ne
 8007c12:	2301      	movne	r3, #1
 8007c14:	0692      	lsls	r2, r2, #26
 8007c16:	d42b      	bmi.n	8007c70 <_printf_common+0xb0>
 8007c18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	4638      	mov	r0, r7
 8007c20:	47c0      	blx	r8
 8007c22:	3001      	adds	r0, #1
 8007c24:	d01e      	beq.n	8007c64 <_printf_common+0xa4>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	f003 0306 	and.w	r3, r3, #6
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	bf02      	ittt	eq
 8007c32:	68e5      	ldreq	r5, [r4, #12]
 8007c34:	6833      	ldreq	r3, [r6, #0]
 8007c36:	1aed      	subeq	r5, r5, r3
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	bf0c      	ite	eq
 8007c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c40:	2500      	movne	r5, #0
 8007c42:	4293      	cmp	r3, r2
 8007c44:	bfc4      	itt	gt
 8007c46:	1a9b      	subgt	r3, r3, r2
 8007c48:	18ed      	addgt	r5, r5, r3
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	341a      	adds	r4, #26
 8007c4e:	42b5      	cmp	r5, r6
 8007c50:	d11a      	bne.n	8007c88 <_printf_common+0xc8>
 8007c52:	2000      	movs	r0, #0
 8007c54:	e008      	b.n	8007c68 <_printf_common+0xa8>
 8007c56:	2301      	movs	r3, #1
 8007c58:	4652      	mov	r2, sl
 8007c5a:	4649      	mov	r1, r9
 8007c5c:	4638      	mov	r0, r7
 8007c5e:	47c0      	blx	r8
 8007c60:	3001      	adds	r0, #1
 8007c62:	d103      	bne.n	8007c6c <_printf_common+0xac>
 8007c64:	f04f 30ff 	mov.w	r0, #4294967295
 8007c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	e7c6      	b.n	8007bfe <_printf_common+0x3e>
 8007c70:	18e1      	adds	r1, r4, r3
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	2030      	movs	r0, #48	; 0x30
 8007c76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c7a:	4422      	add	r2, r4
 8007c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c84:	3302      	adds	r3, #2
 8007c86:	e7c7      	b.n	8007c18 <_printf_common+0x58>
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	4638      	mov	r0, r7
 8007c90:	47c0      	blx	r8
 8007c92:	3001      	adds	r0, #1
 8007c94:	d0e6      	beq.n	8007c64 <_printf_common+0xa4>
 8007c96:	3601      	adds	r6, #1
 8007c98:	e7d9      	b.n	8007c4e <_printf_common+0x8e>
	...

08007c9c <_printf_i>:
 8007c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	7e0f      	ldrb	r7, [r1, #24]
 8007ca2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ca4:	2f78      	cmp	r7, #120	; 0x78
 8007ca6:	4691      	mov	r9, r2
 8007ca8:	4680      	mov	r8, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	469a      	mov	sl, r3
 8007cae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cb2:	d807      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cb4:	2f62      	cmp	r7, #98	; 0x62
 8007cb6:	d80a      	bhi.n	8007cce <_printf_i+0x32>
 8007cb8:	2f00      	cmp	r7, #0
 8007cba:	f000 80d4 	beq.w	8007e66 <_printf_i+0x1ca>
 8007cbe:	2f58      	cmp	r7, #88	; 0x58
 8007cc0:	f000 80c0 	beq.w	8007e44 <_printf_i+0x1a8>
 8007cc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ccc:	e03a      	b.n	8007d44 <_printf_i+0xa8>
 8007cce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cd2:	2b15      	cmp	r3, #21
 8007cd4:	d8f6      	bhi.n	8007cc4 <_printf_i+0x28>
 8007cd6:	a101      	add	r1, pc, #4	; (adr r1, 8007cdc <_printf_i+0x40>)
 8007cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cdc:	08007d35 	.word	0x08007d35
 8007ce0:	08007d49 	.word	0x08007d49
 8007ce4:	08007cc5 	.word	0x08007cc5
 8007ce8:	08007cc5 	.word	0x08007cc5
 8007cec:	08007cc5 	.word	0x08007cc5
 8007cf0:	08007cc5 	.word	0x08007cc5
 8007cf4:	08007d49 	.word	0x08007d49
 8007cf8:	08007cc5 	.word	0x08007cc5
 8007cfc:	08007cc5 	.word	0x08007cc5
 8007d00:	08007cc5 	.word	0x08007cc5
 8007d04:	08007cc5 	.word	0x08007cc5
 8007d08:	08007e4d 	.word	0x08007e4d
 8007d0c:	08007d75 	.word	0x08007d75
 8007d10:	08007e07 	.word	0x08007e07
 8007d14:	08007cc5 	.word	0x08007cc5
 8007d18:	08007cc5 	.word	0x08007cc5
 8007d1c:	08007e6f 	.word	0x08007e6f
 8007d20:	08007cc5 	.word	0x08007cc5
 8007d24:	08007d75 	.word	0x08007d75
 8007d28:	08007cc5 	.word	0x08007cc5
 8007d2c:	08007cc5 	.word	0x08007cc5
 8007d30:	08007e0f 	.word	0x08007e0f
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	602a      	str	r2, [r5, #0]
 8007d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d44:	2301      	movs	r3, #1
 8007d46:	e09f      	b.n	8007e88 <_printf_i+0x1ec>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	0607      	lsls	r7, r0, #24
 8007d4e:	f103 0104 	add.w	r1, r3, #4
 8007d52:	6029      	str	r1, [r5, #0]
 8007d54:	d501      	bpl.n	8007d5a <_printf_i+0xbe>
 8007d56:	681e      	ldr	r6, [r3, #0]
 8007d58:	e003      	b.n	8007d62 <_printf_i+0xc6>
 8007d5a:	0646      	lsls	r6, r0, #25
 8007d5c:	d5fb      	bpl.n	8007d56 <_printf_i+0xba>
 8007d5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d62:	2e00      	cmp	r6, #0
 8007d64:	da03      	bge.n	8007d6e <_printf_i+0xd2>
 8007d66:	232d      	movs	r3, #45	; 0x2d
 8007d68:	4276      	negs	r6, r6
 8007d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d6e:	485a      	ldr	r0, [pc, #360]	; (8007ed8 <_printf_i+0x23c>)
 8007d70:	230a      	movs	r3, #10
 8007d72:	e012      	b.n	8007d9a <_printf_i+0xfe>
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	6820      	ldr	r0, [r4, #0]
 8007d78:	1d19      	adds	r1, r3, #4
 8007d7a:	6029      	str	r1, [r5, #0]
 8007d7c:	0605      	lsls	r5, r0, #24
 8007d7e:	d501      	bpl.n	8007d84 <_printf_i+0xe8>
 8007d80:	681e      	ldr	r6, [r3, #0]
 8007d82:	e002      	b.n	8007d8a <_printf_i+0xee>
 8007d84:	0641      	lsls	r1, r0, #25
 8007d86:	d5fb      	bpl.n	8007d80 <_printf_i+0xe4>
 8007d88:	881e      	ldrh	r6, [r3, #0]
 8007d8a:	4853      	ldr	r0, [pc, #332]	; (8007ed8 <_printf_i+0x23c>)
 8007d8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007d8e:	bf0c      	ite	eq
 8007d90:	2308      	moveq	r3, #8
 8007d92:	230a      	movne	r3, #10
 8007d94:	2100      	movs	r1, #0
 8007d96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d9a:	6865      	ldr	r5, [r4, #4]
 8007d9c:	60a5      	str	r5, [r4, #8]
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	bfa2      	ittt	ge
 8007da2:	6821      	ldrge	r1, [r4, #0]
 8007da4:	f021 0104 	bicge.w	r1, r1, #4
 8007da8:	6021      	strge	r1, [r4, #0]
 8007daa:	b90e      	cbnz	r6, 8007db0 <_printf_i+0x114>
 8007dac:	2d00      	cmp	r5, #0
 8007dae:	d04b      	beq.n	8007e48 <_printf_i+0x1ac>
 8007db0:	4615      	mov	r5, r2
 8007db2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007db6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dba:	5dc7      	ldrb	r7, [r0, r7]
 8007dbc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dc0:	4637      	mov	r7, r6
 8007dc2:	42bb      	cmp	r3, r7
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	d9f4      	bls.n	8007db2 <_printf_i+0x116>
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d10b      	bne.n	8007de4 <_printf_i+0x148>
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	07de      	lsls	r6, r3, #31
 8007dd0:	d508      	bpl.n	8007de4 <_printf_i+0x148>
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	6861      	ldr	r1, [r4, #4]
 8007dd6:	4299      	cmp	r1, r3
 8007dd8:	bfde      	ittt	le
 8007dda:	2330      	movle	r3, #48	; 0x30
 8007ddc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007de4:	1b52      	subs	r2, r2, r5
 8007de6:	6122      	str	r2, [r4, #16]
 8007de8:	f8cd a000 	str.w	sl, [sp]
 8007dec:	464b      	mov	r3, r9
 8007dee:	aa03      	add	r2, sp, #12
 8007df0:	4621      	mov	r1, r4
 8007df2:	4640      	mov	r0, r8
 8007df4:	f7ff fee4 	bl	8007bc0 <_printf_common>
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d14a      	bne.n	8007e92 <_printf_i+0x1f6>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b004      	add	sp, #16
 8007e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	f043 0320 	orr.w	r3, r3, #32
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	4833      	ldr	r0, [pc, #204]	; (8007edc <_printf_i+0x240>)
 8007e10:	2778      	movs	r7, #120	; 0x78
 8007e12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	6829      	ldr	r1, [r5, #0]
 8007e1a:	061f      	lsls	r7, r3, #24
 8007e1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e20:	d402      	bmi.n	8007e28 <_printf_i+0x18c>
 8007e22:	065f      	lsls	r7, r3, #25
 8007e24:	bf48      	it	mi
 8007e26:	b2b6      	uxthmi	r6, r6
 8007e28:	07df      	lsls	r7, r3, #31
 8007e2a:	bf48      	it	mi
 8007e2c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e30:	6029      	str	r1, [r5, #0]
 8007e32:	bf48      	it	mi
 8007e34:	6023      	strmi	r3, [r4, #0]
 8007e36:	b91e      	cbnz	r6, 8007e40 <_printf_i+0x1a4>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	f023 0320 	bic.w	r3, r3, #32
 8007e3e:	6023      	str	r3, [r4, #0]
 8007e40:	2310      	movs	r3, #16
 8007e42:	e7a7      	b.n	8007d94 <_printf_i+0xf8>
 8007e44:	4824      	ldr	r0, [pc, #144]	; (8007ed8 <_printf_i+0x23c>)
 8007e46:	e7e4      	b.n	8007e12 <_printf_i+0x176>
 8007e48:	4615      	mov	r5, r2
 8007e4a:	e7bd      	b.n	8007dc8 <_printf_i+0x12c>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	6826      	ldr	r6, [r4, #0]
 8007e50:	6961      	ldr	r1, [r4, #20]
 8007e52:	1d18      	adds	r0, r3, #4
 8007e54:	6028      	str	r0, [r5, #0]
 8007e56:	0635      	lsls	r5, r6, #24
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	d501      	bpl.n	8007e60 <_printf_i+0x1c4>
 8007e5c:	6019      	str	r1, [r3, #0]
 8007e5e:	e002      	b.n	8007e66 <_printf_i+0x1ca>
 8007e60:	0670      	lsls	r0, r6, #25
 8007e62:	d5fb      	bpl.n	8007e5c <_printf_i+0x1c0>
 8007e64:	8019      	strh	r1, [r3, #0]
 8007e66:	2300      	movs	r3, #0
 8007e68:	6123      	str	r3, [r4, #16]
 8007e6a:	4615      	mov	r5, r2
 8007e6c:	e7bc      	b.n	8007de8 <_printf_i+0x14c>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	1d1a      	adds	r2, r3, #4
 8007e72:	602a      	str	r2, [r5, #0]
 8007e74:	681d      	ldr	r5, [r3, #0]
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	2100      	movs	r1, #0
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	f7f8 f9b0 	bl	80001e0 <memchr>
 8007e80:	b108      	cbz	r0, 8007e86 <_printf_i+0x1ea>
 8007e82:	1b40      	subs	r0, r0, r5
 8007e84:	6060      	str	r0, [r4, #4]
 8007e86:	6863      	ldr	r3, [r4, #4]
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e90:	e7aa      	b.n	8007de8 <_printf_i+0x14c>
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	462a      	mov	r2, r5
 8007e96:	4649      	mov	r1, r9
 8007e98:	4640      	mov	r0, r8
 8007e9a:	47d0      	blx	sl
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	d0ad      	beq.n	8007dfc <_printf_i+0x160>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	079b      	lsls	r3, r3, #30
 8007ea4:	d413      	bmi.n	8007ece <_printf_i+0x232>
 8007ea6:	68e0      	ldr	r0, [r4, #12]
 8007ea8:	9b03      	ldr	r3, [sp, #12]
 8007eaa:	4298      	cmp	r0, r3
 8007eac:	bfb8      	it	lt
 8007eae:	4618      	movlt	r0, r3
 8007eb0:	e7a6      	b.n	8007e00 <_printf_i+0x164>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	47d0      	blx	sl
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d09d      	beq.n	8007dfc <_printf_i+0x160>
 8007ec0:	3501      	adds	r5, #1
 8007ec2:	68e3      	ldr	r3, [r4, #12]
 8007ec4:	9903      	ldr	r1, [sp, #12]
 8007ec6:	1a5b      	subs	r3, r3, r1
 8007ec8:	42ab      	cmp	r3, r5
 8007eca:	dcf2      	bgt.n	8007eb2 <_printf_i+0x216>
 8007ecc:	e7eb      	b.n	8007ea6 <_printf_i+0x20a>
 8007ece:	2500      	movs	r5, #0
 8007ed0:	f104 0619 	add.w	r6, r4, #25
 8007ed4:	e7f5      	b.n	8007ec2 <_printf_i+0x226>
 8007ed6:	bf00      	nop
 8007ed8:	080083e9 	.word	0x080083e9
 8007edc:	080083fa 	.word	0x080083fa

08007ee0 <memmove>:
 8007ee0:	4288      	cmp	r0, r1
 8007ee2:	b510      	push	{r4, lr}
 8007ee4:	eb01 0402 	add.w	r4, r1, r2
 8007ee8:	d902      	bls.n	8007ef0 <memmove+0x10>
 8007eea:	4284      	cmp	r4, r0
 8007eec:	4623      	mov	r3, r4
 8007eee:	d807      	bhi.n	8007f00 <memmove+0x20>
 8007ef0:	1e43      	subs	r3, r0, #1
 8007ef2:	42a1      	cmp	r1, r4
 8007ef4:	d008      	beq.n	8007f08 <memmove+0x28>
 8007ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007efa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007efe:	e7f8      	b.n	8007ef2 <memmove+0x12>
 8007f00:	4402      	add	r2, r0
 8007f02:	4601      	mov	r1, r0
 8007f04:	428a      	cmp	r2, r1
 8007f06:	d100      	bne.n	8007f0a <memmove+0x2a>
 8007f08:	bd10      	pop	{r4, pc}
 8007f0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f12:	e7f7      	b.n	8007f04 <memmove+0x24>

08007f14 <memcpy>:
 8007f14:	440a      	add	r2, r1
 8007f16:	4291      	cmp	r1, r2
 8007f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f1c:	d100      	bne.n	8007f20 <memcpy+0xc>
 8007f1e:	4770      	bx	lr
 8007f20:	b510      	push	{r4, lr}
 8007f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f2a:	4291      	cmp	r1, r2
 8007f2c:	d1f9      	bne.n	8007f22 <memcpy+0xe>
 8007f2e:	bd10      	pop	{r4, pc}

08007f30 <_realloc_r>:
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	4680      	mov	r8, r0
 8007f36:	4614      	mov	r4, r2
 8007f38:	460e      	mov	r6, r1
 8007f3a:	b921      	cbnz	r1, 8007f46 <_realloc_r+0x16>
 8007f3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f40:	4611      	mov	r1, r2
 8007f42:	f7ff bba9 	b.w	8007698 <_malloc_r>
 8007f46:	b92a      	cbnz	r2, 8007f54 <_realloc_r+0x24>
 8007f48:	f7ff fc96 	bl	8007878 <_free_r>
 8007f4c:	4625      	mov	r5, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	f000 f81b 	bl	8007f8e <_malloc_usable_size_r>
 8007f58:	4284      	cmp	r4, r0
 8007f5a:	4607      	mov	r7, r0
 8007f5c:	d802      	bhi.n	8007f64 <_realloc_r+0x34>
 8007f5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007f62:	d812      	bhi.n	8007f8a <_realloc_r+0x5a>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7ff fb96 	bl	8007698 <_malloc_r>
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d0ed      	beq.n	8007f4e <_realloc_r+0x1e>
 8007f72:	42bc      	cmp	r4, r7
 8007f74:	4622      	mov	r2, r4
 8007f76:	4631      	mov	r1, r6
 8007f78:	bf28      	it	cs
 8007f7a:	463a      	movcs	r2, r7
 8007f7c:	f7ff ffca 	bl	8007f14 <memcpy>
 8007f80:	4631      	mov	r1, r6
 8007f82:	4640      	mov	r0, r8
 8007f84:	f7ff fc78 	bl	8007878 <_free_r>
 8007f88:	e7e1      	b.n	8007f4e <_realloc_r+0x1e>
 8007f8a:	4635      	mov	r5, r6
 8007f8c:	e7df      	b.n	8007f4e <_realloc_r+0x1e>

08007f8e <_malloc_usable_size_r>:
 8007f8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f92:	1f18      	subs	r0, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfbc      	itt	lt
 8007f98:	580b      	ldrlt	r3, [r1, r0]
 8007f9a:	18c0      	addlt	r0, r0, r3
 8007f9c:	4770      	bx	lr
	...

08007fa0 <_init>:
 8007fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fa2:	bf00      	nop
 8007fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fa6:	bc08      	pop	{r3}
 8007fa8:	469e      	mov	lr, r3
 8007faa:	4770      	bx	lr

08007fac <_fini>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	bf00      	nop
 8007fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fb2:	bc08      	pop	{r3}
 8007fb4:	469e      	mov	lr, r3
 8007fb6:	4770      	bx	lr


Ejemplo16_Termocupla.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008300  08008300  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008300  08008300  00018300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008308  08008308  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008308  08008308  00018308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800830c  0800830c  0001830c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001d4  080084e4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080084e4  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a0f7  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c41  00000000  00000000  0002a33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d8  00000000  00000000  0002c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b21  00000000  00000000  0002cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc69  00000000  00000000  00043a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000881a4  00000000  00000000  0004f6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000391c  00000000  00000000  000d7890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000db1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e80 	.word	0x08007e80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007e80 	.word	0x08007e80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_GPIO_Init+0x98>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_GPIO_Init+0x98>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0x98>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_GPIO_Init+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_GPIO_Init+0x98>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_GPIO_Init+0x98>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_GPIO_Init+0x98>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <MX_GPIO_Init+0x98>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_GPIO_Init+0x98>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <MX_GPIO_Init+0x9c>)
 8001070:	f000 fe52 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0x9c>)
 800108c:	f000 fcc0 	bl	8001a10 <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40020400 	.word	0x40020400

080010a0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

	  HAL_UART_Transmit(&huart2, (const uint8_t *)&ch, (uint16_t)1, HAL_MAX_DELAY);
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	2201      	movs	r2, #1
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <__io_putchar+0x20>)
 80010b2:	f001 ff9c 	bl	8002fee <HAL_UART_Transmit>

	  return ch;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000258 	.word	0x20000258

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c8:	f000 fb26 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010cc:	f000 f870 	bl	80011b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d0:	f7ff ff96 	bl	8001000 <MX_GPIO_Init>
  MX_SPI1_Init();
 80010d4:	f000 f8dc 	bl	8001290 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 fa82 	bl	80015e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //Iniciamos la comunicacion
	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4829      	ldr	r0, [pc, #164]	; (8001188 <main+0xc4>)
 80010e2:	f000 fe19 	bl	8001d18 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, buffer, 2, 10);
 80010e6:	230a      	movs	r3, #10
 80010e8:	2202      	movs	r2, #2
 80010ea:	4928      	ldr	r1, [pc, #160]	; (800118c <main+0xc8>)
 80010ec:	4828      	ldr	r0, [pc, #160]	; (8001190 <main+0xcc>)
 80010ee:	f001 fb4e 	bl	800278e <HAL_SPI_Receive>
	  tramaH = buffer[0];
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <main+0xc8>)
 80010f4:	781a      	ldrb	r2, [r3, #0]
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <main+0xd0>)
 80010f8:	701a      	strb	r2, [r3, #0]
	  tramaL =  buffer[1];
 80010fa:	4b24      	ldr	r3, [pc, #144]	; (800118c <main+0xc8>)
 80010fc:	785a      	ldrb	r2, [r3, #1]
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <main+0xd4>)
 8001100:	701a      	strb	r2, [r3, #0]
	  Trama = (tramaH<<8)+tramaL;
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <main+0xd0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b29b      	uxth	r3, r3
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <main+0xd4>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	4413      	add	r3, r2
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <main+0xd8>)
 8001118:	801a      	strh	r2, [r3, #0]
	  //Quiero q termine
	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	2140      	movs	r1, #64	; 0x40
 800111e:	481a      	ldr	r0, [pc, #104]	; (8001188 <main+0xc4>)
 8001120:	f000 fdfa 	bl	8001d18 <HAL_GPIO_WritePin>


	  if (Trama & 0x04) {
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <main+0xd8>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <main+0x72>
		printf("Desconectado\n\r");
 8001130:	481b      	ldr	r0, [pc, #108]	; (80011a0 <main+0xdc>)
 8001132:	f003 f9f7 	bl	8004524 <iprintf>
	}

	  Trama >>=3;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <main+0xd8>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b29a      	uxth	r2, r3
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <main+0xd8>)
 8001140:	801a      	strh	r2, [r3, #0]
	   temperatura = Trama*0.25;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <main+0xd8>)
 8001144:	881b      	ldrh	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9f4 	bl	8000534 <__aeabi_i2d>
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <main+0xe0>)
 8001152:	f7ff fa59 	bl	8000608 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd4b 	bl	8000bf8 <__aeabi_d2f>
 8001162:	4603      	mov	r3, r0
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <main+0xe4>)
 8001166:	6013      	str	r3, [r2, #0]
	   printf("Temperatura : %0.3f",temperatura);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <main+0xe4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f3 	bl	8000558 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	480d      	ldr	r0, [pc, #52]	; (80011ac <main+0xe8>)
 8001178:	f003 f9d4 	bl	8004524 <iprintf>
		  HAL_Delay(500);
 800117c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001180:	f000 fb3c 	bl	80017fc <HAL_Delay>
	  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001184:	e7aa      	b.n	80010dc <main+0x18>
 8001186:	bf00      	nop
 8001188:	40020400 	.word	0x40020400
 800118c:	200001f4 	.word	0x200001f4
 8001190:	200001fc 	.word	0x200001fc
 8001194:	200001f0 	.word	0x200001f0
 8001198:	200001f1 	.word	0x200001f1
 800119c:	200001f6 	.word	0x200001f6
 80011a0:	08007e98 	.word	0x08007e98
 80011a4:	3fd00000 	.word	0x3fd00000
 80011a8:	200001f8 	.word	0x200001f8
 80011ac:	08007ea8 	.word	0x08007ea8

080011b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b094      	sub	sp, #80	; 0x50
 80011b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b6:	f107 0320 	add.w	r3, r7, #32
 80011ba:	2230      	movs	r2, #48	; 0x30
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fa25 	bl	800460e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <SystemClock_Config+0xcc>)
 80011de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e2:	6413      	str	r3, [r2, #64]	; 0x40
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <SystemClock_Config+0xcc>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <SystemClock_Config+0xd0>)
 80011fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <SystemClock_Config+0xd0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120c:	607b      	str	r3, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001214:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121a:	2302      	movs	r3, #2
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800121e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001222:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001224:	2304      	movs	r3, #4
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001228:	2354      	movs	r3, #84	; 0x54
 800122a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122c:	2302      	movs	r3, #2
 800122e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001230:	2304      	movs	r3, #4
 8001232:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001234:	f107 0320 	add.w	r3, r7, #32
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fd87 	bl	8001d4c <HAL_RCC_OscConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001244:	f000 f81e 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001248:	230f      	movs	r3, #15
 800124a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2102      	movs	r1, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f000 ffe9 	bl	800223c <HAL_RCC_ClockConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001270:	f000 f808 	bl	8001284 <Error_Handler>
  }
}
 8001274:	bf00      	nop
 8001276:	3750      	adds	r7, #80	; 0x50
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40007000 	.word	0x40007000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	e7fe      	b.n	800128c <Error_Handler+0x8>
	...

08001290 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_SPI1_Init+0x64>)
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <MX_SPI1_Init+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_SPI1_Init+0x64>)
 800129c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012c4:	2218      	movs	r2, #24
 80012c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012dc:	220a      	movs	r2, #10
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_SPI1_Init+0x64>)
 80012e2:	f001 f9cb 	bl	800267c <HAL_SPI_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012ec:	f7ff ffca 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	40013000 	.word	0x40013000

080012fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_SPI_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_SPI_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_SPI_MspInit+0x88>)
 8001328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_SPI_MspInit+0x88>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_SPI_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_SPI_MspInit+0x88>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_SPI_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001356:	23e0      	movs	r3, #224	; 0xe0
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001366:	2305      	movs	r3, #5
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_SPI_MspInit+0x8c>)
 8001372:	f000 fb4d 	bl	8001a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40013000 	.word	0x40013000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	; (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f9c8 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return 1;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_kill>:

int _kill(int pid, int sig)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800144a:	f003 f933 	bl	80046b4 <__errno>
 800144e:	4603      	mov	r3, r0
 8001450:	2216      	movs	r2, #22
 8001452:	601a      	str	r2, [r3, #0]
  return -1;
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_exit>:

void _exit (int status)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7ff ffe7 	bl	8001440 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001472:	e7fe      	b.n	8001472 <_exit+0x12>

08001474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	e00a      	b.n	800149c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001486:	f3af 8000 	nop.w
 800148a:	4601      	mov	r1, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	60ba      	str	r2, [r7, #8]
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf0      	blt.n	8001486 <_read+0x12>
  }

  return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e009      	b.n	80014d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	60ba      	str	r2, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fde9 	bl	80010a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbf1      	blt.n	80014c0 <_write+0x12>
  }
  return len;
 80014dc:	687b      	ldr	r3, [r7, #4]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_close>:

int _close(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150e:	605a      	str	r2, [r3, #4]
  return 0;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_isatty>:

int _isatty(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f003 f898 	bl	80046b4 <__errno>
 8001584:	4603      	mov	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_sbrk+0x64>)
 80015a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20018000 	.word	0x20018000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	20000254 	.word	0x20000254
 80015b8:	200003f0 	.word	0x200003f0

080015bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <SystemInit+0x20>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <SystemInit+0x20>)
 80015c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <MX_USART2_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART2_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART2_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_USART2_UART_Init+0x4c>)
 8001618:	f001 fc9c 	bl	8002f54 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f7ff fe2f 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000258 	.word	0x20000258
 8001630:	40004400 	.word	0x40004400

08001634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_UART_MspInit+0x84>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d12b      	bne.n	80016ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_UART_MspInit+0x88>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a17      	ldr	r2, [pc, #92]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_UART_MspInit+0x88>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_UART_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800168e:	230c      	movs	r3, #12
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0x8c>)
 80016aa:	f000 f9b1 	bl	8001a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ee:	f7ff ff65 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f002 ffe5 	bl	80046c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fce5 	bl	80010c4 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001708:	08008310 	.word	0x08008310
  ldr r2, =_sbss
 800170c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001710:	200003ec 	.word	0x200003ec

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f931 	bl	80019a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fe1e 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f93b 	bl	80019f6 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f911 	bl	80019be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	2000029c 	.word	0x2000029c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000029c 	.word	0x2000029c

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	db0a      	blt.n	80018d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	490c      	ldr	r1, [pc, #48]	; (80018f4 <__NVIC_SetPriority+0x4c>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	0112      	lsls	r2, r2, #4
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	440b      	add	r3, r1
 80018cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018d0:	e00a      	b.n	80018e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	4908      	ldr	r1, [pc, #32]	; (80018f8 <__NVIC_SetPriority+0x50>)
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	3b04      	subs	r3, #4
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	b2d2      	uxtb	r2, r2
 80018e4:	440b      	add	r3, r1
 80018e6:	761a      	strb	r2, [r3, #24]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f1c3 0307 	rsb	r3, r3, #7
 8001916:	2b04      	cmp	r3, #4
 8001918:	bf28      	it	cs
 800191a:	2304      	movcs	r3, #4
 800191c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3304      	adds	r3, #4
 8001922:	2b06      	cmp	r3, #6
 8001924:	d902      	bls.n	800192c <NVIC_EncodePriority+0x30>
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3b03      	subs	r3, #3
 800192a:	e000      	b.n	800192e <NVIC_EncodePriority+0x32>
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	401a      	ands	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001944:	f04f 31ff 	mov.w	r1, #4294967295
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa01 f303 	lsl.w	r3, r1, r3
 800194e:	43d9      	mvns	r1, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001954:	4313      	orrs	r3, r2
         );
}
 8001956:	4618      	mov	r0, r3
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3b01      	subs	r3, #1
 8001970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001974:	d301      	bcc.n	800197a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001976:	2301      	movs	r3, #1
 8001978:	e00f      	b.n	800199a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <SysTick_Config+0x40>)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001982:	210f      	movs	r1, #15
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f7ff ff8e 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <SysTick_Config+0x40>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SysTick_Config+0x40>)
 8001994:	2207      	movs	r2, #7
 8001996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	e000e010 	.word	0xe000e010

080019a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff47 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff5c 	bl	800188c <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ff8e 	bl	80018fc <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffb0 	bl	8001964 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	e159      	b.n	8001ce0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f040 8148 	bne.w	8001cda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d005      	beq.n	8001a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d130      	bne.n	8001ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 0201 	and.w	r2, r3, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d017      	beq.n	8001b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d123      	bne.n	8001b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	08da      	lsrs	r2, r3, #3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3208      	adds	r2, #8
 8001b4e:	69b9      	ldr	r1, [r7, #24]
 8001b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	2203      	movs	r2, #3
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80a2 	beq.w	8001cda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b57      	ldr	r3, [pc, #348]	; (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4a56      	ldr	r2, [pc, #344]	; (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	4b54      	ldr	r3, [pc, #336]	; (8001cf8 <HAL_GPIO_Init+0x2e8>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb2:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_GPIO_Init+0x2ec>)
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	089b      	lsrs	r3, r3, #2
 8001bb8:	3302      	adds	r3, #2
 8001bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a49      	ldr	r2, [pc, #292]	; (8001d00 <HAL_GPIO_Init+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x202>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a48      	ldr	r2, [pc, #288]	; (8001d04 <HAL_GPIO_Init+0x2f4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x1fe>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a47      	ldr	r2, [pc, #284]	; (8001d08 <HAL_GPIO_Init+0x2f8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x1fa>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a46      	ldr	r2, [pc, #280]	; (8001d0c <HAL_GPIO_Init+0x2fc>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x1f6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a45      	ldr	r2, [pc, #276]	; (8001d10 <HAL_GPIO_Init+0x300>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x1f2>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	e008      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c02:	2307      	movs	r3, #7
 8001c04:	e006      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c06:	2303      	movs	r3, #3
 8001c08:	e004      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e002      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <HAL_GPIO_Init+0x204>
 8001c12:	2300      	movs	r3, #0
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	f002 0203 	and.w	r2, r2, #3
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	4093      	lsls	r3, r2
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c24:	4935      	ldr	r1, [pc, #212]	; (8001cfc <HAL_GPIO_Init+0x2ec>)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	089b      	lsrs	r3, r3, #2
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c56:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001caa:	4a1a      	ldr	r2, [pc, #104]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd4:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_GPIO_Init+0x304>)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b0f      	cmp	r3, #15
 8001ce4:	f67f aea2 	bls.w	8001a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	40020000 	.word	0x40020000
 8001d04:	40020400 	.word	0x40020400
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e267      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d075      	beq.n	8001e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b85      	ldr	r3, [pc, #532]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e242      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x74>
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x98>
 8001dca:	4b70      	ldr	r3, [pc, #448]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6f      	ldr	r2, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6c      	ldr	r2, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a68      	ldr	r2, [pc, #416]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b66      	ldr	r3, [pc, #408]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a65      	ldr	r2, [pc, #404]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fcee 	bl	80017e4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fcea 	bl	80017e4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e207      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xc0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fcda 	bl	80017e4 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fcd6 	bl	80017e4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1f3      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0xe8>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1c7      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4937      	ldr	r1, [pc, #220]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fc8f 	bl	80017e4 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc8b 	bl	80017e4 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1a8      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b28      	ldr	r3, [pc, #160]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4925      	ldr	r1, [pc, #148]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc6e 	bl	80017e4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fc6a 	bl	80017e4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e187      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d036      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff fc4e 	bl	80017e4 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fc4a 	bl	80017e4 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e167      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x200>
 8001f6a:	e01b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fc37 	bl	80017e4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00e      	b.n	8001f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fc33 	bl	80017e4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d907      	bls.n	8001f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e150      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b88      	ldr	r3, [pc, #544]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ea      	bne.n	8001f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8097 	beq.w	80020e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b81      	ldr	r3, [pc, #516]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a7c      	ldr	r2, [pc, #496]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b77      	ldr	r3, [pc, #476]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a73      	ldr	r2, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fbf3 	bl	80017e4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7ff fbef 	bl	80017e4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e10c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b6a      	ldr	r3, [pc, #424]	; (80021c0 <HAL_RCC_OscConfig+0x474>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x2ea>
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a63      	ldr	r2, [pc, #396]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x30c>
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a5e      	ldr	r2, [pc, #376]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002058:	4b58      	ldr	r3, [pc, #352]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a57      	ldr	r2, [pc, #348]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a54      	ldr	r2, [pc, #336]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fbb4 	bl	80017e4 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fbb0 	bl	80017e4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0cb      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ee      	beq.n	8002080 <HAL_RCC_OscConfig+0x334>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fb9e 	bl	80017e4 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff fb9a 	bl	80017e4 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0b5      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ee      	bne.n	80020ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b39      	ldr	r3, [pc, #228]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a38      	ldr	r2, [pc, #224]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a1 	beq.w	800222c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d05c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d141      	bne.n	8002182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fb6e 	bl	80017e4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fb6a 	bl	80017e4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e087      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	491b      	ldr	r1, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fb43 	bl	80017e4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fb3f 	bl	80017e4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e05c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x416>
 8002180:	e054      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff fb2c 	bl	80017e4 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff fb28 	bl	80017e4 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e045      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_RCC_OscConfig+0x470>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x444>
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e038      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <HAL_RCC_OscConfig+0x4ec>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d121      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0cc      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d90c      	bls.n	8002278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800229a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a52      	ldr	r2, [pc, #328]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d044      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b3f      	ldr	r3, [pc, #252]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3b      	ldr	r3, [pc, #236]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e067      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b37      	ldr	r3, [pc, #220]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4934      	ldr	r1, [pc, #208]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff fa5a 	bl	80017e4 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff fa56 	bl	80017e4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e04f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d20c      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490a      	ldr	r1, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f9ba 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08007ebc 	.word	0x08007ebc
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b094      	sub	sp, #80	; 0x50
 800240e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	647b      	str	r3, [r7, #68]	; 0x44
 8002414:	2300      	movs	r3, #0
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002420:	4b79      	ldr	r3, [pc, #484]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d00d      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x40>
 800242c:	2b08      	cmp	r3, #8
 800242e:	f200 80e1 	bhi.w	80025f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x34>
 8002436:	2b04      	cmp	r3, #4
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x3a>
 800243a:	e0db      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b73      	ldr	r3, [pc, #460]	; (800260c <HAL_RCC_GetSysClockFreq+0x204>)
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002440:	e0db      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002442:	4b73      	ldr	r3, [pc, #460]	; (8002610 <HAL_RCC_GetSysClockFreq+0x208>)
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002446:	e0d8      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002452:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d063      	beq.n	8002526 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
 8002468:	63fa      	str	r2, [r7, #60]	; 0x3c
 800246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002470:	633b      	str	r3, [r7, #48]	; 0x30
 8002472:	2300      	movs	r3, #0
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
 8002476:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800247a:	4622      	mov	r2, r4
 800247c:	462b      	mov	r3, r5
 800247e:	f04f 0000 	mov.w	r0, #0
 8002482:	f04f 0100 	mov.w	r1, #0
 8002486:	0159      	lsls	r1, r3, #5
 8002488:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248c:	0150      	lsls	r0, r2, #5
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4621      	mov	r1, r4
 8002494:	1a51      	subs	r1, r2, r1
 8002496:	6139      	str	r1, [r7, #16]
 8002498:	4629      	mov	r1, r5
 800249a:	eb63 0301 	sbc.w	r3, r3, r1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024ac:	4659      	mov	r1, fp
 80024ae:	018b      	lsls	r3, r1, #6
 80024b0:	4651      	mov	r1, sl
 80024b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b6:	4651      	mov	r1, sl
 80024b8:	018a      	lsls	r2, r1, #6
 80024ba:	4651      	mov	r1, sl
 80024bc:	ebb2 0801 	subs.w	r8, r2, r1
 80024c0:	4659      	mov	r1, fp
 80024c2:	eb63 0901 	sbc.w	r9, r3, r1
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024da:	4690      	mov	r8, r2
 80024dc:	4699      	mov	r9, r3
 80024de:	4623      	mov	r3, r4
 80024e0:	eb18 0303 	adds.w	r3, r8, r3
 80024e4:	60bb      	str	r3, [r7, #8]
 80024e6:	462b      	mov	r3, r5
 80024e8:	eb49 0303 	adc.w	r3, r9, r3
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024fa:	4629      	mov	r1, r5
 80024fc:	024b      	lsls	r3, r1, #9
 80024fe:	4621      	mov	r1, r4
 8002500:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002504:	4621      	mov	r1, r4
 8002506:	024a      	lsls	r2, r1, #9
 8002508:	4610      	mov	r0, r2
 800250a:	4619      	mov	r1, r3
 800250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800250e:	2200      	movs	r2, #0
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
 8002512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002514:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002518:	f7fe fbbe 	bl	8000c98 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002524:	e058      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	099b      	lsrs	r3, r3, #6
 800252c:	2200      	movs	r2, #0
 800252e:	4618      	mov	r0, r3
 8002530:	4611      	mov	r1, r2
 8002532:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
 800253c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002540:	4642      	mov	r2, r8
 8002542:	464b      	mov	r3, r9
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	f04f 0100 	mov.w	r1, #0
 800254c:	0159      	lsls	r1, r3, #5
 800254e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002552:	0150      	lsls	r0, r2, #5
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4641      	mov	r1, r8
 800255a:	ebb2 0a01 	subs.w	sl, r2, r1
 800255e:	4649      	mov	r1, r9
 8002560:	eb63 0b01 	sbc.w	fp, r3, r1
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002570:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002574:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002578:	ebb2 040a 	subs.w	r4, r2, sl
 800257c:	eb63 050b 	sbc.w	r5, r3, fp
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	00eb      	lsls	r3, r5, #3
 800258a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800258e:	00e2      	lsls	r2, r4, #3
 8002590:	4614      	mov	r4, r2
 8002592:	461d      	mov	r5, r3
 8002594:	4643      	mov	r3, r8
 8002596:	18e3      	adds	r3, r4, r3
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	464b      	mov	r3, r9
 800259c:	eb45 0303 	adc.w	r3, r5, r3
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ae:	4629      	mov	r1, r5
 80025b0:	028b      	lsls	r3, r1, #10
 80025b2:	4621      	mov	r1, r4
 80025b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025b8:	4621      	mov	r1, r4
 80025ba:	028a      	lsls	r2, r1, #10
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c2:	2200      	movs	r2, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	61fa      	str	r2, [r7, #28]
 80025c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025cc:	f7fe fb64 	bl	8000c98 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_GetSysClockFreq+0x200>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	0c1b      	lsrs	r3, r3, #16
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f2:	e002      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetSysClockFreq+0x204>)
 80025f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3750      	adds	r7, #80	; 0x50
 8002600:	46bd      	mov	sp, r7
 8002602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800
 800260c:	00f42400 	.word	0x00f42400
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_RCC_GetHCLKFreq+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000000 	.word	0x20000000

0800262c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002630:	f7ff fff0 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	0a9b      	lsrs	r3, r3, #10
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002648:	4618      	mov	r0, r3
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40023800 	.word	0x40023800
 8002650:	08007ecc 	.word	0x08007ecc

08002654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002658:	f7ff ffdc 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	0b5b      	lsrs	r3, r3, #13
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	4903      	ldr	r1, [pc, #12]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40023800 	.word	0x40023800
 8002678:	08007ecc 	.word	0x08007ecc

0800267c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e07b      	b.n	8002786 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d108      	bne.n	80026a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800269e:	d009      	beq.n	80026b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	61da      	str	r2, [r3, #28]
 80026a6:	e005      	b.n	80026b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fe14 	bl	80012fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	f003 0104 	and.w	r1, r3, #4
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	f003 0210 	and.w	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b088      	sub	sp, #32
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027aa:	d112      	bne.n	80027d2 <HAL_SPI_Receive+0x44>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10e      	bne.n	80027d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2204      	movs	r2, #4
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027bc:	88fa      	ldrh	r2, [r7, #6]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4613      	mov	r3, r2
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f8f1 	bl	80029b0 <HAL_SPI_TransmitReceive>
 80027ce:	4603      	mov	r3, r0
 80027d0:	e0ea      	b.n	80029a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <HAL_SPI_Receive+0x52>
 80027dc:	2302      	movs	r3, #2
 80027de:	e0e3      	b.n	80029a8 <HAL_SPI_Receive+0x21a>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027e8:	f7fe fffc 	bl	80017e4 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d002      	beq.n	8002800 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80027fa:	2302      	movs	r3, #2
 80027fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027fe:	e0ca      	b.n	8002996 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_SPI_Receive+0x7e>
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002810:	e0c1      	b.n	8002996 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2204      	movs	r2, #4
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	d10f      	bne.n	800287a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002868:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d007      	beq.n	8002898 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002896:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d162      	bne.n	8002966 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028a0:	e02e      	b.n	8002900 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d115      	bne.n	80028dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f103 020c 	add.w	r2, r3, #12
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028da:	e011      	b.n	8002900 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028dc:	f7fe ff82 	bl	80017e4 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d803      	bhi.n	80028f4 <HAL_SPI_Receive+0x166>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f2:	d102      	bne.n	80028fa <HAL_SPI_Receive+0x16c>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80028fe:	e04a      	b.n	8002996 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1cb      	bne.n	80028a2 <HAL_SPI_Receive+0x114>
 800290a:	e031      	b.n	8002970 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d113      	bne.n	8002942 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	b292      	uxth	r2, r2
 8002926:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	1c9a      	adds	r2, r3, #2
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002940:	e011      	b.n	8002966 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002942:	f7fe ff4f 	bl	80017e4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d803      	bhi.n	800295a <HAL_SPI_Receive+0x1cc>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d102      	bne.n	8002960 <HAL_SPI_Receive+0x1d2>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002964:	e017      	b.n	8002996 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1cd      	bne.n	800290c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	6839      	ldr	r1, [r7, #0]
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fa45 	bl	8002e04 <SPI_EndRxTransaction>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
 8002992:	e000      	b.n	8002996 <HAL_SPI_Receive+0x208>
  }

error :
 8002994:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
 80029bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x26>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e18a      	b.n	8002cec <HAL_SPI_TransmitReceive+0x33c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029de:	f7fe ff01 	bl	80017e4 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d00f      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x70>
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d107      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <HAL_SPI_TransmitReceive+0x68>
 8002a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d003      	beq.n	8002a20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a1e:	e15b      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x82>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_SPI_TransmitReceive+0x82>
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d103      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a38:	e14e      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d003      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2205      	movs	r2, #5
 8002a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8e:	2b40      	cmp	r3, #64	; 0x40
 8002a90:	d007      	beq.n	8002aa2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aaa:	d178      	bne.n	8002b9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_TransmitReceive+0x10a>
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d166      	bne.n	8002b88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	1c9a      	adds	r2, r3, #2
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ade:	e053      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d11b      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x176>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d016      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x176>
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d113      	bne.n	8002b26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	1c9a      	adds	r2, r3, #2
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d119      	bne.n	8002b68 <HAL_SPI_TransmitReceive+0x1b8>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d014      	beq.n	8002b68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b64:	2301      	movs	r3, #1
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b68:	f7fe fe3c 	bl	80017e4 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d807      	bhi.n	8002b88 <HAL_SPI_TransmitReceive+0x1d8>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d003      	beq.n	8002b88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b86:	e0a7      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1a6      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x130>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1a1      	bne.n	8002ae0 <HAL_SPI_TransmitReceive+0x130>
 8002b9c:	e07c      	b.n	8002c98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x1fc>
 8002ba6:	8b7b      	ldrh	r3, [r7, #26]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d16b      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	330c      	adds	r3, #12
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bd2:	e057      	b.n	8002c84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d11c      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x26c>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d017      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x26c>
 8002bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d114      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d119      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x2ae>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c5e:	f7fe fdc1 	bl	80017e4 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d803      	bhi.n	8002c76 <HAL_SPI_TransmitReceive+0x2c6>
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d102      	bne.n	8002c7c <HAL_SPI_TransmitReceive+0x2cc>
 8002c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c82:	e029      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1a2      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x224>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d19d      	bne.n	8002bd4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f917 	bl	8002ed0 <SPI_EndRxTxTransaction>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cb4:	e010      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	e000      	b.n	8002cd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3730      	adds	r7, #48	; 0x30
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d04:	f7fe fd6e 	bl	80017e4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d14:	f7fe fd66 	bl	80017e4 <HAL_GetTick>
 8002d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d1a:	4b39      	ldr	r3, [pc, #228]	; (8002e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	015b      	lsls	r3, r3, #5
 8002d20:	0d1b      	lsrs	r3, r3, #20
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	fb02 f303 	mul.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d2a:	e054      	b.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d050      	beq.n	8002dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d34:	f7fe fd56 	bl	80017e4 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d902      	bls.n	8002d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d13d      	bne.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d62:	d111      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d6c:	d004      	beq.n	8002d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d107      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d90:	d10f      	bne.n	8002db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e017      	b.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d19b      	bne.n	8002d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000000 	.word	0x20000000

08002e04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e18:	d111      	bne.n	8002e3e <SPI_EndRxTransaction+0x3a>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e22:	d004      	beq.n	8002e2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d107      	bne.n	8002e3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e46:	d12a      	bne.n	8002e9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e50:	d012      	beq.n	8002e78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7ff ff49 	bl	8002cf4 <SPI_WaitFlagStateUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d02d      	beq.n	8002ec4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e026      	b.n	8002ec6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2101      	movs	r1, #1
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f7ff ff36 	bl	8002cf4 <SPI_WaitFlagStateUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d01a      	beq.n	8002ec4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e013      	b.n	8002ec6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff ff23 	bl	8002cf4 <SPI_WaitFlagStateUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	f043 0220 	orr.w	r2, r3, #32
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af02      	add	r7, sp, #8
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002edc:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <SPI_EndRxTxTransaction+0x7c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <SPI_EndRxTxTransaction+0x80>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0d5b      	lsrs	r3, r3, #21
 8002ee8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002eec:	fb02 f303 	mul.w	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002efa:	d112      	bne.n	8002f22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fef4 	bl	8002cf4 <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e00f      	b.n	8002f42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b80      	cmp	r3, #128	; 0x80
 8002f3a:	d0f2      	beq.n	8002f22 <SPI_EndRxTxTransaction+0x52>
 8002f3c:	e000      	b.n	8002f40 <SPI_EndRxTxTransaction+0x70>
        break;
 8002f3e:	bf00      	nop
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000000 	.word	0x20000000
 8002f50:	165e9f81 	.word	0x165e9f81

08002f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e03f      	b.n	8002fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fe fb5a 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2224      	movs	r2, #36	; 0x24
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f929 	bl	80031f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08a      	sub	sp, #40	; 0x28
 8002ff2:	af02      	add	r7, sp, #8
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	603b      	str	r3, [r7, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d17c      	bne.n	8003108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_UART_Transmit+0x2c>
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e075      	b.n	800310a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit+0x3e>
 8003028:	2302      	movs	r3, #2
 800302a:	e06e      	b.n	800310a <HAL_UART_Transmit+0x11c>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2221      	movs	r2, #33	; 0x21
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003042:	f7fe fbcf 	bl	80017e4 <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	88fa      	ldrh	r2, [r7, #6]
 800304c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305c:	d108      	bne.n	8003070 <HAL_UART_Transmit+0x82>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	e003      	b.n	8003078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003080:	e02a      	b.n	80030d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f840 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e036      	b.n	800310a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10b      	bne.n	80030ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	3302      	adds	r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	e007      	b.n	80030ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	3301      	adds	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1cf      	bne.n	8003082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2140      	movs	r1, #64	; 0x40
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f810 	bl	8003112 <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e006      	b.n	800310a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	e000      	b.n	800310a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003108:	2302      	movs	r3, #2
  }
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b090      	sub	sp, #64	; 0x40
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	e050      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d04c      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800312c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x30>
 8003132:	f7fe fb57 	bl	80017e4 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313e:	429a      	cmp	r2, r3
 8003140:	d241      	bcs.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003162:	637a      	str	r2, [r7, #52]	; 0x34
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3314      	adds	r3, #20
 800317c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	613b      	str	r3, [r7, #16]
   return(result);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	63bb      	str	r3, [r7, #56]	; 0x38
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3314      	adds	r3, #20
 8003194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003196:	623a      	str	r2, [r7, #32]
 8003198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	69f9      	ldr	r1, [r7, #28]
 800319c:	6a3a      	ldr	r2, [r7, #32]
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e00f      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d09f      	beq.n	8003124 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3740      	adds	r7, #64	; 0x40
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b0c0      	sub	sp, #256	; 0x100
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320c:	68d9      	ldr	r1, [r3, #12]
 800320e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	ea40 0301 	orr.w	r3, r0, r1
 8003218:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800321a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	431a      	orrs	r2, r3
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	431a      	orrs	r2, r3
 8003230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003248:	f021 010c 	bic.w	r1, r1, #12
 800324c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003256:	430b      	orrs	r3, r1
 8003258:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326a:	6999      	ldr	r1, [r3, #24]
 800326c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	ea40 0301 	orr.w	r3, r0, r1
 8003276:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b8f      	ldr	r3, [pc, #572]	; (80034bc <UART_SetConfig+0x2cc>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d005      	beq.n	8003290 <UART_SetConfig+0xa0>
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <UART_SetConfig+0x2d0>)
 800328c:	429a      	cmp	r2, r3
 800328e:	d104      	bne.n	800329a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f9e0 	bl	8002654 <HAL_RCC_GetPCLK2Freq>
 8003294:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003298:	e003      	b.n	80032a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800329a:	f7ff f9c7 	bl	800262c <HAL_RCC_GetPCLK1Freq>
 800329e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ac:	f040 810c 	bne.w	80034c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80032c2:	4622      	mov	r2, r4
 80032c4:	462b      	mov	r3, r5
 80032c6:	1891      	adds	r1, r2, r2
 80032c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80032ca:	415b      	adcs	r3, r3
 80032cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80032d2:	4621      	mov	r1, r4
 80032d4:	eb12 0801 	adds.w	r8, r2, r1
 80032d8:	4629      	mov	r1, r5
 80032da:	eb43 0901 	adc.w	r9, r3, r1
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032f2:	4690      	mov	r8, r2
 80032f4:	4699      	mov	r9, r3
 80032f6:	4623      	mov	r3, r4
 80032f8:	eb18 0303 	adds.w	r3, r8, r3
 80032fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003300:	462b      	mov	r3, r5
 8003302:	eb49 0303 	adc.w	r3, r9, r3
 8003306:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003316:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800331a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800331e:	460b      	mov	r3, r1
 8003320:	18db      	adds	r3, r3, r3
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
 8003324:	4613      	mov	r3, r2
 8003326:	eb42 0303 	adc.w	r3, r2, r3
 800332a:	657b      	str	r3, [r7, #84]	; 0x54
 800332c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003330:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003334:	f7fd fcb0 	bl	8000c98 <__aeabi_uldivmod>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4b61      	ldr	r3, [pc, #388]	; (80034c4 <UART_SetConfig+0x2d4>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	011c      	lsls	r4, r3, #4
 8003346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800334a:	2200      	movs	r2, #0
 800334c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003350:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003354:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003358:	4642      	mov	r2, r8
 800335a:	464b      	mov	r3, r9
 800335c:	1891      	adds	r1, r2, r2
 800335e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003360:	415b      	adcs	r3, r3
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003364:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003368:	4641      	mov	r1, r8
 800336a:	eb12 0a01 	adds.w	sl, r2, r1
 800336e:	4649      	mov	r1, r9
 8003370:	eb43 0b01 	adc.w	fp, r3, r1
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003380:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003388:	4692      	mov	sl, r2
 800338a:	469b      	mov	fp, r3
 800338c:	4643      	mov	r3, r8
 800338e:	eb1a 0303 	adds.w	r3, sl, r3
 8003392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003396:	464b      	mov	r3, r9
 8003398:	eb4b 0303 	adc.w	r3, fp, r3
 800339c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80033b4:	460b      	mov	r3, r1
 80033b6:	18db      	adds	r3, r3, r3
 80033b8:	643b      	str	r3, [r7, #64]	; 0x40
 80033ba:	4613      	mov	r3, r2
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
 80033c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80033c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80033ca:	f7fd fc65 	bl	8000c98 <__aeabi_uldivmod>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4611      	mov	r1, r2
 80033d4:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <UART_SetConfig+0x2d4>)
 80033d6:	fba3 2301 	umull	r2, r3, r3, r1
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2264      	movs	r2, #100	; 0x64
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	1acb      	subs	r3, r1, r3
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80033ea:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <UART_SetConfig+0x2d4>)
 80033ec:	fba3 2302 	umull	r2, r3, r3, r2
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033f8:	441c      	add	r4, r3
 80033fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003404:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003408:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800340c:	4642      	mov	r2, r8
 800340e:	464b      	mov	r3, r9
 8003410:	1891      	adds	r1, r2, r2
 8003412:	63b9      	str	r1, [r7, #56]	; 0x38
 8003414:	415b      	adcs	r3, r3
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003418:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800341c:	4641      	mov	r1, r8
 800341e:	1851      	adds	r1, r2, r1
 8003420:	6339      	str	r1, [r7, #48]	; 0x30
 8003422:	4649      	mov	r1, r9
 8003424:	414b      	adcs	r3, r1
 8003426:	637b      	str	r3, [r7, #52]	; 0x34
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003434:	4659      	mov	r1, fp
 8003436:	00cb      	lsls	r3, r1, #3
 8003438:	4651      	mov	r1, sl
 800343a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343e:	4651      	mov	r1, sl
 8003440:	00ca      	lsls	r2, r1, #3
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	4603      	mov	r3, r0
 8003448:	4642      	mov	r2, r8
 800344a:	189b      	adds	r3, r3, r2
 800344c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003450:	464b      	mov	r3, r9
 8003452:	460a      	mov	r2, r1
 8003454:	eb42 0303 	adc.w	r3, r2, r3
 8003458:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003468:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800346c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003470:	460b      	mov	r3, r1
 8003472:	18db      	adds	r3, r3, r3
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
 8003476:	4613      	mov	r3, r2
 8003478:	eb42 0303 	adc.w	r3, r2, r3
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003482:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003486:	f7fd fc07 	bl	8000c98 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <UART_SetConfig+0x2d4>)
 8003490:	fba3 1302 	umull	r1, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2164      	movs	r1, #100	; 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	3332      	adds	r3, #50	; 0x32
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <UART_SetConfig+0x2d4>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	f003 0207 	and.w	r2, r3, #7
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4422      	add	r2, r4
 80034b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034b8:	e106      	b.n	80036c8 <UART_SetConfig+0x4d8>
 80034ba:	bf00      	nop
 80034bc:	40011000 	.word	0x40011000
 80034c0:	40011400 	.word	0x40011400
 80034c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80034d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80034d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80034da:	4642      	mov	r2, r8
 80034dc:	464b      	mov	r3, r9
 80034de:	1891      	adds	r1, r2, r2
 80034e0:	6239      	str	r1, [r7, #32]
 80034e2:	415b      	adcs	r3, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034ea:	4641      	mov	r1, r8
 80034ec:	1854      	adds	r4, r2, r1
 80034ee:	4649      	mov	r1, r9
 80034f0:	eb43 0501 	adc.w	r5, r3, r1
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	00eb      	lsls	r3, r5, #3
 80034fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003502:	00e2      	lsls	r2, r4, #3
 8003504:	4614      	mov	r4, r2
 8003506:	461d      	mov	r5, r3
 8003508:	4643      	mov	r3, r8
 800350a:	18e3      	adds	r3, r4, r3
 800350c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003510:	464b      	mov	r3, r9
 8003512:	eb45 0303 	adc.w	r3, r5, r3
 8003516:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003526:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003536:	4629      	mov	r1, r5
 8003538:	008b      	lsls	r3, r1, #2
 800353a:	4621      	mov	r1, r4
 800353c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003540:	4621      	mov	r1, r4
 8003542:	008a      	lsls	r2, r1, #2
 8003544:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003548:	f7fd fba6 	bl	8000c98 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4b60      	ldr	r3, [pc, #384]	; (80036d4 <UART_SetConfig+0x4e4>)
 8003552:	fba3 2302 	umull	r2, r3, r3, r2
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	011c      	lsls	r4, r3, #4
 800355a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003564:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003568:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800356c:	4642      	mov	r2, r8
 800356e:	464b      	mov	r3, r9
 8003570:	1891      	adds	r1, r2, r2
 8003572:	61b9      	str	r1, [r7, #24]
 8003574:	415b      	adcs	r3, r3
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	4641      	mov	r1, r8
 800357e:	1851      	adds	r1, r2, r1
 8003580:	6139      	str	r1, [r7, #16]
 8003582:	4649      	mov	r1, r9
 8003584:	414b      	adcs	r3, r1
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003594:	4659      	mov	r1, fp
 8003596:	00cb      	lsls	r3, r1, #3
 8003598:	4651      	mov	r1, sl
 800359a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800359e:	4651      	mov	r1, sl
 80035a0:	00ca      	lsls	r2, r1, #3
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	4603      	mov	r3, r0
 80035a8:	4642      	mov	r2, r8
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035b0:	464b      	mov	r3, r9
 80035b2:	460a      	mov	r2, r1
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80035c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80035d4:	4649      	mov	r1, r9
 80035d6:	008b      	lsls	r3, r1, #2
 80035d8:	4641      	mov	r1, r8
 80035da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035de:	4641      	mov	r1, r8
 80035e0:	008a      	lsls	r2, r1, #2
 80035e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80035e6:	f7fd fb57 	bl	8000c98 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <UART_SetConfig+0x4e4>)
 80035f2:	fba3 2301 	umull	r2, r3, r3, r1
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2264      	movs	r2, #100	; 0x64
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	3332      	adds	r3, #50	; 0x32
 8003604:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <UART_SetConfig+0x4e4>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003610:	441c      	add	r4, r3
 8003612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003616:	2200      	movs	r2, #0
 8003618:	673b      	str	r3, [r7, #112]	; 0x70
 800361a:	677a      	str	r2, [r7, #116]	; 0x74
 800361c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	415b      	adcs	r3, r3
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003630:	4641      	mov	r1, r8
 8003632:	1851      	adds	r1, r2, r1
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	4649      	mov	r1, r9
 8003638:	414b      	adcs	r3, r1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003648:	4659      	mov	r1, fp
 800364a:	00cb      	lsls	r3, r1, #3
 800364c:	4651      	mov	r1, sl
 800364e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003652:	4651      	mov	r1, sl
 8003654:	00ca      	lsls	r2, r1, #3
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	4603      	mov	r3, r0
 800365c:	4642      	mov	r2, r8
 800365e:	189b      	adds	r3, r3, r2
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
 8003662:	464b      	mov	r3, r9
 8003664:	460a      	mov	r2, r1
 8003666:	eb42 0303 	adc.w	r3, r2, r3
 800366a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800366c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	663b      	str	r3, [r7, #96]	; 0x60
 8003676:	667a      	str	r2, [r7, #100]	; 0x64
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003684:	4649      	mov	r1, r9
 8003686:	008b      	lsls	r3, r1, #2
 8003688:	4641      	mov	r1, r8
 800368a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800368e:	4641      	mov	r1, r8
 8003690:	008a      	lsls	r2, r1, #2
 8003692:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003696:	f7fd faff 	bl	8000c98 <__aeabi_uldivmod>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <UART_SetConfig+0x4e4>)
 80036a0:	fba3 1302 	umull	r1, r3, r3, r2
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	3332      	adds	r3, #50	; 0x32
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <UART_SetConfig+0x4e4>)
 80036b4:	fba2 2303 	umull	r2, r3, r2, r3
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4422      	add	r2, r4
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80036ce:	46bd      	mov	sp, r7
 80036d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036d4:	51eb851f 	.word	0x51eb851f

080036d8 <__cvt>:
 80036d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	ec55 4b10 	vmov	r4, r5, d0
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	460e      	mov	r6, r1
 80036e4:	4619      	mov	r1, r3
 80036e6:	462b      	mov	r3, r5
 80036e8:	bfbb      	ittet	lt
 80036ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80036ee:	461d      	movlt	r5, r3
 80036f0:	2300      	movge	r3, #0
 80036f2:	232d      	movlt	r3, #45	; 0x2d
 80036f4:	700b      	strb	r3, [r1, #0]
 80036f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036fc:	4691      	mov	r9, r2
 80036fe:	f023 0820 	bic.w	r8, r3, #32
 8003702:	bfbc      	itt	lt
 8003704:	4622      	movlt	r2, r4
 8003706:	4614      	movlt	r4, r2
 8003708:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800370c:	d005      	beq.n	800371a <__cvt+0x42>
 800370e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003712:	d100      	bne.n	8003716 <__cvt+0x3e>
 8003714:	3601      	adds	r6, #1
 8003716:	2102      	movs	r1, #2
 8003718:	e000      	b.n	800371c <__cvt+0x44>
 800371a:	2103      	movs	r1, #3
 800371c:	ab03      	add	r3, sp, #12
 800371e:	9301      	str	r3, [sp, #4]
 8003720:	ab02      	add	r3, sp, #8
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	ec45 4b10 	vmov	d0, r4, r5
 8003728:	4653      	mov	r3, sl
 800372a:	4632      	mov	r2, r6
 800372c:	f001 f87c 	bl	8004828 <_dtoa_r>
 8003730:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003734:	4607      	mov	r7, r0
 8003736:	d102      	bne.n	800373e <__cvt+0x66>
 8003738:	f019 0f01 	tst.w	r9, #1
 800373c:	d022      	beq.n	8003784 <__cvt+0xac>
 800373e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003742:	eb07 0906 	add.w	r9, r7, r6
 8003746:	d110      	bne.n	800376a <__cvt+0x92>
 8003748:	783b      	ldrb	r3, [r7, #0]
 800374a:	2b30      	cmp	r3, #48	; 0x30
 800374c:	d10a      	bne.n	8003764 <__cvt+0x8c>
 800374e:	2200      	movs	r2, #0
 8003750:	2300      	movs	r3, #0
 8003752:	4620      	mov	r0, r4
 8003754:	4629      	mov	r1, r5
 8003756:	f7fd f9bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800375a:	b918      	cbnz	r0, 8003764 <__cvt+0x8c>
 800375c:	f1c6 0601 	rsb	r6, r6, #1
 8003760:	f8ca 6000 	str.w	r6, [sl]
 8003764:	f8da 3000 	ldr.w	r3, [sl]
 8003768:	4499      	add	r9, r3
 800376a:	2200      	movs	r2, #0
 800376c:	2300      	movs	r3, #0
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fd f9b1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003776:	b108      	cbz	r0, 800377c <__cvt+0xa4>
 8003778:	f8cd 900c 	str.w	r9, [sp, #12]
 800377c:	2230      	movs	r2, #48	; 0x30
 800377e:	9b03      	ldr	r3, [sp, #12]
 8003780:	454b      	cmp	r3, r9
 8003782:	d307      	bcc.n	8003794 <__cvt+0xbc>
 8003784:	9b03      	ldr	r3, [sp, #12]
 8003786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003788:	1bdb      	subs	r3, r3, r7
 800378a:	4638      	mov	r0, r7
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	b004      	add	sp, #16
 8003790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003794:	1c59      	adds	r1, r3, #1
 8003796:	9103      	str	r1, [sp, #12]
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e7f0      	b.n	800377e <__cvt+0xa6>

0800379c <__exponent>:
 800379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800379e:	4603      	mov	r3, r0
 80037a0:	2900      	cmp	r1, #0
 80037a2:	bfb8      	it	lt
 80037a4:	4249      	neglt	r1, r1
 80037a6:	f803 2b02 	strb.w	r2, [r3], #2
 80037aa:	bfb4      	ite	lt
 80037ac:	222d      	movlt	r2, #45	; 0x2d
 80037ae:	222b      	movge	r2, #43	; 0x2b
 80037b0:	2909      	cmp	r1, #9
 80037b2:	7042      	strb	r2, [r0, #1]
 80037b4:	dd2a      	ble.n	800380c <__exponent+0x70>
 80037b6:	f10d 0207 	add.w	r2, sp, #7
 80037ba:	4617      	mov	r7, r2
 80037bc:	260a      	movs	r6, #10
 80037be:	4694      	mov	ip, r2
 80037c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80037c4:	fb06 1415 	mls	r4, r6, r5, r1
 80037c8:	3430      	adds	r4, #48	; 0x30
 80037ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80037ce:	460c      	mov	r4, r1
 80037d0:	2c63      	cmp	r4, #99	; 0x63
 80037d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80037d6:	4629      	mov	r1, r5
 80037d8:	dcf1      	bgt.n	80037be <__exponent+0x22>
 80037da:	3130      	adds	r1, #48	; 0x30
 80037dc:	f1ac 0402 	sub.w	r4, ip, #2
 80037e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037e4:	1c41      	adds	r1, r0, #1
 80037e6:	4622      	mov	r2, r4
 80037e8:	42ba      	cmp	r2, r7
 80037ea:	d30a      	bcc.n	8003802 <__exponent+0x66>
 80037ec:	f10d 0209 	add.w	r2, sp, #9
 80037f0:	eba2 020c 	sub.w	r2, r2, ip
 80037f4:	42bc      	cmp	r4, r7
 80037f6:	bf88      	it	hi
 80037f8:	2200      	movhi	r2, #0
 80037fa:	4413      	add	r3, r2
 80037fc:	1a18      	subs	r0, r3, r0
 80037fe:	b003      	add	sp, #12
 8003800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003802:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003806:	f801 5f01 	strb.w	r5, [r1, #1]!
 800380a:	e7ed      	b.n	80037e8 <__exponent+0x4c>
 800380c:	2330      	movs	r3, #48	; 0x30
 800380e:	3130      	adds	r1, #48	; 0x30
 8003810:	7083      	strb	r3, [r0, #2]
 8003812:	70c1      	strb	r1, [r0, #3]
 8003814:	1d03      	adds	r3, r0, #4
 8003816:	e7f1      	b.n	80037fc <__exponent+0x60>

08003818 <_printf_float>:
 8003818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381c:	ed2d 8b02 	vpush	{d8}
 8003820:	b08d      	sub	sp, #52	; 0x34
 8003822:	460c      	mov	r4, r1
 8003824:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003828:	4616      	mov	r6, r2
 800382a:	461f      	mov	r7, r3
 800382c:	4605      	mov	r5, r0
 800382e:	f000 fef7 	bl	8004620 <_localeconv_r>
 8003832:	f8d0 a000 	ldr.w	sl, [r0]
 8003836:	4650      	mov	r0, sl
 8003838:	f7fc fd22 	bl	8000280 <strlen>
 800383c:	2300      	movs	r3, #0
 800383e:	930a      	str	r3, [sp, #40]	; 0x28
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	9305      	str	r3, [sp, #20]
 8003844:	f8d8 3000 	ldr.w	r3, [r8]
 8003848:	f894 b018 	ldrb.w	fp, [r4, #24]
 800384c:	3307      	adds	r3, #7
 800384e:	f023 0307 	bic.w	r3, r3, #7
 8003852:	f103 0208 	add.w	r2, r3, #8
 8003856:	f8c8 2000 	str.w	r2, [r8]
 800385a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800385e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003862:	9307      	str	r3, [sp, #28]
 8003864:	f8cd 8018 	str.w	r8, [sp, #24]
 8003868:	ee08 0a10 	vmov	s16, r0
 800386c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003874:	4b9e      	ldr	r3, [pc, #632]	; (8003af0 <_printf_float+0x2d8>)
 8003876:	f04f 32ff 	mov.w	r2, #4294967295
 800387a:	f7fd f95f 	bl	8000b3c <__aeabi_dcmpun>
 800387e:	bb88      	cbnz	r0, 80038e4 <_printf_float+0xcc>
 8003880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003884:	4b9a      	ldr	r3, [pc, #616]	; (8003af0 <_printf_float+0x2d8>)
 8003886:	f04f 32ff 	mov.w	r2, #4294967295
 800388a:	f7fd f939 	bl	8000b00 <__aeabi_dcmple>
 800388e:	bb48      	cbnz	r0, 80038e4 <_printf_float+0xcc>
 8003890:	2200      	movs	r2, #0
 8003892:	2300      	movs	r3, #0
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fd f928 	bl	8000aec <__aeabi_dcmplt>
 800389c:	b110      	cbz	r0, 80038a4 <_printf_float+0x8c>
 800389e:	232d      	movs	r3, #45	; 0x2d
 80038a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a4:	4a93      	ldr	r2, [pc, #588]	; (8003af4 <_printf_float+0x2dc>)
 80038a6:	4b94      	ldr	r3, [pc, #592]	; (8003af8 <_printf_float+0x2e0>)
 80038a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80038ac:	bf94      	ite	ls
 80038ae:	4690      	movls	r8, r2
 80038b0:	4698      	movhi	r8, r3
 80038b2:	2303      	movs	r3, #3
 80038b4:	6123      	str	r3, [r4, #16]
 80038b6:	9b05      	ldr	r3, [sp, #20]
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	f04f 0900 	mov.w	r9, #0
 80038c2:	9700      	str	r7, [sp, #0]
 80038c4:	4633      	mov	r3, r6
 80038c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80038c8:	4621      	mov	r1, r4
 80038ca:	4628      	mov	r0, r5
 80038cc:	f000 f9da 	bl	8003c84 <_printf_common>
 80038d0:	3001      	adds	r0, #1
 80038d2:	f040 8090 	bne.w	80039f6 <_printf_float+0x1de>
 80038d6:	f04f 30ff 	mov.w	r0, #4294967295
 80038da:	b00d      	add	sp, #52	; 0x34
 80038dc:	ecbd 8b02 	vpop	{d8}
 80038e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e4:	4642      	mov	r2, r8
 80038e6:	464b      	mov	r3, r9
 80038e8:	4640      	mov	r0, r8
 80038ea:	4649      	mov	r1, r9
 80038ec:	f7fd f926 	bl	8000b3c <__aeabi_dcmpun>
 80038f0:	b140      	cbz	r0, 8003904 <_printf_float+0xec>
 80038f2:	464b      	mov	r3, r9
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bfbc      	itt	lt
 80038f8:	232d      	movlt	r3, #45	; 0x2d
 80038fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80038fe:	4a7f      	ldr	r2, [pc, #508]	; (8003afc <_printf_float+0x2e4>)
 8003900:	4b7f      	ldr	r3, [pc, #508]	; (8003b00 <_printf_float+0x2e8>)
 8003902:	e7d1      	b.n	80038a8 <_printf_float+0x90>
 8003904:	6863      	ldr	r3, [r4, #4]
 8003906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800390a:	9206      	str	r2, [sp, #24]
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	d13f      	bne.n	8003990 <_printf_float+0x178>
 8003910:	2306      	movs	r3, #6
 8003912:	6063      	str	r3, [r4, #4]
 8003914:	9b05      	ldr	r3, [sp, #20]
 8003916:	6861      	ldr	r1, [r4, #4]
 8003918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800391c:	2300      	movs	r3, #0
 800391e:	9303      	str	r3, [sp, #12]
 8003920:	ab0a      	add	r3, sp, #40	; 0x28
 8003922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003926:	ab09      	add	r3, sp, #36	; 0x24
 8003928:	ec49 8b10 	vmov	d0, r8, r9
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	6022      	str	r2, [r4, #0]
 8003930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003934:	4628      	mov	r0, r5
 8003936:	f7ff fecf 	bl	80036d8 <__cvt>
 800393a:	9b06      	ldr	r3, [sp, #24]
 800393c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800393e:	2b47      	cmp	r3, #71	; 0x47
 8003940:	4680      	mov	r8, r0
 8003942:	d108      	bne.n	8003956 <_printf_float+0x13e>
 8003944:	1cc8      	adds	r0, r1, #3
 8003946:	db02      	blt.n	800394e <_printf_float+0x136>
 8003948:	6863      	ldr	r3, [r4, #4]
 800394a:	4299      	cmp	r1, r3
 800394c:	dd41      	ble.n	80039d2 <_printf_float+0x1ba>
 800394e:	f1ab 0302 	sub.w	r3, fp, #2
 8003952:	fa5f fb83 	uxtb.w	fp, r3
 8003956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800395a:	d820      	bhi.n	800399e <_printf_float+0x186>
 800395c:	3901      	subs	r1, #1
 800395e:	465a      	mov	r2, fp
 8003960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003964:	9109      	str	r1, [sp, #36]	; 0x24
 8003966:	f7ff ff19 	bl	800379c <__exponent>
 800396a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800396c:	1813      	adds	r3, r2, r0
 800396e:	2a01      	cmp	r2, #1
 8003970:	4681      	mov	r9, r0
 8003972:	6123      	str	r3, [r4, #16]
 8003974:	dc02      	bgt.n	800397c <_printf_float+0x164>
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	07d2      	lsls	r2, r2, #31
 800397a:	d501      	bpl.n	8003980 <_printf_float+0x168>
 800397c:	3301      	adds	r3, #1
 800397e:	6123      	str	r3, [r4, #16]
 8003980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003984:	2b00      	cmp	r3, #0
 8003986:	d09c      	beq.n	80038c2 <_printf_float+0xaa>
 8003988:	232d      	movs	r3, #45	; 0x2d
 800398a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800398e:	e798      	b.n	80038c2 <_printf_float+0xaa>
 8003990:	9a06      	ldr	r2, [sp, #24]
 8003992:	2a47      	cmp	r2, #71	; 0x47
 8003994:	d1be      	bne.n	8003914 <_printf_float+0xfc>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1bc      	bne.n	8003914 <_printf_float+0xfc>
 800399a:	2301      	movs	r3, #1
 800399c:	e7b9      	b.n	8003912 <_printf_float+0xfa>
 800399e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80039a2:	d118      	bne.n	80039d6 <_printf_float+0x1be>
 80039a4:	2900      	cmp	r1, #0
 80039a6:	6863      	ldr	r3, [r4, #4]
 80039a8:	dd0b      	ble.n	80039c2 <_printf_float+0x1aa>
 80039aa:	6121      	str	r1, [r4, #16]
 80039ac:	b913      	cbnz	r3, 80039b4 <_printf_float+0x19c>
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	07d0      	lsls	r0, r2, #31
 80039b2:	d502      	bpl.n	80039ba <_printf_float+0x1a2>
 80039b4:	3301      	adds	r3, #1
 80039b6:	440b      	add	r3, r1
 80039b8:	6123      	str	r3, [r4, #16]
 80039ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80039bc:	f04f 0900 	mov.w	r9, #0
 80039c0:	e7de      	b.n	8003980 <_printf_float+0x168>
 80039c2:	b913      	cbnz	r3, 80039ca <_printf_float+0x1b2>
 80039c4:	6822      	ldr	r2, [r4, #0]
 80039c6:	07d2      	lsls	r2, r2, #31
 80039c8:	d501      	bpl.n	80039ce <_printf_float+0x1b6>
 80039ca:	3302      	adds	r3, #2
 80039cc:	e7f4      	b.n	80039b8 <_printf_float+0x1a0>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e7f2      	b.n	80039b8 <_printf_float+0x1a0>
 80039d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80039d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d8:	4299      	cmp	r1, r3
 80039da:	db05      	blt.n	80039e8 <_printf_float+0x1d0>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	6121      	str	r1, [r4, #16]
 80039e0:	07d8      	lsls	r0, r3, #31
 80039e2:	d5ea      	bpl.n	80039ba <_printf_float+0x1a2>
 80039e4:	1c4b      	adds	r3, r1, #1
 80039e6:	e7e7      	b.n	80039b8 <_printf_float+0x1a0>
 80039e8:	2900      	cmp	r1, #0
 80039ea:	bfd4      	ite	le
 80039ec:	f1c1 0202 	rsble	r2, r1, #2
 80039f0:	2201      	movgt	r2, #1
 80039f2:	4413      	add	r3, r2
 80039f4:	e7e0      	b.n	80039b8 <_printf_float+0x1a0>
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	055a      	lsls	r2, r3, #21
 80039fa:	d407      	bmi.n	8003a0c <_printf_float+0x1f4>
 80039fc:	6923      	ldr	r3, [r4, #16]
 80039fe:	4642      	mov	r2, r8
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	47b8      	blx	r7
 8003a06:	3001      	adds	r0, #1
 8003a08:	d12c      	bne.n	8003a64 <_printf_float+0x24c>
 8003a0a:	e764      	b.n	80038d6 <_printf_float+0xbe>
 8003a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a10:	f240 80e0 	bls.w	8003bd4 <_printf_float+0x3bc>
 8003a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7fd f85c 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d034      	beq.n	8003a8e <_printf_float+0x276>
 8003a24:	4a37      	ldr	r2, [pc, #220]	; (8003b04 <_printf_float+0x2ec>)
 8003a26:	2301      	movs	r3, #1
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	f43f af51 	beq.w	80038d6 <_printf_float+0xbe>
 8003a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	db02      	blt.n	8003a42 <_printf_float+0x22a>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	07d8      	lsls	r0, r3, #31
 8003a40:	d510      	bpl.n	8003a64 <_printf_float+0x24c>
 8003a42:	ee18 3a10 	vmov	r3, s16
 8003a46:	4652      	mov	r2, sl
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f af41 	beq.w	80038d6 <_printf_float+0xbe>
 8003a54:	f04f 0800 	mov.w	r8, #0
 8003a58:	f104 091a 	add.w	r9, r4, #26
 8003a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	4543      	cmp	r3, r8
 8003a62:	dc09      	bgt.n	8003a78 <_printf_float+0x260>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	079b      	lsls	r3, r3, #30
 8003a68:	f100 8107 	bmi.w	8003c7a <_printf_float+0x462>
 8003a6c:	68e0      	ldr	r0, [r4, #12]
 8003a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a70:	4298      	cmp	r0, r3
 8003a72:	bfb8      	it	lt
 8003a74:	4618      	movlt	r0, r3
 8003a76:	e730      	b.n	80038da <_printf_float+0xc2>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	464a      	mov	r2, r9
 8003a7c:	4631      	mov	r1, r6
 8003a7e:	4628      	mov	r0, r5
 8003a80:	47b8      	blx	r7
 8003a82:	3001      	adds	r0, #1
 8003a84:	f43f af27 	beq.w	80038d6 <_printf_float+0xbe>
 8003a88:	f108 0801 	add.w	r8, r8, #1
 8003a8c:	e7e6      	b.n	8003a5c <_printf_float+0x244>
 8003a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dc39      	bgt.n	8003b08 <_printf_float+0x2f0>
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <_printf_float+0x2ec>)
 8003a96:	2301      	movs	r3, #1
 8003a98:	4631      	mov	r1, r6
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	47b8      	blx	r7
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	f43f af19 	beq.w	80038d6 <_printf_float+0xbe>
 8003aa4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	d102      	bne.n	8003ab2 <_printf_float+0x29a>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	07d9      	lsls	r1, r3, #31
 8003ab0:	d5d8      	bpl.n	8003a64 <_printf_float+0x24c>
 8003ab2:	ee18 3a10 	vmov	r3, s16
 8003ab6:	4652      	mov	r2, sl
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4628      	mov	r0, r5
 8003abc:	47b8      	blx	r7
 8003abe:	3001      	adds	r0, #1
 8003ac0:	f43f af09 	beq.w	80038d6 <_printf_float+0xbe>
 8003ac4:	f04f 0900 	mov.w	r9, #0
 8003ac8:	f104 0a1a 	add.w	sl, r4, #26
 8003acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ace:	425b      	negs	r3, r3
 8003ad0:	454b      	cmp	r3, r9
 8003ad2:	dc01      	bgt.n	8003ad8 <_printf_float+0x2c0>
 8003ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ad6:	e792      	b.n	80039fe <_printf_float+0x1e6>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4652      	mov	r2, sl
 8003adc:	4631      	mov	r1, r6
 8003ade:	4628      	mov	r0, r5
 8003ae0:	47b8      	blx	r7
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	f43f aef7 	beq.w	80038d6 <_printf_float+0xbe>
 8003ae8:	f109 0901 	add.w	r9, r9, #1
 8003aec:	e7ee      	b.n	8003acc <_printf_float+0x2b4>
 8003aee:	bf00      	nop
 8003af0:	7fefffff 	.word	0x7fefffff
 8003af4:	08007ed4 	.word	0x08007ed4
 8003af8:	08007ed8 	.word	0x08007ed8
 8003afc:	08007edc 	.word	0x08007edc
 8003b00:	08007ee0 	.word	0x08007ee0
 8003b04:	08007ee4 	.word	0x08007ee4
 8003b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	bfa8      	it	ge
 8003b10:	461a      	movge	r2, r3
 8003b12:	2a00      	cmp	r2, #0
 8003b14:	4691      	mov	r9, r2
 8003b16:	dc37      	bgt.n	8003b88 <_printf_float+0x370>
 8003b18:	f04f 0b00 	mov.w	fp, #0
 8003b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b20:	f104 021a 	add.w	r2, r4, #26
 8003b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b26:	9305      	str	r3, [sp, #20]
 8003b28:	eba3 0309 	sub.w	r3, r3, r9
 8003b2c:	455b      	cmp	r3, fp
 8003b2e:	dc33      	bgt.n	8003b98 <_printf_float+0x380>
 8003b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	db3b      	blt.n	8003bb0 <_printf_float+0x398>
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	07da      	lsls	r2, r3, #31
 8003b3c:	d438      	bmi.n	8003bb0 <_printf_float+0x398>
 8003b3e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b42:	eba2 0903 	sub.w	r9, r2, r3
 8003b46:	9b05      	ldr	r3, [sp, #20]
 8003b48:	1ad2      	subs	r2, r2, r3
 8003b4a:	4591      	cmp	r9, r2
 8003b4c:	bfa8      	it	ge
 8003b4e:	4691      	movge	r9, r2
 8003b50:	f1b9 0f00 	cmp.w	r9, #0
 8003b54:	dc35      	bgt.n	8003bc2 <_printf_float+0x3aa>
 8003b56:	f04f 0800 	mov.w	r8, #0
 8003b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b5e:	f104 0a1a 	add.w	sl, r4, #26
 8003b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	eba3 0309 	sub.w	r3, r3, r9
 8003b6c:	4543      	cmp	r3, r8
 8003b6e:	f77f af79 	ble.w	8003a64 <_printf_float+0x24c>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4652      	mov	r2, sl
 8003b76:	4631      	mov	r1, r6
 8003b78:	4628      	mov	r0, r5
 8003b7a:	47b8      	blx	r7
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	f43f aeaa 	beq.w	80038d6 <_printf_float+0xbe>
 8003b82:	f108 0801 	add.w	r8, r8, #1
 8003b86:	e7ec      	b.n	8003b62 <_printf_float+0x34a>
 8003b88:	4613      	mov	r3, r2
 8003b8a:	4631      	mov	r1, r6
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	4628      	mov	r0, r5
 8003b90:	47b8      	blx	r7
 8003b92:	3001      	adds	r0, #1
 8003b94:	d1c0      	bne.n	8003b18 <_printf_float+0x300>
 8003b96:	e69e      	b.n	80038d6 <_printf_float+0xbe>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4631      	mov	r1, r6
 8003b9c:	4628      	mov	r0, r5
 8003b9e:	9205      	str	r2, [sp, #20]
 8003ba0:	47b8      	blx	r7
 8003ba2:	3001      	adds	r0, #1
 8003ba4:	f43f ae97 	beq.w	80038d6 <_printf_float+0xbe>
 8003ba8:	9a05      	ldr	r2, [sp, #20]
 8003baa:	f10b 0b01 	add.w	fp, fp, #1
 8003bae:	e7b9      	b.n	8003b24 <_printf_float+0x30c>
 8003bb0:	ee18 3a10 	vmov	r3, s16
 8003bb4:	4652      	mov	r2, sl
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b8      	blx	r7
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d1be      	bne.n	8003b3e <_printf_float+0x326>
 8003bc0:	e689      	b.n	80038d6 <_printf_float+0xbe>
 8003bc2:	9a05      	ldr	r2, [sp, #20]
 8003bc4:	464b      	mov	r3, r9
 8003bc6:	4442      	add	r2, r8
 8003bc8:	4631      	mov	r1, r6
 8003bca:	4628      	mov	r0, r5
 8003bcc:	47b8      	blx	r7
 8003bce:	3001      	adds	r0, #1
 8003bd0:	d1c1      	bne.n	8003b56 <_printf_float+0x33e>
 8003bd2:	e680      	b.n	80038d6 <_printf_float+0xbe>
 8003bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bd6:	2a01      	cmp	r2, #1
 8003bd8:	dc01      	bgt.n	8003bde <_printf_float+0x3c6>
 8003bda:	07db      	lsls	r3, r3, #31
 8003bdc:	d53a      	bpl.n	8003c54 <_printf_float+0x43c>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4642      	mov	r2, r8
 8003be2:	4631      	mov	r1, r6
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b8      	blx	r7
 8003be8:	3001      	adds	r0, #1
 8003bea:	f43f ae74 	beq.w	80038d6 <_printf_float+0xbe>
 8003bee:	ee18 3a10 	vmov	r3, s16
 8003bf2:	4652      	mov	r2, sl
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	47b8      	blx	r7
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	f43f ae6b 	beq.w	80038d6 <_printf_float+0xbe>
 8003c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c04:	2200      	movs	r2, #0
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003c0c:	f7fc ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c10:	b9d8      	cbnz	r0, 8003c4a <_printf_float+0x432>
 8003c12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003c16:	f108 0201 	add.w	r2, r8, #1
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	47b8      	blx	r7
 8003c20:	3001      	adds	r0, #1
 8003c22:	d10e      	bne.n	8003c42 <_printf_float+0x42a>
 8003c24:	e657      	b.n	80038d6 <_printf_float+0xbe>
 8003c26:	2301      	movs	r3, #1
 8003c28:	4652      	mov	r2, sl
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	4628      	mov	r0, r5
 8003c2e:	47b8      	blx	r7
 8003c30:	3001      	adds	r0, #1
 8003c32:	f43f ae50 	beq.w	80038d6 <_printf_float+0xbe>
 8003c36:	f108 0801 	add.w	r8, r8, #1
 8003c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	4543      	cmp	r3, r8
 8003c40:	dcf1      	bgt.n	8003c26 <_printf_float+0x40e>
 8003c42:	464b      	mov	r3, r9
 8003c44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c48:	e6da      	b.n	8003a00 <_printf_float+0x1e8>
 8003c4a:	f04f 0800 	mov.w	r8, #0
 8003c4e:	f104 0a1a 	add.w	sl, r4, #26
 8003c52:	e7f2      	b.n	8003c3a <_printf_float+0x422>
 8003c54:	2301      	movs	r3, #1
 8003c56:	4642      	mov	r2, r8
 8003c58:	e7df      	b.n	8003c1a <_printf_float+0x402>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	464a      	mov	r2, r9
 8003c5e:	4631      	mov	r1, r6
 8003c60:	4628      	mov	r0, r5
 8003c62:	47b8      	blx	r7
 8003c64:	3001      	adds	r0, #1
 8003c66:	f43f ae36 	beq.w	80038d6 <_printf_float+0xbe>
 8003c6a:	f108 0801 	add.w	r8, r8, #1
 8003c6e:	68e3      	ldr	r3, [r4, #12]
 8003c70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c72:	1a5b      	subs	r3, r3, r1
 8003c74:	4543      	cmp	r3, r8
 8003c76:	dcf0      	bgt.n	8003c5a <_printf_float+0x442>
 8003c78:	e6f8      	b.n	8003a6c <_printf_float+0x254>
 8003c7a:	f04f 0800 	mov.w	r8, #0
 8003c7e:	f104 0919 	add.w	r9, r4, #25
 8003c82:	e7f4      	b.n	8003c6e <_printf_float+0x456>

08003c84 <_printf_common>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	4616      	mov	r6, r2
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	690b      	ldr	r3, [r1, #16]
 8003c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	bfb8      	it	lt
 8003c98:	4613      	movlt	r3, r2
 8003c9a:	6033      	str	r3, [r6, #0]
 8003c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca0:	4607      	mov	r7, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	b10a      	cbz	r2, 8003caa <_printf_common+0x26>
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	6033      	str	r3, [r6, #0]
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	0699      	lsls	r1, r3, #26
 8003cae:	bf42      	ittt	mi
 8003cb0:	6833      	ldrmi	r3, [r6, #0]
 8003cb2:	3302      	addmi	r3, #2
 8003cb4:	6033      	strmi	r3, [r6, #0]
 8003cb6:	6825      	ldr	r5, [r4, #0]
 8003cb8:	f015 0506 	ands.w	r5, r5, #6
 8003cbc:	d106      	bne.n	8003ccc <_printf_common+0x48>
 8003cbe:	f104 0a19 	add.w	sl, r4, #25
 8003cc2:	68e3      	ldr	r3, [r4, #12]
 8003cc4:	6832      	ldr	r2, [r6, #0]
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	42ab      	cmp	r3, r5
 8003cca:	dc26      	bgt.n	8003d1a <_printf_common+0x96>
 8003ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	6822      	ldr	r2, [r4, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	0692      	lsls	r2, r2, #26
 8003cda:	d42b      	bmi.n	8003d34 <_printf_common+0xb0>
 8003cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ce0:	4649      	mov	r1, r9
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	47c0      	blx	r8
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d01e      	beq.n	8003d28 <_printf_common+0xa4>
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	6922      	ldr	r2, [r4, #16]
 8003cee:	f003 0306 	and.w	r3, r3, #6
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf02      	ittt	eq
 8003cf6:	68e5      	ldreq	r5, [r4, #12]
 8003cf8:	6833      	ldreq	r3, [r6, #0]
 8003cfa:	1aed      	subeq	r5, r5, r3
 8003cfc:	68a3      	ldr	r3, [r4, #8]
 8003cfe:	bf0c      	ite	eq
 8003d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d04:	2500      	movne	r5, #0
 8003d06:	4293      	cmp	r3, r2
 8003d08:	bfc4      	itt	gt
 8003d0a:	1a9b      	subgt	r3, r3, r2
 8003d0c:	18ed      	addgt	r5, r5, r3
 8003d0e:	2600      	movs	r6, #0
 8003d10:	341a      	adds	r4, #26
 8003d12:	42b5      	cmp	r5, r6
 8003d14:	d11a      	bne.n	8003d4c <_printf_common+0xc8>
 8003d16:	2000      	movs	r0, #0
 8003d18:	e008      	b.n	8003d2c <_printf_common+0xa8>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	4649      	mov	r1, r9
 8003d20:	4638      	mov	r0, r7
 8003d22:	47c0      	blx	r8
 8003d24:	3001      	adds	r0, #1
 8003d26:	d103      	bne.n	8003d30 <_printf_common+0xac>
 8003d28:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d30:	3501      	adds	r5, #1
 8003d32:	e7c6      	b.n	8003cc2 <_printf_common+0x3e>
 8003d34:	18e1      	adds	r1, r4, r3
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	2030      	movs	r0, #48	; 0x30
 8003d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d3e:	4422      	add	r2, r4
 8003d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d48:	3302      	adds	r3, #2
 8003d4a:	e7c7      	b.n	8003cdc <_printf_common+0x58>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4622      	mov	r2, r4
 8003d50:	4649      	mov	r1, r9
 8003d52:	4638      	mov	r0, r7
 8003d54:	47c0      	blx	r8
 8003d56:	3001      	adds	r0, #1
 8003d58:	d0e6      	beq.n	8003d28 <_printf_common+0xa4>
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7d9      	b.n	8003d12 <_printf_common+0x8e>
	...

08003d60 <_printf_i>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	7e0f      	ldrb	r7, [r1, #24]
 8003d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d68:	2f78      	cmp	r7, #120	; 0x78
 8003d6a:	4691      	mov	r9, r2
 8003d6c:	4680      	mov	r8, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	469a      	mov	sl, r3
 8003d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d76:	d807      	bhi.n	8003d88 <_printf_i+0x28>
 8003d78:	2f62      	cmp	r7, #98	; 0x62
 8003d7a:	d80a      	bhi.n	8003d92 <_printf_i+0x32>
 8003d7c:	2f00      	cmp	r7, #0
 8003d7e:	f000 80d4 	beq.w	8003f2a <_printf_i+0x1ca>
 8003d82:	2f58      	cmp	r7, #88	; 0x58
 8003d84:	f000 80c0 	beq.w	8003f08 <_printf_i+0x1a8>
 8003d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d90:	e03a      	b.n	8003e08 <_printf_i+0xa8>
 8003d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d96:	2b15      	cmp	r3, #21
 8003d98:	d8f6      	bhi.n	8003d88 <_printf_i+0x28>
 8003d9a:	a101      	add	r1, pc, #4	; (adr r1, 8003da0 <_printf_i+0x40>)
 8003d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003d89 	.word	0x08003d89
 8003dac:	08003d89 	.word	0x08003d89
 8003db0:	08003d89 	.word	0x08003d89
 8003db4:	08003d89 	.word	0x08003d89
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d89 	.word	0x08003d89
 8003dc0:	08003d89 	.word	0x08003d89
 8003dc4:	08003d89 	.word	0x08003d89
 8003dc8:	08003d89 	.word	0x08003d89
 8003dcc:	08003f11 	.word	0x08003f11
 8003dd0:	08003e39 	.word	0x08003e39
 8003dd4:	08003ecb 	.word	0x08003ecb
 8003dd8:	08003d89 	.word	0x08003d89
 8003ddc:	08003d89 	.word	0x08003d89
 8003de0:	08003f33 	.word	0x08003f33
 8003de4:	08003d89 	.word	0x08003d89
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003d89 	.word	0x08003d89
 8003df0:	08003d89 	.word	0x08003d89
 8003df4:	08003ed3 	.word	0x08003ed3
 8003df8:	682b      	ldr	r3, [r5, #0]
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	602a      	str	r2, [r5, #0]
 8003e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09f      	b.n	8003f4c <_printf_i+0x1ec>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	0607      	lsls	r7, r0, #24
 8003e12:	f103 0104 	add.w	r1, r3, #4
 8003e16:	6029      	str	r1, [r5, #0]
 8003e18:	d501      	bpl.n	8003e1e <_printf_i+0xbe>
 8003e1a:	681e      	ldr	r6, [r3, #0]
 8003e1c:	e003      	b.n	8003e26 <_printf_i+0xc6>
 8003e1e:	0646      	lsls	r6, r0, #25
 8003e20:	d5fb      	bpl.n	8003e1a <_printf_i+0xba>
 8003e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003e26:	2e00      	cmp	r6, #0
 8003e28:	da03      	bge.n	8003e32 <_printf_i+0xd2>
 8003e2a:	232d      	movs	r3, #45	; 0x2d
 8003e2c:	4276      	negs	r6, r6
 8003e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e32:	485a      	ldr	r0, [pc, #360]	; (8003f9c <_printf_i+0x23c>)
 8003e34:	230a      	movs	r3, #10
 8003e36:	e012      	b.n	8003e5e <_printf_i+0xfe>
 8003e38:	682b      	ldr	r3, [r5, #0]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	1d19      	adds	r1, r3, #4
 8003e3e:	6029      	str	r1, [r5, #0]
 8003e40:	0605      	lsls	r5, r0, #24
 8003e42:	d501      	bpl.n	8003e48 <_printf_i+0xe8>
 8003e44:	681e      	ldr	r6, [r3, #0]
 8003e46:	e002      	b.n	8003e4e <_printf_i+0xee>
 8003e48:	0641      	lsls	r1, r0, #25
 8003e4a:	d5fb      	bpl.n	8003e44 <_printf_i+0xe4>
 8003e4c:	881e      	ldrh	r6, [r3, #0]
 8003e4e:	4853      	ldr	r0, [pc, #332]	; (8003f9c <_printf_i+0x23c>)
 8003e50:	2f6f      	cmp	r7, #111	; 0x6f
 8003e52:	bf0c      	ite	eq
 8003e54:	2308      	moveq	r3, #8
 8003e56:	230a      	movne	r3, #10
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e5e:	6865      	ldr	r5, [r4, #4]
 8003e60:	60a5      	str	r5, [r4, #8]
 8003e62:	2d00      	cmp	r5, #0
 8003e64:	bfa2      	ittt	ge
 8003e66:	6821      	ldrge	r1, [r4, #0]
 8003e68:	f021 0104 	bicge.w	r1, r1, #4
 8003e6c:	6021      	strge	r1, [r4, #0]
 8003e6e:	b90e      	cbnz	r6, 8003e74 <_printf_i+0x114>
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d04b      	beq.n	8003f0c <_printf_i+0x1ac>
 8003e74:	4615      	mov	r5, r2
 8003e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8003e7e:	5dc7      	ldrb	r7, [r0, r7]
 8003e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e84:	4637      	mov	r7, r6
 8003e86:	42bb      	cmp	r3, r7
 8003e88:	460e      	mov	r6, r1
 8003e8a:	d9f4      	bls.n	8003e76 <_printf_i+0x116>
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10b      	bne.n	8003ea8 <_printf_i+0x148>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	07de      	lsls	r6, r3, #31
 8003e94:	d508      	bpl.n	8003ea8 <_printf_i+0x148>
 8003e96:	6923      	ldr	r3, [r4, #16]
 8003e98:	6861      	ldr	r1, [r4, #4]
 8003e9a:	4299      	cmp	r1, r3
 8003e9c:	bfde      	ittt	le
 8003e9e:	2330      	movle	r3, #48	; 0x30
 8003ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ea8:	1b52      	subs	r2, r2, r5
 8003eaa:	6122      	str	r2, [r4, #16]
 8003eac:	f8cd a000 	str.w	sl, [sp]
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	aa03      	add	r2, sp, #12
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	4640      	mov	r0, r8
 8003eb8:	f7ff fee4 	bl	8003c84 <_printf_common>
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d14a      	bne.n	8003f56 <_printf_i+0x1f6>
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	b004      	add	sp, #16
 8003ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eca:	6823      	ldr	r3, [r4, #0]
 8003ecc:	f043 0320 	orr.w	r3, r3, #32
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	4833      	ldr	r0, [pc, #204]	; (8003fa0 <_printf_i+0x240>)
 8003ed4:	2778      	movs	r7, #120	; 0x78
 8003ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	6829      	ldr	r1, [r5, #0]
 8003ede:	061f      	lsls	r7, r3, #24
 8003ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ee4:	d402      	bmi.n	8003eec <_printf_i+0x18c>
 8003ee6:	065f      	lsls	r7, r3, #25
 8003ee8:	bf48      	it	mi
 8003eea:	b2b6      	uxthmi	r6, r6
 8003eec:	07df      	lsls	r7, r3, #31
 8003eee:	bf48      	it	mi
 8003ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef4:	6029      	str	r1, [r5, #0]
 8003ef6:	bf48      	it	mi
 8003ef8:	6023      	strmi	r3, [r4, #0]
 8003efa:	b91e      	cbnz	r6, 8003f04 <_printf_i+0x1a4>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f023 0320 	bic.w	r3, r3, #32
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	2310      	movs	r3, #16
 8003f06:	e7a7      	b.n	8003e58 <_printf_i+0xf8>
 8003f08:	4824      	ldr	r0, [pc, #144]	; (8003f9c <_printf_i+0x23c>)
 8003f0a:	e7e4      	b.n	8003ed6 <_printf_i+0x176>
 8003f0c:	4615      	mov	r5, r2
 8003f0e:	e7bd      	b.n	8003e8c <_printf_i+0x12c>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	6826      	ldr	r6, [r4, #0]
 8003f14:	6961      	ldr	r1, [r4, #20]
 8003f16:	1d18      	adds	r0, r3, #4
 8003f18:	6028      	str	r0, [r5, #0]
 8003f1a:	0635      	lsls	r5, r6, #24
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	d501      	bpl.n	8003f24 <_printf_i+0x1c4>
 8003f20:	6019      	str	r1, [r3, #0]
 8003f22:	e002      	b.n	8003f2a <_printf_i+0x1ca>
 8003f24:	0670      	lsls	r0, r6, #25
 8003f26:	d5fb      	bpl.n	8003f20 <_printf_i+0x1c0>
 8003f28:	8019      	strh	r1, [r3, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	6123      	str	r3, [r4, #16]
 8003f2e:	4615      	mov	r5, r2
 8003f30:	e7bc      	b.n	8003eac <_printf_i+0x14c>
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	602a      	str	r2, [r5, #0]
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	6862      	ldr	r2, [r4, #4]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4628      	mov	r0, r5
 8003f40:	f7fc f94e 	bl	80001e0 <memchr>
 8003f44:	b108      	cbz	r0, 8003f4a <_printf_i+0x1ea>
 8003f46:	1b40      	subs	r0, r0, r5
 8003f48:	6060      	str	r0, [r4, #4]
 8003f4a:	6863      	ldr	r3, [r4, #4]
 8003f4c:	6123      	str	r3, [r4, #16]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f54:	e7aa      	b.n	8003eac <_printf_i+0x14c>
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	462a      	mov	r2, r5
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	4640      	mov	r0, r8
 8003f5e:	47d0      	blx	sl
 8003f60:	3001      	adds	r0, #1
 8003f62:	d0ad      	beq.n	8003ec0 <_printf_i+0x160>
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	079b      	lsls	r3, r3, #30
 8003f68:	d413      	bmi.n	8003f92 <_printf_i+0x232>
 8003f6a:	68e0      	ldr	r0, [r4, #12]
 8003f6c:	9b03      	ldr	r3, [sp, #12]
 8003f6e:	4298      	cmp	r0, r3
 8003f70:	bfb8      	it	lt
 8003f72:	4618      	movlt	r0, r3
 8003f74:	e7a6      	b.n	8003ec4 <_printf_i+0x164>
 8003f76:	2301      	movs	r3, #1
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	47d0      	blx	sl
 8003f80:	3001      	adds	r0, #1
 8003f82:	d09d      	beq.n	8003ec0 <_printf_i+0x160>
 8003f84:	3501      	adds	r5, #1
 8003f86:	68e3      	ldr	r3, [r4, #12]
 8003f88:	9903      	ldr	r1, [sp, #12]
 8003f8a:	1a5b      	subs	r3, r3, r1
 8003f8c:	42ab      	cmp	r3, r5
 8003f8e:	dcf2      	bgt.n	8003f76 <_printf_i+0x216>
 8003f90:	e7eb      	b.n	8003f6a <_printf_i+0x20a>
 8003f92:	2500      	movs	r5, #0
 8003f94:	f104 0619 	add.w	r6, r4, #25
 8003f98:	e7f5      	b.n	8003f86 <_printf_i+0x226>
 8003f9a:	bf00      	nop
 8003f9c:	08007ee6 	.word	0x08007ee6
 8003fa0:	08007ef7 	.word	0x08007ef7

08003fa4 <_scanf_float>:
 8003fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa8:	b087      	sub	sp, #28
 8003faa:	4617      	mov	r7, r2
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	688b      	ldr	r3, [r1, #8]
 8003fb0:	1e5a      	subs	r2, r3, #1
 8003fb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fb6:	bf83      	ittte	hi
 8003fb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003fbc:	195b      	addhi	r3, r3, r5
 8003fbe:	9302      	strhi	r3, [sp, #8]
 8003fc0:	2300      	movls	r3, #0
 8003fc2:	bf86      	itte	hi
 8003fc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fc8:	608b      	strhi	r3, [r1, #8]
 8003fca:	9302      	strls	r3, [sp, #8]
 8003fcc:	680b      	ldr	r3, [r1, #0]
 8003fce:	468b      	mov	fp, r1
 8003fd0:	2500      	movs	r5, #0
 8003fd2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003fd6:	f84b 3b1c 	str.w	r3, [fp], #28
 8003fda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003fde:	4680      	mov	r8, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	465e      	mov	r6, fp
 8003fe4:	46aa      	mov	sl, r5
 8003fe6:	46a9      	mov	r9, r5
 8003fe8:	9501      	str	r5, [sp, #4]
 8003fea:	68a2      	ldr	r2, [r4, #8]
 8003fec:	b152      	cbz	r2, 8004004 <_scanf_float+0x60>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b4e      	cmp	r3, #78	; 0x4e
 8003ff4:	d864      	bhi.n	80040c0 <_scanf_float+0x11c>
 8003ff6:	2b40      	cmp	r3, #64	; 0x40
 8003ff8:	d83c      	bhi.n	8004074 <_scanf_float+0xd0>
 8003ffa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003ffe:	b2c8      	uxtb	r0, r1
 8004000:	280e      	cmp	r0, #14
 8004002:	d93a      	bls.n	800407a <_scanf_float+0xd6>
 8004004:	f1b9 0f00 	cmp.w	r9, #0
 8004008:	d003      	beq.n	8004012 <_scanf_float+0x6e>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004016:	f1ba 0f01 	cmp.w	sl, #1
 800401a:	f200 8113 	bhi.w	8004244 <_scanf_float+0x2a0>
 800401e:	455e      	cmp	r6, fp
 8004020:	f200 8105 	bhi.w	800422e <_scanf_float+0x28a>
 8004024:	2501      	movs	r5, #1
 8004026:	4628      	mov	r0, r5
 8004028:	b007      	add	sp, #28
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004032:	2a0d      	cmp	r2, #13
 8004034:	d8e6      	bhi.n	8004004 <_scanf_float+0x60>
 8004036:	a101      	add	r1, pc, #4	; (adr r1, 800403c <_scanf_float+0x98>)
 8004038:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800403c:	0800417b 	.word	0x0800417b
 8004040:	08004005 	.word	0x08004005
 8004044:	08004005 	.word	0x08004005
 8004048:	08004005 	.word	0x08004005
 800404c:	080041db 	.word	0x080041db
 8004050:	080041b3 	.word	0x080041b3
 8004054:	08004005 	.word	0x08004005
 8004058:	08004005 	.word	0x08004005
 800405c:	08004189 	.word	0x08004189
 8004060:	08004005 	.word	0x08004005
 8004064:	08004005 	.word	0x08004005
 8004068:	08004005 	.word	0x08004005
 800406c:	08004005 	.word	0x08004005
 8004070:	08004141 	.word	0x08004141
 8004074:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004078:	e7db      	b.n	8004032 <_scanf_float+0x8e>
 800407a:	290e      	cmp	r1, #14
 800407c:	d8c2      	bhi.n	8004004 <_scanf_float+0x60>
 800407e:	a001      	add	r0, pc, #4	; (adr r0, 8004084 <_scanf_float+0xe0>)
 8004080:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004084:	08004133 	.word	0x08004133
 8004088:	08004005 	.word	0x08004005
 800408c:	08004133 	.word	0x08004133
 8004090:	080041c7 	.word	0x080041c7
 8004094:	08004005 	.word	0x08004005
 8004098:	080040e1 	.word	0x080040e1
 800409c:	0800411d 	.word	0x0800411d
 80040a0:	0800411d 	.word	0x0800411d
 80040a4:	0800411d 	.word	0x0800411d
 80040a8:	0800411d 	.word	0x0800411d
 80040ac:	0800411d 	.word	0x0800411d
 80040b0:	0800411d 	.word	0x0800411d
 80040b4:	0800411d 	.word	0x0800411d
 80040b8:	0800411d 	.word	0x0800411d
 80040bc:	0800411d 	.word	0x0800411d
 80040c0:	2b6e      	cmp	r3, #110	; 0x6e
 80040c2:	d809      	bhi.n	80040d8 <_scanf_float+0x134>
 80040c4:	2b60      	cmp	r3, #96	; 0x60
 80040c6:	d8b2      	bhi.n	800402e <_scanf_float+0x8a>
 80040c8:	2b54      	cmp	r3, #84	; 0x54
 80040ca:	d077      	beq.n	80041bc <_scanf_float+0x218>
 80040cc:	2b59      	cmp	r3, #89	; 0x59
 80040ce:	d199      	bne.n	8004004 <_scanf_float+0x60>
 80040d0:	2d07      	cmp	r5, #7
 80040d2:	d197      	bne.n	8004004 <_scanf_float+0x60>
 80040d4:	2508      	movs	r5, #8
 80040d6:	e029      	b.n	800412c <_scanf_float+0x188>
 80040d8:	2b74      	cmp	r3, #116	; 0x74
 80040da:	d06f      	beq.n	80041bc <_scanf_float+0x218>
 80040dc:	2b79      	cmp	r3, #121	; 0x79
 80040de:	e7f6      	b.n	80040ce <_scanf_float+0x12a>
 80040e0:	6821      	ldr	r1, [r4, #0]
 80040e2:	05c8      	lsls	r0, r1, #23
 80040e4:	d51a      	bpl.n	800411c <_scanf_float+0x178>
 80040e6:	9b02      	ldr	r3, [sp, #8]
 80040e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80040ec:	6021      	str	r1, [r4, #0]
 80040ee:	f109 0901 	add.w	r9, r9, #1
 80040f2:	b11b      	cbz	r3, 80040fc <_scanf_float+0x158>
 80040f4:	3b01      	subs	r3, #1
 80040f6:	3201      	adds	r2, #1
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	60a2      	str	r2, [r4, #8]
 80040fc:	68a3      	ldr	r3, [r4, #8]
 80040fe:	3b01      	subs	r3, #1
 8004100:	60a3      	str	r3, [r4, #8]
 8004102:	6923      	ldr	r3, [r4, #16]
 8004104:	3301      	adds	r3, #1
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3b01      	subs	r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	f340 8084 	ble.w	800421c <_scanf_float+0x278>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	3301      	adds	r3, #1
 8004118:	603b      	str	r3, [r7, #0]
 800411a:	e766      	b.n	8003fea <_scanf_float+0x46>
 800411c:	eb1a 0f05 	cmn.w	sl, r5
 8004120:	f47f af70 	bne.w	8004004 <_scanf_float+0x60>
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800412a:	6022      	str	r2, [r4, #0]
 800412c:	f806 3b01 	strb.w	r3, [r6], #1
 8004130:	e7e4      	b.n	80040fc <_scanf_float+0x158>
 8004132:	6822      	ldr	r2, [r4, #0]
 8004134:	0610      	lsls	r0, r2, #24
 8004136:	f57f af65 	bpl.w	8004004 <_scanf_float+0x60>
 800413a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413e:	e7f4      	b.n	800412a <_scanf_float+0x186>
 8004140:	f1ba 0f00 	cmp.w	sl, #0
 8004144:	d10e      	bne.n	8004164 <_scanf_float+0x1c0>
 8004146:	f1b9 0f00 	cmp.w	r9, #0
 800414a:	d10e      	bne.n	800416a <_scanf_float+0x1c6>
 800414c:	6822      	ldr	r2, [r4, #0]
 800414e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004152:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004156:	d108      	bne.n	800416a <_scanf_float+0x1c6>
 8004158:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800415c:	6022      	str	r2, [r4, #0]
 800415e:	f04f 0a01 	mov.w	sl, #1
 8004162:	e7e3      	b.n	800412c <_scanf_float+0x188>
 8004164:	f1ba 0f02 	cmp.w	sl, #2
 8004168:	d055      	beq.n	8004216 <_scanf_float+0x272>
 800416a:	2d01      	cmp	r5, #1
 800416c:	d002      	beq.n	8004174 <_scanf_float+0x1d0>
 800416e:	2d04      	cmp	r5, #4
 8004170:	f47f af48 	bne.w	8004004 <_scanf_float+0x60>
 8004174:	3501      	adds	r5, #1
 8004176:	b2ed      	uxtb	r5, r5
 8004178:	e7d8      	b.n	800412c <_scanf_float+0x188>
 800417a:	f1ba 0f01 	cmp.w	sl, #1
 800417e:	f47f af41 	bne.w	8004004 <_scanf_float+0x60>
 8004182:	f04f 0a02 	mov.w	sl, #2
 8004186:	e7d1      	b.n	800412c <_scanf_float+0x188>
 8004188:	b97d      	cbnz	r5, 80041aa <_scanf_float+0x206>
 800418a:	f1b9 0f00 	cmp.w	r9, #0
 800418e:	f47f af3c 	bne.w	800400a <_scanf_float+0x66>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004198:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800419c:	f47f af39 	bne.w	8004012 <_scanf_float+0x6e>
 80041a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80041a4:	6022      	str	r2, [r4, #0]
 80041a6:	2501      	movs	r5, #1
 80041a8:	e7c0      	b.n	800412c <_scanf_float+0x188>
 80041aa:	2d03      	cmp	r5, #3
 80041ac:	d0e2      	beq.n	8004174 <_scanf_float+0x1d0>
 80041ae:	2d05      	cmp	r5, #5
 80041b0:	e7de      	b.n	8004170 <_scanf_float+0x1cc>
 80041b2:	2d02      	cmp	r5, #2
 80041b4:	f47f af26 	bne.w	8004004 <_scanf_float+0x60>
 80041b8:	2503      	movs	r5, #3
 80041ba:	e7b7      	b.n	800412c <_scanf_float+0x188>
 80041bc:	2d06      	cmp	r5, #6
 80041be:	f47f af21 	bne.w	8004004 <_scanf_float+0x60>
 80041c2:	2507      	movs	r5, #7
 80041c4:	e7b2      	b.n	800412c <_scanf_float+0x188>
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	0591      	lsls	r1, r2, #22
 80041ca:	f57f af1b 	bpl.w	8004004 <_scanf_float+0x60>
 80041ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80041d2:	6022      	str	r2, [r4, #0]
 80041d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80041d8:	e7a8      	b.n	800412c <_scanf_float+0x188>
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80041e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80041e4:	d006      	beq.n	80041f4 <_scanf_float+0x250>
 80041e6:	0550      	lsls	r0, r2, #21
 80041e8:	f57f af0c 	bpl.w	8004004 <_scanf_float+0x60>
 80041ec:	f1b9 0f00 	cmp.w	r9, #0
 80041f0:	f43f af0f 	beq.w	8004012 <_scanf_float+0x6e>
 80041f4:	0591      	lsls	r1, r2, #22
 80041f6:	bf58      	it	pl
 80041f8:	9901      	ldrpl	r1, [sp, #4]
 80041fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80041fe:	bf58      	it	pl
 8004200:	eba9 0101 	subpl.w	r1, r9, r1
 8004204:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004208:	bf58      	it	pl
 800420a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	f04f 0900 	mov.w	r9, #0
 8004214:	e78a      	b.n	800412c <_scanf_float+0x188>
 8004216:	f04f 0a03 	mov.w	sl, #3
 800421a:	e787      	b.n	800412c <_scanf_float+0x188>
 800421c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004220:	4639      	mov	r1, r7
 8004222:	4640      	mov	r0, r8
 8004224:	4798      	blx	r3
 8004226:	2800      	cmp	r0, #0
 8004228:	f43f aedf 	beq.w	8003fea <_scanf_float+0x46>
 800422c:	e6ea      	b.n	8004004 <_scanf_float+0x60>
 800422e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004232:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004236:	463a      	mov	r2, r7
 8004238:	4640      	mov	r0, r8
 800423a:	4798      	blx	r3
 800423c:	6923      	ldr	r3, [r4, #16]
 800423e:	3b01      	subs	r3, #1
 8004240:	6123      	str	r3, [r4, #16]
 8004242:	e6ec      	b.n	800401e <_scanf_float+0x7a>
 8004244:	1e6b      	subs	r3, r5, #1
 8004246:	2b06      	cmp	r3, #6
 8004248:	d825      	bhi.n	8004296 <_scanf_float+0x2f2>
 800424a:	2d02      	cmp	r5, #2
 800424c:	d836      	bhi.n	80042bc <_scanf_float+0x318>
 800424e:	455e      	cmp	r6, fp
 8004250:	f67f aee8 	bls.w	8004024 <_scanf_float+0x80>
 8004254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004258:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800425c:	463a      	mov	r2, r7
 800425e:	4640      	mov	r0, r8
 8004260:	4798      	blx	r3
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	3b01      	subs	r3, #1
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	e7f1      	b.n	800424e <_scanf_float+0x2aa>
 800426a:	9802      	ldr	r0, [sp, #8]
 800426c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004270:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004274:	9002      	str	r0, [sp, #8]
 8004276:	463a      	mov	r2, r7
 8004278:	4640      	mov	r0, r8
 800427a:	4798      	blx	r3
 800427c:	6923      	ldr	r3, [r4, #16]
 800427e:	3b01      	subs	r3, #1
 8004280:	6123      	str	r3, [r4, #16]
 8004282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004286:	fa5f fa8a 	uxtb.w	sl, sl
 800428a:	f1ba 0f02 	cmp.w	sl, #2
 800428e:	d1ec      	bne.n	800426a <_scanf_float+0x2c6>
 8004290:	3d03      	subs	r5, #3
 8004292:	b2ed      	uxtb	r5, r5
 8004294:	1b76      	subs	r6, r6, r5
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	05da      	lsls	r2, r3, #23
 800429a:	d52f      	bpl.n	80042fc <_scanf_float+0x358>
 800429c:	055b      	lsls	r3, r3, #21
 800429e:	d510      	bpl.n	80042c2 <_scanf_float+0x31e>
 80042a0:	455e      	cmp	r6, fp
 80042a2:	f67f aebf 	bls.w	8004024 <_scanf_float+0x80>
 80042a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80042ae:	463a      	mov	r2, r7
 80042b0:	4640      	mov	r0, r8
 80042b2:	4798      	blx	r3
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	e7f1      	b.n	80042a0 <_scanf_float+0x2fc>
 80042bc:	46aa      	mov	sl, r5
 80042be:	9602      	str	r6, [sp, #8]
 80042c0:	e7df      	b.n	8004282 <_scanf_float+0x2de>
 80042c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	2965      	cmp	r1, #101	; 0x65
 80042ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80042ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	d00c      	beq.n	80042f0 <_scanf_float+0x34c>
 80042d6:	2945      	cmp	r1, #69	; 0x45
 80042d8:	d00a      	beq.n	80042f0 <_scanf_float+0x34c>
 80042da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042de:	463a      	mov	r2, r7
 80042e0:	4640      	mov	r0, r8
 80042e2:	4798      	blx	r3
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	1eb5      	subs	r5, r6, #2
 80042ee:	6123      	str	r3, [r4, #16]
 80042f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042f4:	463a      	mov	r2, r7
 80042f6:	4640      	mov	r0, r8
 80042f8:	4798      	blx	r3
 80042fa:	462e      	mov	r6, r5
 80042fc:	6825      	ldr	r5, [r4, #0]
 80042fe:	f015 0510 	ands.w	r5, r5, #16
 8004302:	d158      	bne.n	80043b6 <_scanf_float+0x412>
 8004304:	7035      	strb	r5, [r6, #0]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800430c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004310:	d11c      	bne.n	800434c <_scanf_float+0x3a8>
 8004312:	9b01      	ldr	r3, [sp, #4]
 8004314:	454b      	cmp	r3, r9
 8004316:	eba3 0209 	sub.w	r2, r3, r9
 800431a:	d124      	bne.n	8004366 <_scanf_float+0x3c2>
 800431c:	2200      	movs	r2, #0
 800431e:	4659      	mov	r1, fp
 8004320:	4640      	mov	r0, r8
 8004322:	f002 fc2d 	bl	8006b80 <_strtod_r>
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	6821      	ldr	r1, [r4, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f011 0f02 	tst.w	r1, #2
 8004330:	ec57 6b10 	vmov	r6, r7, d0
 8004334:	f103 0204 	add.w	r2, r3, #4
 8004338:	d020      	beq.n	800437c <_scanf_float+0x3d8>
 800433a:	9903      	ldr	r1, [sp, #12]
 800433c:	600a      	str	r2, [r1, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	e9c3 6700 	strd	r6, r7, [r3]
 8004344:	68e3      	ldr	r3, [r4, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60e3      	str	r3, [r4, #12]
 800434a:	e66c      	b.n	8004026 <_scanf_float+0x82>
 800434c:	9b04      	ldr	r3, [sp, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0e4      	beq.n	800431c <_scanf_float+0x378>
 8004352:	9905      	ldr	r1, [sp, #20]
 8004354:	230a      	movs	r3, #10
 8004356:	462a      	mov	r2, r5
 8004358:	3101      	adds	r1, #1
 800435a:	4640      	mov	r0, r8
 800435c:	f002 fc98 	bl	8006c90 <_strtol_r>
 8004360:	9b04      	ldr	r3, [sp, #16]
 8004362:	9e05      	ldr	r6, [sp, #20]
 8004364:	1ac2      	subs	r2, r0, r3
 8004366:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800436a:	429e      	cmp	r6, r3
 800436c:	bf28      	it	cs
 800436e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004372:	4912      	ldr	r1, [pc, #72]	; (80043bc <_scanf_float+0x418>)
 8004374:	4630      	mov	r0, r6
 8004376:	f000 f8e7 	bl	8004548 <siprintf>
 800437a:	e7cf      	b.n	800431c <_scanf_float+0x378>
 800437c:	f011 0f04 	tst.w	r1, #4
 8004380:	9903      	ldr	r1, [sp, #12]
 8004382:	600a      	str	r2, [r1, #0]
 8004384:	d1db      	bne.n	800433e <_scanf_float+0x39a>
 8004386:	f8d3 8000 	ldr.w	r8, [r3]
 800438a:	ee10 2a10 	vmov	r2, s0
 800438e:	ee10 0a10 	vmov	r0, s0
 8004392:	463b      	mov	r3, r7
 8004394:	4639      	mov	r1, r7
 8004396:	f7fc fbd1 	bl	8000b3c <__aeabi_dcmpun>
 800439a:	b128      	cbz	r0, 80043a8 <_scanf_float+0x404>
 800439c:	4808      	ldr	r0, [pc, #32]	; (80043c0 <_scanf_float+0x41c>)
 800439e:	f000 f9b5 	bl	800470c <nanf>
 80043a2:	ed88 0a00 	vstr	s0, [r8]
 80043a6:	e7cd      	b.n	8004344 <_scanf_float+0x3a0>
 80043a8:	4630      	mov	r0, r6
 80043aa:	4639      	mov	r1, r7
 80043ac:	f7fc fc24 	bl	8000bf8 <__aeabi_d2f>
 80043b0:	f8c8 0000 	str.w	r0, [r8]
 80043b4:	e7c6      	b.n	8004344 <_scanf_float+0x3a0>
 80043b6:	2500      	movs	r5, #0
 80043b8:	e635      	b.n	8004026 <_scanf_float+0x82>
 80043ba:	bf00      	nop
 80043bc:	08007f08 	.word	0x08007f08
 80043c0:	0800829d 	.word	0x0800829d

080043c4 <std>:
 80043c4:	2300      	movs	r3, #0
 80043c6:	b510      	push	{r4, lr}
 80043c8:	4604      	mov	r4, r0
 80043ca:	e9c0 3300 	strd	r3, r3, [r0]
 80043ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043d2:	6083      	str	r3, [r0, #8]
 80043d4:	8181      	strh	r1, [r0, #12]
 80043d6:	6643      	str	r3, [r0, #100]	; 0x64
 80043d8:	81c2      	strh	r2, [r0, #14]
 80043da:	6183      	str	r3, [r0, #24]
 80043dc:	4619      	mov	r1, r3
 80043de:	2208      	movs	r2, #8
 80043e0:	305c      	adds	r0, #92	; 0x5c
 80043e2:	f000 f914 	bl	800460e <memset>
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <std+0x38>)
 80043e8:	6263      	str	r3, [r4, #36]	; 0x24
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <std+0x3c>)
 80043ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <std+0x40>)
 80043f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <std+0x44>)
 80043f4:	6224      	str	r4, [r4, #32]
 80043f6:	6323      	str	r3, [r4, #48]	; 0x30
 80043f8:	bd10      	pop	{r4, pc}
 80043fa:	bf00      	nop
 80043fc:	08004589 	.word	0x08004589
 8004400:	080045ab 	.word	0x080045ab
 8004404:	080045e3 	.word	0x080045e3
 8004408:	08004607 	.word	0x08004607

0800440c <stdio_exit_handler>:
 800440c:	4a02      	ldr	r2, [pc, #8]	; (8004418 <stdio_exit_handler+0xc>)
 800440e:	4903      	ldr	r1, [pc, #12]	; (800441c <stdio_exit_handler+0x10>)
 8004410:	4803      	ldr	r0, [pc, #12]	; (8004420 <stdio_exit_handler+0x14>)
 8004412:	f000 b869 	b.w	80044e8 <_fwalk_sglue>
 8004416:	bf00      	nop
 8004418:	2000000c 	.word	0x2000000c
 800441c:	080072d9 	.word	0x080072d9
 8004420:	20000018 	.word	0x20000018

08004424 <cleanup_stdio>:
 8004424:	6841      	ldr	r1, [r0, #4]
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <cleanup_stdio+0x34>)
 8004428:	4299      	cmp	r1, r3
 800442a:	b510      	push	{r4, lr}
 800442c:	4604      	mov	r4, r0
 800442e:	d001      	beq.n	8004434 <cleanup_stdio+0x10>
 8004430:	f002 ff52 	bl	80072d8 <_fflush_r>
 8004434:	68a1      	ldr	r1, [r4, #8]
 8004436:	4b09      	ldr	r3, [pc, #36]	; (800445c <cleanup_stdio+0x38>)
 8004438:	4299      	cmp	r1, r3
 800443a:	d002      	beq.n	8004442 <cleanup_stdio+0x1e>
 800443c:	4620      	mov	r0, r4
 800443e:	f002 ff4b 	bl	80072d8 <_fflush_r>
 8004442:	68e1      	ldr	r1, [r4, #12]
 8004444:	4b06      	ldr	r3, [pc, #24]	; (8004460 <cleanup_stdio+0x3c>)
 8004446:	4299      	cmp	r1, r3
 8004448:	d004      	beq.n	8004454 <cleanup_stdio+0x30>
 800444a:	4620      	mov	r0, r4
 800444c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004450:	f002 bf42 	b.w	80072d8 <_fflush_r>
 8004454:	bd10      	pop	{r4, pc}
 8004456:	bf00      	nop
 8004458:	200002a0 	.word	0x200002a0
 800445c:	20000308 	.word	0x20000308
 8004460:	20000370 	.word	0x20000370

08004464 <global_stdio_init.part.0>:
 8004464:	b510      	push	{r4, lr}
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <global_stdio_init.part.0+0x30>)
 8004468:	4c0b      	ldr	r4, [pc, #44]	; (8004498 <global_stdio_init.part.0+0x34>)
 800446a:	4a0c      	ldr	r2, [pc, #48]	; (800449c <global_stdio_init.part.0+0x38>)
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	4620      	mov	r0, r4
 8004470:	2200      	movs	r2, #0
 8004472:	2104      	movs	r1, #4
 8004474:	f7ff ffa6 	bl	80043c4 <std>
 8004478:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800447c:	2201      	movs	r2, #1
 800447e:	2109      	movs	r1, #9
 8004480:	f7ff ffa0 	bl	80043c4 <std>
 8004484:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004488:	2202      	movs	r2, #2
 800448a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448e:	2112      	movs	r1, #18
 8004490:	f7ff bf98 	b.w	80043c4 <std>
 8004494:	200003d8 	.word	0x200003d8
 8004498:	200002a0 	.word	0x200002a0
 800449c:	0800440d 	.word	0x0800440d

080044a0 <__sfp_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__sfp_lock_acquire+0x8>)
 80044a2:	f000 b931 	b.w	8004708 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	200003e1 	.word	0x200003e1

080044ac <__sfp_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__sfp_lock_release+0x8>)
 80044ae:	f000 b92c 	b.w	800470a <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	200003e1 	.word	0x200003e1

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sfp_lock_acquire>
 80044c0:	6a23      	ldr	r3, [r4, #32]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sfp_lock_release>
 80044cc:	4b04      	ldr	r3, [pc, #16]	; (80044e0 <__sinit+0x28>)
 80044ce:	6223      	str	r3, [r4, #32]
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__sinit+0x2c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1f5      	bne.n	80044c4 <__sinit+0xc>
 80044d8:	f7ff ffc4 	bl	8004464 <global_stdio_init.part.0>
 80044dc:	e7f2      	b.n	80044c4 <__sinit+0xc>
 80044de:	bf00      	nop
 80044e0:	08004425 	.word	0x08004425
 80044e4:	200003d8 	.word	0x200003d8

080044e8 <_fwalk_sglue>:
 80044e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044ec:	4607      	mov	r7, r0
 80044ee:	4688      	mov	r8, r1
 80044f0:	4614      	mov	r4, r2
 80044f2:	2600      	movs	r6, #0
 80044f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044f8:	f1b9 0901 	subs.w	r9, r9, #1
 80044fc:	d505      	bpl.n	800450a <_fwalk_sglue+0x22>
 80044fe:	6824      	ldr	r4, [r4, #0]
 8004500:	2c00      	cmp	r4, #0
 8004502:	d1f7      	bne.n	80044f4 <_fwalk_sglue+0xc>
 8004504:	4630      	mov	r0, r6
 8004506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800450a:	89ab      	ldrh	r3, [r5, #12]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d907      	bls.n	8004520 <_fwalk_sglue+0x38>
 8004510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004514:	3301      	adds	r3, #1
 8004516:	d003      	beq.n	8004520 <_fwalk_sglue+0x38>
 8004518:	4629      	mov	r1, r5
 800451a:	4638      	mov	r0, r7
 800451c:	47c0      	blx	r8
 800451e:	4306      	orrs	r6, r0
 8004520:	3568      	adds	r5, #104	; 0x68
 8004522:	e7e9      	b.n	80044f8 <_fwalk_sglue+0x10>

08004524 <iprintf>:
 8004524:	b40f      	push	{r0, r1, r2, r3}
 8004526:	b507      	push	{r0, r1, r2, lr}
 8004528:	4906      	ldr	r1, [pc, #24]	; (8004544 <iprintf+0x20>)
 800452a:	ab04      	add	r3, sp, #16
 800452c:	6808      	ldr	r0, [r1, #0]
 800452e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004532:	6881      	ldr	r1, [r0, #8]
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f002 fd2f 	bl	8006f98 <_vfiprintf_r>
 800453a:	b003      	add	sp, #12
 800453c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004540:	b004      	add	sp, #16
 8004542:	4770      	bx	lr
 8004544:	20000064 	.word	0x20000064

08004548 <siprintf>:
 8004548:	b40e      	push	{r1, r2, r3}
 800454a:	b500      	push	{lr}
 800454c:	b09c      	sub	sp, #112	; 0x70
 800454e:	ab1d      	add	r3, sp, #116	; 0x74
 8004550:	9002      	str	r0, [sp, #8]
 8004552:	9006      	str	r0, [sp, #24]
 8004554:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004558:	4809      	ldr	r0, [pc, #36]	; (8004580 <siprintf+0x38>)
 800455a:	9107      	str	r1, [sp, #28]
 800455c:	9104      	str	r1, [sp, #16]
 800455e:	4909      	ldr	r1, [pc, #36]	; (8004584 <siprintf+0x3c>)
 8004560:	f853 2b04 	ldr.w	r2, [r3], #4
 8004564:	9105      	str	r1, [sp, #20]
 8004566:	6800      	ldr	r0, [r0, #0]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	a902      	add	r1, sp, #8
 800456c:	f002 fbec 	bl	8006d48 <_svfiprintf_r>
 8004570:	9b02      	ldr	r3, [sp, #8]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	b01c      	add	sp, #112	; 0x70
 8004578:	f85d eb04 	ldr.w	lr, [sp], #4
 800457c:	b003      	add	sp, #12
 800457e:	4770      	bx	lr
 8004580:	20000064 	.word	0x20000064
 8004584:	ffff0208 	.word	0xffff0208

08004588 <__sread>:
 8004588:	b510      	push	{r4, lr}
 800458a:	460c      	mov	r4, r1
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	f000 f86c 	bl	800466c <_read_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	bfab      	itete	ge
 8004598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800459a:	89a3      	ldrhlt	r3, [r4, #12]
 800459c:	181b      	addge	r3, r3, r0
 800459e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045a2:	bfac      	ite	ge
 80045a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045a6:	81a3      	strhlt	r3, [r4, #12]
 80045a8:	bd10      	pop	{r4, pc}

080045aa <__swrite>:
 80045aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	461f      	mov	r7, r3
 80045b0:	898b      	ldrh	r3, [r1, #12]
 80045b2:	05db      	lsls	r3, r3, #23
 80045b4:	4605      	mov	r5, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	4616      	mov	r6, r2
 80045ba:	d505      	bpl.n	80045c8 <__swrite+0x1e>
 80045bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c0:	2302      	movs	r3, #2
 80045c2:	2200      	movs	r2, #0
 80045c4:	f000 f840 	bl	8004648 <_lseek_r>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	4632      	mov	r2, r6
 80045d6:	463b      	mov	r3, r7
 80045d8:	4628      	mov	r0, r5
 80045da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	f000 b857 	b.w	8004690 <_write_r>

080045e2 <__sseek>:
 80045e2:	b510      	push	{r4, lr}
 80045e4:	460c      	mov	r4, r1
 80045e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ea:	f000 f82d 	bl	8004648 <_lseek_r>
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	bf15      	itete	ne
 80045f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045fe:	81a3      	strheq	r3, [r4, #12]
 8004600:	bf18      	it	ne
 8004602:	81a3      	strhne	r3, [r4, #12]
 8004604:	bd10      	pop	{r4, pc}

08004606 <__sclose>:
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 b80d 	b.w	8004628 <_close_r>

0800460e <memset>:
 800460e:	4402      	add	r2, r0
 8004610:	4603      	mov	r3, r0
 8004612:	4293      	cmp	r3, r2
 8004614:	d100      	bne.n	8004618 <memset+0xa>
 8004616:	4770      	bx	lr
 8004618:	f803 1b01 	strb.w	r1, [r3], #1
 800461c:	e7f9      	b.n	8004612 <memset+0x4>
	...

08004620 <_localeconv_r>:
 8004620:	4800      	ldr	r0, [pc, #0]	; (8004624 <_localeconv_r+0x4>)
 8004622:	4770      	bx	lr
 8004624:	20000158 	.word	0x20000158

08004628 <_close_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d06      	ldr	r5, [pc, #24]	; (8004644 <_close_r+0x1c>)
 800462c:	2300      	movs	r3, #0
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	602b      	str	r3, [r5, #0]
 8004634:	f7fc ff57 	bl	80014e6 <_close>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_close_r+0x1a>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_close_r+0x1a>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	200003dc 	.word	0x200003dc

08004648 <_lseek_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d07      	ldr	r5, [pc, #28]	; (8004668 <_lseek_r+0x20>)
 800464c:	4604      	mov	r4, r0
 800464e:	4608      	mov	r0, r1
 8004650:	4611      	mov	r1, r2
 8004652:	2200      	movs	r2, #0
 8004654:	602a      	str	r2, [r5, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	f7fc ff6c 	bl	8001534 <_lseek>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_lseek_r+0x1e>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_lseek_r+0x1e>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	200003dc 	.word	0x200003dc

0800466c <_read_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	4d07      	ldr	r5, [pc, #28]	; (800468c <_read_r+0x20>)
 8004670:	4604      	mov	r4, r0
 8004672:	4608      	mov	r0, r1
 8004674:	4611      	mov	r1, r2
 8004676:	2200      	movs	r2, #0
 8004678:	602a      	str	r2, [r5, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	f7fc fefa 	bl	8001474 <_read>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d102      	bne.n	800468a <_read_r+0x1e>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	b103      	cbz	r3, 800468a <_read_r+0x1e>
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	bd38      	pop	{r3, r4, r5, pc}
 800468c:	200003dc 	.word	0x200003dc

08004690 <_write_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4d07      	ldr	r5, [pc, #28]	; (80046b0 <_write_r+0x20>)
 8004694:	4604      	mov	r4, r0
 8004696:	4608      	mov	r0, r1
 8004698:	4611      	mov	r1, r2
 800469a:	2200      	movs	r2, #0
 800469c:	602a      	str	r2, [r5, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	f7fc ff05 	bl	80014ae <_write>
 80046a4:	1c43      	adds	r3, r0, #1
 80046a6:	d102      	bne.n	80046ae <_write_r+0x1e>
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	b103      	cbz	r3, 80046ae <_write_r+0x1e>
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
 80046b0:	200003dc 	.word	0x200003dc

080046b4 <__errno>:
 80046b4:	4b01      	ldr	r3, [pc, #4]	; (80046bc <__errno+0x8>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000064 	.word	0x20000064

080046c0 <__libc_init_array>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4d0d      	ldr	r5, [pc, #52]	; (80046f8 <__libc_init_array+0x38>)
 80046c4:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <__libc_init_array+0x3c>)
 80046c6:	1b64      	subs	r4, r4, r5
 80046c8:	10a4      	asrs	r4, r4, #2
 80046ca:	2600      	movs	r6, #0
 80046cc:	42a6      	cmp	r6, r4
 80046ce:	d109      	bne.n	80046e4 <__libc_init_array+0x24>
 80046d0:	4d0b      	ldr	r5, [pc, #44]	; (8004700 <__libc_init_array+0x40>)
 80046d2:	4c0c      	ldr	r4, [pc, #48]	; (8004704 <__libc_init_array+0x44>)
 80046d4:	f003 fbd4 	bl	8007e80 <_init>
 80046d8:	1b64      	subs	r4, r4, r5
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	2600      	movs	r6, #0
 80046de:	42a6      	cmp	r6, r4
 80046e0:	d105      	bne.n	80046ee <__libc_init_array+0x2e>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e8:	4798      	blx	r3
 80046ea:	3601      	adds	r6, #1
 80046ec:	e7ee      	b.n	80046cc <__libc_init_array+0xc>
 80046ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f2:	4798      	blx	r3
 80046f4:	3601      	adds	r6, #1
 80046f6:	e7f2      	b.n	80046de <__libc_init_array+0x1e>
 80046f8:	08008308 	.word	0x08008308
 80046fc:	08008308 	.word	0x08008308
 8004700:	08008308 	.word	0x08008308
 8004704:	0800830c 	.word	0x0800830c

08004708 <__retarget_lock_acquire_recursive>:
 8004708:	4770      	bx	lr

0800470a <__retarget_lock_release_recursive>:
 800470a:	4770      	bx	lr

0800470c <nanf>:
 800470c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004714 <nanf+0x8>
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	7fc00000 	.word	0x7fc00000

08004718 <quorem>:
 8004718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471c:	6903      	ldr	r3, [r0, #16]
 800471e:	690c      	ldr	r4, [r1, #16]
 8004720:	42a3      	cmp	r3, r4
 8004722:	4607      	mov	r7, r0
 8004724:	db7e      	blt.n	8004824 <quorem+0x10c>
 8004726:	3c01      	subs	r4, #1
 8004728:	f101 0814 	add.w	r8, r1, #20
 800472c:	f100 0514 	add.w	r5, r0, #20
 8004730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800473a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800473e:	3301      	adds	r3, #1
 8004740:	429a      	cmp	r2, r3
 8004742:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004746:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800474a:	fbb2 f6f3 	udiv	r6, r2, r3
 800474e:	d331      	bcc.n	80047b4 <quorem+0x9c>
 8004750:	f04f 0e00 	mov.w	lr, #0
 8004754:	4640      	mov	r0, r8
 8004756:	46ac      	mov	ip, r5
 8004758:	46f2      	mov	sl, lr
 800475a:	f850 2b04 	ldr.w	r2, [r0], #4
 800475e:	b293      	uxth	r3, r2
 8004760:	fb06 e303 	mla	r3, r6, r3, lr
 8004764:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004768:	0c1a      	lsrs	r2, r3, #16
 800476a:	b29b      	uxth	r3, r3
 800476c:	ebaa 0303 	sub.w	r3, sl, r3
 8004770:	f8dc a000 	ldr.w	sl, [ip]
 8004774:	fa13 f38a 	uxtah	r3, r3, sl
 8004778:	fb06 220e 	mla	r2, r6, lr, r2
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	9b00      	ldr	r3, [sp, #0]
 8004780:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004784:	b292      	uxth	r2, r2
 8004786:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800478a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800478e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004792:	4581      	cmp	r9, r0
 8004794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004798:	f84c 3b04 	str.w	r3, [ip], #4
 800479c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80047a0:	d2db      	bcs.n	800475a <quorem+0x42>
 80047a2:	f855 300b 	ldr.w	r3, [r5, fp]
 80047a6:	b92b      	cbnz	r3, 80047b4 <quorem+0x9c>
 80047a8:	9b01      	ldr	r3, [sp, #4]
 80047aa:	3b04      	subs	r3, #4
 80047ac:	429d      	cmp	r5, r3
 80047ae:	461a      	mov	r2, r3
 80047b0:	d32c      	bcc.n	800480c <quorem+0xf4>
 80047b2:	613c      	str	r4, [r7, #16]
 80047b4:	4638      	mov	r0, r7
 80047b6:	f001 f9ef 	bl	8005b98 <__mcmp>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	db22      	blt.n	8004804 <quorem+0xec>
 80047be:	3601      	adds	r6, #1
 80047c0:	4629      	mov	r1, r5
 80047c2:	2000      	movs	r0, #0
 80047c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80047c8:	f8d1 c000 	ldr.w	ip, [r1]
 80047cc:	b293      	uxth	r3, r2
 80047ce:	1ac3      	subs	r3, r0, r3
 80047d0:	0c12      	lsrs	r2, r2, #16
 80047d2:	fa13 f38c 	uxtah	r3, r3, ip
 80047d6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80047da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047de:	b29b      	uxth	r3, r3
 80047e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047e4:	45c1      	cmp	r9, r8
 80047e6:	f841 3b04 	str.w	r3, [r1], #4
 80047ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80047ee:	d2e9      	bcs.n	80047c4 <quorem+0xac>
 80047f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80047f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80047f8:	b922      	cbnz	r2, 8004804 <quorem+0xec>
 80047fa:	3b04      	subs	r3, #4
 80047fc:	429d      	cmp	r5, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	d30a      	bcc.n	8004818 <quorem+0x100>
 8004802:	613c      	str	r4, [r7, #16]
 8004804:	4630      	mov	r0, r6
 8004806:	b003      	add	sp, #12
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	3b04      	subs	r3, #4
 8004810:	2a00      	cmp	r2, #0
 8004812:	d1ce      	bne.n	80047b2 <quorem+0x9a>
 8004814:	3c01      	subs	r4, #1
 8004816:	e7c9      	b.n	80047ac <quorem+0x94>
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	3b04      	subs	r3, #4
 800481c:	2a00      	cmp	r2, #0
 800481e:	d1f0      	bne.n	8004802 <quorem+0xea>
 8004820:	3c01      	subs	r4, #1
 8004822:	e7eb      	b.n	80047fc <quorem+0xe4>
 8004824:	2000      	movs	r0, #0
 8004826:	e7ee      	b.n	8004806 <quorem+0xee>

08004828 <_dtoa_r>:
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	ed2d 8b04 	vpush	{d8-d9}
 8004830:	69c5      	ldr	r5, [r0, #28]
 8004832:	b093      	sub	sp, #76	; 0x4c
 8004834:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004838:	ec57 6b10 	vmov	r6, r7, d0
 800483c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004840:	9107      	str	r1, [sp, #28]
 8004842:	4604      	mov	r4, r0
 8004844:	920a      	str	r2, [sp, #40]	; 0x28
 8004846:	930d      	str	r3, [sp, #52]	; 0x34
 8004848:	b975      	cbnz	r5, 8004868 <_dtoa_r+0x40>
 800484a:	2010      	movs	r0, #16
 800484c:	f000 fe2a 	bl	80054a4 <malloc>
 8004850:	4602      	mov	r2, r0
 8004852:	61e0      	str	r0, [r4, #28]
 8004854:	b920      	cbnz	r0, 8004860 <_dtoa_r+0x38>
 8004856:	4bae      	ldr	r3, [pc, #696]	; (8004b10 <_dtoa_r+0x2e8>)
 8004858:	21ef      	movs	r1, #239	; 0xef
 800485a:	48ae      	ldr	r0, [pc, #696]	; (8004b14 <_dtoa_r+0x2ec>)
 800485c:	f002 fe4c 	bl	80074f8 <__assert_func>
 8004860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004864:	6005      	str	r5, [r0, #0]
 8004866:	60c5      	str	r5, [r0, #12]
 8004868:	69e3      	ldr	r3, [r4, #28]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	b151      	cbz	r1, 8004884 <_dtoa_r+0x5c>
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	604a      	str	r2, [r1, #4]
 8004872:	2301      	movs	r3, #1
 8004874:	4093      	lsls	r3, r2
 8004876:	608b      	str	r3, [r1, #8]
 8004878:	4620      	mov	r0, r4
 800487a:	f000 ff07 	bl	800568c <_Bfree>
 800487e:	69e3      	ldr	r3, [r4, #28]
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	1e3b      	subs	r3, r7, #0
 8004886:	bfbb      	ittet	lt
 8004888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800488c:	9303      	strlt	r3, [sp, #12]
 800488e:	2300      	movge	r3, #0
 8004890:	2201      	movlt	r2, #1
 8004892:	bfac      	ite	ge
 8004894:	f8c8 3000 	strge.w	r3, [r8]
 8004898:	f8c8 2000 	strlt.w	r2, [r8]
 800489c:	4b9e      	ldr	r3, [pc, #632]	; (8004b18 <_dtoa_r+0x2f0>)
 800489e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80048a2:	ea33 0308 	bics.w	r3, r3, r8
 80048a6:	d11b      	bne.n	80048e0 <_dtoa_r+0xb8>
 80048a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80048b4:	4333      	orrs	r3, r6
 80048b6:	f000 8593 	beq.w	80053e0 <_dtoa_r+0xbb8>
 80048ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048bc:	b963      	cbnz	r3, 80048d8 <_dtoa_r+0xb0>
 80048be:	4b97      	ldr	r3, [pc, #604]	; (8004b1c <_dtoa_r+0x2f4>)
 80048c0:	e027      	b.n	8004912 <_dtoa_r+0xea>
 80048c2:	4b97      	ldr	r3, [pc, #604]	; (8004b20 <_dtoa_r+0x2f8>)
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	9800      	ldr	r0, [sp, #0]
 80048ce:	b013      	add	sp, #76	; 0x4c
 80048d0:	ecbd 8b04 	vpop	{d8-d9}
 80048d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d8:	4b90      	ldr	r3, [pc, #576]	; (8004b1c <_dtoa_r+0x2f4>)
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	3303      	adds	r3, #3
 80048de:	e7f3      	b.n	80048c8 <_dtoa_r+0xa0>
 80048e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048e4:	2200      	movs	r2, #0
 80048e6:	ec51 0b17 	vmov	r0, r1, d7
 80048ea:	eeb0 8a47 	vmov.f32	s16, s14
 80048ee:	eef0 8a67 	vmov.f32	s17, s15
 80048f2:	2300      	movs	r3, #0
 80048f4:	f7fc f8f0 	bl	8000ad8 <__aeabi_dcmpeq>
 80048f8:	4681      	mov	r9, r0
 80048fa:	b160      	cbz	r0, 8004916 <_dtoa_r+0xee>
 80048fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048fe:	2301      	movs	r3, #1
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8568 	beq.w	80053da <_dtoa_r+0xbb2>
 800490a:	4b86      	ldr	r3, [pc, #536]	; (8004b24 <_dtoa_r+0x2fc>)
 800490c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800490e:	6013      	str	r3, [r2, #0]
 8004910:	3b01      	subs	r3, #1
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	e7da      	b.n	80048cc <_dtoa_r+0xa4>
 8004916:	aa10      	add	r2, sp, #64	; 0x40
 8004918:	a911      	add	r1, sp, #68	; 0x44
 800491a:	4620      	mov	r0, r4
 800491c:	eeb0 0a48 	vmov.f32	s0, s16
 8004920:	eef0 0a68 	vmov.f32	s1, s17
 8004924:	f001 fa4e 	bl	8005dc4 <__d2b>
 8004928:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800492c:	4682      	mov	sl, r0
 800492e:	2d00      	cmp	r5, #0
 8004930:	d07f      	beq.n	8004a32 <_dtoa_r+0x20a>
 8004932:	ee18 3a90 	vmov	r3, s17
 8004936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800493a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800493e:	ec51 0b18 	vmov	r0, r1, d8
 8004942:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800494a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800494e:	4619      	mov	r1, r3
 8004950:	2200      	movs	r2, #0
 8004952:	4b75      	ldr	r3, [pc, #468]	; (8004b28 <_dtoa_r+0x300>)
 8004954:	f7fb fca0 	bl	8000298 <__aeabi_dsub>
 8004958:	a367      	add	r3, pc, #412	; (adr r3, 8004af8 <_dtoa_r+0x2d0>)
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f7fb fe53 	bl	8000608 <__aeabi_dmul>
 8004962:	a367      	add	r3, pc, #412	; (adr r3, 8004b00 <_dtoa_r+0x2d8>)
 8004964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004968:	f7fb fc98 	bl	800029c <__adddf3>
 800496c:	4606      	mov	r6, r0
 800496e:	4628      	mov	r0, r5
 8004970:	460f      	mov	r7, r1
 8004972:	f7fb fddf 	bl	8000534 <__aeabi_i2d>
 8004976:	a364      	add	r3, pc, #400	; (adr r3, 8004b08 <_dtoa_r+0x2e0>)
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	f7fb fe44 	bl	8000608 <__aeabi_dmul>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fb fc88 	bl	800029c <__adddf3>
 800498c:	4606      	mov	r6, r0
 800498e:	460f      	mov	r7, r1
 8004990:	f7fc f8ea 	bl	8000b68 <__aeabi_d2iz>
 8004994:	2200      	movs	r2, #0
 8004996:	4683      	mov	fp, r0
 8004998:	2300      	movs	r3, #0
 800499a:	4630      	mov	r0, r6
 800499c:	4639      	mov	r1, r7
 800499e:	f7fc f8a5 	bl	8000aec <__aeabi_dcmplt>
 80049a2:	b148      	cbz	r0, 80049b8 <_dtoa_r+0x190>
 80049a4:	4658      	mov	r0, fp
 80049a6:	f7fb fdc5 	bl	8000534 <__aeabi_i2d>
 80049aa:	4632      	mov	r2, r6
 80049ac:	463b      	mov	r3, r7
 80049ae:	f7fc f893 	bl	8000ad8 <__aeabi_dcmpeq>
 80049b2:	b908      	cbnz	r0, 80049b8 <_dtoa_r+0x190>
 80049b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049b8:	f1bb 0f16 	cmp.w	fp, #22
 80049bc:	d857      	bhi.n	8004a6e <_dtoa_r+0x246>
 80049be:	4b5b      	ldr	r3, [pc, #364]	; (8004b2c <_dtoa_r+0x304>)
 80049c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	ec51 0b18 	vmov	r0, r1, d8
 80049cc:	f7fc f88e 	bl	8000aec <__aeabi_dcmplt>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d04e      	beq.n	8004a72 <_dtoa_r+0x24a>
 80049d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049d8:	2300      	movs	r3, #0
 80049da:	930c      	str	r3, [sp, #48]	; 0x30
 80049dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80049de:	1b5b      	subs	r3, r3, r5
 80049e0:	1e5a      	subs	r2, r3, #1
 80049e2:	bf45      	ittet	mi
 80049e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80049e8:	9305      	strmi	r3, [sp, #20]
 80049ea:	2300      	movpl	r3, #0
 80049ec:	2300      	movmi	r3, #0
 80049ee:	9206      	str	r2, [sp, #24]
 80049f0:	bf54      	ite	pl
 80049f2:	9305      	strpl	r3, [sp, #20]
 80049f4:	9306      	strmi	r3, [sp, #24]
 80049f6:	f1bb 0f00 	cmp.w	fp, #0
 80049fa:	db3c      	blt.n	8004a76 <_dtoa_r+0x24e>
 80049fc:	9b06      	ldr	r3, [sp, #24]
 80049fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004a02:	445b      	add	r3, fp
 8004a04:	9306      	str	r3, [sp, #24]
 8004a06:	2300      	movs	r3, #0
 8004a08:	9308      	str	r3, [sp, #32]
 8004a0a:	9b07      	ldr	r3, [sp, #28]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d868      	bhi.n	8004ae2 <_dtoa_r+0x2ba>
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	bfc4      	itt	gt
 8004a14:	3b04      	subgt	r3, #4
 8004a16:	9307      	strgt	r3, [sp, #28]
 8004a18:	9b07      	ldr	r3, [sp, #28]
 8004a1a:	f1a3 0302 	sub.w	r3, r3, #2
 8004a1e:	bfcc      	ite	gt
 8004a20:	2500      	movgt	r5, #0
 8004a22:	2501      	movle	r5, #1
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	f200 8085 	bhi.w	8004b34 <_dtoa_r+0x30c>
 8004a2a:	e8df f003 	tbb	[pc, r3]
 8004a2e:	3b2e      	.short	0x3b2e
 8004a30:	5839      	.short	0x5839
 8004a32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004a36:	441d      	add	r5, r3
 8004a38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	bfc1      	itttt	gt
 8004a40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004a44:	fa08 f803 	lslgt.w	r8, r8, r3
 8004a48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004a4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004a50:	bfd6      	itet	le
 8004a52:	f1c3 0320 	rsble	r3, r3, #32
 8004a56:	ea48 0003 	orrgt.w	r0, r8, r3
 8004a5a:	fa06 f003 	lslle.w	r0, r6, r3
 8004a5e:	f7fb fd59 	bl	8000514 <__aeabi_ui2d>
 8004a62:	2201      	movs	r2, #1
 8004a64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004a68:	3d01      	subs	r5, #1
 8004a6a:	920e      	str	r2, [sp, #56]	; 0x38
 8004a6c:	e76f      	b.n	800494e <_dtoa_r+0x126>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e7b3      	b.n	80049da <_dtoa_r+0x1b2>
 8004a72:	900c      	str	r0, [sp, #48]	; 0x30
 8004a74:	e7b2      	b.n	80049dc <_dtoa_r+0x1b4>
 8004a76:	9b05      	ldr	r3, [sp, #20]
 8004a78:	eba3 030b 	sub.w	r3, r3, fp
 8004a7c:	9305      	str	r3, [sp, #20]
 8004a7e:	f1cb 0300 	rsb	r3, fp, #0
 8004a82:	9308      	str	r3, [sp, #32]
 8004a84:	2300      	movs	r3, #0
 8004a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a88:	e7bf      	b.n	8004a0a <_dtoa_r+0x1e2>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dc52      	bgt.n	8004b3a <_dtoa_r+0x312>
 8004a94:	2301      	movs	r3, #1
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	9304      	str	r3, [sp, #16]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	920a      	str	r2, [sp, #40]	; 0x28
 8004a9e:	e00b      	b.n	8004ab8 <_dtoa_r+0x290>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e7f3      	b.n	8004a8c <_dtoa_r+0x264>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aaa:	445b      	add	r3, fp
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	bfb8      	it	lt
 8004ab6:	2301      	movlt	r3, #1
 8004ab8:	69e0      	ldr	r0, [r4, #28]
 8004aba:	2100      	movs	r1, #0
 8004abc:	2204      	movs	r2, #4
 8004abe:	f102 0614 	add.w	r6, r2, #20
 8004ac2:	429e      	cmp	r6, r3
 8004ac4:	d93d      	bls.n	8004b42 <_dtoa_r+0x31a>
 8004ac6:	6041      	str	r1, [r0, #4]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fd9f 	bl	800560c <_Balloc>
 8004ace:	9000      	str	r0, [sp, #0]
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d139      	bne.n	8004b48 <_dtoa_r+0x320>
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <_dtoa_r+0x308>)
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	f240 11af 	movw	r1, #431	; 0x1af
 8004adc:	e6bd      	b.n	800485a <_dtoa_r+0x32>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7e1      	b.n	8004aa6 <_dtoa_r+0x27e>
 8004ae2:	2501      	movs	r5, #1
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	9307      	str	r3, [sp, #28]
 8004ae8:	9509      	str	r5, [sp, #36]	; 0x24
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	9304      	str	r3, [sp, #16]
 8004af2:	2200      	movs	r2, #0
 8004af4:	2312      	movs	r3, #18
 8004af6:	e7d1      	b.n	8004a9c <_dtoa_r+0x274>
 8004af8:	636f4361 	.word	0x636f4361
 8004afc:	3fd287a7 	.word	0x3fd287a7
 8004b00:	8b60c8b3 	.word	0x8b60c8b3
 8004b04:	3fc68a28 	.word	0x3fc68a28
 8004b08:	509f79fb 	.word	0x509f79fb
 8004b0c:	3fd34413 	.word	0x3fd34413
 8004b10:	08007f1a 	.word	0x08007f1a
 8004b14:	08007f31 	.word	0x08007f31
 8004b18:	7ff00000 	.word	0x7ff00000
 8004b1c:	08007f16 	.word	0x08007f16
 8004b20:	08007f0d 	.word	0x08007f0d
 8004b24:	08007ee5 	.word	0x08007ee5
 8004b28:	3ff80000 	.word	0x3ff80000
 8004b2c:	08008020 	.word	0x08008020
 8004b30:	08007f89 	.word	0x08007f89
 8004b34:	2301      	movs	r3, #1
 8004b36:	9309      	str	r3, [sp, #36]	; 0x24
 8004b38:	e7d7      	b.n	8004aea <_dtoa_r+0x2c2>
 8004b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b3c:	9301      	str	r3, [sp, #4]
 8004b3e:	9304      	str	r3, [sp, #16]
 8004b40:	e7ba      	b.n	8004ab8 <_dtoa_r+0x290>
 8004b42:	3101      	adds	r1, #1
 8004b44:	0052      	lsls	r2, r2, #1
 8004b46:	e7ba      	b.n	8004abe <_dtoa_r+0x296>
 8004b48:	69e3      	ldr	r3, [r4, #28]
 8004b4a:	9a00      	ldr	r2, [sp, #0]
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	9b04      	ldr	r3, [sp, #16]
 8004b50:	2b0e      	cmp	r3, #14
 8004b52:	f200 80a8 	bhi.w	8004ca6 <_dtoa_r+0x47e>
 8004b56:	2d00      	cmp	r5, #0
 8004b58:	f000 80a5 	beq.w	8004ca6 <_dtoa_r+0x47e>
 8004b5c:	f1bb 0f00 	cmp.w	fp, #0
 8004b60:	dd38      	ble.n	8004bd4 <_dtoa_r+0x3ac>
 8004b62:	4bc0      	ldr	r3, [pc, #768]	; (8004e64 <_dtoa_r+0x63c>)
 8004b64:	f00b 020f 	and.w	r2, fp, #15
 8004b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004b70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004b74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004b78:	d019      	beq.n	8004bae <_dtoa_r+0x386>
 8004b7a:	4bbb      	ldr	r3, [pc, #748]	; (8004e68 <_dtoa_r+0x640>)
 8004b7c:	ec51 0b18 	vmov	r0, r1, d8
 8004b80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b84:	f7fb fe6a 	bl	800085c <__aeabi_ddiv>
 8004b88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b8c:	f008 080f 	and.w	r8, r8, #15
 8004b90:	2503      	movs	r5, #3
 8004b92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004e68 <_dtoa_r+0x640>
 8004b96:	f1b8 0f00 	cmp.w	r8, #0
 8004b9a:	d10a      	bne.n	8004bb2 <_dtoa_r+0x38a>
 8004b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ba0:	4632      	mov	r2, r6
 8004ba2:	463b      	mov	r3, r7
 8004ba4:	f7fb fe5a 	bl	800085c <__aeabi_ddiv>
 8004ba8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bac:	e02b      	b.n	8004c06 <_dtoa_r+0x3de>
 8004bae:	2502      	movs	r5, #2
 8004bb0:	e7ef      	b.n	8004b92 <_dtoa_r+0x36a>
 8004bb2:	f018 0f01 	tst.w	r8, #1
 8004bb6:	d008      	beq.n	8004bca <_dtoa_r+0x3a2>
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004bc0:	f7fb fd22 	bl	8000608 <__aeabi_dmul>
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	460f      	mov	r7, r1
 8004bca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bce:	f109 0908 	add.w	r9, r9, #8
 8004bd2:	e7e0      	b.n	8004b96 <_dtoa_r+0x36e>
 8004bd4:	f000 809f 	beq.w	8004d16 <_dtoa_r+0x4ee>
 8004bd8:	f1cb 0600 	rsb	r6, fp, #0
 8004bdc:	4ba1      	ldr	r3, [pc, #644]	; (8004e64 <_dtoa_r+0x63c>)
 8004bde:	4fa2      	ldr	r7, [pc, #648]	; (8004e68 <_dtoa_r+0x640>)
 8004be0:	f006 020f 	and.w	r2, r6, #15
 8004be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bec:	ec51 0b18 	vmov	r0, r1, d8
 8004bf0:	f7fb fd0a 	bl	8000608 <__aeabi_dmul>
 8004bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf8:	1136      	asrs	r6, r6, #4
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	2502      	movs	r5, #2
 8004bfe:	2e00      	cmp	r6, #0
 8004c00:	d17e      	bne.n	8004d00 <_dtoa_r+0x4d8>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1d0      	bne.n	8004ba8 <_dtoa_r+0x380>
 8004c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8084 	beq.w	8004d1a <_dtoa_r+0x4f2>
 8004c12:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <_dtoa_r+0x644>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	4640      	mov	r0, r8
 8004c18:	4649      	mov	r1, r9
 8004c1a:	f7fb ff67 	bl	8000aec <__aeabi_dcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d07b      	beq.n	8004d1a <_dtoa_r+0x4f2>
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d078      	beq.n	8004d1a <_dtoa_r+0x4f2>
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dd39      	ble.n	8004ca2 <_dtoa_r+0x47a>
 8004c2e:	4b90      	ldr	r3, [pc, #576]	; (8004e70 <_dtoa_r+0x648>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f7fb fce7 	bl	8000608 <__aeabi_dmul>
 8004c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c3e:	9e01      	ldr	r6, [sp, #4]
 8004c40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004c44:	3501      	adds	r5, #1
 8004c46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f7fb fc72 	bl	8000534 <__aeabi_i2d>
 8004c50:	4642      	mov	r2, r8
 8004c52:	464b      	mov	r3, r9
 8004c54:	f7fb fcd8 	bl	8000608 <__aeabi_dmul>
 8004c58:	4b86      	ldr	r3, [pc, #536]	; (8004e74 <_dtoa_r+0x64c>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f7fb fb1e 	bl	800029c <__adddf3>
 8004c60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c68:	9303      	str	r3, [sp, #12]
 8004c6a:	2e00      	cmp	r6, #0
 8004c6c:	d158      	bne.n	8004d20 <_dtoa_r+0x4f8>
 8004c6e:	4b82      	ldr	r3, [pc, #520]	; (8004e78 <_dtoa_r+0x650>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	4640      	mov	r0, r8
 8004c74:	4649      	mov	r1, r9
 8004c76:	f7fb fb0f 	bl	8000298 <__aeabi_dsub>
 8004c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c7e:	4680      	mov	r8, r0
 8004c80:	4689      	mov	r9, r1
 8004c82:	f7fb ff51 	bl	8000b28 <__aeabi_dcmpgt>
 8004c86:	2800      	cmp	r0, #0
 8004c88:	f040 8296 	bne.w	80051b8 <_dtoa_r+0x990>
 8004c8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004c90:	4640      	mov	r0, r8
 8004c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c96:	4649      	mov	r1, r9
 8004c98:	f7fb ff28 	bl	8000aec <__aeabi_dcmplt>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	f040 8289 	bne.w	80051b4 <_dtoa_r+0x98c>
 8004ca2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f2c0 814e 	blt.w	8004f4a <_dtoa_r+0x722>
 8004cae:	f1bb 0f0e 	cmp.w	fp, #14
 8004cb2:	f300 814a 	bgt.w	8004f4a <_dtoa_r+0x722>
 8004cb6:	4b6b      	ldr	r3, [pc, #428]	; (8004e64 <_dtoa_r+0x63c>)
 8004cb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f280 80dc 	bge.w	8004e80 <_dtoa_r+0x658>
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f300 80d8 	bgt.w	8004e80 <_dtoa_r+0x658>
 8004cd0:	f040 826f 	bne.w	80051b2 <_dtoa_r+0x98a>
 8004cd4:	4b68      	ldr	r3, [pc, #416]	; (8004e78 <_dtoa_r+0x650>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4640      	mov	r0, r8
 8004cda:	4649      	mov	r1, r9
 8004cdc:	f7fb fc94 	bl	8000608 <__aeabi_dmul>
 8004ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ce4:	f7fb ff16 	bl	8000b14 <__aeabi_dcmpge>
 8004ce8:	9e04      	ldr	r6, [sp, #16]
 8004cea:	4637      	mov	r7, r6
 8004cec:	2800      	cmp	r0, #0
 8004cee:	f040 8245 	bne.w	800517c <_dtoa_r+0x954>
 8004cf2:	9d00      	ldr	r5, [sp, #0]
 8004cf4:	2331      	movs	r3, #49	; 0x31
 8004cf6:	f805 3b01 	strb.w	r3, [r5], #1
 8004cfa:	f10b 0b01 	add.w	fp, fp, #1
 8004cfe:	e241      	b.n	8005184 <_dtoa_r+0x95c>
 8004d00:	07f2      	lsls	r2, r6, #31
 8004d02:	d505      	bpl.n	8004d10 <_dtoa_r+0x4e8>
 8004d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d08:	f7fb fc7e 	bl	8000608 <__aeabi_dmul>
 8004d0c:	3501      	adds	r5, #1
 8004d0e:	2301      	movs	r3, #1
 8004d10:	1076      	asrs	r6, r6, #1
 8004d12:	3708      	adds	r7, #8
 8004d14:	e773      	b.n	8004bfe <_dtoa_r+0x3d6>
 8004d16:	2502      	movs	r5, #2
 8004d18:	e775      	b.n	8004c06 <_dtoa_r+0x3de>
 8004d1a:	9e04      	ldr	r6, [sp, #16]
 8004d1c:	465f      	mov	r7, fp
 8004d1e:	e792      	b.n	8004c46 <_dtoa_r+0x41e>
 8004d20:	9900      	ldr	r1, [sp, #0]
 8004d22:	4b50      	ldr	r3, [pc, #320]	; (8004e64 <_dtoa_r+0x63c>)
 8004d24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d28:	4431      	add	r1, r6
 8004d2a:	9102      	str	r1, [sp, #8]
 8004d2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d2e:	eeb0 9a47 	vmov.f32	s18, s14
 8004d32:	eef0 9a67 	vmov.f32	s19, s15
 8004d36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004d3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004d3e:	2900      	cmp	r1, #0
 8004d40:	d044      	beq.n	8004dcc <_dtoa_r+0x5a4>
 8004d42:	494e      	ldr	r1, [pc, #312]	; (8004e7c <_dtoa_r+0x654>)
 8004d44:	2000      	movs	r0, #0
 8004d46:	f7fb fd89 	bl	800085c <__aeabi_ddiv>
 8004d4a:	ec53 2b19 	vmov	r2, r3, d9
 8004d4e:	f7fb faa3 	bl	8000298 <__aeabi_dsub>
 8004d52:	9d00      	ldr	r5, [sp, #0]
 8004d54:	ec41 0b19 	vmov	d9, r0, r1
 8004d58:	4649      	mov	r1, r9
 8004d5a:	4640      	mov	r0, r8
 8004d5c:	f7fb ff04 	bl	8000b68 <__aeabi_d2iz>
 8004d60:	4606      	mov	r6, r0
 8004d62:	f7fb fbe7 	bl	8000534 <__aeabi_i2d>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4640      	mov	r0, r8
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	f7fb fa93 	bl	8000298 <__aeabi_dsub>
 8004d72:	3630      	adds	r6, #48	; 0x30
 8004d74:	f805 6b01 	strb.w	r6, [r5], #1
 8004d78:	ec53 2b19 	vmov	r2, r3, d9
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	4689      	mov	r9, r1
 8004d80:	f7fb feb4 	bl	8000aec <__aeabi_dcmplt>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d164      	bne.n	8004e52 <_dtoa_r+0x62a>
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	4937      	ldr	r1, [pc, #220]	; (8004e6c <_dtoa_r+0x644>)
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fb fa82 	bl	8000298 <__aeabi_dsub>
 8004d94:	ec53 2b19 	vmov	r2, r3, d9
 8004d98:	f7fb fea8 	bl	8000aec <__aeabi_dcmplt>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	f040 80b6 	bne.w	8004f0e <_dtoa_r+0x6e6>
 8004da2:	9b02      	ldr	r3, [sp, #8]
 8004da4:	429d      	cmp	r5, r3
 8004da6:	f43f af7c 	beq.w	8004ca2 <_dtoa_r+0x47a>
 8004daa:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <_dtoa_r+0x648>)
 8004dac:	ec51 0b19 	vmov	r0, r1, d9
 8004db0:	2200      	movs	r2, #0
 8004db2:	f7fb fc29 	bl	8000608 <__aeabi_dmul>
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <_dtoa_r+0x648>)
 8004db8:	ec41 0b19 	vmov	d9, r0, r1
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4649      	mov	r1, r9
 8004dc2:	f7fb fc21 	bl	8000608 <__aeabi_dmul>
 8004dc6:	4680      	mov	r8, r0
 8004dc8:	4689      	mov	r9, r1
 8004dca:	e7c5      	b.n	8004d58 <_dtoa_r+0x530>
 8004dcc:	ec51 0b17 	vmov	r0, r1, d7
 8004dd0:	f7fb fc1a 	bl	8000608 <__aeabi_dmul>
 8004dd4:	9b02      	ldr	r3, [sp, #8]
 8004dd6:	9d00      	ldr	r5, [sp, #0]
 8004dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dda:	ec41 0b19 	vmov	d9, r0, r1
 8004dde:	4649      	mov	r1, r9
 8004de0:	4640      	mov	r0, r8
 8004de2:	f7fb fec1 	bl	8000b68 <__aeabi_d2iz>
 8004de6:	4606      	mov	r6, r0
 8004de8:	f7fb fba4 	bl	8000534 <__aeabi_i2d>
 8004dec:	3630      	adds	r6, #48	; 0x30
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4640      	mov	r0, r8
 8004df4:	4649      	mov	r1, r9
 8004df6:	f7fb fa4f 	bl	8000298 <__aeabi_dsub>
 8004dfa:	f805 6b01 	strb.w	r6, [r5], #1
 8004dfe:	9b02      	ldr	r3, [sp, #8]
 8004e00:	429d      	cmp	r5, r3
 8004e02:	4680      	mov	r8, r0
 8004e04:	4689      	mov	r9, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	d124      	bne.n	8004e56 <_dtoa_r+0x62e>
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <_dtoa_r+0x654>)
 8004e0e:	ec51 0b19 	vmov	r0, r1, d9
 8004e12:	f7fb fa43 	bl	800029c <__adddf3>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	4649      	mov	r1, r9
 8004e1e:	f7fb fe83 	bl	8000b28 <__aeabi_dcmpgt>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d173      	bne.n	8004f0e <_dtoa_r+0x6e6>
 8004e26:	ec53 2b19 	vmov	r2, r3, d9
 8004e2a:	4914      	ldr	r1, [pc, #80]	; (8004e7c <_dtoa_r+0x654>)
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fb fa33 	bl	8000298 <__aeabi_dsub>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb fe57 	bl	8000aec <__aeabi_dcmplt>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f43f af2f 	beq.w	8004ca2 <_dtoa_r+0x47a>
 8004e44:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004e46:	1e6b      	subs	r3, r5, #1
 8004e48:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d0f8      	beq.n	8004e44 <_dtoa_r+0x61c>
 8004e52:	46bb      	mov	fp, r7
 8004e54:	e04a      	b.n	8004eec <_dtoa_r+0x6c4>
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <_dtoa_r+0x648>)
 8004e58:	f7fb fbd6 	bl	8000608 <__aeabi_dmul>
 8004e5c:	4680      	mov	r8, r0
 8004e5e:	4689      	mov	r9, r1
 8004e60:	e7bd      	b.n	8004dde <_dtoa_r+0x5b6>
 8004e62:	bf00      	nop
 8004e64:	08008020 	.word	0x08008020
 8004e68:	08007ff8 	.word	0x08007ff8
 8004e6c:	3ff00000 	.word	0x3ff00000
 8004e70:	40240000 	.word	0x40240000
 8004e74:	401c0000 	.word	0x401c0000
 8004e78:	40140000 	.word	0x40140000
 8004e7c:	3fe00000 	.word	0x3fe00000
 8004e80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e84:	9d00      	ldr	r5, [sp, #0]
 8004e86:	4642      	mov	r2, r8
 8004e88:	464b      	mov	r3, r9
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	f7fb fce5 	bl	800085c <__aeabi_ddiv>
 8004e92:	f7fb fe69 	bl	8000b68 <__aeabi_d2iz>
 8004e96:	9001      	str	r0, [sp, #4]
 8004e98:	f7fb fb4c 	bl	8000534 <__aeabi_i2d>
 8004e9c:	4642      	mov	r2, r8
 8004e9e:	464b      	mov	r3, r9
 8004ea0:	f7fb fbb2 	bl	8000608 <__aeabi_dmul>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	4639      	mov	r1, r7
 8004eac:	f7fb f9f4 	bl	8000298 <__aeabi_dsub>
 8004eb0:	9e01      	ldr	r6, [sp, #4]
 8004eb2:	9f04      	ldr	r7, [sp, #16]
 8004eb4:	3630      	adds	r6, #48	; 0x30
 8004eb6:	f805 6b01 	strb.w	r6, [r5], #1
 8004eba:	9e00      	ldr	r6, [sp, #0]
 8004ebc:	1bae      	subs	r6, r5, r6
 8004ebe:	42b7      	cmp	r7, r6
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	d134      	bne.n	8004f30 <_dtoa_r+0x708>
 8004ec6:	f7fb f9e9 	bl	800029c <__adddf3>
 8004eca:	4642      	mov	r2, r8
 8004ecc:	464b      	mov	r3, r9
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	f7fb fe29 	bl	8000b28 <__aeabi_dcmpgt>
 8004ed6:	b9c8      	cbnz	r0, 8004f0c <_dtoa_r+0x6e4>
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	4630      	mov	r0, r6
 8004ede:	4639      	mov	r1, r7
 8004ee0:	f7fb fdfa 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ee4:	b110      	cbz	r0, 8004eec <_dtoa_r+0x6c4>
 8004ee6:	9b01      	ldr	r3, [sp, #4]
 8004ee8:	07db      	lsls	r3, r3, #31
 8004eea:	d40f      	bmi.n	8004f0c <_dtoa_r+0x6e4>
 8004eec:	4651      	mov	r1, sl
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 fbcc 	bl	800568c <_Bfree>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ef8:	702b      	strb	r3, [r5, #0]
 8004efa:	f10b 0301 	add.w	r3, fp, #1
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f43f ace2 	beq.w	80048cc <_dtoa_r+0xa4>
 8004f08:	601d      	str	r5, [r3, #0]
 8004f0a:	e4df      	b.n	80048cc <_dtoa_r+0xa4>
 8004f0c:	465f      	mov	r7, fp
 8004f0e:	462b      	mov	r3, r5
 8004f10:	461d      	mov	r5, r3
 8004f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f16:	2a39      	cmp	r2, #57	; 0x39
 8004f18:	d106      	bne.n	8004f28 <_dtoa_r+0x700>
 8004f1a:	9a00      	ldr	r2, [sp, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d1f7      	bne.n	8004f10 <_dtoa_r+0x6e8>
 8004f20:	9900      	ldr	r1, [sp, #0]
 8004f22:	2230      	movs	r2, #48	; 0x30
 8004f24:	3701      	adds	r7, #1
 8004f26:	700a      	strb	r2, [r1, #0]
 8004f28:	781a      	ldrb	r2, [r3, #0]
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e790      	b.n	8004e52 <_dtoa_r+0x62a>
 8004f30:	4ba3      	ldr	r3, [pc, #652]	; (80051c0 <_dtoa_r+0x998>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	f7fb fb68 	bl	8000608 <__aeabi_dmul>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	f7fb fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d09e      	beq.n	8004e86 <_dtoa_r+0x65e>
 8004f48:	e7d0      	b.n	8004eec <_dtoa_r+0x6c4>
 8004f4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	f000 80ca 	beq.w	80050e6 <_dtoa_r+0x8be>
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	2a01      	cmp	r2, #1
 8004f56:	f300 80ad 	bgt.w	80050b4 <_dtoa_r+0x88c>
 8004f5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	f000 80a5 	beq.w	80050ac <_dtoa_r+0x884>
 8004f62:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f66:	9e08      	ldr	r6, [sp, #32]
 8004f68:	9d05      	ldr	r5, [sp, #20]
 8004f6a:	9a05      	ldr	r2, [sp, #20]
 8004f6c:	441a      	add	r2, r3
 8004f6e:	9205      	str	r2, [sp, #20]
 8004f70:	9a06      	ldr	r2, [sp, #24]
 8004f72:	2101      	movs	r1, #1
 8004f74:	441a      	add	r2, r3
 8004f76:	4620      	mov	r0, r4
 8004f78:	9206      	str	r2, [sp, #24]
 8004f7a:	f000 fc87 	bl	800588c <__i2b>
 8004f7e:	4607      	mov	r7, r0
 8004f80:	b165      	cbz	r5, 8004f9c <_dtoa_r+0x774>
 8004f82:	9b06      	ldr	r3, [sp, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dd09      	ble.n	8004f9c <_dtoa_r+0x774>
 8004f88:	42ab      	cmp	r3, r5
 8004f8a:	9a05      	ldr	r2, [sp, #20]
 8004f8c:	bfa8      	it	ge
 8004f8e:	462b      	movge	r3, r5
 8004f90:	1ad2      	subs	r2, r2, r3
 8004f92:	9205      	str	r2, [sp, #20]
 8004f94:	9a06      	ldr	r2, [sp, #24]
 8004f96:	1aed      	subs	r5, r5, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	9306      	str	r3, [sp, #24]
 8004f9c:	9b08      	ldr	r3, [sp, #32]
 8004f9e:	b1f3      	cbz	r3, 8004fde <_dtoa_r+0x7b6>
 8004fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a3 	beq.w	80050ee <_dtoa_r+0x8c6>
 8004fa8:	2e00      	cmp	r6, #0
 8004faa:	dd10      	ble.n	8004fce <_dtoa_r+0x7a6>
 8004fac:	4639      	mov	r1, r7
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 fd2b 	bl	8005a0c <__pow5mult>
 8004fb6:	4652      	mov	r2, sl
 8004fb8:	4601      	mov	r1, r0
 8004fba:	4607      	mov	r7, r0
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f000 fc7b 	bl	80058b8 <__multiply>
 8004fc2:	4651      	mov	r1, sl
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f000 fb60 	bl	800568c <_Bfree>
 8004fcc:	46c2      	mov	sl, r8
 8004fce:	9b08      	ldr	r3, [sp, #32]
 8004fd0:	1b9a      	subs	r2, r3, r6
 8004fd2:	d004      	beq.n	8004fde <_dtoa_r+0x7b6>
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f000 fd18 	bl	8005a0c <__pow5mult>
 8004fdc:	4682      	mov	sl, r0
 8004fde:	2101      	movs	r1, #1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fc53 	bl	800588c <__i2b>
 8004fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	4606      	mov	r6, r0
 8004fec:	f340 8081 	ble.w	80050f2 <_dtoa_r+0x8ca>
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4601      	mov	r1, r0
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 fd09 	bl	8005a0c <__pow5mult>
 8004ffa:	9b07      	ldr	r3, [sp, #28]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	4606      	mov	r6, r0
 8005000:	dd7a      	ble.n	80050f8 <_dtoa_r+0x8d0>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	6933      	ldr	r3, [r6, #16]
 8005008:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800500c:	6918      	ldr	r0, [r3, #16]
 800500e:	f000 fbef 	bl	80057f0 <__hi0bits>
 8005012:	f1c0 0020 	rsb	r0, r0, #32
 8005016:	9b06      	ldr	r3, [sp, #24]
 8005018:	4418      	add	r0, r3
 800501a:	f010 001f 	ands.w	r0, r0, #31
 800501e:	f000 8094 	beq.w	800514a <_dtoa_r+0x922>
 8005022:	f1c0 0320 	rsb	r3, r0, #32
 8005026:	2b04      	cmp	r3, #4
 8005028:	f340 8085 	ble.w	8005136 <_dtoa_r+0x90e>
 800502c:	9b05      	ldr	r3, [sp, #20]
 800502e:	f1c0 001c 	rsb	r0, r0, #28
 8005032:	4403      	add	r3, r0
 8005034:	9305      	str	r3, [sp, #20]
 8005036:	9b06      	ldr	r3, [sp, #24]
 8005038:	4403      	add	r3, r0
 800503a:	4405      	add	r5, r0
 800503c:	9306      	str	r3, [sp, #24]
 800503e:	9b05      	ldr	r3, [sp, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	dd05      	ble.n	8005050 <_dtoa_r+0x828>
 8005044:	4651      	mov	r1, sl
 8005046:	461a      	mov	r2, r3
 8005048:	4620      	mov	r0, r4
 800504a:	f000 fd39 	bl	8005ac0 <__lshift>
 800504e:	4682      	mov	sl, r0
 8005050:	9b06      	ldr	r3, [sp, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	dd05      	ble.n	8005062 <_dtoa_r+0x83a>
 8005056:	4631      	mov	r1, r6
 8005058:	461a      	mov	r2, r3
 800505a:	4620      	mov	r0, r4
 800505c:	f000 fd30 	bl	8005ac0 <__lshift>
 8005060:	4606      	mov	r6, r0
 8005062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005064:	2b00      	cmp	r3, #0
 8005066:	d072      	beq.n	800514e <_dtoa_r+0x926>
 8005068:	4631      	mov	r1, r6
 800506a:	4650      	mov	r0, sl
 800506c:	f000 fd94 	bl	8005b98 <__mcmp>
 8005070:	2800      	cmp	r0, #0
 8005072:	da6c      	bge.n	800514e <_dtoa_r+0x926>
 8005074:	2300      	movs	r3, #0
 8005076:	4651      	mov	r1, sl
 8005078:	220a      	movs	r2, #10
 800507a:	4620      	mov	r0, r4
 800507c:	f000 fb28 	bl	80056d0 <__multadd>
 8005080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005086:	4682      	mov	sl, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 81b0 	beq.w	80053ee <_dtoa_r+0xbc6>
 800508e:	2300      	movs	r3, #0
 8005090:	4639      	mov	r1, r7
 8005092:	220a      	movs	r2, #10
 8005094:	4620      	mov	r0, r4
 8005096:	f000 fb1b 	bl	80056d0 <__multadd>
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	4607      	mov	r7, r0
 80050a0:	f300 8096 	bgt.w	80051d0 <_dtoa_r+0x9a8>
 80050a4:	9b07      	ldr	r3, [sp, #28]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	dc59      	bgt.n	800515e <_dtoa_r+0x936>
 80050aa:	e091      	b.n	80051d0 <_dtoa_r+0x9a8>
 80050ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050b2:	e758      	b.n	8004f66 <_dtoa_r+0x73e>
 80050b4:	9b04      	ldr	r3, [sp, #16]
 80050b6:	1e5e      	subs	r6, r3, #1
 80050b8:	9b08      	ldr	r3, [sp, #32]
 80050ba:	42b3      	cmp	r3, r6
 80050bc:	bfbf      	itttt	lt
 80050be:	9b08      	ldrlt	r3, [sp, #32]
 80050c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80050c2:	9608      	strlt	r6, [sp, #32]
 80050c4:	1af3      	sublt	r3, r6, r3
 80050c6:	bfb4      	ite	lt
 80050c8:	18d2      	addlt	r2, r2, r3
 80050ca:	1b9e      	subge	r6, r3, r6
 80050cc:	9b04      	ldr	r3, [sp, #16]
 80050ce:	bfbc      	itt	lt
 80050d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80050d2:	2600      	movlt	r6, #0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfb7      	itett	lt
 80050d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80050dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80050e0:	1a9d      	sublt	r5, r3, r2
 80050e2:	2300      	movlt	r3, #0
 80050e4:	e741      	b.n	8004f6a <_dtoa_r+0x742>
 80050e6:	9e08      	ldr	r6, [sp, #32]
 80050e8:	9d05      	ldr	r5, [sp, #20]
 80050ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80050ec:	e748      	b.n	8004f80 <_dtoa_r+0x758>
 80050ee:	9a08      	ldr	r2, [sp, #32]
 80050f0:	e770      	b.n	8004fd4 <_dtoa_r+0x7ac>
 80050f2:	9b07      	ldr	r3, [sp, #28]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	dc19      	bgt.n	800512c <_dtoa_r+0x904>
 80050f8:	9b02      	ldr	r3, [sp, #8]
 80050fa:	b9bb      	cbnz	r3, 800512c <_dtoa_r+0x904>
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005102:	b99b      	cbnz	r3, 800512c <_dtoa_r+0x904>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800510a:	0d1b      	lsrs	r3, r3, #20
 800510c:	051b      	lsls	r3, r3, #20
 800510e:	b183      	cbz	r3, 8005132 <_dtoa_r+0x90a>
 8005110:	9b05      	ldr	r3, [sp, #20]
 8005112:	3301      	adds	r3, #1
 8005114:	9305      	str	r3, [sp, #20]
 8005116:	9b06      	ldr	r3, [sp, #24]
 8005118:	3301      	adds	r3, #1
 800511a:	9306      	str	r3, [sp, #24]
 800511c:	f04f 0801 	mov.w	r8, #1
 8005120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005122:	2b00      	cmp	r3, #0
 8005124:	f47f af6f 	bne.w	8005006 <_dtoa_r+0x7de>
 8005128:	2001      	movs	r0, #1
 800512a:	e774      	b.n	8005016 <_dtoa_r+0x7ee>
 800512c:	f04f 0800 	mov.w	r8, #0
 8005130:	e7f6      	b.n	8005120 <_dtoa_r+0x8f8>
 8005132:	4698      	mov	r8, r3
 8005134:	e7f4      	b.n	8005120 <_dtoa_r+0x8f8>
 8005136:	d082      	beq.n	800503e <_dtoa_r+0x816>
 8005138:	9a05      	ldr	r2, [sp, #20]
 800513a:	331c      	adds	r3, #28
 800513c:	441a      	add	r2, r3
 800513e:	9205      	str	r2, [sp, #20]
 8005140:	9a06      	ldr	r2, [sp, #24]
 8005142:	441a      	add	r2, r3
 8005144:	441d      	add	r5, r3
 8005146:	9206      	str	r2, [sp, #24]
 8005148:	e779      	b.n	800503e <_dtoa_r+0x816>
 800514a:	4603      	mov	r3, r0
 800514c:	e7f4      	b.n	8005138 <_dtoa_r+0x910>
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dc37      	bgt.n	80051c4 <_dtoa_r+0x99c>
 8005154:	9b07      	ldr	r3, [sp, #28]
 8005156:	2b02      	cmp	r3, #2
 8005158:	dd34      	ble.n	80051c4 <_dtoa_r+0x99c>
 800515a:	9b04      	ldr	r3, [sp, #16]
 800515c:	9301      	str	r3, [sp, #4]
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	b963      	cbnz	r3, 800517c <_dtoa_r+0x954>
 8005162:	4631      	mov	r1, r6
 8005164:	2205      	movs	r2, #5
 8005166:	4620      	mov	r0, r4
 8005168:	f000 fab2 	bl	80056d0 <__multadd>
 800516c:	4601      	mov	r1, r0
 800516e:	4606      	mov	r6, r0
 8005170:	4650      	mov	r0, sl
 8005172:	f000 fd11 	bl	8005b98 <__mcmp>
 8005176:	2800      	cmp	r0, #0
 8005178:	f73f adbb 	bgt.w	8004cf2 <_dtoa_r+0x4ca>
 800517c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517e:	9d00      	ldr	r5, [sp, #0]
 8005180:	ea6f 0b03 	mvn.w	fp, r3
 8005184:	f04f 0800 	mov.w	r8, #0
 8005188:	4631      	mov	r1, r6
 800518a:	4620      	mov	r0, r4
 800518c:	f000 fa7e 	bl	800568c <_Bfree>
 8005190:	2f00      	cmp	r7, #0
 8005192:	f43f aeab 	beq.w	8004eec <_dtoa_r+0x6c4>
 8005196:	f1b8 0f00 	cmp.w	r8, #0
 800519a:	d005      	beq.n	80051a8 <_dtoa_r+0x980>
 800519c:	45b8      	cmp	r8, r7
 800519e:	d003      	beq.n	80051a8 <_dtoa_r+0x980>
 80051a0:	4641      	mov	r1, r8
 80051a2:	4620      	mov	r0, r4
 80051a4:	f000 fa72 	bl	800568c <_Bfree>
 80051a8:	4639      	mov	r1, r7
 80051aa:	4620      	mov	r0, r4
 80051ac:	f000 fa6e 	bl	800568c <_Bfree>
 80051b0:	e69c      	b.n	8004eec <_dtoa_r+0x6c4>
 80051b2:	2600      	movs	r6, #0
 80051b4:	4637      	mov	r7, r6
 80051b6:	e7e1      	b.n	800517c <_dtoa_r+0x954>
 80051b8:	46bb      	mov	fp, r7
 80051ba:	4637      	mov	r7, r6
 80051bc:	e599      	b.n	8004cf2 <_dtoa_r+0x4ca>
 80051be:	bf00      	nop
 80051c0:	40240000 	.word	0x40240000
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80c8 	beq.w	800535c <_dtoa_r+0xb34>
 80051cc:	9b04      	ldr	r3, [sp, #16]
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	dd05      	ble.n	80051e0 <_dtoa_r+0x9b8>
 80051d4:	4639      	mov	r1, r7
 80051d6:	462a      	mov	r2, r5
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 fc71 	bl	8005ac0 <__lshift>
 80051de:	4607      	mov	r7, r0
 80051e0:	f1b8 0f00 	cmp.w	r8, #0
 80051e4:	d05b      	beq.n	800529e <_dtoa_r+0xa76>
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 fa0f 	bl	800560c <_Balloc>
 80051ee:	4605      	mov	r5, r0
 80051f0:	b928      	cbnz	r0, 80051fe <_dtoa_r+0x9d6>
 80051f2:	4b83      	ldr	r3, [pc, #524]	; (8005400 <_dtoa_r+0xbd8>)
 80051f4:	4602      	mov	r2, r0
 80051f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80051fa:	f7ff bb2e 	b.w	800485a <_dtoa_r+0x32>
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	3202      	adds	r2, #2
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	f107 010c 	add.w	r1, r7, #12
 8005208:	300c      	adds	r0, #12
 800520a:	f002 f95f 	bl	80074cc <memcpy>
 800520e:	2201      	movs	r2, #1
 8005210:	4629      	mov	r1, r5
 8005212:	4620      	mov	r0, r4
 8005214:	f000 fc54 	bl	8005ac0 <__lshift>
 8005218:	9b00      	ldr	r3, [sp, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	9304      	str	r3, [sp, #16]
 800521e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005222:	4413      	add	r3, r2
 8005224:	9308      	str	r3, [sp, #32]
 8005226:	9b02      	ldr	r3, [sp, #8]
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	46b8      	mov	r8, r7
 800522e:	9306      	str	r3, [sp, #24]
 8005230:	4607      	mov	r7, r0
 8005232:	9b04      	ldr	r3, [sp, #16]
 8005234:	4631      	mov	r1, r6
 8005236:	3b01      	subs	r3, #1
 8005238:	4650      	mov	r0, sl
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	f7ff fa6c 	bl	8004718 <quorem>
 8005240:	4641      	mov	r1, r8
 8005242:	9002      	str	r0, [sp, #8]
 8005244:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005248:	4650      	mov	r0, sl
 800524a:	f000 fca5 	bl	8005b98 <__mcmp>
 800524e:	463a      	mov	r2, r7
 8005250:	9005      	str	r0, [sp, #20]
 8005252:	4631      	mov	r1, r6
 8005254:	4620      	mov	r0, r4
 8005256:	f000 fcbb 	bl	8005bd0 <__mdiff>
 800525a:	68c2      	ldr	r2, [r0, #12]
 800525c:	4605      	mov	r5, r0
 800525e:	bb02      	cbnz	r2, 80052a2 <_dtoa_r+0xa7a>
 8005260:	4601      	mov	r1, r0
 8005262:	4650      	mov	r0, sl
 8005264:	f000 fc98 	bl	8005b98 <__mcmp>
 8005268:	4602      	mov	r2, r0
 800526a:	4629      	mov	r1, r5
 800526c:	4620      	mov	r0, r4
 800526e:	9209      	str	r2, [sp, #36]	; 0x24
 8005270:	f000 fa0c 	bl	800568c <_Bfree>
 8005274:	9b07      	ldr	r3, [sp, #28]
 8005276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005278:	9d04      	ldr	r5, [sp, #16]
 800527a:	ea43 0102 	orr.w	r1, r3, r2
 800527e:	9b06      	ldr	r3, [sp, #24]
 8005280:	4319      	orrs	r1, r3
 8005282:	d110      	bne.n	80052a6 <_dtoa_r+0xa7e>
 8005284:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005288:	d029      	beq.n	80052de <_dtoa_r+0xab6>
 800528a:	9b05      	ldr	r3, [sp, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	dd02      	ble.n	8005296 <_dtoa_r+0xa6e>
 8005290:	9b02      	ldr	r3, [sp, #8]
 8005292:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005296:	9b01      	ldr	r3, [sp, #4]
 8005298:	f883 9000 	strb.w	r9, [r3]
 800529c:	e774      	b.n	8005188 <_dtoa_r+0x960>
 800529e:	4638      	mov	r0, r7
 80052a0:	e7ba      	b.n	8005218 <_dtoa_r+0x9f0>
 80052a2:	2201      	movs	r2, #1
 80052a4:	e7e1      	b.n	800526a <_dtoa_r+0xa42>
 80052a6:	9b05      	ldr	r3, [sp, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	db04      	blt.n	80052b6 <_dtoa_r+0xa8e>
 80052ac:	9907      	ldr	r1, [sp, #28]
 80052ae:	430b      	orrs	r3, r1
 80052b0:	9906      	ldr	r1, [sp, #24]
 80052b2:	430b      	orrs	r3, r1
 80052b4:	d120      	bne.n	80052f8 <_dtoa_r+0xad0>
 80052b6:	2a00      	cmp	r2, #0
 80052b8:	dded      	ble.n	8005296 <_dtoa_r+0xa6e>
 80052ba:	4651      	mov	r1, sl
 80052bc:	2201      	movs	r2, #1
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fbfe 	bl	8005ac0 <__lshift>
 80052c4:	4631      	mov	r1, r6
 80052c6:	4682      	mov	sl, r0
 80052c8:	f000 fc66 	bl	8005b98 <__mcmp>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	dc03      	bgt.n	80052d8 <_dtoa_r+0xab0>
 80052d0:	d1e1      	bne.n	8005296 <_dtoa_r+0xa6e>
 80052d2:	f019 0f01 	tst.w	r9, #1
 80052d6:	d0de      	beq.n	8005296 <_dtoa_r+0xa6e>
 80052d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80052dc:	d1d8      	bne.n	8005290 <_dtoa_r+0xa68>
 80052de:	9a01      	ldr	r2, [sp, #4]
 80052e0:	2339      	movs	r3, #57	; 0x39
 80052e2:	7013      	strb	r3, [r2, #0]
 80052e4:	462b      	mov	r3, r5
 80052e6:	461d      	mov	r5, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052ee:	2a39      	cmp	r2, #57	; 0x39
 80052f0:	d06c      	beq.n	80053cc <_dtoa_r+0xba4>
 80052f2:	3201      	adds	r2, #1
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	e747      	b.n	8005188 <_dtoa_r+0x960>
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	dd07      	ble.n	800530c <_dtoa_r+0xae4>
 80052fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005300:	d0ed      	beq.n	80052de <_dtoa_r+0xab6>
 8005302:	9a01      	ldr	r2, [sp, #4]
 8005304:	f109 0301 	add.w	r3, r9, #1
 8005308:	7013      	strb	r3, [r2, #0]
 800530a:	e73d      	b.n	8005188 <_dtoa_r+0x960>
 800530c:	9b04      	ldr	r3, [sp, #16]
 800530e:	9a08      	ldr	r2, [sp, #32]
 8005310:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005314:	4293      	cmp	r3, r2
 8005316:	d043      	beq.n	80053a0 <_dtoa_r+0xb78>
 8005318:	4651      	mov	r1, sl
 800531a:	2300      	movs	r3, #0
 800531c:	220a      	movs	r2, #10
 800531e:	4620      	mov	r0, r4
 8005320:	f000 f9d6 	bl	80056d0 <__multadd>
 8005324:	45b8      	cmp	r8, r7
 8005326:	4682      	mov	sl, r0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	f04f 020a 	mov.w	r2, #10
 8005330:	4641      	mov	r1, r8
 8005332:	4620      	mov	r0, r4
 8005334:	d107      	bne.n	8005346 <_dtoa_r+0xb1e>
 8005336:	f000 f9cb 	bl	80056d0 <__multadd>
 800533a:	4680      	mov	r8, r0
 800533c:	4607      	mov	r7, r0
 800533e:	9b04      	ldr	r3, [sp, #16]
 8005340:	3301      	adds	r3, #1
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	e775      	b.n	8005232 <_dtoa_r+0xa0a>
 8005346:	f000 f9c3 	bl	80056d0 <__multadd>
 800534a:	4639      	mov	r1, r7
 800534c:	4680      	mov	r8, r0
 800534e:	2300      	movs	r3, #0
 8005350:	220a      	movs	r2, #10
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f9bc 	bl	80056d0 <__multadd>
 8005358:	4607      	mov	r7, r0
 800535a:	e7f0      	b.n	800533e <_dtoa_r+0xb16>
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	9301      	str	r3, [sp, #4]
 8005360:	9d00      	ldr	r5, [sp, #0]
 8005362:	4631      	mov	r1, r6
 8005364:	4650      	mov	r0, sl
 8005366:	f7ff f9d7 	bl	8004718 <quorem>
 800536a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	f805 9b01 	strb.w	r9, [r5], #1
 8005374:	1aea      	subs	r2, r5, r3
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	4293      	cmp	r3, r2
 800537a:	dd07      	ble.n	800538c <_dtoa_r+0xb64>
 800537c:	4651      	mov	r1, sl
 800537e:	2300      	movs	r3, #0
 8005380:	220a      	movs	r2, #10
 8005382:	4620      	mov	r0, r4
 8005384:	f000 f9a4 	bl	80056d0 <__multadd>
 8005388:	4682      	mov	sl, r0
 800538a:	e7ea      	b.n	8005362 <_dtoa_r+0xb3a>
 800538c:	9b01      	ldr	r3, [sp, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	bfc8      	it	gt
 8005392:	461d      	movgt	r5, r3
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	bfd8      	it	le
 8005398:	2501      	movle	r5, #1
 800539a:	441d      	add	r5, r3
 800539c:	f04f 0800 	mov.w	r8, #0
 80053a0:	4651      	mov	r1, sl
 80053a2:	2201      	movs	r2, #1
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 fb8b 	bl	8005ac0 <__lshift>
 80053aa:	4631      	mov	r1, r6
 80053ac:	4682      	mov	sl, r0
 80053ae:	f000 fbf3 	bl	8005b98 <__mcmp>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	dc96      	bgt.n	80052e4 <_dtoa_r+0xabc>
 80053b6:	d102      	bne.n	80053be <_dtoa_r+0xb96>
 80053b8:	f019 0f01 	tst.w	r9, #1
 80053bc:	d192      	bne.n	80052e4 <_dtoa_r+0xabc>
 80053be:	462b      	mov	r3, r5
 80053c0:	461d      	mov	r5, r3
 80053c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80053c6:	2a30      	cmp	r2, #48	; 0x30
 80053c8:	d0fa      	beq.n	80053c0 <_dtoa_r+0xb98>
 80053ca:	e6dd      	b.n	8005188 <_dtoa_r+0x960>
 80053cc:	9a00      	ldr	r2, [sp, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d189      	bne.n	80052e6 <_dtoa_r+0xabe>
 80053d2:	f10b 0b01 	add.w	fp, fp, #1
 80053d6:	2331      	movs	r3, #49	; 0x31
 80053d8:	e796      	b.n	8005308 <_dtoa_r+0xae0>
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <_dtoa_r+0xbdc>)
 80053dc:	f7ff ba99 	b.w	8004912 <_dtoa_r+0xea>
 80053e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f47f aa6d 	bne.w	80048c2 <_dtoa_r+0x9a>
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <_dtoa_r+0xbe0>)
 80053ea:	f7ff ba92 	b.w	8004912 <_dtoa_r+0xea>
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dcb5      	bgt.n	8005360 <_dtoa_r+0xb38>
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	f73f aeb1 	bgt.w	800515e <_dtoa_r+0x936>
 80053fc:	e7b0      	b.n	8005360 <_dtoa_r+0xb38>
 80053fe:	bf00      	nop
 8005400:	08007f89 	.word	0x08007f89
 8005404:	08007ee4 	.word	0x08007ee4
 8005408:	08007f0d 	.word	0x08007f0d

0800540c <_free_r>:
 800540c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800540e:	2900      	cmp	r1, #0
 8005410:	d044      	beq.n	800549c <_free_r+0x90>
 8005412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005416:	9001      	str	r0, [sp, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f1a1 0404 	sub.w	r4, r1, #4
 800541e:	bfb8      	it	lt
 8005420:	18e4      	addlt	r4, r4, r3
 8005422:	f000 f8e7 	bl	80055f4 <__malloc_lock>
 8005426:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <_free_r+0x94>)
 8005428:	9801      	ldr	r0, [sp, #4]
 800542a:	6813      	ldr	r3, [r2, #0]
 800542c:	b933      	cbnz	r3, 800543c <_free_r+0x30>
 800542e:	6063      	str	r3, [r4, #4]
 8005430:	6014      	str	r4, [r2, #0]
 8005432:	b003      	add	sp, #12
 8005434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005438:	f000 b8e2 	b.w	8005600 <__malloc_unlock>
 800543c:	42a3      	cmp	r3, r4
 800543e:	d908      	bls.n	8005452 <_free_r+0x46>
 8005440:	6825      	ldr	r5, [r4, #0]
 8005442:	1961      	adds	r1, r4, r5
 8005444:	428b      	cmp	r3, r1
 8005446:	bf01      	itttt	eq
 8005448:	6819      	ldreq	r1, [r3, #0]
 800544a:	685b      	ldreq	r3, [r3, #4]
 800544c:	1949      	addeq	r1, r1, r5
 800544e:	6021      	streq	r1, [r4, #0]
 8005450:	e7ed      	b.n	800542e <_free_r+0x22>
 8005452:	461a      	mov	r2, r3
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	b10b      	cbz	r3, 800545c <_free_r+0x50>
 8005458:	42a3      	cmp	r3, r4
 800545a:	d9fa      	bls.n	8005452 <_free_r+0x46>
 800545c:	6811      	ldr	r1, [r2, #0]
 800545e:	1855      	adds	r5, r2, r1
 8005460:	42a5      	cmp	r5, r4
 8005462:	d10b      	bne.n	800547c <_free_r+0x70>
 8005464:	6824      	ldr	r4, [r4, #0]
 8005466:	4421      	add	r1, r4
 8005468:	1854      	adds	r4, r2, r1
 800546a:	42a3      	cmp	r3, r4
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	d1e0      	bne.n	8005432 <_free_r+0x26>
 8005470:	681c      	ldr	r4, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	6053      	str	r3, [r2, #4]
 8005476:	440c      	add	r4, r1
 8005478:	6014      	str	r4, [r2, #0]
 800547a:	e7da      	b.n	8005432 <_free_r+0x26>
 800547c:	d902      	bls.n	8005484 <_free_r+0x78>
 800547e:	230c      	movs	r3, #12
 8005480:	6003      	str	r3, [r0, #0]
 8005482:	e7d6      	b.n	8005432 <_free_r+0x26>
 8005484:	6825      	ldr	r5, [r4, #0]
 8005486:	1961      	adds	r1, r4, r5
 8005488:	428b      	cmp	r3, r1
 800548a:	bf04      	itt	eq
 800548c:	6819      	ldreq	r1, [r3, #0]
 800548e:	685b      	ldreq	r3, [r3, #4]
 8005490:	6063      	str	r3, [r4, #4]
 8005492:	bf04      	itt	eq
 8005494:	1949      	addeq	r1, r1, r5
 8005496:	6021      	streq	r1, [r4, #0]
 8005498:	6054      	str	r4, [r2, #4]
 800549a:	e7ca      	b.n	8005432 <_free_r+0x26>
 800549c:	b003      	add	sp, #12
 800549e:	bd30      	pop	{r4, r5, pc}
 80054a0:	200003e4 	.word	0x200003e4

080054a4 <malloc>:
 80054a4:	4b02      	ldr	r3, [pc, #8]	; (80054b0 <malloc+0xc>)
 80054a6:	4601      	mov	r1, r0
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f000 b823 	b.w	80054f4 <_malloc_r>
 80054ae:	bf00      	nop
 80054b0:	20000064 	.word	0x20000064

080054b4 <sbrk_aligned>:
 80054b4:	b570      	push	{r4, r5, r6, lr}
 80054b6:	4e0e      	ldr	r6, [pc, #56]	; (80054f0 <sbrk_aligned+0x3c>)
 80054b8:	460c      	mov	r4, r1
 80054ba:	6831      	ldr	r1, [r6, #0]
 80054bc:	4605      	mov	r5, r0
 80054be:	b911      	cbnz	r1, 80054c6 <sbrk_aligned+0x12>
 80054c0:	f001 fff4 	bl	80074ac <_sbrk_r>
 80054c4:	6030      	str	r0, [r6, #0]
 80054c6:	4621      	mov	r1, r4
 80054c8:	4628      	mov	r0, r5
 80054ca:	f001 ffef 	bl	80074ac <_sbrk_r>
 80054ce:	1c43      	adds	r3, r0, #1
 80054d0:	d00a      	beq.n	80054e8 <sbrk_aligned+0x34>
 80054d2:	1cc4      	adds	r4, r0, #3
 80054d4:	f024 0403 	bic.w	r4, r4, #3
 80054d8:	42a0      	cmp	r0, r4
 80054da:	d007      	beq.n	80054ec <sbrk_aligned+0x38>
 80054dc:	1a21      	subs	r1, r4, r0
 80054de:	4628      	mov	r0, r5
 80054e0:	f001 ffe4 	bl	80074ac <_sbrk_r>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d101      	bne.n	80054ec <sbrk_aligned+0x38>
 80054e8:	f04f 34ff 	mov.w	r4, #4294967295
 80054ec:	4620      	mov	r0, r4
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	200003e8 	.word	0x200003e8

080054f4 <_malloc_r>:
 80054f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054f8:	1ccd      	adds	r5, r1, #3
 80054fa:	f025 0503 	bic.w	r5, r5, #3
 80054fe:	3508      	adds	r5, #8
 8005500:	2d0c      	cmp	r5, #12
 8005502:	bf38      	it	cc
 8005504:	250c      	movcc	r5, #12
 8005506:	2d00      	cmp	r5, #0
 8005508:	4607      	mov	r7, r0
 800550a:	db01      	blt.n	8005510 <_malloc_r+0x1c>
 800550c:	42a9      	cmp	r1, r5
 800550e:	d905      	bls.n	800551c <_malloc_r+0x28>
 8005510:	230c      	movs	r3, #12
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	2600      	movs	r6, #0
 8005516:	4630      	mov	r0, r6
 8005518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055f0 <_malloc_r+0xfc>
 8005520:	f000 f868 	bl	80055f4 <__malloc_lock>
 8005524:	f8d8 3000 	ldr.w	r3, [r8]
 8005528:	461c      	mov	r4, r3
 800552a:	bb5c      	cbnz	r4, 8005584 <_malloc_r+0x90>
 800552c:	4629      	mov	r1, r5
 800552e:	4638      	mov	r0, r7
 8005530:	f7ff ffc0 	bl	80054b4 <sbrk_aligned>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	4604      	mov	r4, r0
 8005538:	d155      	bne.n	80055e6 <_malloc_r+0xf2>
 800553a:	f8d8 4000 	ldr.w	r4, [r8]
 800553e:	4626      	mov	r6, r4
 8005540:	2e00      	cmp	r6, #0
 8005542:	d145      	bne.n	80055d0 <_malloc_r+0xdc>
 8005544:	2c00      	cmp	r4, #0
 8005546:	d048      	beq.n	80055da <_malloc_r+0xe6>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	4631      	mov	r1, r6
 800554c:	4638      	mov	r0, r7
 800554e:	eb04 0903 	add.w	r9, r4, r3
 8005552:	f001 ffab 	bl	80074ac <_sbrk_r>
 8005556:	4581      	cmp	r9, r0
 8005558:	d13f      	bne.n	80055da <_malloc_r+0xe6>
 800555a:	6821      	ldr	r1, [r4, #0]
 800555c:	1a6d      	subs	r5, r5, r1
 800555e:	4629      	mov	r1, r5
 8005560:	4638      	mov	r0, r7
 8005562:	f7ff ffa7 	bl	80054b4 <sbrk_aligned>
 8005566:	3001      	adds	r0, #1
 8005568:	d037      	beq.n	80055da <_malloc_r+0xe6>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	442b      	add	r3, r5
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	f8d8 3000 	ldr.w	r3, [r8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d038      	beq.n	80055ea <_malloc_r+0xf6>
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	42a2      	cmp	r2, r4
 800557c:	d12b      	bne.n	80055d6 <_malloc_r+0xe2>
 800557e:	2200      	movs	r2, #0
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	e00f      	b.n	80055a4 <_malloc_r+0xb0>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	1b52      	subs	r2, r2, r5
 8005588:	d41f      	bmi.n	80055ca <_malloc_r+0xd6>
 800558a:	2a0b      	cmp	r2, #11
 800558c:	d917      	bls.n	80055be <_malloc_r+0xca>
 800558e:	1961      	adds	r1, r4, r5
 8005590:	42a3      	cmp	r3, r4
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	6059      	strne	r1, [r3, #4]
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	bf08      	it	eq
 800559c:	f8c8 1000 	streq.w	r1, [r8]
 80055a0:	5162      	str	r2, [r4, r5]
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	4638      	mov	r0, r7
 80055a6:	f104 060b 	add.w	r6, r4, #11
 80055aa:	f000 f829 	bl	8005600 <__malloc_unlock>
 80055ae:	f026 0607 	bic.w	r6, r6, #7
 80055b2:	1d23      	adds	r3, r4, #4
 80055b4:	1af2      	subs	r2, r6, r3
 80055b6:	d0ae      	beq.n	8005516 <_malloc_r+0x22>
 80055b8:	1b9b      	subs	r3, r3, r6
 80055ba:	50a3      	str	r3, [r4, r2]
 80055bc:	e7ab      	b.n	8005516 <_malloc_r+0x22>
 80055be:	42a3      	cmp	r3, r4
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	d1dd      	bne.n	8005580 <_malloc_r+0x8c>
 80055c4:	f8c8 2000 	str.w	r2, [r8]
 80055c8:	e7ec      	b.n	80055a4 <_malloc_r+0xb0>
 80055ca:	4623      	mov	r3, r4
 80055cc:	6864      	ldr	r4, [r4, #4]
 80055ce:	e7ac      	b.n	800552a <_malloc_r+0x36>
 80055d0:	4634      	mov	r4, r6
 80055d2:	6876      	ldr	r6, [r6, #4]
 80055d4:	e7b4      	b.n	8005540 <_malloc_r+0x4c>
 80055d6:	4613      	mov	r3, r2
 80055d8:	e7cc      	b.n	8005574 <_malloc_r+0x80>
 80055da:	230c      	movs	r3, #12
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4638      	mov	r0, r7
 80055e0:	f000 f80e 	bl	8005600 <__malloc_unlock>
 80055e4:	e797      	b.n	8005516 <_malloc_r+0x22>
 80055e6:	6025      	str	r5, [r4, #0]
 80055e8:	e7dc      	b.n	80055a4 <_malloc_r+0xb0>
 80055ea:	605b      	str	r3, [r3, #4]
 80055ec:	deff      	udf	#255	; 0xff
 80055ee:	bf00      	nop
 80055f0:	200003e4 	.word	0x200003e4

080055f4 <__malloc_lock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_lock+0x8>)
 80055f6:	f7ff b887 	b.w	8004708 <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	200003e0 	.word	0x200003e0

08005600 <__malloc_unlock>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__malloc_unlock+0x8>)
 8005602:	f7ff b882 	b.w	800470a <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	200003e0 	.word	0x200003e0

0800560c <_Balloc>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	69c6      	ldr	r6, [r0, #28]
 8005610:	4604      	mov	r4, r0
 8005612:	460d      	mov	r5, r1
 8005614:	b976      	cbnz	r6, 8005634 <_Balloc+0x28>
 8005616:	2010      	movs	r0, #16
 8005618:	f7ff ff44 	bl	80054a4 <malloc>
 800561c:	4602      	mov	r2, r0
 800561e:	61e0      	str	r0, [r4, #28]
 8005620:	b920      	cbnz	r0, 800562c <_Balloc+0x20>
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <_Balloc+0x78>)
 8005624:	4818      	ldr	r0, [pc, #96]	; (8005688 <_Balloc+0x7c>)
 8005626:	216b      	movs	r1, #107	; 0x6b
 8005628:	f001 ff66 	bl	80074f8 <__assert_func>
 800562c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005630:	6006      	str	r6, [r0, #0]
 8005632:	60c6      	str	r6, [r0, #12]
 8005634:	69e6      	ldr	r6, [r4, #28]
 8005636:	68f3      	ldr	r3, [r6, #12]
 8005638:	b183      	cbz	r3, 800565c <_Balloc+0x50>
 800563a:	69e3      	ldr	r3, [r4, #28]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005642:	b9b8      	cbnz	r0, 8005674 <_Balloc+0x68>
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f605 	lsl.w	r6, r1, r5
 800564a:	1d72      	adds	r2, r6, #5
 800564c:	0092      	lsls	r2, r2, #2
 800564e:	4620      	mov	r0, r4
 8005650:	f001 ff70 	bl	8007534 <_calloc_r>
 8005654:	b160      	cbz	r0, 8005670 <_Balloc+0x64>
 8005656:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800565a:	e00e      	b.n	800567a <_Balloc+0x6e>
 800565c:	2221      	movs	r2, #33	; 0x21
 800565e:	2104      	movs	r1, #4
 8005660:	4620      	mov	r0, r4
 8005662:	f001 ff67 	bl	8007534 <_calloc_r>
 8005666:	69e3      	ldr	r3, [r4, #28]
 8005668:	60f0      	str	r0, [r6, #12]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e4      	bne.n	800563a <_Balloc+0x2e>
 8005670:	2000      	movs	r0, #0
 8005672:	bd70      	pop	{r4, r5, r6, pc}
 8005674:	6802      	ldr	r2, [r0, #0]
 8005676:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800567a:	2300      	movs	r3, #0
 800567c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005680:	e7f7      	b.n	8005672 <_Balloc+0x66>
 8005682:	bf00      	nop
 8005684:	08007f1a 	.word	0x08007f1a
 8005688:	08007f9a 	.word	0x08007f9a

0800568c <_Bfree>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	69c6      	ldr	r6, [r0, #28]
 8005690:	4605      	mov	r5, r0
 8005692:	460c      	mov	r4, r1
 8005694:	b976      	cbnz	r6, 80056b4 <_Bfree+0x28>
 8005696:	2010      	movs	r0, #16
 8005698:	f7ff ff04 	bl	80054a4 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	61e8      	str	r0, [r5, #28]
 80056a0:	b920      	cbnz	r0, 80056ac <_Bfree+0x20>
 80056a2:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <_Bfree+0x3c>)
 80056a4:	4809      	ldr	r0, [pc, #36]	; (80056cc <_Bfree+0x40>)
 80056a6:	218f      	movs	r1, #143	; 0x8f
 80056a8:	f001 ff26 	bl	80074f8 <__assert_func>
 80056ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056b0:	6006      	str	r6, [r0, #0]
 80056b2:	60c6      	str	r6, [r0, #12]
 80056b4:	b13c      	cbz	r4, 80056c6 <_Bfree+0x3a>
 80056b6:	69eb      	ldr	r3, [r5, #28]
 80056b8:	6862      	ldr	r2, [r4, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056c0:	6021      	str	r1, [r4, #0]
 80056c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
 80056c8:	08007f1a 	.word	0x08007f1a
 80056cc:	08007f9a 	.word	0x08007f9a

080056d0 <__multadd>:
 80056d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d4:	690d      	ldr	r5, [r1, #16]
 80056d6:	4607      	mov	r7, r0
 80056d8:	460c      	mov	r4, r1
 80056da:	461e      	mov	r6, r3
 80056dc:	f101 0c14 	add.w	ip, r1, #20
 80056e0:	2000      	movs	r0, #0
 80056e2:	f8dc 3000 	ldr.w	r3, [ip]
 80056e6:	b299      	uxth	r1, r3
 80056e8:	fb02 6101 	mla	r1, r2, r1, r6
 80056ec:	0c1e      	lsrs	r6, r3, #16
 80056ee:	0c0b      	lsrs	r3, r1, #16
 80056f0:	fb02 3306 	mla	r3, r2, r6, r3
 80056f4:	b289      	uxth	r1, r1
 80056f6:	3001      	adds	r0, #1
 80056f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056fc:	4285      	cmp	r5, r0
 80056fe:	f84c 1b04 	str.w	r1, [ip], #4
 8005702:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005706:	dcec      	bgt.n	80056e2 <__multadd+0x12>
 8005708:	b30e      	cbz	r6, 800574e <__multadd+0x7e>
 800570a:	68a3      	ldr	r3, [r4, #8]
 800570c:	42ab      	cmp	r3, r5
 800570e:	dc19      	bgt.n	8005744 <__multadd+0x74>
 8005710:	6861      	ldr	r1, [r4, #4]
 8005712:	4638      	mov	r0, r7
 8005714:	3101      	adds	r1, #1
 8005716:	f7ff ff79 	bl	800560c <_Balloc>
 800571a:	4680      	mov	r8, r0
 800571c:	b928      	cbnz	r0, 800572a <__multadd+0x5a>
 800571e:	4602      	mov	r2, r0
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <__multadd+0x84>)
 8005722:	480d      	ldr	r0, [pc, #52]	; (8005758 <__multadd+0x88>)
 8005724:	21ba      	movs	r1, #186	; 0xba
 8005726:	f001 fee7 	bl	80074f8 <__assert_func>
 800572a:	6922      	ldr	r2, [r4, #16]
 800572c:	3202      	adds	r2, #2
 800572e:	f104 010c 	add.w	r1, r4, #12
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	300c      	adds	r0, #12
 8005736:	f001 fec9 	bl	80074cc <memcpy>
 800573a:	4621      	mov	r1, r4
 800573c:	4638      	mov	r0, r7
 800573e:	f7ff ffa5 	bl	800568c <_Bfree>
 8005742:	4644      	mov	r4, r8
 8005744:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005748:	3501      	adds	r5, #1
 800574a:	615e      	str	r6, [r3, #20]
 800574c:	6125      	str	r5, [r4, #16]
 800574e:	4620      	mov	r0, r4
 8005750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005754:	08007f89 	.word	0x08007f89
 8005758:	08007f9a 	.word	0x08007f9a

0800575c <__s2b>:
 800575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005760:	460c      	mov	r4, r1
 8005762:	4615      	mov	r5, r2
 8005764:	461f      	mov	r7, r3
 8005766:	2209      	movs	r2, #9
 8005768:	3308      	adds	r3, #8
 800576a:	4606      	mov	r6, r0
 800576c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005770:	2100      	movs	r1, #0
 8005772:	2201      	movs	r2, #1
 8005774:	429a      	cmp	r2, r3
 8005776:	db09      	blt.n	800578c <__s2b+0x30>
 8005778:	4630      	mov	r0, r6
 800577a:	f7ff ff47 	bl	800560c <_Balloc>
 800577e:	b940      	cbnz	r0, 8005792 <__s2b+0x36>
 8005780:	4602      	mov	r2, r0
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <__s2b+0x8c>)
 8005784:	4819      	ldr	r0, [pc, #100]	; (80057ec <__s2b+0x90>)
 8005786:	21d3      	movs	r1, #211	; 0xd3
 8005788:	f001 feb6 	bl	80074f8 <__assert_func>
 800578c:	0052      	lsls	r2, r2, #1
 800578e:	3101      	adds	r1, #1
 8005790:	e7f0      	b.n	8005774 <__s2b+0x18>
 8005792:	9b08      	ldr	r3, [sp, #32]
 8005794:	6143      	str	r3, [r0, #20]
 8005796:	2d09      	cmp	r5, #9
 8005798:	f04f 0301 	mov.w	r3, #1
 800579c:	6103      	str	r3, [r0, #16]
 800579e:	dd16      	ble.n	80057ce <__s2b+0x72>
 80057a0:	f104 0909 	add.w	r9, r4, #9
 80057a4:	46c8      	mov	r8, r9
 80057a6:	442c      	add	r4, r5
 80057a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80057ac:	4601      	mov	r1, r0
 80057ae:	3b30      	subs	r3, #48	; 0x30
 80057b0:	220a      	movs	r2, #10
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7ff ff8c 	bl	80056d0 <__multadd>
 80057b8:	45a0      	cmp	r8, r4
 80057ba:	d1f5      	bne.n	80057a8 <__s2b+0x4c>
 80057bc:	f1a5 0408 	sub.w	r4, r5, #8
 80057c0:	444c      	add	r4, r9
 80057c2:	1b2d      	subs	r5, r5, r4
 80057c4:	1963      	adds	r3, r4, r5
 80057c6:	42bb      	cmp	r3, r7
 80057c8:	db04      	blt.n	80057d4 <__s2b+0x78>
 80057ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ce:	340a      	adds	r4, #10
 80057d0:	2509      	movs	r5, #9
 80057d2:	e7f6      	b.n	80057c2 <__s2b+0x66>
 80057d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80057d8:	4601      	mov	r1, r0
 80057da:	3b30      	subs	r3, #48	; 0x30
 80057dc:	220a      	movs	r2, #10
 80057de:	4630      	mov	r0, r6
 80057e0:	f7ff ff76 	bl	80056d0 <__multadd>
 80057e4:	e7ee      	b.n	80057c4 <__s2b+0x68>
 80057e6:	bf00      	nop
 80057e8:	08007f89 	.word	0x08007f89
 80057ec:	08007f9a 	.word	0x08007f9a

080057f0 <__hi0bits>:
 80057f0:	0c03      	lsrs	r3, r0, #16
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	b9d3      	cbnz	r3, 800582c <__hi0bits+0x3c>
 80057f6:	0400      	lsls	r0, r0, #16
 80057f8:	2310      	movs	r3, #16
 80057fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80057fe:	bf04      	itt	eq
 8005800:	0200      	lsleq	r0, r0, #8
 8005802:	3308      	addeq	r3, #8
 8005804:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005808:	bf04      	itt	eq
 800580a:	0100      	lsleq	r0, r0, #4
 800580c:	3304      	addeq	r3, #4
 800580e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005812:	bf04      	itt	eq
 8005814:	0080      	lsleq	r0, r0, #2
 8005816:	3302      	addeq	r3, #2
 8005818:	2800      	cmp	r0, #0
 800581a:	db05      	blt.n	8005828 <__hi0bits+0x38>
 800581c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005820:	f103 0301 	add.w	r3, r3, #1
 8005824:	bf08      	it	eq
 8005826:	2320      	moveq	r3, #32
 8005828:	4618      	mov	r0, r3
 800582a:	4770      	bx	lr
 800582c:	2300      	movs	r3, #0
 800582e:	e7e4      	b.n	80057fa <__hi0bits+0xa>

08005830 <__lo0bits>:
 8005830:	6803      	ldr	r3, [r0, #0]
 8005832:	f013 0207 	ands.w	r2, r3, #7
 8005836:	d00c      	beq.n	8005852 <__lo0bits+0x22>
 8005838:	07d9      	lsls	r1, r3, #31
 800583a:	d422      	bmi.n	8005882 <__lo0bits+0x52>
 800583c:	079a      	lsls	r2, r3, #30
 800583e:	bf49      	itett	mi
 8005840:	085b      	lsrmi	r3, r3, #1
 8005842:	089b      	lsrpl	r3, r3, #2
 8005844:	6003      	strmi	r3, [r0, #0]
 8005846:	2201      	movmi	r2, #1
 8005848:	bf5c      	itt	pl
 800584a:	6003      	strpl	r3, [r0, #0]
 800584c:	2202      	movpl	r2, #2
 800584e:	4610      	mov	r0, r2
 8005850:	4770      	bx	lr
 8005852:	b299      	uxth	r1, r3
 8005854:	b909      	cbnz	r1, 800585a <__lo0bits+0x2a>
 8005856:	0c1b      	lsrs	r3, r3, #16
 8005858:	2210      	movs	r2, #16
 800585a:	b2d9      	uxtb	r1, r3
 800585c:	b909      	cbnz	r1, 8005862 <__lo0bits+0x32>
 800585e:	3208      	adds	r2, #8
 8005860:	0a1b      	lsrs	r3, r3, #8
 8005862:	0719      	lsls	r1, r3, #28
 8005864:	bf04      	itt	eq
 8005866:	091b      	lsreq	r3, r3, #4
 8005868:	3204      	addeq	r2, #4
 800586a:	0799      	lsls	r1, r3, #30
 800586c:	bf04      	itt	eq
 800586e:	089b      	lsreq	r3, r3, #2
 8005870:	3202      	addeq	r2, #2
 8005872:	07d9      	lsls	r1, r3, #31
 8005874:	d403      	bmi.n	800587e <__lo0bits+0x4e>
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	f102 0201 	add.w	r2, r2, #1
 800587c:	d003      	beq.n	8005886 <__lo0bits+0x56>
 800587e:	6003      	str	r3, [r0, #0]
 8005880:	e7e5      	b.n	800584e <__lo0bits+0x1e>
 8005882:	2200      	movs	r2, #0
 8005884:	e7e3      	b.n	800584e <__lo0bits+0x1e>
 8005886:	2220      	movs	r2, #32
 8005888:	e7e1      	b.n	800584e <__lo0bits+0x1e>
	...

0800588c <__i2b>:
 800588c:	b510      	push	{r4, lr}
 800588e:	460c      	mov	r4, r1
 8005890:	2101      	movs	r1, #1
 8005892:	f7ff febb 	bl	800560c <_Balloc>
 8005896:	4602      	mov	r2, r0
 8005898:	b928      	cbnz	r0, 80058a6 <__i2b+0x1a>
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <__i2b+0x24>)
 800589c:	4805      	ldr	r0, [pc, #20]	; (80058b4 <__i2b+0x28>)
 800589e:	f240 1145 	movw	r1, #325	; 0x145
 80058a2:	f001 fe29 	bl	80074f8 <__assert_func>
 80058a6:	2301      	movs	r3, #1
 80058a8:	6144      	str	r4, [r0, #20]
 80058aa:	6103      	str	r3, [r0, #16]
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	bf00      	nop
 80058b0:	08007f89 	.word	0x08007f89
 80058b4:	08007f9a 	.word	0x08007f9a

080058b8 <__multiply>:
 80058b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058bc:	4691      	mov	r9, r2
 80058be:	690a      	ldr	r2, [r1, #16]
 80058c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	bfb8      	it	lt
 80058c8:	460b      	movlt	r3, r1
 80058ca:	460c      	mov	r4, r1
 80058cc:	bfbc      	itt	lt
 80058ce:	464c      	movlt	r4, r9
 80058d0:	4699      	movlt	r9, r3
 80058d2:	6927      	ldr	r7, [r4, #16]
 80058d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80058d8:	68a3      	ldr	r3, [r4, #8]
 80058da:	6861      	ldr	r1, [r4, #4]
 80058dc:	eb07 060a 	add.w	r6, r7, sl
 80058e0:	42b3      	cmp	r3, r6
 80058e2:	b085      	sub	sp, #20
 80058e4:	bfb8      	it	lt
 80058e6:	3101      	addlt	r1, #1
 80058e8:	f7ff fe90 	bl	800560c <_Balloc>
 80058ec:	b930      	cbnz	r0, 80058fc <__multiply+0x44>
 80058ee:	4602      	mov	r2, r0
 80058f0:	4b44      	ldr	r3, [pc, #272]	; (8005a04 <__multiply+0x14c>)
 80058f2:	4845      	ldr	r0, [pc, #276]	; (8005a08 <__multiply+0x150>)
 80058f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80058f8:	f001 fdfe 	bl	80074f8 <__assert_func>
 80058fc:	f100 0514 	add.w	r5, r0, #20
 8005900:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005904:	462b      	mov	r3, r5
 8005906:	2200      	movs	r2, #0
 8005908:	4543      	cmp	r3, r8
 800590a:	d321      	bcc.n	8005950 <__multiply+0x98>
 800590c:	f104 0314 	add.w	r3, r4, #20
 8005910:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005914:	f109 0314 	add.w	r3, r9, #20
 8005918:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800591c:	9202      	str	r2, [sp, #8]
 800591e:	1b3a      	subs	r2, r7, r4
 8005920:	3a15      	subs	r2, #21
 8005922:	f022 0203 	bic.w	r2, r2, #3
 8005926:	3204      	adds	r2, #4
 8005928:	f104 0115 	add.w	r1, r4, #21
 800592c:	428f      	cmp	r7, r1
 800592e:	bf38      	it	cc
 8005930:	2204      	movcc	r2, #4
 8005932:	9201      	str	r2, [sp, #4]
 8005934:	9a02      	ldr	r2, [sp, #8]
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	429a      	cmp	r2, r3
 800593a:	d80c      	bhi.n	8005956 <__multiply+0x9e>
 800593c:	2e00      	cmp	r6, #0
 800593e:	dd03      	ble.n	8005948 <__multiply+0x90>
 8005940:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05b      	beq.n	8005a00 <__multiply+0x148>
 8005948:	6106      	str	r6, [r0, #16]
 800594a:	b005      	add	sp, #20
 800594c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005950:	f843 2b04 	str.w	r2, [r3], #4
 8005954:	e7d8      	b.n	8005908 <__multiply+0x50>
 8005956:	f8b3 a000 	ldrh.w	sl, [r3]
 800595a:	f1ba 0f00 	cmp.w	sl, #0
 800595e:	d024      	beq.n	80059aa <__multiply+0xf2>
 8005960:	f104 0e14 	add.w	lr, r4, #20
 8005964:	46a9      	mov	r9, r5
 8005966:	f04f 0c00 	mov.w	ip, #0
 800596a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800596e:	f8d9 1000 	ldr.w	r1, [r9]
 8005972:	fa1f fb82 	uxth.w	fp, r2
 8005976:	b289      	uxth	r1, r1
 8005978:	fb0a 110b 	mla	r1, sl, fp, r1
 800597c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005980:	f8d9 2000 	ldr.w	r2, [r9]
 8005984:	4461      	add	r1, ip
 8005986:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800598a:	fb0a c20b 	mla	r2, sl, fp, ip
 800598e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005992:	b289      	uxth	r1, r1
 8005994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005998:	4577      	cmp	r7, lr
 800599a:	f849 1b04 	str.w	r1, [r9], #4
 800599e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80059a2:	d8e2      	bhi.n	800596a <__multiply+0xb2>
 80059a4:	9a01      	ldr	r2, [sp, #4]
 80059a6:	f845 c002 	str.w	ip, [r5, r2]
 80059aa:	9a03      	ldr	r2, [sp, #12]
 80059ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059b0:	3304      	adds	r3, #4
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	d021      	beq.n	80059fc <__multiply+0x144>
 80059b8:	6829      	ldr	r1, [r5, #0]
 80059ba:	f104 0c14 	add.w	ip, r4, #20
 80059be:	46ae      	mov	lr, r5
 80059c0:	f04f 0a00 	mov.w	sl, #0
 80059c4:	f8bc b000 	ldrh.w	fp, [ip]
 80059c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80059cc:	fb09 220b 	mla	r2, r9, fp, r2
 80059d0:	4452      	add	r2, sl
 80059d2:	b289      	uxth	r1, r1
 80059d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80059d8:	f84e 1b04 	str.w	r1, [lr], #4
 80059dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80059e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059e4:	f8be 1000 	ldrh.w	r1, [lr]
 80059e8:	fb09 110a 	mla	r1, r9, sl, r1
 80059ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80059f0:	4567      	cmp	r7, ip
 80059f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80059f6:	d8e5      	bhi.n	80059c4 <__multiply+0x10c>
 80059f8:	9a01      	ldr	r2, [sp, #4]
 80059fa:	50a9      	str	r1, [r5, r2]
 80059fc:	3504      	adds	r5, #4
 80059fe:	e799      	b.n	8005934 <__multiply+0x7c>
 8005a00:	3e01      	subs	r6, #1
 8005a02:	e79b      	b.n	800593c <__multiply+0x84>
 8005a04:	08007f89 	.word	0x08007f89
 8005a08:	08007f9a 	.word	0x08007f9a

08005a0c <__pow5mult>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	4615      	mov	r5, r2
 8005a12:	f012 0203 	ands.w	r2, r2, #3
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	d007      	beq.n	8005a2c <__pow5mult+0x20>
 8005a1c:	4c25      	ldr	r4, [pc, #148]	; (8005ab4 <__pow5mult+0xa8>)
 8005a1e:	3a01      	subs	r2, #1
 8005a20:	2300      	movs	r3, #0
 8005a22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a26:	f7ff fe53 	bl	80056d0 <__multadd>
 8005a2a:	4607      	mov	r7, r0
 8005a2c:	10ad      	asrs	r5, r5, #2
 8005a2e:	d03d      	beq.n	8005aac <__pow5mult+0xa0>
 8005a30:	69f4      	ldr	r4, [r6, #28]
 8005a32:	b97c      	cbnz	r4, 8005a54 <__pow5mult+0x48>
 8005a34:	2010      	movs	r0, #16
 8005a36:	f7ff fd35 	bl	80054a4 <malloc>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	61f0      	str	r0, [r6, #28]
 8005a3e:	b928      	cbnz	r0, 8005a4c <__pow5mult+0x40>
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <__pow5mult+0xac>)
 8005a42:	481e      	ldr	r0, [pc, #120]	; (8005abc <__pow5mult+0xb0>)
 8005a44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005a48:	f001 fd56 	bl	80074f8 <__assert_func>
 8005a4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a50:	6004      	str	r4, [r0, #0]
 8005a52:	60c4      	str	r4, [r0, #12]
 8005a54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005a58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a5c:	b94c      	cbnz	r4, 8005a72 <__pow5mult+0x66>
 8005a5e:	f240 2171 	movw	r1, #625	; 0x271
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ff12 	bl	800588c <__i2b>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a6e:	4604      	mov	r4, r0
 8005a70:	6003      	str	r3, [r0, #0]
 8005a72:	f04f 0900 	mov.w	r9, #0
 8005a76:	07eb      	lsls	r3, r5, #31
 8005a78:	d50a      	bpl.n	8005a90 <__pow5mult+0x84>
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4630      	mov	r0, r6
 8005a80:	f7ff ff1a 	bl	80058b8 <__multiply>
 8005a84:	4639      	mov	r1, r7
 8005a86:	4680      	mov	r8, r0
 8005a88:	4630      	mov	r0, r6
 8005a8a:	f7ff fdff 	bl	800568c <_Bfree>
 8005a8e:	4647      	mov	r7, r8
 8005a90:	106d      	asrs	r5, r5, #1
 8005a92:	d00b      	beq.n	8005aac <__pow5mult+0xa0>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	b938      	cbnz	r0, 8005aa8 <__pow5mult+0x9c>
 8005a98:	4622      	mov	r2, r4
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f7ff ff0b 	bl	80058b8 <__multiply>
 8005aa2:	6020      	str	r0, [r4, #0]
 8005aa4:	f8c0 9000 	str.w	r9, [r0]
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	e7e4      	b.n	8005a76 <__pow5mult+0x6a>
 8005aac:	4638      	mov	r0, r7
 8005aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab2:	bf00      	nop
 8005ab4:	080080e8 	.word	0x080080e8
 8005ab8:	08007f1a 	.word	0x08007f1a
 8005abc:	08007f9a 	.word	0x08007f9a

08005ac0 <__lshift>:
 8005ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	6849      	ldr	r1, [r1, #4]
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ace:	68a3      	ldr	r3, [r4, #8]
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	4691      	mov	r9, r2
 8005ad4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ad8:	f108 0601 	add.w	r6, r8, #1
 8005adc:	42b3      	cmp	r3, r6
 8005ade:	db0b      	blt.n	8005af8 <__lshift+0x38>
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	f7ff fd93 	bl	800560c <_Balloc>
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b948      	cbnz	r0, 8005afe <__lshift+0x3e>
 8005aea:	4602      	mov	r2, r0
 8005aec:	4b28      	ldr	r3, [pc, #160]	; (8005b90 <__lshift+0xd0>)
 8005aee:	4829      	ldr	r0, [pc, #164]	; (8005b94 <__lshift+0xd4>)
 8005af0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005af4:	f001 fd00 	bl	80074f8 <__assert_func>
 8005af8:	3101      	adds	r1, #1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	e7ee      	b.n	8005adc <__lshift+0x1c>
 8005afe:	2300      	movs	r3, #0
 8005b00:	f100 0114 	add.w	r1, r0, #20
 8005b04:	f100 0210 	add.w	r2, r0, #16
 8005b08:	4618      	mov	r0, r3
 8005b0a:	4553      	cmp	r3, sl
 8005b0c:	db33      	blt.n	8005b76 <__lshift+0xb6>
 8005b0e:	6920      	ldr	r0, [r4, #16]
 8005b10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b14:	f104 0314 	add.w	r3, r4, #20
 8005b18:	f019 091f 	ands.w	r9, r9, #31
 8005b1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b24:	d02b      	beq.n	8005b7e <__lshift+0xbe>
 8005b26:	f1c9 0e20 	rsb	lr, r9, #32
 8005b2a:	468a      	mov	sl, r1
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	fa00 f009 	lsl.w	r0, r0, r9
 8005b34:	4310      	orrs	r0, r2
 8005b36:	f84a 0b04 	str.w	r0, [sl], #4
 8005b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3e:	459c      	cmp	ip, r3
 8005b40:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b44:	d8f3      	bhi.n	8005b2e <__lshift+0x6e>
 8005b46:	ebac 0304 	sub.w	r3, ip, r4
 8005b4a:	3b15      	subs	r3, #21
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	3304      	adds	r3, #4
 8005b52:	f104 0015 	add.w	r0, r4, #21
 8005b56:	4584      	cmp	ip, r0
 8005b58:	bf38      	it	cc
 8005b5a:	2304      	movcc	r3, #4
 8005b5c:	50ca      	str	r2, [r1, r3]
 8005b5e:	b10a      	cbz	r2, 8005b64 <__lshift+0xa4>
 8005b60:	f108 0602 	add.w	r6, r8, #2
 8005b64:	3e01      	subs	r6, #1
 8005b66:	4638      	mov	r0, r7
 8005b68:	612e      	str	r6, [r5, #16]
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	f7ff fd8e 	bl	800568c <_Bfree>
 8005b70:	4628      	mov	r0, r5
 8005b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	e7c5      	b.n	8005b0a <__lshift+0x4a>
 8005b7e:	3904      	subs	r1, #4
 8005b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b88:	459c      	cmp	ip, r3
 8005b8a:	d8f9      	bhi.n	8005b80 <__lshift+0xc0>
 8005b8c:	e7ea      	b.n	8005b64 <__lshift+0xa4>
 8005b8e:	bf00      	nop
 8005b90:	08007f89 	.word	0x08007f89
 8005b94:	08007f9a 	.word	0x08007f9a

08005b98 <__mcmp>:
 8005b98:	b530      	push	{r4, r5, lr}
 8005b9a:	6902      	ldr	r2, [r0, #16]
 8005b9c:	690c      	ldr	r4, [r1, #16]
 8005b9e:	1b12      	subs	r2, r2, r4
 8005ba0:	d10e      	bne.n	8005bc0 <__mcmp+0x28>
 8005ba2:	f100 0314 	add.w	r3, r0, #20
 8005ba6:	3114      	adds	r1, #20
 8005ba8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005bac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005bb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005bb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d003      	beq.n	8005bc4 <__mcmp+0x2c>
 8005bbc:	d305      	bcc.n	8005bca <__mcmp+0x32>
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	bd30      	pop	{r4, r5, pc}
 8005bc4:	4283      	cmp	r3, r0
 8005bc6:	d3f3      	bcc.n	8005bb0 <__mcmp+0x18>
 8005bc8:	e7fa      	b.n	8005bc0 <__mcmp+0x28>
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	e7f7      	b.n	8005bc0 <__mcmp+0x28>

08005bd0 <__mdiff>:
 8005bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4620      	mov	r0, r4
 8005bdc:	4690      	mov	r8, r2
 8005bde:	f7ff ffdb 	bl	8005b98 <__mcmp>
 8005be2:	1e05      	subs	r5, r0, #0
 8005be4:	d110      	bne.n	8005c08 <__mdiff+0x38>
 8005be6:	4629      	mov	r1, r5
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7ff fd0f 	bl	800560c <_Balloc>
 8005bee:	b930      	cbnz	r0, 8005bfe <__mdiff+0x2e>
 8005bf0:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <__mdiff+0x10c>)
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f240 2137 	movw	r1, #567	; 0x237
 8005bf8:	4839      	ldr	r0, [pc, #228]	; (8005ce0 <__mdiff+0x110>)
 8005bfa:	f001 fc7d 	bl	80074f8 <__assert_func>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c08:	bfa4      	itt	ge
 8005c0a:	4643      	movge	r3, r8
 8005c0c:	46a0      	movge	r8, r4
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c14:	bfa6      	itte	ge
 8005c16:	461c      	movge	r4, r3
 8005c18:	2500      	movge	r5, #0
 8005c1a:	2501      	movlt	r5, #1
 8005c1c:	f7ff fcf6 	bl	800560c <_Balloc>
 8005c20:	b920      	cbnz	r0, 8005c2c <__mdiff+0x5c>
 8005c22:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <__mdiff+0x10c>)
 8005c24:	4602      	mov	r2, r0
 8005c26:	f240 2145 	movw	r1, #581	; 0x245
 8005c2a:	e7e5      	b.n	8005bf8 <__mdiff+0x28>
 8005c2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c30:	6926      	ldr	r6, [r4, #16]
 8005c32:	60c5      	str	r5, [r0, #12]
 8005c34:	f104 0914 	add.w	r9, r4, #20
 8005c38:	f108 0514 	add.w	r5, r8, #20
 8005c3c:	f100 0e14 	add.w	lr, r0, #20
 8005c40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005c44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c48:	f108 0210 	add.w	r2, r8, #16
 8005c4c:	46f2      	mov	sl, lr
 8005c4e:	2100      	movs	r1, #0
 8005c50:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005c58:	fa11 f88b 	uxtah	r8, r1, fp
 8005c5c:	b299      	uxth	r1, r3
 8005c5e:	0c1b      	lsrs	r3, r3, #16
 8005c60:	eba8 0801 	sub.w	r8, r8, r1
 8005c64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005c6c:	fa1f f888 	uxth.w	r8, r8
 8005c70:	1419      	asrs	r1, r3, #16
 8005c72:	454e      	cmp	r6, r9
 8005c74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005c78:	f84a 3b04 	str.w	r3, [sl], #4
 8005c7c:	d8e8      	bhi.n	8005c50 <__mdiff+0x80>
 8005c7e:	1b33      	subs	r3, r6, r4
 8005c80:	3b15      	subs	r3, #21
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	3304      	adds	r3, #4
 8005c88:	3415      	adds	r4, #21
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	bf38      	it	cc
 8005c8e:	2304      	movcc	r3, #4
 8005c90:	441d      	add	r5, r3
 8005c92:	4473      	add	r3, lr
 8005c94:	469e      	mov	lr, r3
 8005c96:	462e      	mov	r6, r5
 8005c98:	4566      	cmp	r6, ip
 8005c9a:	d30e      	bcc.n	8005cba <__mdiff+0xea>
 8005c9c:	f10c 0203 	add.w	r2, ip, #3
 8005ca0:	1b52      	subs	r2, r2, r5
 8005ca2:	f022 0203 	bic.w	r2, r2, #3
 8005ca6:	3d03      	subs	r5, #3
 8005ca8:	45ac      	cmp	ip, r5
 8005caa:	bf38      	it	cc
 8005cac:	2200      	movcc	r2, #0
 8005cae:	4413      	add	r3, r2
 8005cb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005cb4:	b17a      	cbz	r2, 8005cd6 <__mdiff+0x106>
 8005cb6:	6107      	str	r7, [r0, #16]
 8005cb8:	e7a4      	b.n	8005c04 <__mdiff+0x34>
 8005cba:	f856 8b04 	ldr.w	r8, [r6], #4
 8005cbe:	fa11 f288 	uxtah	r2, r1, r8
 8005cc2:	1414      	asrs	r4, r2, #16
 8005cc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005cce:	f84e 2b04 	str.w	r2, [lr], #4
 8005cd2:	1421      	asrs	r1, r4, #16
 8005cd4:	e7e0      	b.n	8005c98 <__mdiff+0xc8>
 8005cd6:	3f01      	subs	r7, #1
 8005cd8:	e7ea      	b.n	8005cb0 <__mdiff+0xe0>
 8005cda:	bf00      	nop
 8005cdc:	08007f89 	.word	0x08007f89
 8005ce0:	08007f9a 	.word	0x08007f9a

08005ce4 <__ulp>:
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	ed8d 0b00 	vstr	d0, [sp]
 8005cea:	9a01      	ldr	r2, [sp, #4]
 8005cec:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <__ulp+0x48>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dc08      	bgt.n	8005d0a <__ulp+0x26>
 8005cf8:	425b      	negs	r3, r3
 8005cfa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005cfe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005d02:	da04      	bge.n	8005d0e <__ulp+0x2a>
 8005d04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005d08:	4113      	asrs	r3, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	e008      	b.n	8005d20 <__ulp+0x3c>
 8005d0e:	f1a2 0314 	sub.w	r3, r2, #20
 8005d12:	2b1e      	cmp	r3, #30
 8005d14:	bfda      	itte	le
 8005d16:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005d1a:	40da      	lsrle	r2, r3
 8005d1c:	2201      	movgt	r2, #1
 8005d1e:	2300      	movs	r3, #0
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	ec41 0b10 	vmov	d0, r0, r1
 8005d28:	b002      	add	sp, #8
 8005d2a:	4770      	bx	lr
 8005d2c:	7ff00000 	.word	0x7ff00000

08005d30 <__b2d>:
 8005d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d34:	6906      	ldr	r6, [r0, #16]
 8005d36:	f100 0814 	add.w	r8, r0, #20
 8005d3a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8005d3e:	1f37      	subs	r7, r6, #4
 8005d40:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005d44:	4610      	mov	r0, r2
 8005d46:	f7ff fd53 	bl	80057f0 <__hi0bits>
 8005d4a:	f1c0 0320 	rsb	r3, r0, #32
 8005d4e:	280a      	cmp	r0, #10
 8005d50:	600b      	str	r3, [r1, #0]
 8005d52:	491b      	ldr	r1, [pc, #108]	; (8005dc0 <__b2d+0x90>)
 8005d54:	dc15      	bgt.n	8005d82 <__b2d+0x52>
 8005d56:	f1c0 0c0b 	rsb	ip, r0, #11
 8005d5a:	fa22 f30c 	lsr.w	r3, r2, ip
 8005d5e:	45b8      	cmp	r8, r7
 8005d60:	ea43 0501 	orr.w	r5, r3, r1
 8005d64:	bf34      	ite	cc
 8005d66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005d6a:	2300      	movcs	r3, #0
 8005d6c:	3015      	adds	r0, #21
 8005d6e:	fa02 f000 	lsl.w	r0, r2, r0
 8005d72:	fa23 f30c 	lsr.w	r3, r3, ip
 8005d76:	4303      	orrs	r3, r0
 8005d78:	461c      	mov	r4, r3
 8005d7a:	ec45 4b10 	vmov	d0, r4, r5
 8005d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d82:	45b8      	cmp	r8, r7
 8005d84:	bf3a      	itte	cc
 8005d86:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8005d8a:	f1a6 0708 	subcc.w	r7, r6, #8
 8005d8e:	2300      	movcs	r3, #0
 8005d90:	380b      	subs	r0, #11
 8005d92:	d012      	beq.n	8005dba <__b2d+0x8a>
 8005d94:	f1c0 0120 	rsb	r1, r0, #32
 8005d98:	fa23 f401 	lsr.w	r4, r3, r1
 8005d9c:	4082      	lsls	r2, r0
 8005d9e:	4322      	orrs	r2, r4
 8005da0:	4547      	cmp	r7, r8
 8005da2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8005da6:	bf8c      	ite	hi
 8005da8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005dac:	2200      	movls	r2, #0
 8005dae:	4083      	lsls	r3, r0
 8005db0:	40ca      	lsrs	r2, r1
 8005db2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005db6:	4313      	orrs	r3, r2
 8005db8:	e7de      	b.n	8005d78 <__b2d+0x48>
 8005dba:	ea42 0501 	orr.w	r5, r2, r1
 8005dbe:	e7db      	b.n	8005d78 <__b2d+0x48>
 8005dc0:	3ff00000 	.word	0x3ff00000

08005dc4 <__d2b>:
 8005dc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005dc8:	460f      	mov	r7, r1
 8005dca:	2101      	movs	r1, #1
 8005dcc:	ec59 8b10 	vmov	r8, r9, d0
 8005dd0:	4616      	mov	r6, r2
 8005dd2:	f7ff fc1b 	bl	800560c <_Balloc>
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	b930      	cbnz	r0, 8005de8 <__d2b+0x24>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	4b24      	ldr	r3, [pc, #144]	; (8005e70 <__d2b+0xac>)
 8005dde:	4825      	ldr	r0, [pc, #148]	; (8005e74 <__d2b+0xb0>)
 8005de0:	f240 310f 	movw	r1, #783	; 0x30f
 8005de4:	f001 fb88 	bl	80074f8 <__assert_func>
 8005de8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005dec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005df0:	bb2d      	cbnz	r5, 8005e3e <__d2b+0x7a>
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	f1b8 0300 	subs.w	r3, r8, #0
 8005df8:	d026      	beq.n	8005e48 <__d2b+0x84>
 8005dfa:	4668      	mov	r0, sp
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	f7ff fd17 	bl	8005830 <__lo0bits>
 8005e02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005e06:	b1e8      	cbz	r0, 8005e44 <__d2b+0x80>
 8005e08:	f1c0 0320 	rsb	r3, r0, #32
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	430b      	orrs	r3, r1
 8005e12:	40c2      	lsrs	r2, r0
 8005e14:	6163      	str	r3, [r4, #20]
 8005e16:	9201      	str	r2, [sp, #4]
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	61a3      	str	r3, [r4, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf14      	ite	ne
 8005e20:	2202      	movne	r2, #2
 8005e22:	2201      	moveq	r2, #1
 8005e24:	6122      	str	r2, [r4, #16]
 8005e26:	b1bd      	cbz	r5, 8005e58 <__d2b+0x94>
 8005e28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005e2c:	4405      	add	r5, r0
 8005e2e:	603d      	str	r5, [r7, #0]
 8005e30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005e34:	6030      	str	r0, [r6, #0]
 8005e36:	4620      	mov	r0, r4
 8005e38:	b003      	add	sp, #12
 8005e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e42:	e7d6      	b.n	8005df2 <__d2b+0x2e>
 8005e44:	6161      	str	r1, [r4, #20]
 8005e46:	e7e7      	b.n	8005e18 <__d2b+0x54>
 8005e48:	a801      	add	r0, sp, #4
 8005e4a:	f7ff fcf1 	bl	8005830 <__lo0bits>
 8005e4e:	9b01      	ldr	r3, [sp, #4]
 8005e50:	6163      	str	r3, [r4, #20]
 8005e52:	3020      	adds	r0, #32
 8005e54:	2201      	movs	r2, #1
 8005e56:	e7e5      	b.n	8005e24 <__d2b+0x60>
 8005e58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005e60:	6038      	str	r0, [r7, #0]
 8005e62:	6918      	ldr	r0, [r3, #16]
 8005e64:	f7ff fcc4 	bl	80057f0 <__hi0bits>
 8005e68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005e6c:	e7e2      	b.n	8005e34 <__d2b+0x70>
 8005e6e:	bf00      	nop
 8005e70:	08007f89 	.word	0x08007f89
 8005e74:	08007f9a 	.word	0x08007f9a

08005e78 <__ratio>:
 8005e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	4688      	mov	r8, r1
 8005e7e:	4669      	mov	r1, sp
 8005e80:	4681      	mov	r9, r0
 8005e82:	f7ff ff55 	bl	8005d30 <__b2d>
 8005e86:	a901      	add	r1, sp, #4
 8005e88:	4640      	mov	r0, r8
 8005e8a:	ec55 4b10 	vmov	r4, r5, d0
 8005e8e:	f7ff ff4f 	bl	8005d30 <__b2d>
 8005e92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005e9a:	eba3 0c02 	sub.w	ip, r3, r2
 8005e9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005ea8:	ec51 0b10 	vmov	r0, r1, d0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	bfd6      	itet	le
 8005eb0:	460a      	movle	r2, r1
 8005eb2:	462a      	movgt	r2, r5
 8005eb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005eb8:	468b      	mov	fp, r1
 8005eba:	462f      	mov	r7, r5
 8005ebc:	bfd4      	ite	le
 8005ebe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005ec2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	ee10 2a10 	vmov	r2, s0
 8005ecc:	465b      	mov	r3, fp
 8005ece:	4639      	mov	r1, r7
 8005ed0:	f7fa fcc4 	bl	800085c <__aeabi_ddiv>
 8005ed4:	ec41 0b10 	vmov	d0, r0, r1
 8005ed8:	b003      	add	sp, #12
 8005eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ede <__copybits>:
 8005ede:	3901      	subs	r1, #1
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	1149      	asrs	r1, r1, #5
 8005ee4:	6914      	ldr	r4, [r2, #16]
 8005ee6:	3101      	adds	r1, #1
 8005ee8:	f102 0314 	add.w	r3, r2, #20
 8005eec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005ef0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005ef4:	1f05      	subs	r5, r0, #4
 8005ef6:	42a3      	cmp	r3, r4
 8005ef8:	d30c      	bcc.n	8005f14 <__copybits+0x36>
 8005efa:	1aa3      	subs	r3, r4, r2
 8005efc:	3b11      	subs	r3, #17
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	3211      	adds	r2, #17
 8005f04:	42a2      	cmp	r2, r4
 8005f06:	bf88      	it	hi
 8005f08:	2300      	movhi	r3, #0
 8005f0a:	4418      	add	r0, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4288      	cmp	r0, r1
 8005f10:	d305      	bcc.n	8005f1e <__copybits+0x40>
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	f853 6b04 	ldr.w	r6, [r3], #4
 8005f18:	f845 6f04 	str.w	r6, [r5, #4]!
 8005f1c:	e7eb      	b.n	8005ef6 <__copybits+0x18>
 8005f1e:	f840 3b04 	str.w	r3, [r0], #4
 8005f22:	e7f4      	b.n	8005f0e <__copybits+0x30>

08005f24 <__any_on>:
 8005f24:	f100 0214 	add.w	r2, r0, #20
 8005f28:	6900      	ldr	r0, [r0, #16]
 8005f2a:	114b      	asrs	r3, r1, #5
 8005f2c:	4298      	cmp	r0, r3
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	db11      	blt.n	8005f56 <__any_on+0x32>
 8005f32:	dd0a      	ble.n	8005f4a <__any_on+0x26>
 8005f34:	f011 011f 	ands.w	r1, r1, #31
 8005f38:	d007      	beq.n	8005f4a <__any_on+0x26>
 8005f3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005f3e:	fa24 f001 	lsr.w	r0, r4, r1
 8005f42:	fa00 f101 	lsl.w	r1, r0, r1
 8005f46:	428c      	cmp	r4, r1
 8005f48:	d10b      	bne.n	8005f62 <__any_on+0x3e>
 8005f4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d803      	bhi.n	8005f5a <__any_on+0x36>
 8005f52:	2000      	movs	r0, #0
 8005f54:	bd10      	pop	{r4, pc}
 8005f56:	4603      	mov	r3, r0
 8005f58:	e7f7      	b.n	8005f4a <__any_on+0x26>
 8005f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f5e:	2900      	cmp	r1, #0
 8005f60:	d0f5      	beq.n	8005f4e <__any_on+0x2a>
 8005f62:	2001      	movs	r0, #1
 8005f64:	e7f6      	b.n	8005f54 <__any_on+0x30>

08005f66 <sulp>:
 8005f66:	b570      	push	{r4, r5, r6, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	460d      	mov	r5, r1
 8005f6c:	ec45 4b10 	vmov	d0, r4, r5
 8005f70:	4616      	mov	r6, r2
 8005f72:	f7ff feb7 	bl	8005ce4 <__ulp>
 8005f76:	ec51 0b10 	vmov	r0, r1, d0
 8005f7a:	b17e      	cbz	r6, 8005f9c <sulp+0x36>
 8005f7c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dd09      	ble.n	8005f9c <sulp+0x36>
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f8e:	2400      	movs	r4, #0
 8005f90:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f94:	4622      	mov	r2, r4
 8005f96:	462b      	mov	r3, r5
 8005f98:	f7fa fb36 	bl	8000608 <__aeabi_dmul>
 8005f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005fa0 <_strtod_l>:
 8005fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa4:	ed2d 8b02 	vpush	{d8}
 8005fa8:	b09b      	sub	sp, #108	; 0x6c
 8005faa:	4604      	mov	r4, r0
 8005fac:	9213      	str	r2, [sp, #76]	; 0x4c
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9216      	str	r2, [sp, #88]	; 0x58
 8005fb2:	460d      	mov	r5, r1
 8005fb4:	f04f 0800 	mov.w	r8, #0
 8005fb8:	f04f 0900 	mov.w	r9, #0
 8005fbc:	460a      	mov	r2, r1
 8005fbe:	9215      	str	r2, [sp, #84]	; 0x54
 8005fc0:	7811      	ldrb	r1, [r2, #0]
 8005fc2:	292b      	cmp	r1, #43	; 0x2b
 8005fc4:	d04c      	beq.n	8006060 <_strtod_l+0xc0>
 8005fc6:	d83a      	bhi.n	800603e <_strtod_l+0x9e>
 8005fc8:	290d      	cmp	r1, #13
 8005fca:	d834      	bhi.n	8006036 <_strtod_l+0x96>
 8005fcc:	2908      	cmp	r1, #8
 8005fce:	d834      	bhi.n	800603a <_strtod_l+0x9a>
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	d03d      	beq.n	8006050 <_strtod_l+0xb0>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	920a      	str	r2, [sp, #40]	; 0x28
 8005fd8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8005fda:	7832      	ldrb	r2, [r6, #0]
 8005fdc:	2a30      	cmp	r2, #48	; 0x30
 8005fde:	f040 80b4 	bne.w	800614a <_strtod_l+0x1aa>
 8005fe2:	7872      	ldrb	r2, [r6, #1]
 8005fe4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005fe8:	2a58      	cmp	r2, #88	; 0x58
 8005fea:	d170      	bne.n	80060ce <_strtod_l+0x12e>
 8005fec:	9302      	str	r3, [sp, #8]
 8005fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	ab16      	add	r3, sp, #88	; 0x58
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	4a8e      	ldr	r2, [pc, #568]	; (8006230 <_strtod_l+0x290>)
 8005ff8:	ab17      	add	r3, sp, #92	; 0x5c
 8005ffa:	a915      	add	r1, sp, #84	; 0x54
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f001 fb17 	bl	8007630 <__gethex>
 8006002:	f010 070f 	ands.w	r7, r0, #15
 8006006:	4605      	mov	r5, r0
 8006008:	d005      	beq.n	8006016 <_strtod_l+0x76>
 800600a:	2f06      	cmp	r7, #6
 800600c:	d12a      	bne.n	8006064 <_strtod_l+0xc4>
 800600e:	3601      	adds	r6, #1
 8006010:	2300      	movs	r3, #0
 8006012:	9615      	str	r6, [sp, #84]	; 0x54
 8006014:	930a      	str	r3, [sp, #40]	; 0x28
 8006016:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 857f 	bne.w	8006b1c <_strtod_l+0xb7c>
 800601e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006020:	b1db      	cbz	r3, 800605a <_strtod_l+0xba>
 8006022:	4642      	mov	r2, r8
 8006024:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006028:	ec43 2b10 	vmov	d0, r2, r3
 800602c:	b01b      	add	sp, #108	; 0x6c
 800602e:	ecbd 8b02 	vpop	{d8}
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	2920      	cmp	r1, #32
 8006038:	d1cc      	bne.n	8005fd4 <_strtod_l+0x34>
 800603a:	3201      	adds	r2, #1
 800603c:	e7bf      	b.n	8005fbe <_strtod_l+0x1e>
 800603e:	292d      	cmp	r1, #45	; 0x2d
 8006040:	d1c8      	bne.n	8005fd4 <_strtod_l+0x34>
 8006042:	2101      	movs	r1, #1
 8006044:	910a      	str	r1, [sp, #40]	; 0x28
 8006046:	1c51      	adds	r1, r2, #1
 8006048:	9115      	str	r1, [sp, #84]	; 0x54
 800604a:	7852      	ldrb	r2, [r2, #1]
 800604c:	2a00      	cmp	r2, #0
 800604e:	d1c3      	bne.n	8005fd8 <_strtod_l+0x38>
 8006050:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006052:	9515      	str	r5, [sp, #84]	; 0x54
 8006054:	2b00      	cmp	r3, #0
 8006056:	f040 855f 	bne.w	8006b18 <_strtod_l+0xb78>
 800605a:	4642      	mov	r2, r8
 800605c:	464b      	mov	r3, r9
 800605e:	e7e3      	b.n	8006028 <_strtod_l+0x88>
 8006060:	2100      	movs	r1, #0
 8006062:	e7ef      	b.n	8006044 <_strtod_l+0xa4>
 8006064:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006066:	b13a      	cbz	r2, 8006078 <_strtod_l+0xd8>
 8006068:	2135      	movs	r1, #53	; 0x35
 800606a:	a818      	add	r0, sp, #96	; 0x60
 800606c:	f7ff ff37 	bl	8005ede <__copybits>
 8006070:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff fb0a 	bl	800568c <_Bfree>
 8006078:	3f01      	subs	r7, #1
 800607a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800607c:	2f04      	cmp	r7, #4
 800607e:	d806      	bhi.n	800608e <_strtod_l+0xee>
 8006080:	e8df f007 	tbb	[pc, r7]
 8006084:	201d0314 	.word	0x201d0314
 8006088:	14          	.byte	0x14
 8006089:	00          	.byte	0x00
 800608a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800608e:	05e9      	lsls	r1, r5, #23
 8006090:	bf48      	it	mi
 8006092:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006096:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800609a:	0d1b      	lsrs	r3, r3, #20
 800609c:	051b      	lsls	r3, r3, #20
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1b9      	bne.n	8006016 <_strtod_l+0x76>
 80060a2:	f7fe fb07 	bl	80046b4 <__errno>
 80060a6:	2322      	movs	r3, #34	; 0x22
 80060a8:	6003      	str	r3, [r0, #0]
 80060aa:	e7b4      	b.n	8006016 <_strtod_l+0x76>
 80060ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80060b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80060bc:	e7e7      	b.n	800608e <_strtod_l+0xee>
 80060be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006238 <_strtod_l+0x298>
 80060c2:	e7e4      	b.n	800608e <_strtod_l+0xee>
 80060c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80060c8:	f04f 38ff 	mov.w	r8, #4294967295
 80060cc:	e7df      	b.n	800608e <_strtod_l+0xee>
 80060ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	9215      	str	r2, [sp, #84]	; 0x54
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b30      	cmp	r3, #48	; 0x30
 80060d8:	d0f9      	beq.n	80060ce <_strtod_l+0x12e>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d09b      	beq.n	8006016 <_strtod_l+0x76>
 80060de:	2301      	movs	r3, #1
 80060e0:	f04f 0a00 	mov.w	sl, #0
 80060e4:	9304      	str	r3, [sp, #16]
 80060e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80060e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80060ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80060ee:	46d3      	mov	fp, sl
 80060f0:	220a      	movs	r2, #10
 80060f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80060f4:	7806      	ldrb	r6, [r0, #0]
 80060f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060fa:	b2d9      	uxtb	r1, r3
 80060fc:	2909      	cmp	r1, #9
 80060fe:	d926      	bls.n	800614e <_strtod_l+0x1ae>
 8006100:	494c      	ldr	r1, [pc, #304]	; (8006234 <_strtod_l+0x294>)
 8006102:	2201      	movs	r2, #1
 8006104:	f001 f9c0 	bl	8007488 <strncmp>
 8006108:	2800      	cmp	r0, #0
 800610a:	d030      	beq.n	800616e <_strtod_l+0x1ce>
 800610c:	2000      	movs	r0, #0
 800610e:	4632      	mov	r2, r6
 8006110:	9005      	str	r0, [sp, #20]
 8006112:	465e      	mov	r6, fp
 8006114:	4603      	mov	r3, r0
 8006116:	2a65      	cmp	r2, #101	; 0x65
 8006118:	d001      	beq.n	800611e <_strtod_l+0x17e>
 800611a:	2a45      	cmp	r2, #69	; 0x45
 800611c:	d113      	bne.n	8006146 <_strtod_l+0x1a6>
 800611e:	b91e      	cbnz	r6, 8006128 <_strtod_l+0x188>
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	4302      	orrs	r2, r0
 8006124:	d094      	beq.n	8006050 <_strtod_l+0xb0>
 8006126:	2600      	movs	r6, #0
 8006128:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800612a:	1c6a      	adds	r2, r5, #1
 800612c:	9215      	str	r2, [sp, #84]	; 0x54
 800612e:	786a      	ldrb	r2, [r5, #1]
 8006130:	2a2b      	cmp	r2, #43	; 0x2b
 8006132:	d074      	beq.n	800621e <_strtod_l+0x27e>
 8006134:	2a2d      	cmp	r2, #45	; 0x2d
 8006136:	d078      	beq.n	800622a <_strtod_l+0x28a>
 8006138:	f04f 0c00 	mov.w	ip, #0
 800613c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006140:	2909      	cmp	r1, #9
 8006142:	d97f      	bls.n	8006244 <_strtod_l+0x2a4>
 8006144:	9515      	str	r5, [sp, #84]	; 0x54
 8006146:	2700      	movs	r7, #0
 8006148:	e09e      	b.n	8006288 <_strtod_l+0x2e8>
 800614a:	2300      	movs	r3, #0
 800614c:	e7c8      	b.n	80060e0 <_strtod_l+0x140>
 800614e:	f1bb 0f08 	cmp.w	fp, #8
 8006152:	bfd8      	it	le
 8006154:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006156:	f100 0001 	add.w	r0, r0, #1
 800615a:	bfda      	itte	le
 800615c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006160:	9309      	strle	r3, [sp, #36]	; 0x24
 8006162:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006166:	f10b 0b01 	add.w	fp, fp, #1
 800616a:	9015      	str	r0, [sp, #84]	; 0x54
 800616c:	e7c1      	b.n	80060f2 <_strtod_l+0x152>
 800616e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	9215      	str	r2, [sp, #84]	; 0x54
 8006174:	785a      	ldrb	r2, [r3, #1]
 8006176:	f1bb 0f00 	cmp.w	fp, #0
 800617a:	d037      	beq.n	80061ec <_strtod_l+0x24c>
 800617c:	9005      	str	r0, [sp, #20]
 800617e:	465e      	mov	r6, fp
 8006180:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006184:	2b09      	cmp	r3, #9
 8006186:	d912      	bls.n	80061ae <_strtod_l+0x20e>
 8006188:	2301      	movs	r3, #1
 800618a:	e7c4      	b.n	8006116 <_strtod_l+0x176>
 800618c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	9215      	str	r2, [sp, #84]	; 0x54
 8006192:	785a      	ldrb	r2, [r3, #1]
 8006194:	3001      	adds	r0, #1
 8006196:	2a30      	cmp	r2, #48	; 0x30
 8006198:	d0f8      	beq.n	800618c <_strtod_l+0x1ec>
 800619a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800619e:	2b08      	cmp	r3, #8
 80061a0:	f200 84c1 	bhi.w	8006b26 <_strtod_l+0xb86>
 80061a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a6:	9005      	str	r0, [sp, #20]
 80061a8:	2000      	movs	r0, #0
 80061aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ac:	4606      	mov	r6, r0
 80061ae:	3a30      	subs	r2, #48	; 0x30
 80061b0:	f100 0301 	add.w	r3, r0, #1
 80061b4:	d014      	beq.n	80061e0 <_strtod_l+0x240>
 80061b6:	9905      	ldr	r1, [sp, #20]
 80061b8:	4419      	add	r1, r3
 80061ba:	9105      	str	r1, [sp, #20]
 80061bc:	4633      	mov	r3, r6
 80061be:	eb00 0c06 	add.w	ip, r0, r6
 80061c2:	210a      	movs	r1, #10
 80061c4:	4563      	cmp	r3, ip
 80061c6:	d113      	bne.n	80061f0 <_strtod_l+0x250>
 80061c8:	1833      	adds	r3, r6, r0
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	f106 0601 	add.w	r6, r6, #1
 80061d0:	4406      	add	r6, r0
 80061d2:	dc1a      	bgt.n	800620a <_strtod_l+0x26a>
 80061d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d6:	230a      	movs	r3, #10
 80061d8:	fb03 2301 	mla	r3, r3, r1, r2
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	2300      	movs	r3, #0
 80061e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061e2:	1c51      	adds	r1, r2, #1
 80061e4:	9115      	str	r1, [sp, #84]	; 0x54
 80061e6:	7852      	ldrb	r2, [r2, #1]
 80061e8:	4618      	mov	r0, r3
 80061ea:	e7c9      	b.n	8006180 <_strtod_l+0x1e0>
 80061ec:	4658      	mov	r0, fp
 80061ee:	e7d2      	b.n	8006196 <_strtod_l+0x1f6>
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	f103 0301 	add.w	r3, r3, #1
 80061f6:	dc03      	bgt.n	8006200 <_strtod_l+0x260>
 80061f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80061fa:	434f      	muls	r7, r1
 80061fc:	9709      	str	r7, [sp, #36]	; 0x24
 80061fe:	e7e1      	b.n	80061c4 <_strtod_l+0x224>
 8006200:	2b10      	cmp	r3, #16
 8006202:	bfd8      	it	le
 8006204:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006208:	e7dc      	b.n	80061c4 <_strtod_l+0x224>
 800620a:	2e10      	cmp	r6, #16
 800620c:	bfdc      	itt	le
 800620e:	230a      	movle	r3, #10
 8006210:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006214:	e7e3      	b.n	80061de <_strtod_l+0x23e>
 8006216:	2300      	movs	r3, #0
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	2301      	movs	r3, #1
 800621c:	e780      	b.n	8006120 <_strtod_l+0x180>
 800621e:	f04f 0c00 	mov.w	ip, #0
 8006222:	1caa      	adds	r2, r5, #2
 8006224:	9215      	str	r2, [sp, #84]	; 0x54
 8006226:	78aa      	ldrb	r2, [r5, #2]
 8006228:	e788      	b.n	800613c <_strtod_l+0x19c>
 800622a:	f04f 0c01 	mov.w	ip, #1
 800622e:	e7f8      	b.n	8006222 <_strtod_l+0x282>
 8006230:	080080f8 	.word	0x080080f8
 8006234:	080080f4 	.word	0x080080f4
 8006238:	7ff00000 	.word	0x7ff00000
 800623c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800623e:	1c51      	adds	r1, r2, #1
 8006240:	9115      	str	r1, [sp, #84]	; 0x54
 8006242:	7852      	ldrb	r2, [r2, #1]
 8006244:	2a30      	cmp	r2, #48	; 0x30
 8006246:	d0f9      	beq.n	800623c <_strtod_l+0x29c>
 8006248:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800624c:	2908      	cmp	r1, #8
 800624e:	f63f af7a 	bhi.w	8006146 <_strtod_l+0x1a6>
 8006252:	3a30      	subs	r2, #48	; 0x30
 8006254:	9208      	str	r2, [sp, #32]
 8006256:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006258:	920c      	str	r2, [sp, #48]	; 0x30
 800625a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800625c:	1c57      	adds	r7, r2, #1
 800625e:	9715      	str	r7, [sp, #84]	; 0x54
 8006260:	7852      	ldrb	r2, [r2, #1]
 8006262:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006266:	f1be 0f09 	cmp.w	lr, #9
 800626a:	d938      	bls.n	80062de <_strtod_l+0x33e>
 800626c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800626e:	1a7f      	subs	r7, r7, r1
 8006270:	2f08      	cmp	r7, #8
 8006272:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006276:	dc03      	bgt.n	8006280 <_strtod_l+0x2e0>
 8006278:	9908      	ldr	r1, [sp, #32]
 800627a:	428f      	cmp	r7, r1
 800627c:	bfa8      	it	ge
 800627e:	460f      	movge	r7, r1
 8006280:	f1bc 0f00 	cmp.w	ip, #0
 8006284:	d000      	beq.n	8006288 <_strtod_l+0x2e8>
 8006286:	427f      	negs	r7, r7
 8006288:	2e00      	cmp	r6, #0
 800628a:	d14f      	bne.n	800632c <_strtod_l+0x38c>
 800628c:	9904      	ldr	r1, [sp, #16]
 800628e:	4301      	orrs	r1, r0
 8006290:	f47f aec1 	bne.w	8006016 <_strtod_l+0x76>
 8006294:	2b00      	cmp	r3, #0
 8006296:	f47f aedb 	bne.w	8006050 <_strtod_l+0xb0>
 800629a:	2a69      	cmp	r2, #105	; 0x69
 800629c:	d029      	beq.n	80062f2 <_strtod_l+0x352>
 800629e:	dc26      	bgt.n	80062ee <_strtod_l+0x34e>
 80062a0:	2a49      	cmp	r2, #73	; 0x49
 80062a2:	d026      	beq.n	80062f2 <_strtod_l+0x352>
 80062a4:	2a4e      	cmp	r2, #78	; 0x4e
 80062a6:	f47f aed3 	bne.w	8006050 <_strtod_l+0xb0>
 80062aa:	499b      	ldr	r1, [pc, #620]	; (8006518 <_strtod_l+0x578>)
 80062ac:	a815      	add	r0, sp, #84	; 0x54
 80062ae:	f001 fbff 	bl	8007ab0 <__match>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f43f aecc 	beq.w	8006050 <_strtod_l+0xb0>
 80062b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b28      	cmp	r3, #40	; 0x28
 80062be:	d12f      	bne.n	8006320 <_strtod_l+0x380>
 80062c0:	4996      	ldr	r1, [pc, #600]	; (800651c <_strtod_l+0x57c>)
 80062c2:	aa18      	add	r2, sp, #96	; 0x60
 80062c4:	a815      	add	r0, sp, #84	; 0x54
 80062c6:	f001 fc07 	bl	8007ad8 <__hexnan>
 80062ca:	2805      	cmp	r0, #5
 80062cc:	d128      	bne.n	8006320 <_strtod_l+0x380>
 80062ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80062d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80062dc:	e69b      	b.n	8006016 <_strtod_l+0x76>
 80062de:	9f08      	ldr	r7, [sp, #32]
 80062e0:	210a      	movs	r1, #10
 80062e2:	fb01 2107 	mla	r1, r1, r7, r2
 80062e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80062ea:	9208      	str	r2, [sp, #32]
 80062ec:	e7b5      	b.n	800625a <_strtod_l+0x2ba>
 80062ee:	2a6e      	cmp	r2, #110	; 0x6e
 80062f0:	e7d9      	b.n	80062a6 <_strtod_l+0x306>
 80062f2:	498b      	ldr	r1, [pc, #556]	; (8006520 <_strtod_l+0x580>)
 80062f4:	a815      	add	r0, sp, #84	; 0x54
 80062f6:	f001 fbdb 	bl	8007ab0 <__match>
 80062fa:	2800      	cmp	r0, #0
 80062fc:	f43f aea8 	beq.w	8006050 <_strtod_l+0xb0>
 8006300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006302:	4988      	ldr	r1, [pc, #544]	; (8006524 <_strtod_l+0x584>)
 8006304:	3b01      	subs	r3, #1
 8006306:	a815      	add	r0, sp, #84	; 0x54
 8006308:	9315      	str	r3, [sp, #84]	; 0x54
 800630a:	f001 fbd1 	bl	8007ab0 <__match>
 800630e:	b910      	cbnz	r0, 8006316 <_strtod_l+0x376>
 8006310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006312:	3301      	adds	r3, #1
 8006314:	9315      	str	r3, [sp, #84]	; 0x54
 8006316:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006534 <_strtod_l+0x594>
 800631a:	f04f 0800 	mov.w	r8, #0
 800631e:	e67a      	b.n	8006016 <_strtod_l+0x76>
 8006320:	4881      	ldr	r0, [pc, #516]	; (8006528 <_strtod_l+0x588>)
 8006322:	f001 f8e1 	bl	80074e8 <nan>
 8006326:	ec59 8b10 	vmov	r8, r9, d0
 800632a:	e674      	b.n	8006016 <_strtod_l+0x76>
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006330:	1afb      	subs	r3, r7, r3
 8006332:	f1bb 0f00 	cmp.w	fp, #0
 8006336:	bf08      	it	eq
 8006338:	46b3      	moveq	fp, r6
 800633a:	2e10      	cmp	r6, #16
 800633c:	9308      	str	r3, [sp, #32]
 800633e:	4635      	mov	r5, r6
 8006340:	bfa8      	it	ge
 8006342:	2510      	movge	r5, #16
 8006344:	f7fa f8e6 	bl	8000514 <__aeabi_ui2d>
 8006348:	2e09      	cmp	r6, #9
 800634a:	4680      	mov	r8, r0
 800634c:	4689      	mov	r9, r1
 800634e:	dd13      	ble.n	8006378 <_strtod_l+0x3d8>
 8006350:	4b76      	ldr	r3, [pc, #472]	; (800652c <_strtod_l+0x58c>)
 8006352:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006356:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800635a:	f7fa f955 	bl	8000608 <__aeabi_dmul>
 800635e:	4680      	mov	r8, r0
 8006360:	4650      	mov	r0, sl
 8006362:	4689      	mov	r9, r1
 8006364:	f7fa f8d6 	bl	8000514 <__aeabi_ui2d>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4640      	mov	r0, r8
 800636e:	4649      	mov	r1, r9
 8006370:	f7f9 ff94 	bl	800029c <__adddf3>
 8006374:	4680      	mov	r8, r0
 8006376:	4689      	mov	r9, r1
 8006378:	2e0f      	cmp	r6, #15
 800637a:	dc38      	bgt.n	80063ee <_strtod_l+0x44e>
 800637c:	9b08      	ldr	r3, [sp, #32]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f43f ae49 	beq.w	8006016 <_strtod_l+0x76>
 8006384:	dd24      	ble.n	80063d0 <_strtod_l+0x430>
 8006386:	2b16      	cmp	r3, #22
 8006388:	dc0b      	bgt.n	80063a2 <_strtod_l+0x402>
 800638a:	4968      	ldr	r1, [pc, #416]	; (800652c <_strtod_l+0x58c>)
 800638c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	f7fa f936 	bl	8000608 <__aeabi_dmul>
 800639c:	4680      	mov	r8, r0
 800639e:	4689      	mov	r9, r1
 80063a0:	e639      	b.n	8006016 <_strtod_l+0x76>
 80063a2:	9a08      	ldr	r2, [sp, #32]
 80063a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80063a8:	4293      	cmp	r3, r2
 80063aa:	db20      	blt.n	80063ee <_strtod_l+0x44e>
 80063ac:	4c5f      	ldr	r4, [pc, #380]	; (800652c <_strtod_l+0x58c>)
 80063ae:	f1c6 060f 	rsb	r6, r6, #15
 80063b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80063b6:	4642      	mov	r2, r8
 80063b8:	464b      	mov	r3, r9
 80063ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063be:	f7fa f923 	bl	8000608 <__aeabi_dmul>
 80063c2:	9b08      	ldr	r3, [sp, #32]
 80063c4:	1b9e      	subs	r6, r3, r6
 80063c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80063ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063ce:	e7e3      	b.n	8006398 <_strtod_l+0x3f8>
 80063d0:	9b08      	ldr	r3, [sp, #32]
 80063d2:	3316      	adds	r3, #22
 80063d4:	db0b      	blt.n	80063ee <_strtod_l+0x44e>
 80063d6:	9b05      	ldr	r3, [sp, #20]
 80063d8:	1bdf      	subs	r7, r3, r7
 80063da:	4b54      	ldr	r3, [pc, #336]	; (800652c <_strtod_l+0x58c>)
 80063dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80063e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	f7fa fa38 	bl	800085c <__aeabi_ddiv>
 80063ec:	e7d6      	b.n	800639c <_strtod_l+0x3fc>
 80063ee:	9b08      	ldr	r3, [sp, #32]
 80063f0:	1b75      	subs	r5, r6, r5
 80063f2:	441d      	add	r5, r3
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	dd70      	ble.n	80064da <_strtod_l+0x53a>
 80063f8:	f015 030f 	ands.w	r3, r5, #15
 80063fc:	d00a      	beq.n	8006414 <_strtod_l+0x474>
 80063fe:	494b      	ldr	r1, [pc, #300]	; (800652c <_strtod_l+0x58c>)
 8006400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	4680      	mov	r8, r0
 8006412:	4689      	mov	r9, r1
 8006414:	f035 050f 	bics.w	r5, r5, #15
 8006418:	d04d      	beq.n	80064b6 <_strtod_l+0x516>
 800641a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800641e:	dd22      	ble.n	8006466 <_strtod_l+0x4c6>
 8006420:	2500      	movs	r5, #0
 8006422:	46ab      	mov	fp, r5
 8006424:	9509      	str	r5, [sp, #36]	; 0x24
 8006426:	9505      	str	r5, [sp, #20]
 8006428:	2322      	movs	r3, #34	; 0x22
 800642a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006534 <_strtod_l+0x594>
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	f04f 0800 	mov.w	r8, #0
 8006434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006436:	2b00      	cmp	r3, #0
 8006438:	f43f aded 	beq.w	8006016 <_strtod_l+0x76>
 800643c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800643e:	4620      	mov	r0, r4
 8006440:	f7ff f924 	bl	800568c <_Bfree>
 8006444:	9905      	ldr	r1, [sp, #20]
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff f920 	bl	800568c <_Bfree>
 800644c:	4659      	mov	r1, fp
 800644e:	4620      	mov	r0, r4
 8006450:	f7ff f91c 	bl	800568c <_Bfree>
 8006454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff f918 	bl	800568c <_Bfree>
 800645c:	4629      	mov	r1, r5
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff f914 	bl	800568c <_Bfree>
 8006464:	e5d7      	b.n	8006016 <_strtod_l+0x76>
 8006466:	4b32      	ldr	r3, [pc, #200]	; (8006530 <_strtod_l+0x590>)
 8006468:	9304      	str	r3, [sp, #16]
 800646a:	2300      	movs	r3, #0
 800646c:	112d      	asrs	r5, r5, #4
 800646e:	4640      	mov	r0, r8
 8006470:	4649      	mov	r1, r9
 8006472:	469a      	mov	sl, r3
 8006474:	2d01      	cmp	r5, #1
 8006476:	dc21      	bgt.n	80064bc <_strtod_l+0x51c>
 8006478:	b10b      	cbz	r3, 800647e <_strtod_l+0x4de>
 800647a:	4680      	mov	r8, r0
 800647c:	4689      	mov	r9, r1
 800647e:	492c      	ldr	r1, [pc, #176]	; (8006530 <_strtod_l+0x590>)
 8006480:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006484:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006490:	f7fa f8ba 	bl	8000608 <__aeabi_dmul>
 8006494:	4b27      	ldr	r3, [pc, #156]	; (8006534 <_strtod_l+0x594>)
 8006496:	460a      	mov	r2, r1
 8006498:	400b      	ands	r3, r1
 800649a:	4927      	ldr	r1, [pc, #156]	; (8006538 <_strtod_l+0x598>)
 800649c:	428b      	cmp	r3, r1
 800649e:	4680      	mov	r8, r0
 80064a0:	d8be      	bhi.n	8006420 <_strtod_l+0x480>
 80064a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064a6:	428b      	cmp	r3, r1
 80064a8:	bf86      	itte	hi
 80064aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800653c <_strtod_l+0x59c>
 80064ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80064b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80064b6:	2300      	movs	r3, #0
 80064b8:	9304      	str	r3, [sp, #16]
 80064ba:	e07b      	b.n	80065b4 <_strtod_l+0x614>
 80064bc:	07ea      	lsls	r2, r5, #31
 80064be:	d505      	bpl.n	80064cc <_strtod_l+0x52c>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c6:	f7fa f89f 	bl	8000608 <__aeabi_dmul>
 80064ca:	2301      	movs	r3, #1
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	3208      	adds	r2, #8
 80064d0:	f10a 0a01 	add.w	sl, sl, #1
 80064d4:	106d      	asrs	r5, r5, #1
 80064d6:	9204      	str	r2, [sp, #16]
 80064d8:	e7cc      	b.n	8006474 <_strtod_l+0x4d4>
 80064da:	d0ec      	beq.n	80064b6 <_strtod_l+0x516>
 80064dc:	426d      	negs	r5, r5
 80064de:	f015 020f 	ands.w	r2, r5, #15
 80064e2:	d00a      	beq.n	80064fa <_strtod_l+0x55a>
 80064e4:	4b11      	ldr	r3, [pc, #68]	; (800652c <_strtod_l+0x58c>)
 80064e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ea:	4640      	mov	r0, r8
 80064ec:	4649      	mov	r1, r9
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7fa f9b3 	bl	800085c <__aeabi_ddiv>
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	112d      	asrs	r5, r5, #4
 80064fc:	d0db      	beq.n	80064b6 <_strtod_l+0x516>
 80064fe:	2d1f      	cmp	r5, #31
 8006500:	dd1e      	ble.n	8006540 <_strtod_l+0x5a0>
 8006502:	2500      	movs	r5, #0
 8006504:	46ab      	mov	fp, r5
 8006506:	9509      	str	r5, [sp, #36]	; 0x24
 8006508:	9505      	str	r5, [sp, #20]
 800650a:	2322      	movs	r3, #34	; 0x22
 800650c:	f04f 0800 	mov.w	r8, #0
 8006510:	f04f 0900 	mov.w	r9, #0
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	e78d      	b.n	8006434 <_strtod_l+0x494>
 8006518:	08007ee1 	.word	0x08007ee1
 800651c:	0800810c 	.word	0x0800810c
 8006520:	08007ed9 	.word	0x08007ed9
 8006524:	08007f10 	.word	0x08007f10
 8006528:	0800829d 	.word	0x0800829d
 800652c:	08008020 	.word	0x08008020
 8006530:	08007ff8 	.word	0x08007ff8
 8006534:	7ff00000 	.word	0x7ff00000
 8006538:	7ca00000 	.word	0x7ca00000
 800653c:	7fefffff 	.word	0x7fefffff
 8006540:	f015 0310 	ands.w	r3, r5, #16
 8006544:	bf18      	it	ne
 8006546:	236a      	movne	r3, #106	; 0x6a
 8006548:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80068ec <_strtod_l+0x94c>
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	2300      	movs	r3, #0
 8006554:	07ea      	lsls	r2, r5, #31
 8006556:	d504      	bpl.n	8006562 <_strtod_l+0x5c2>
 8006558:	e9da 2300 	ldrd	r2, r3, [sl]
 800655c:	f7fa f854 	bl	8000608 <__aeabi_dmul>
 8006560:	2301      	movs	r3, #1
 8006562:	106d      	asrs	r5, r5, #1
 8006564:	f10a 0a08 	add.w	sl, sl, #8
 8006568:	d1f4      	bne.n	8006554 <_strtod_l+0x5b4>
 800656a:	b10b      	cbz	r3, 8006570 <_strtod_l+0x5d0>
 800656c:	4680      	mov	r8, r0
 800656e:	4689      	mov	r9, r1
 8006570:	9b04      	ldr	r3, [sp, #16]
 8006572:	b1bb      	cbz	r3, 80065a4 <_strtod_l+0x604>
 8006574:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006578:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800657c:	2b00      	cmp	r3, #0
 800657e:	4649      	mov	r1, r9
 8006580:	dd10      	ble.n	80065a4 <_strtod_l+0x604>
 8006582:	2b1f      	cmp	r3, #31
 8006584:	f340 811e 	ble.w	80067c4 <_strtod_l+0x824>
 8006588:	2b34      	cmp	r3, #52	; 0x34
 800658a:	bfde      	ittt	le
 800658c:	f04f 33ff 	movle.w	r3, #4294967295
 8006590:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006594:	4093      	lslle	r3, r2
 8006596:	f04f 0800 	mov.w	r8, #0
 800659a:	bfcc      	ite	gt
 800659c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80065a0:	ea03 0901 	andle.w	r9, r3, r1
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	4640      	mov	r0, r8
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	d1a6      	bne.n	8006502 <_strtod_l+0x562>
 80065b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065ba:	4633      	mov	r3, r6
 80065bc:	465a      	mov	r2, fp
 80065be:	4620      	mov	r0, r4
 80065c0:	f7ff f8cc 	bl	800575c <__s2b>
 80065c4:	9009      	str	r0, [sp, #36]	; 0x24
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f af2a 	beq.w	8006420 <_strtod_l+0x480>
 80065cc:	9a08      	ldr	r2, [sp, #32]
 80065ce:	9b05      	ldr	r3, [sp, #20]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	eba3 0307 	sub.w	r3, r3, r7
 80065d6:	bfa8      	it	ge
 80065d8:	2300      	movge	r3, #0
 80065da:	930c      	str	r3, [sp, #48]	; 0x30
 80065dc:	2500      	movs	r5, #0
 80065de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80065e2:	9312      	str	r3, [sp, #72]	; 0x48
 80065e4:	46ab      	mov	fp, r5
 80065e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065e8:	4620      	mov	r0, r4
 80065ea:	6859      	ldr	r1, [r3, #4]
 80065ec:	f7ff f80e 	bl	800560c <_Balloc>
 80065f0:	9005      	str	r0, [sp, #20]
 80065f2:	2800      	cmp	r0, #0
 80065f4:	f43f af18 	beq.w	8006428 <_strtod_l+0x488>
 80065f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	3202      	adds	r2, #2
 80065fe:	f103 010c 	add.w	r1, r3, #12
 8006602:	0092      	lsls	r2, r2, #2
 8006604:	300c      	adds	r0, #12
 8006606:	f000 ff61 	bl	80074cc <memcpy>
 800660a:	ec49 8b10 	vmov	d0, r8, r9
 800660e:	aa18      	add	r2, sp, #96	; 0x60
 8006610:	a917      	add	r1, sp, #92	; 0x5c
 8006612:	4620      	mov	r0, r4
 8006614:	f7ff fbd6 	bl	8005dc4 <__d2b>
 8006618:	ec49 8b18 	vmov	d8, r8, r9
 800661c:	9016      	str	r0, [sp, #88]	; 0x58
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f af02 	beq.w	8006428 <_strtod_l+0x488>
 8006624:	2101      	movs	r1, #1
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff f930 	bl	800588c <__i2b>
 800662c:	4683      	mov	fp, r0
 800662e:	2800      	cmp	r0, #0
 8006630:	f43f aefa 	beq.w	8006428 <_strtod_l+0x488>
 8006634:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006636:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006638:	2e00      	cmp	r6, #0
 800663a:	bfab      	itete	ge
 800663c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800663e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006640:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006642:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006646:	bfac      	ite	ge
 8006648:	eb06 0a03 	addge.w	sl, r6, r3
 800664c:	1b9f      	sublt	r7, r3, r6
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	1af6      	subs	r6, r6, r3
 8006652:	4416      	add	r6, r2
 8006654:	4ba0      	ldr	r3, [pc, #640]	; (80068d8 <_strtod_l+0x938>)
 8006656:	3e01      	subs	r6, #1
 8006658:	429e      	cmp	r6, r3
 800665a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800665e:	f280 80c4 	bge.w	80067ea <_strtod_l+0x84a>
 8006662:	1b9b      	subs	r3, r3, r6
 8006664:	2b1f      	cmp	r3, #31
 8006666:	eba2 0203 	sub.w	r2, r2, r3
 800666a:	f04f 0101 	mov.w	r1, #1
 800666e:	f300 80b0 	bgt.w	80067d2 <_strtod_l+0x832>
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	930e      	str	r3, [sp, #56]	; 0x38
 8006678:	2300      	movs	r3, #0
 800667a:	930d      	str	r3, [sp, #52]	; 0x34
 800667c:	eb0a 0602 	add.w	r6, sl, r2
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	45b2      	cmp	sl, r6
 8006684:	4417      	add	r7, r2
 8006686:	441f      	add	r7, r3
 8006688:	4653      	mov	r3, sl
 800668a:	bfa8      	it	ge
 800668c:	4633      	movge	r3, r6
 800668e:	42bb      	cmp	r3, r7
 8006690:	bfa8      	it	ge
 8006692:	463b      	movge	r3, r7
 8006694:	2b00      	cmp	r3, #0
 8006696:	bfc2      	ittt	gt
 8006698:	1af6      	subgt	r6, r6, r3
 800669a:	1aff      	subgt	r7, r7, r3
 800669c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80066a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dd17      	ble.n	80066d6 <_strtod_l+0x736>
 80066a6:	4659      	mov	r1, fp
 80066a8:	461a      	mov	r2, r3
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff f9ae 	bl	8005a0c <__pow5mult>
 80066b0:	4683      	mov	fp, r0
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f aeb8 	beq.w	8006428 <_strtod_l+0x488>
 80066b8:	4601      	mov	r1, r0
 80066ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff f8fb 	bl	80058b8 <__multiply>
 80066c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80066c4:	2800      	cmp	r0, #0
 80066c6:	f43f aeaf 	beq.w	8006428 <_strtod_l+0x488>
 80066ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7fe ffdd 	bl	800568c <_Bfree>
 80066d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066d4:	9316      	str	r3, [sp, #88]	; 0x58
 80066d6:	2e00      	cmp	r6, #0
 80066d8:	f300 808c 	bgt.w	80067f4 <_strtod_l+0x854>
 80066dc:	9b08      	ldr	r3, [sp, #32]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	dd08      	ble.n	80066f4 <_strtod_l+0x754>
 80066e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066e4:	9905      	ldr	r1, [sp, #20]
 80066e6:	4620      	mov	r0, r4
 80066e8:	f7ff f990 	bl	8005a0c <__pow5mult>
 80066ec:	9005      	str	r0, [sp, #20]
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f43f ae9a 	beq.w	8006428 <_strtod_l+0x488>
 80066f4:	2f00      	cmp	r7, #0
 80066f6:	dd08      	ble.n	800670a <_strtod_l+0x76a>
 80066f8:	9905      	ldr	r1, [sp, #20]
 80066fa:	463a      	mov	r2, r7
 80066fc:	4620      	mov	r0, r4
 80066fe:	f7ff f9df 	bl	8005ac0 <__lshift>
 8006702:	9005      	str	r0, [sp, #20]
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f ae8f 	beq.w	8006428 <_strtod_l+0x488>
 800670a:	f1ba 0f00 	cmp.w	sl, #0
 800670e:	dd08      	ble.n	8006722 <_strtod_l+0x782>
 8006710:	4659      	mov	r1, fp
 8006712:	4652      	mov	r2, sl
 8006714:	4620      	mov	r0, r4
 8006716:	f7ff f9d3 	bl	8005ac0 <__lshift>
 800671a:	4683      	mov	fp, r0
 800671c:	2800      	cmp	r0, #0
 800671e:	f43f ae83 	beq.w	8006428 <_strtod_l+0x488>
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006726:	4620      	mov	r0, r4
 8006728:	f7ff fa52 	bl	8005bd0 <__mdiff>
 800672c:	4605      	mov	r5, r0
 800672e:	2800      	cmp	r0, #0
 8006730:	f43f ae7a 	beq.w	8006428 <_strtod_l+0x488>
 8006734:	68c3      	ldr	r3, [r0, #12]
 8006736:	930b      	str	r3, [sp, #44]	; 0x2c
 8006738:	2300      	movs	r3, #0
 800673a:	60c3      	str	r3, [r0, #12]
 800673c:	4659      	mov	r1, fp
 800673e:	f7ff fa2b 	bl	8005b98 <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	da60      	bge.n	8006808 <_strtod_l+0x868>
 8006746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006748:	ea53 0308 	orrs.w	r3, r3, r8
 800674c:	f040 8084 	bne.w	8006858 <_strtod_l+0x8b8>
 8006750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006754:	2b00      	cmp	r3, #0
 8006756:	d17f      	bne.n	8006858 <_strtod_l+0x8b8>
 8006758:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800675c:	0d1b      	lsrs	r3, r3, #20
 800675e:	051b      	lsls	r3, r3, #20
 8006760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006764:	d978      	bls.n	8006858 <_strtod_l+0x8b8>
 8006766:	696b      	ldr	r3, [r5, #20]
 8006768:	b913      	cbnz	r3, 8006770 <_strtod_l+0x7d0>
 800676a:	692b      	ldr	r3, [r5, #16]
 800676c:	2b01      	cmp	r3, #1
 800676e:	dd73      	ble.n	8006858 <_strtod_l+0x8b8>
 8006770:	4629      	mov	r1, r5
 8006772:	2201      	movs	r2, #1
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff f9a3 	bl	8005ac0 <__lshift>
 800677a:	4659      	mov	r1, fp
 800677c:	4605      	mov	r5, r0
 800677e:	f7ff fa0b 	bl	8005b98 <__mcmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	dd68      	ble.n	8006858 <_strtod_l+0x8b8>
 8006786:	9904      	ldr	r1, [sp, #16]
 8006788:	4a54      	ldr	r2, [pc, #336]	; (80068dc <_strtod_l+0x93c>)
 800678a:	464b      	mov	r3, r9
 800678c:	2900      	cmp	r1, #0
 800678e:	f000 8084 	beq.w	800689a <_strtod_l+0x8fa>
 8006792:	ea02 0109 	and.w	r1, r2, r9
 8006796:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800679a:	dc7e      	bgt.n	800689a <_strtod_l+0x8fa>
 800679c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067a0:	f77f aeb3 	ble.w	800650a <_strtod_l+0x56a>
 80067a4:	4b4e      	ldr	r3, [pc, #312]	; (80068e0 <_strtod_l+0x940>)
 80067a6:	4640      	mov	r0, r8
 80067a8:	4649      	mov	r1, r9
 80067aa:	2200      	movs	r2, #0
 80067ac:	f7f9 ff2c 	bl	8000608 <__aeabi_dmul>
 80067b0:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <_strtod_l+0x93c>)
 80067b2:	400b      	ands	r3, r1
 80067b4:	4680      	mov	r8, r0
 80067b6:	4689      	mov	r9, r1
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f47f ae3f 	bne.w	800643c <_strtod_l+0x49c>
 80067be:	2322      	movs	r3, #34	; 0x22
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	e63b      	b.n	800643c <_strtod_l+0x49c>
 80067c4:	f04f 32ff 	mov.w	r2, #4294967295
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	ea03 0808 	and.w	r8, r3, r8
 80067d0:	e6e8      	b.n	80065a4 <_strtod_l+0x604>
 80067d2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80067d6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80067da:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80067de:	36e2      	adds	r6, #226	; 0xe2
 80067e0:	fa01 f306 	lsl.w	r3, r1, r6
 80067e4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80067e8:	e748      	b.n	800667c <_strtod_l+0x6dc>
 80067ea:	2100      	movs	r1, #0
 80067ec:	2301      	movs	r3, #1
 80067ee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80067f2:	e743      	b.n	800667c <_strtod_l+0x6dc>
 80067f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80067f6:	4632      	mov	r2, r6
 80067f8:	4620      	mov	r0, r4
 80067fa:	f7ff f961 	bl	8005ac0 <__lshift>
 80067fe:	9016      	str	r0, [sp, #88]	; 0x58
 8006800:	2800      	cmp	r0, #0
 8006802:	f47f af6b 	bne.w	80066dc <_strtod_l+0x73c>
 8006806:	e60f      	b.n	8006428 <_strtod_l+0x488>
 8006808:	46ca      	mov	sl, r9
 800680a:	d171      	bne.n	80068f0 <_strtod_l+0x950>
 800680c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800680e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006812:	b352      	cbz	r2, 800686a <_strtod_l+0x8ca>
 8006814:	4a33      	ldr	r2, [pc, #204]	; (80068e4 <_strtod_l+0x944>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d12a      	bne.n	8006870 <_strtod_l+0x8d0>
 800681a:	9b04      	ldr	r3, [sp, #16]
 800681c:	4641      	mov	r1, r8
 800681e:	b1fb      	cbz	r3, 8006860 <_strtod_l+0x8c0>
 8006820:	4b2e      	ldr	r3, [pc, #184]	; (80068dc <_strtod_l+0x93c>)
 8006822:	ea09 0303 	and.w	r3, r9, r3
 8006826:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	d81a      	bhi.n	8006866 <_strtod_l+0x8c6>
 8006830:	0d1b      	lsrs	r3, r3, #20
 8006832:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006836:	fa02 f303 	lsl.w	r3, r2, r3
 800683a:	4299      	cmp	r1, r3
 800683c:	d118      	bne.n	8006870 <_strtod_l+0x8d0>
 800683e:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <_strtod_l+0x948>)
 8006840:	459a      	cmp	sl, r3
 8006842:	d102      	bne.n	800684a <_strtod_l+0x8aa>
 8006844:	3101      	adds	r1, #1
 8006846:	f43f adef 	beq.w	8006428 <_strtod_l+0x488>
 800684a:	4b24      	ldr	r3, [pc, #144]	; (80068dc <_strtod_l+0x93c>)
 800684c:	ea0a 0303 	and.w	r3, sl, r3
 8006850:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006854:	f04f 0800 	mov.w	r8, #0
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1a2      	bne.n	80067a4 <_strtod_l+0x804>
 800685e:	e5ed      	b.n	800643c <_strtod_l+0x49c>
 8006860:	f04f 33ff 	mov.w	r3, #4294967295
 8006864:	e7e9      	b.n	800683a <_strtod_l+0x89a>
 8006866:	4613      	mov	r3, r2
 8006868:	e7e7      	b.n	800683a <_strtod_l+0x89a>
 800686a:	ea53 0308 	orrs.w	r3, r3, r8
 800686e:	d08a      	beq.n	8006786 <_strtod_l+0x7e6>
 8006870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006872:	b1e3      	cbz	r3, 80068ae <_strtod_l+0x90e>
 8006874:	ea13 0f0a 	tst.w	r3, sl
 8006878:	d0ee      	beq.n	8006858 <_strtod_l+0x8b8>
 800687a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687c:	9a04      	ldr	r2, [sp, #16]
 800687e:	4640      	mov	r0, r8
 8006880:	4649      	mov	r1, r9
 8006882:	b1c3      	cbz	r3, 80068b6 <_strtod_l+0x916>
 8006884:	f7ff fb6f 	bl	8005f66 <sulp>
 8006888:	4602      	mov	r2, r0
 800688a:	460b      	mov	r3, r1
 800688c:	ec51 0b18 	vmov	r0, r1, d8
 8006890:	f7f9 fd04 	bl	800029c <__adddf3>
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	e7de      	b.n	8006858 <_strtod_l+0x8b8>
 800689a:	4013      	ands	r3, r2
 800689c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80068a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80068a8:	f04f 38ff 	mov.w	r8, #4294967295
 80068ac:	e7d4      	b.n	8006858 <_strtod_l+0x8b8>
 80068ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b0:	ea13 0f08 	tst.w	r3, r8
 80068b4:	e7e0      	b.n	8006878 <_strtod_l+0x8d8>
 80068b6:	f7ff fb56 	bl	8005f66 <sulp>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	ec51 0b18 	vmov	r0, r1, d8
 80068c2:	f7f9 fce9 	bl	8000298 <__aeabi_dsub>
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4680      	mov	r8, r0
 80068cc:	4689      	mov	r9, r1
 80068ce:	f7fa f903 	bl	8000ad8 <__aeabi_dcmpeq>
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d0c0      	beq.n	8006858 <_strtod_l+0x8b8>
 80068d6:	e618      	b.n	800650a <_strtod_l+0x56a>
 80068d8:	fffffc02 	.word	0xfffffc02
 80068dc:	7ff00000 	.word	0x7ff00000
 80068e0:	39500000 	.word	0x39500000
 80068e4:	000fffff 	.word	0x000fffff
 80068e8:	7fefffff 	.word	0x7fefffff
 80068ec:	08008120 	.word	0x08008120
 80068f0:	4659      	mov	r1, fp
 80068f2:	4628      	mov	r0, r5
 80068f4:	f7ff fac0 	bl	8005e78 <__ratio>
 80068f8:	ec57 6b10 	vmov	r6, r7, d0
 80068fc:	ee10 0a10 	vmov	r0, s0
 8006900:	2200      	movs	r2, #0
 8006902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006906:	4639      	mov	r1, r7
 8006908:	f7fa f8fa 	bl	8000b00 <__aeabi_dcmple>
 800690c:	2800      	cmp	r0, #0
 800690e:	d071      	beq.n	80069f4 <_strtod_l+0xa54>
 8006910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d17c      	bne.n	8006a10 <_strtod_l+0xa70>
 8006916:	f1b8 0f00 	cmp.w	r8, #0
 800691a:	d15a      	bne.n	80069d2 <_strtod_l+0xa32>
 800691c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006920:	2b00      	cmp	r3, #0
 8006922:	d15d      	bne.n	80069e0 <_strtod_l+0xa40>
 8006924:	4b90      	ldr	r3, [pc, #576]	; (8006b68 <_strtod_l+0xbc8>)
 8006926:	2200      	movs	r2, #0
 8006928:	4630      	mov	r0, r6
 800692a:	4639      	mov	r1, r7
 800692c:	f7fa f8de 	bl	8000aec <__aeabi_dcmplt>
 8006930:	2800      	cmp	r0, #0
 8006932:	d15c      	bne.n	80069ee <_strtod_l+0xa4e>
 8006934:	4630      	mov	r0, r6
 8006936:	4639      	mov	r1, r7
 8006938:	4b8c      	ldr	r3, [pc, #560]	; (8006b6c <_strtod_l+0xbcc>)
 800693a:	2200      	movs	r2, #0
 800693c:	f7f9 fe64 	bl	8000608 <__aeabi_dmul>
 8006940:	4606      	mov	r6, r0
 8006942:	460f      	mov	r7, r1
 8006944:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006948:	9606      	str	r6, [sp, #24]
 800694a:	9307      	str	r3, [sp, #28]
 800694c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006950:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006954:	4b86      	ldr	r3, [pc, #536]	; (8006b70 <_strtod_l+0xbd0>)
 8006956:	ea0a 0303 	and.w	r3, sl, r3
 800695a:	930d      	str	r3, [sp, #52]	; 0x34
 800695c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800695e:	4b85      	ldr	r3, [pc, #532]	; (8006b74 <_strtod_l+0xbd4>)
 8006960:	429a      	cmp	r2, r3
 8006962:	f040 8090 	bne.w	8006a86 <_strtod_l+0xae6>
 8006966:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800696a:	ec49 8b10 	vmov	d0, r8, r9
 800696e:	f7ff f9b9 	bl	8005ce4 <__ulp>
 8006972:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006976:	ec51 0b10 	vmov	r0, r1, d0
 800697a:	f7f9 fe45 	bl	8000608 <__aeabi_dmul>
 800697e:	4642      	mov	r2, r8
 8006980:	464b      	mov	r3, r9
 8006982:	f7f9 fc8b 	bl	800029c <__adddf3>
 8006986:	460b      	mov	r3, r1
 8006988:	4979      	ldr	r1, [pc, #484]	; (8006b70 <_strtod_l+0xbd0>)
 800698a:	4a7b      	ldr	r2, [pc, #492]	; (8006b78 <_strtod_l+0xbd8>)
 800698c:	4019      	ands	r1, r3
 800698e:	4291      	cmp	r1, r2
 8006990:	4680      	mov	r8, r0
 8006992:	d944      	bls.n	8006a1e <_strtod_l+0xa7e>
 8006994:	ee18 2a90 	vmov	r2, s17
 8006998:	4b78      	ldr	r3, [pc, #480]	; (8006b7c <_strtod_l+0xbdc>)
 800699a:	429a      	cmp	r2, r3
 800699c:	d104      	bne.n	80069a8 <_strtod_l+0xa08>
 800699e:	ee18 3a10 	vmov	r3, s16
 80069a2:	3301      	adds	r3, #1
 80069a4:	f43f ad40 	beq.w	8006428 <_strtod_l+0x488>
 80069a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8006b7c <_strtod_l+0xbdc>
 80069ac:	f04f 38ff 	mov.w	r8, #4294967295
 80069b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80069b2:	4620      	mov	r0, r4
 80069b4:	f7fe fe6a 	bl	800568c <_Bfree>
 80069b8:	9905      	ldr	r1, [sp, #20]
 80069ba:	4620      	mov	r0, r4
 80069bc:	f7fe fe66 	bl	800568c <_Bfree>
 80069c0:	4659      	mov	r1, fp
 80069c2:	4620      	mov	r0, r4
 80069c4:	f7fe fe62 	bl	800568c <_Bfree>
 80069c8:	4629      	mov	r1, r5
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7fe fe5e 	bl	800568c <_Bfree>
 80069d0:	e609      	b.n	80065e6 <_strtod_l+0x646>
 80069d2:	f1b8 0f01 	cmp.w	r8, #1
 80069d6:	d103      	bne.n	80069e0 <_strtod_l+0xa40>
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	f43f ad95 	beq.w	800650a <_strtod_l+0x56a>
 80069e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8006b38 <_strtod_l+0xb98>
 80069e4:	4f60      	ldr	r7, [pc, #384]	; (8006b68 <_strtod_l+0xbc8>)
 80069e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80069ea:	2600      	movs	r6, #0
 80069ec:	e7ae      	b.n	800694c <_strtod_l+0x9ac>
 80069ee:	4f5f      	ldr	r7, [pc, #380]	; (8006b6c <_strtod_l+0xbcc>)
 80069f0:	2600      	movs	r6, #0
 80069f2:	e7a7      	b.n	8006944 <_strtod_l+0x9a4>
 80069f4:	4b5d      	ldr	r3, [pc, #372]	; (8006b6c <_strtod_l+0xbcc>)
 80069f6:	4630      	mov	r0, r6
 80069f8:	4639      	mov	r1, r7
 80069fa:	2200      	movs	r2, #0
 80069fc:	f7f9 fe04 	bl	8000608 <__aeabi_dmul>
 8006a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a02:	4606      	mov	r6, r0
 8006a04:	460f      	mov	r7, r1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d09c      	beq.n	8006944 <_strtod_l+0x9a4>
 8006a0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006a0e:	e79d      	b.n	800694c <_strtod_l+0x9ac>
 8006a10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8006b40 <_strtod_l+0xba0>
 8006a14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a18:	ec57 6b17 	vmov	r6, r7, d7
 8006a1c:	e796      	b.n	800694c <_strtod_l+0x9ac>
 8006a1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	46ca      	mov	sl, r9
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1c2      	bne.n	80069b0 <_strtod_l+0xa10>
 8006a2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a30:	0d1b      	lsrs	r3, r3, #20
 8006a32:	051b      	lsls	r3, r3, #20
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d1bb      	bne.n	80069b0 <_strtod_l+0xa10>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	4639      	mov	r1, r7
 8006a3c:	f7fa f944 	bl	8000cc8 <__aeabi_d2lz>
 8006a40:	f7f9 fdb4 	bl	80005ac <__aeabi_l2d>
 8006a44:	4602      	mov	r2, r0
 8006a46:	460b      	mov	r3, r1
 8006a48:	4630      	mov	r0, r6
 8006a4a:	4639      	mov	r1, r7
 8006a4c:	f7f9 fc24 	bl	8000298 <__aeabi_dsub>
 8006a50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a56:	ea43 0308 	orr.w	r3, r3, r8
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	d054      	beq.n	8006b0c <_strtod_l+0xb6c>
 8006a62:	a339      	add	r3, pc, #228	; (adr r3, 8006b48 <_strtod_l+0xba8>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7fa f840 	bl	8000aec <__aeabi_dcmplt>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	f47f ace5 	bne.w	800643c <_strtod_l+0x49c>
 8006a72:	a337      	add	r3, pc, #220	; (adr r3, 8006b50 <_strtod_l+0xbb0>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7fa f854 	bl	8000b28 <__aeabi_dcmpgt>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d095      	beq.n	80069b0 <_strtod_l+0xa10>
 8006a84:	e4da      	b.n	800643c <_strtod_l+0x49c>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	b333      	cbz	r3, 8006ad8 <_strtod_l+0xb38>
 8006a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a90:	d822      	bhi.n	8006ad8 <_strtod_l+0xb38>
 8006a92:	a331      	add	r3, pc, #196	; (adr r3, 8006b58 <_strtod_l+0xbb8>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	4639      	mov	r1, r7
 8006a9c:	f7fa f830 	bl	8000b00 <__aeabi_dcmple>
 8006aa0:	b1a0      	cbz	r0, 8006acc <_strtod_l+0xb2c>
 8006aa2:	4639      	mov	r1, r7
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	f7fa f887 	bl	8000bb8 <__aeabi_d2uiz>
 8006aaa:	2801      	cmp	r0, #1
 8006aac:	bf38      	it	cc
 8006aae:	2001      	movcc	r0, #1
 8006ab0:	f7f9 fd30 	bl	8000514 <__aeabi_ui2d>
 8006ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	bb23      	cbnz	r3, 8006b06 <_strtod_l+0xb66>
 8006abc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac0:	9010      	str	r0, [sp, #64]	; 0x40
 8006ac2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ac8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ace:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ad8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006adc:	eeb0 0a48 	vmov.f32	s0, s16
 8006ae0:	eef0 0a68 	vmov.f32	s1, s17
 8006ae4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006ae8:	f7ff f8fc 	bl	8005ce4 <__ulp>
 8006aec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006af0:	ec53 2b10 	vmov	r2, r3, d0
 8006af4:	f7f9 fd88 	bl	8000608 <__aeabi_dmul>
 8006af8:	ec53 2b18 	vmov	r2, r3, d8
 8006afc:	f7f9 fbce 	bl	800029c <__adddf3>
 8006b00:	4680      	mov	r8, r0
 8006b02:	4689      	mov	r9, r1
 8006b04:	e78d      	b.n	8006a22 <_strtod_l+0xa82>
 8006b06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006b0a:	e7db      	b.n	8006ac4 <_strtod_l+0xb24>
 8006b0c:	a314      	add	r3, pc, #80	; (adr r3, 8006b60 <_strtod_l+0xbc0>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 ffeb 	bl	8000aec <__aeabi_dcmplt>
 8006b16:	e7b3      	b.n	8006a80 <_strtod_l+0xae0>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006b1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	f7ff ba7c 	b.w	800601e <_strtod_l+0x7e>
 8006b26:	2a65      	cmp	r2, #101	; 0x65
 8006b28:	f43f ab75 	beq.w	8006216 <_strtod_l+0x276>
 8006b2c:	2a45      	cmp	r2, #69	; 0x45
 8006b2e:	f43f ab72 	beq.w	8006216 <_strtod_l+0x276>
 8006b32:	2301      	movs	r3, #1
 8006b34:	f7ff bbaa 	b.w	800628c <_strtod_l+0x2ec>
 8006b38:	00000000 	.word	0x00000000
 8006b3c:	bff00000 	.word	0xbff00000
 8006b40:	00000000 	.word	0x00000000
 8006b44:	3ff00000 	.word	0x3ff00000
 8006b48:	94a03595 	.word	0x94a03595
 8006b4c:	3fdfffff 	.word	0x3fdfffff
 8006b50:	35afe535 	.word	0x35afe535
 8006b54:	3fe00000 	.word	0x3fe00000
 8006b58:	ffc00000 	.word	0xffc00000
 8006b5c:	41dfffff 	.word	0x41dfffff
 8006b60:	94a03595 	.word	0x94a03595
 8006b64:	3fcfffff 	.word	0x3fcfffff
 8006b68:	3ff00000 	.word	0x3ff00000
 8006b6c:	3fe00000 	.word	0x3fe00000
 8006b70:	7ff00000 	.word	0x7ff00000
 8006b74:	7fe00000 	.word	0x7fe00000
 8006b78:	7c9fffff 	.word	0x7c9fffff
 8006b7c:	7fefffff 	.word	0x7fefffff

08006b80 <_strtod_r>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	; (8006b88 <_strtod_r+0x8>)
 8006b82:	f7ff ba0d 	b.w	8005fa0 <_strtod_l>
 8006b86:	bf00      	nop
 8006b88:	20000068 	.word	0x20000068

08006b8c <_strtol_l.constprop.0>:
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b92:	d001      	beq.n	8006b98 <_strtol_l.constprop.0+0xc>
 8006b94:	2b24      	cmp	r3, #36	; 0x24
 8006b96:	d906      	bls.n	8006ba6 <_strtol_l.constprop.0+0x1a>
 8006b98:	f7fd fd8c 	bl	80046b4 <__errno>
 8006b9c:	2316      	movs	r3, #22
 8006b9e:	6003      	str	r3, [r0, #0]
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c8c <_strtol_l.constprop.0+0x100>
 8006baa:	460d      	mov	r5, r1
 8006bac:	462e      	mov	r6, r5
 8006bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006bb6:	f017 0708 	ands.w	r7, r7, #8
 8006bba:	d1f7      	bne.n	8006bac <_strtol_l.constprop.0+0x20>
 8006bbc:	2c2d      	cmp	r4, #45	; 0x2d
 8006bbe:	d132      	bne.n	8006c26 <_strtol_l.constprop.0+0x9a>
 8006bc0:	782c      	ldrb	r4, [r5, #0]
 8006bc2:	2701      	movs	r7, #1
 8006bc4:	1cb5      	adds	r5, r6, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d05b      	beq.n	8006c82 <_strtol_l.constprop.0+0xf6>
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d109      	bne.n	8006be2 <_strtol_l.constprop.0+0x56>
 8006bce:	2c30      	cmp	r4, #48	; 0x30
 8006bd0:	d107      	bne.n	8006be2 <_strtol_l.constprop.0+0x56>
 8006bd2:	782c      	ldrb	r4, [r5, #0]
 8006bd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bd8:	2c58      	cmp	r4, #88	; 0x58
 8006bda:	d14d      	bne.n	8006c78 <_strtol_l.constprop.0+0xec>
 8006bdc:	786c      	ldrb	r4, [r5, #1]
 8006bde:	2310      	movs	r3, #16
 8006be0:	3502      	adds	r5, #2
 8006be2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006be6:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bea:	f04f 0e00 	mov.w	lr, #0
 8006bee:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bf2:	4676      	mov	r6, lr
 8006bf4:	fb03 8a19 	mls	sl, r3, r9, r8
 8006bf8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006bfc:	f1bc 0f09 	cmp.w	ip, #9
 8006c00:	d816      	bhi.n	8006c30 <_strtol_l.constprop.0+0xa4>
 8006c02:	4664      	mov	r4, ip
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	dd24      	ble.n	8006c52 <_strtol_l.constprop.0+0xc6>
 8006c08:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c0c:	d008      	beq.n	8006c20 <_strtol_l.constprop.0+0x94>
 8006c0e:	45b1      	cmp	r9, r6
 8006c10:	d31c      	bcc.n	8006c4c <_strtol_l.constprop.0+0xc0>
 8006c12:	d101      	bne.n	8006c18 <_strtol_l.constprop.0+0x8c>
 8006c14:	45a2      	cmp	sl, r4
 8006c16:	db19      	blt.n	8006c4c <_strtol_l.constprop.0+0xc0>
 8006c18:	fb06 4603 	mla	r6, r6, r3, r4
 8006c1c:	f04f 0e01 	mov.w	lr, #1
 8006c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c24:	e7e8      	b.n	8006bf8 <_strtol_l.constprop.0+0x6c>
 8006c26:	2c2b      	cmp	r4, #43	; 0x2b
 8006c28:	bf04      	itt	eq
 8006c2a:	782c      	ldrbeq	r4, [r5, #0]
 8006c2c:	1cb5      	addeq	r5, r6, #2
 8006c2e:	e7ca      	b.n	8006bc6 <_strtol_l.constprop.0+0x3a>
 8006c30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006c34:	f1bc 0f19 	cmp.w	ip, #25
 8006c38:	d801      	bhi.n	8006c3e <_strtol_l.constprop.0+0xb2>
 8006c3a:	3c37      	subs	r4, #55	; 0x37
 8006c3c:	e7e2      	b.n	8006c04 <_strtol_l.constprop.0+0x78>
 8006c3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006c42:	f1bc 0f19 	cmp.w	ip, #25
 8006c46:	d804      	bhi.n	8006c52 <_strtol_l.constprop.0+0xc6>
 8006c48:	3c57      	subs	r4, #87	; 0x57
 8006c4a:	e7db      	b.n	8006c04 <_strtol_l.constprop.0+0x78>
 8006c4c:	f04f 3eff 	mov.w	lr, #4294967295
 8006c50:	e7e6      	b.n	8006c20 <_strtol_l.constprop.0+0x94>
 8006c52:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c56:	d105      	bne.n	8006c64 <_strtol_l.constprop.0+0xd8>
 8006c58:	2322      	movs	r3, #34	; 0x22
 8006c5a:	6003      	str	r3, [r0, #0]
 8006c5c:	4646      	mov	r6, r8
 8006c5e:	b942      	cbnz	r2, 8006c72 <_strtol_l.constprop.0+0xe6>
 8006c60:	4630      	mov	r0, r6
 8006c62:	e79e      	b.n	8006ba2 <_strtol_l.constprop.0+0x16>
 8006c64:	b107      	cbz	r7, 8006c68 <_strtol_l.constprop.0+0xdc>
 8006c66:	4276      	negs	r6, r6
 8006c68:	2a00      	cmp	r2, #0
 8006c6a:	d0f9      	beq.n	8006c60 <_strtol_l.constprop.0+0xd4>
 8006c6c:	f1be 0f00 	cmp.w	lr, #0
 8006c70:	d000      	beq.n	8006c74 <_strtol_l.constprop.0+0xe8>
 8006c72:	1e69      	subs	r1, r5, #1
 8006c74:	6011      	str	r1, [r2, #0]
 8006c76:	e7f3      	b.n	8006c60 <_strtol_l.constprop.0+0xd4>
 8006c78:	2430      	movs	r4, #48	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1b1      	bne.n	8006be2 <_strtol_l.constprop.0+0x56>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	e7af      	b.n	8006be2 <_strtol_l.constprop.0+0x56>
 8006c82:	2c30      	cmp	r4, #48	; 0x30
 8006c84:	d0a5      	beq.n	8006bd2 <_strtol_l.constprop.0+0x46>
 8006c86:	230a      	movs	r3, #10
 8006c88:	e7ab      	b.n	8006be2 <_strtol_l.constprop.0+0x56>
 8006c8a:	bf00      	nop
 8006c8c:	08008149 	.word	0x08008149

08006c90 <_strtol_r>:
 8006c90:	f7ff bf7c 	b.w	8006b8c <_strtol_l.constprop.0>

08006c94 <__ssputs_r>:
 8006c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c98:	688e      	ldr	r6, [r1, #8]
 8006c9a:	461f      	mov	r7, r3
 8006c9c:	42be      	cmp	r6, r7
 8006c9e:	680b      	ldr	r3, [r1, #0]
 8006ca0:	4682      	mov	sl, r0
 8006ca2:	460c      	mov	r4, r1
 8006ca4:	4690      	mov	r8, r2
 8006ca6:	d82c      	bhi.n	8006d02 <__ssputs_r+0x6e>
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cae:	d026      	beq.n	8006cfe <__ssputs_r+0x6a>
 8006cb0:	6965      	ldr	r5, [r4, #20]
 8006cb2:	6909      	ldr	r1, [r1, #16]
 8006cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cb8:	eba3 0901 	sub.w	r9, r3, r1
 8006cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cc0:	1c7b      	adds	r3, r7, #1
 8006cc2:	444b      	add	r3, r9
 8006cc4:	106d      	asrs	r5, r5, #1
 8006cc6:	429d      	cmp	r5, r3
 8006cc8:	bf38      	it	cc
 8006cca:	461d      	movcc	r5, r3
 8006ccc:	0553      	lsls	r3, r2, #21
 8006cce:	d527      	bpl.n	8006d20 <__ssputs_r+0x8c>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7fe fc0f 	bl	80054f4 <_malloc_r>
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	b360      	cbz	r0, 8006d34 <__ssputs_r+0xa0>
 8006cda:	6921      	ldr	r1, [r4, #16]
 8006cdc:	464a      	mov	r2, r9
 8006cde:	f000 fbf5 	bl	80074cc <memcpy>
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	81a3      	strh	r3, [r4, #12]
 8006cee:	6126      	str	r6, [r4, #16]
 8006cf0:	6165      	str	r5, [r4, #20]
 8006cf2:	444e      	add	r6, r9
 8006cf4:	eba5 0509 	sub.w	r5, r5, r9
 8006cf8:	6026      	str	r6, [r4, #0]
 8006cfa:	60a5      	str	r5, [r4, #8]
 8006cfc:	463e      	mov	r6, r7
 8006cfe:	42be      	cmp	r6, r7
 8006d00:	d900      	bls.n	8006d04 <__ssputs_r+0x70>
 8006d02:	463e      	mov	r6, r7
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	4632      	mov	r2, r6
 8006d08:	4641      	mov	r1, r8
 8006d0a:	f000 fba3 	bl	8007454 <memmove>
 8006d0e:	68a3      	ldr	r3, [r4, #8]
 8006d10:	1b9b      	subs	r3, r3, r6
 8006d12:	60a3      	str	r3, [r4, #8]
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	4433      	add	r3, r6
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	462a      	mov	r2, r5
 8006d22:	f000 ff86 	bl	8007c32 <_realloc_r>
 8006d26:	4606      	mov	r6, r0
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1e0      	bne.n	8006cee <__ssputs_r+0x5a>
 8006d2c:	6921      	ldr	r1, [r4, #16]
 8006d2e:	4650      	mov	r0, sl
 8006d30:	f7fe fb6c 	bl	800540c <_free_r>
 8006d34:	230c      	movs	r3, #12
 8006d36:	f8ca 3000 	str.w	r3, [sl]
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	e7e9      	b.n	8006d1c <__ssputs_r+0x88>

08006d48 <_svfiprintf_r>:
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	4698      	mov	r8, r3
 8006d4e:	898b      	ldrh	r3, [r1, #12]
 8006d50:	061b      	lsls	r3, r3, #24
 8006d52:	b09d      	sub	sp, #116	; 0x74
 8006d54:	4607      	mov	r7, r0
 8006d56:	460d      	mov	r5, r1
 8006d58:	4614      	mov	r4, r2
 8006d5a:	d50e      	bpl.n	8006d7a <_svfiprintf_r+0x32>
 8006d5c:	690b      	ldr	r3, [r1, #16]
 8006d5e:	b963      	cbnz	r3, 8006d7a <_svfiprintf_r+0x32>
 8006d60:	2140      	movs	r1, #64	; 0x40
 8006d62:	f7fe fbc7 	bl	80054f4 <_malloc_r>
 8006d66:	6028      	str	r0, [r5, #0]
 8006d68:	6128      	str	r0, [r5, #16]
 8006d6a:	b920      	cbnz	r0, 8006d76 <_svfiprintf_r+0x2e>
 8006d6c:	230c      	movs	r3, #12
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e0d0      	b.n	8006f18 <_svfiprintf_r+0x1d0>
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	616b      	str	r3, [r5, #20]
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d7e:	2320      	movs	r3, #32
 8006d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d88:	2330      	movs	r3, #48	; 0x30
 8006d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f30 <_svfiprintf_r+0x1e8>
 8006d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d92:	f04f 0901 	mov.w	r9, #1
 8006d96:	4623      	mov	r3, r4
 8006d98:	469a      	mov	sl, r3
 8006d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d9e:	b10a      	cbz	r2, 8006da4 <_svfiprintf_r+0x5c>
 8006da0:	2a25      	cmp	r2, #37	; 0x25
 8006da2:	d1f9      	bne.n	8006d98 <_svfiprintf_r+0x50>
 8006da4:	ebba 0b04 	subs.w	fp, sl, r4
 8006da8:	d00b      	beq.n	8006dc2 <_svfiprintf_r+0x7a>
 8006daa:	465b      	mov	r3, fp
 8006dac:	4622      	mov	r2, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff6f 	bl	8006c94 <__ssputs_r>
 8006db6:	3001      	adds	r0, #1
 8006db8:	f000 80a9 	beq.w	8006f0e <_svfiprintf_r+0x1c6>
 8006dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dbe:	445a      	add	r2, fp
 8006dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 80a1 	beq.w	8006f0e <_svfiprintf_r+0x1c6>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dd6:	f10a 0a01 	add.w	sl, sl, #1
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006de2:	931a      	str	r3, [sp, #104]	; 0x68
 8006de4:	4654      	mov	r4, sl
 8006de6:	2205      	movs	r2, #5
 8006de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dec:	4850      	ldr	r0, [pc, #320]	; (8006f30 <_svfiprintf_r+0x1e8>)
 8006dee:	f7f9 f9f7 	bl	80001e0 <memchr>
 8006df2:	9a04      	ldr	r2, [sp, #16]
 8006df4:	b9d8      	cbnz	r0, 8006e2e <_svfiprintf_r+0xe6>
 8006df6:	06d0      	lsls	r0, r2, #27
 8006df8:	bf44      	itt	mi
 8006dfa:	2320      	movmi	r3, #32
 8006dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e00:	0711      	lsls	r1, r2, #28
 8006e02:	bf44      	itt	mi
 8006e04:	232b      	movmi	r3, #43	; 0x2b
 8006e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e10:	d015      	beq.n	8006e3e <_svfiprintf_r+0xf6>
 8006e12:	9a07      	ldr	r2, [sp, #28]
 8006e14:	4654      	mov	r4, sl
 8006e16:	2000      	movs	r0, #0
 8006e18:	f04f 0c0a 	mov.w	ip, #10
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e22:	3b30      	subs	r3, #48	; 0x30
 8006e24:	2b09      	cmp	r3, #9
 8006e26:	d94d      	bls.n	8006ec4 <_svfiprintf_r+0x17c>
 8006e28:	b1b0      	cbz	r0, 8006e58 <_svfiprintf_r+0x110>
 8006e2a:	9207      	str	r2, [sp, #28]
 8006e2c:	e014      	b.n	8006e58 <_svfiprintf_r+0x110>
 8006e2e:	eba0 0308 	sub.w	r3, r0, r8
 8006e32:	fa09 f303 	lsl.w	r3, r9, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	9304      	str	r3, [sp, #16]
 8006e3a:	46a2      	mov	sl, r4
 8006e3c:	e7d2      	b.n	8006de4 <_svfiprintf_r+0x9c>
 8006e3e:	9b03      	ldr	r3, [sp, #12]
 8006e40:	1d19      	adds	r1, r3, #4
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	9103      	str	r1, [sp, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bfbb      	ittet	lt
 8006e4a:	425b      	neglt	r3, r3
 8006e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e50:	9307      	strge	r3, [sp, #28]
 8006e52:	9307      	strlt	r3, [sp, #28]
 8006e54:	bfb8      	it	lt
 8006e56:	9204      	strlt	r2, [sp, #16]
 8006e58:	7823      	ldrb	r3, [r4, #0]
 8006e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e5c:	d10c      	bne.n	8006e78 <_svfiprintf_r+0x130>
 8006e5e:	7863      	ldrb	r3, [r4, #1]
 8006e60:	2b2a      	cmp	r3, #42	; 0x2a
 8006e62:	d134      	bne.n	8006ece <_svfiprintf_r+0x186>
 8006e64:	9b03      	ldr	r3, [sp, #12]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	9203      	str	r2, [sp, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfb8      	it	lt
 8006e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e74:	3402      	adds	r4, #2
 8006e76:	9305      	str	r3, [sp, #20]
 8006e78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f40 <_svfiprintf_r+0x1f8>
 8006e7c:	7821      	ldrb	r1, [r4, #0]
 8006e7e:	2203      	movs	r2, #3
 8006e80:	4650      	mov	r0, sl
 8006e82:	f7f9 f9ad 	bl	80001e0 <memchr>
 8006e86:	b138      	cbz	r0, 8006e98 <_svfiprintf_r+0x150>
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	eba0 000a 	sub.w	r0, r0, sl
 8006e8e:	2240      	movs	r2, #64	; 0x40
 8006e90:	4082      	lsls	r2, r0
 8006e92:	4313      	orrs	r3, r2
 8006e94:	3401      	adds	r4, #1
 8006e96:	9304      	str	r3, [sp, #16]
 8006e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9c:	4825      	ldr	r0, [pc, #148]	; (8006f34 <_svfiprintf_r+0x1ec>)
 8006e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ea2:	2206      	movs	r2, #6
 8006ea4:	f7f9 f99c 	bl	80001e0 <memchr>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d038      	beq.n	8006f1e <_svfiprintf_r+0x1d6>
 8006eac:	4b22      	ldr	r3, [pc, #136]	; (8006f38 <_svfiprintf_r+0x1f0>)
 8006eae:	bb1b      	cbnz	r3, 8006ef8 <_svfiprintf_r+0x1b0>
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	3307      	adds	r3, #7
 8006eb4:	f023 0307 	bic.w	r3, r3, #7
 8006eb8:	3308      	adds	r3, #8
 8006eba:	9303      	str	r3, [sp, #12]
 8006ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ebe:	4433      	add	r3, r6
 8006ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec2:	e768      	b.n	8006d96 <_svfiprintf_r+0x4e>
 8006ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ec8:	460c      	mov	r4, r1
 8006eca:	2001      	movs	r0, #1
 8006ecc:	e7a6      	b.n	8006e1c <_svfiprintf_r+0xd4>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	3401      	adds	r4, #1
 8006ed2:	9305      	str	r3, [sp, #20]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	f04f 0c0a 	mov.w	ip, #10
 8006eda:	4620      	mov	r0, r4
 8006edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ee0:	3a30      	subs	r2, #48	; 0x30
 8006ee2:	2a09      	cmp	r2, #9
 8006ee4:	d903      	bls.n	8006eee <_svfiprintf_r+0x1a6>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0c6      	beq.n	8006e78 <_svfiprintf_r+0x130>
 8006eea:	9105      	str	r1, [sp, #20]
 8006eec:	e7c4      	b.n	8006e78 <_svfiprintf_r+0x130>
 8006eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e7f0      	b.n	8006eda <_svfiprintf_r+0x192>
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	462a      	mov	r2, r5
 8006efe:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <_svfiprintf_r+0x1f4>)
 8006f00:	a904      	add	r1, sp, #16
 8006f02:	4638      	mov	r0, r7
 8006f04:	f7fc fc88 	bl	8003818 <_printf_float>
 8006f08:	1c42      	adds	r2, r0, #1
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	d1d6      	bne.n	8006ebc <_svfiprintf_r+0x174>
 8006f0e:	89ab      	ldrh	r3, [r5, #12]
 8006f10:	065b      	lsls	r3, r3, #25
 8006f12:	f53f af2d 	bmi.w	8006d70 <_svfiprintf_r+0x28>
 8006f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f18:	b01d      	add	sp, #116	; 0x74
 8006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1e:	ab03      	add	r3, sp, #12
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	462a      	mov	r2, r5
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_svfiprintf_r+0x1f4>)
 8006f26:	a904      	add	r1, sp, #16
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7fc ff19 	bl	8003d60 <_printf_i>
 8006f2e:	e7eb      	b.n	8006f08 <_svfiprintf_r+0x1c0>
 8006f30:	08008249 	.word	0x08008249
 8006f34:	08008253 	.word	0x08008253
 8006f38:	08003819 	.word	0x08003819
 8006f3c:	08006c95 	.word	0x08006c95
 8006f40:	0800824f 	.word	0x0800824f

08006f44 <__sfputc_r>:
 8006f44:	6893      	ldr	r3, [r2, #8]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	b410      	push	{r4}
 8006f4c:	6093      	str	r3, [r2, #8]
 8006f4e:	da08      	bge.n	8006f62 <__sfputc_r+0x1e>
 8006f50:	6994      	ldr	r4, [r2, #24]
 8006f52:	42a3      	cmp	r3, r4
 8006f54:	db01      	blt.n	8006f5a <__sfputc_r+0x16>
 8006f56:	290a      	cmp	r1, #10
 8006f58:	d103      	bne.n	8006f62 <__sfputc_r+0x1e>
 8006f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f5e:	f000 b9e3 	b.w	8007328 <__swbuf_r>
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	1c58      	adds	r0, r3, #1
 8006f66:	6010      	str	r0, [r2, #0]
 8006f68:	7019      	strb	r1, [r3, #0]
 8006f6a:	4608      	mov	r0, r1
 8006f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <__sfputs_r>:
 8006f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	4614      	mov	r4, r2
 8006f7a:	18d5      	adds	r5, r2, r3
 8006f7c:	42ac      	cmp	r4, r5
 8006f7e:	d101      	bne.n	8006f84 <__sfputs_r+0x12>
 8006f80:	2000      	movs	r0, #0
 8006f82:	e007      	b.n	8006f94 <__sfputs_r+0x22>
 8006f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f88:	463a      	mov	r2, r7
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f7ff ffda 	bl	8006f44 <__sfputc_r>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d1f3      	bne.n	8006f7c <__sfputs_r+0xa>
 8006f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f98 <_vfiprintf_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	b09d      	sub	sp, #116	; 0x74
 8006fa0:	4614      	mov	r4, r2
 8006fa2:	4698      	mov	r8, r3
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	b118      	cbz	r0, 8006fb0 <_vfiprintf_r+0x18>
 8006fa8:	6a03      	ldr	r3, [r0, #32]
 8006faa:	b90b      	cbnz	r3, 8006fb0 <_vfiprintf_r+0x18>
 8006fac:	f7fd fa84 	bl	80044b8 <__sinit>
 8006fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fb2:	07d9      	lsls	r1, r3, #31
 8006fb4:	d405      	bmi.n	8006fc2 <_vfiprintf_r+0x2a>
 8006fb6:	89ab      	ldrh	r3, [r5, #12]
 8006fb8:	059a      	lsls	r2, r3, #22
 8006fba:	d402      	bmi.n	8006fc2 <_vfiprintf_r+0x2a>
 8006fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fbe:	f7fd fba3 	bl	8004708 <__retarget_lock_acquire_recursive>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	071b      	lsls	r3, r3, #28
 8006fc6:	d501      	bpl.n	8006fcc <_vfiprintf_r+0x34>
 8006fc8:	692b      	ldr	r3, [r5, #16]
 8006fca:	b99b      	cbnz	r3, 8006ff4 <_vfiprintf_r+0x5c>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f000 f9e8 	bl	80073a4 <__swsetup_r>
 8006fd4:	b170      	cbz	r0, 8006ff4 <_vfiprintf_r+0x5c>
 8006fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd8:	07dc      	lsls	r4, r3, #31
 8006fda:	d504      	bpl.n	8006fe6 <_vfiprintf_r+0x4e>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	b01d      	add	sp, #116	; 0x74
 8006fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe6:	89ab      	ldrh	r3, [r5, #12]
 8006fe8:	0598      	lsls	r0, r3, #22
 8006fea:	d4f7      	bmi.n	8006fdc <_vfiprintf_r+0x44>
 8006fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fee:	f7fd fb8c 	bl	800470a <__retarget_lock_release_recursive>
 8006ff2:	e7f3      	b.n	8006fdc <_vfiprintf_r+0x44>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8007002:	2330      	movs	r3, #48	; 0x30
 8007004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80071b8 <_vfiprintf_r+0x220>
 8007008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800700c:	f04f 0901 	mov.w	r9, #1
 8007010:	4623      	mov	r3, r4
 8007012:	469a      	mov	sl, r3
 8007014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007018:	b10a      	cbz	r2, 800701e <_vfiprintf_r+0x86>
 800701a:	2a25      	cmp	r2, #37	; 0x25
 800701c:	d1f9      	bne.n	8007012 <_vfiprintf_r+0x7a>
 800701e:	ebba 0b04 	subs.w	fp, sl, r4
 8007022:	d00b      	beq.n	800703c <_vfiprintf_r+0xa4>
 8007024:	465b      	mov	r3, fp
 8007026:	4622      	mov	r2, r4
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f7ff ffa1 	bl	8006f72 <__sfputs_r>
 8007030:	3001      	adds	r0, #1
 8007032:	f000 80a9 	beq.w	8007188 <_vfiprintf_r+0x1f0>
 8007036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007038:	445a      	add	r2, fp
 800703a:	9209      	str	r2, [sp, #36]	; 0x24
 800703c:	f89a 3000 	ldrb.w	r3, [sl]
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80a1 	beq.w	8007188 <_vfiprintf_r+0x1f0>
 8007046:	2300      	movs	r3, #0
 8007048:	f04f 32ff 	mov.w	r2, #4294967295
 800704c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007050:	f10a 0a01 	add.w	sl, sl, #1
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	9307      	str	r3, [sp, #28]
 8007058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800705c:	931a      	str	r3, [sp, #104]	; 0x68
 800705e:	4654      	mov	r4, sl
 8007060:	2205      	movs	r2, #5
 8007062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007066:	4854      	ldr	r0, [pc, #336]	; (80071b8 <_vfiprintf_r+0x220>)
 8007068:	f7f9 f8ba 	bl	80001e0 <memchr>
 800706c:	9a04      	ldr	r2, [sp, #16]
 800706e:	b9d8      	cbnz	r0, 80070a8 <_vfiprintf_r+0x110>
 8007070:	06d1      	lsls	r1, r2, #27
 8007072:	bf44      	itt	mi
 8007074:	2320      	movmi	r3, #32
 8007076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800707a:	0713      	lsls	r3, r2, #28
 800707c:	bf44      	itt	mi
 800707e:	232b      	movmi	r3, #43	; 0x2b
 8007080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007084:	f89a 3000 	ldrb.w	r3, [sl]
 8007088:	2b2a      	cmp	r3, #42	; 0x2a
 800708a:	d015      	beq.n	80070b8 <_vfiprintf_r+0x120>
 800708c:	9a07      	ldr	r2, [sp, #28]
 800708e:	4654      	mov	r4, sl
 8007090:	2000      	movs	r0, #0
 8007092:	f04f 0c0a 	mov.w	ip, #10
 8007096:	4621      	mov	r1, r4
 8007098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709c:	3b30      	subs	r3, #48	; 0x30
 800709e:	2b09      	cmp	r3, #9
 80070a0:	d94d      	bls.n	800713e <_vfiprintf_r+0x1a6>
 80070a2:	b1b0      	cbz	r0, 80070d2 <_vfiprintf_r+0x13a>
 80070a4:	9207      	str	r2, [sp, #28]
 80070a6:	e014      	b.n	80070d2 <_vfiprintf_r+0x13a>
 80070a8:	eba0 0308 	sub.w	r3, r0, r8
 80070ac:	fa09 f303 	lsl.w	r3, r9, r3
 80070b0:	4313      	orrs	r3, r2
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	46a2      	mov	sl, r4
 80070b6:	e7d2      	b.n	800705e <_vfiprintf_r+0xc6>
 80070b8:	9b03      	ldr	r3, [sp, #12]
 80070ba:	1d19      	adds	r1, r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	9103      	str	r1, [sp, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	bfbb      	ittet	lt
 80070c4:	425b      	neglt	r3, r3
 80070c6:	f042 0202 	orrlt.w	r2, r2, #2
 80070ca:	9307      	strge	r3, [sp, #28]
 80070cc:	9307      	strlt	r3, [sp, #28]
 80070ce:	bfb8      	it	lt
 80070d0:	9204      	strlt	r2, [sp, #16]
 80070d2:	7823      	ldrb	r3, [r4, #0]
 80070d4:	2b2e      	cmp	r3, #46	; 0x2e
 80070d6:	d10c      	bne.n	80070f2 <_vfiprintf_r+0x15a>
 80070d8:	7863      	ldrb	r3, [r4, #1]
 80070da:	2b2a      	cmp	r3, #42	; 0x2a
 80070dc:	d134      	bne.n	8007148 <_vfiprintf_r+0x1b0>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	bfb8      	it	lt
 80070ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80070ee:	3402      	adds	r4, #2
 80070f0:	9305      	str	r3, [sp, #20]
 80070f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80071c8 <_vfiprintf_r+0x230>
 80070f6:	7821      	ldrb	r1, [r4, #0]
 80070f8:	2203      	movs	r2, #3
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7f9 f870 	bl	80001e0 <memchr>
 8007100:	b138      	cbz	r0, 8007112 <_vfiprintf_r+0x17a>
 8007102:	9b04      	ldr	r3, [sp, #16]
 8007104:	eba0 000a 	sub.w	r0, r0, sl
 8007108:	2240      	movs	r2, #64	; 0x40
 800710a:	4082      	lsls	r2, r0
 800710c:	4313      	orrs	r3, r2
 800710e:	3401      	adds	r4, #1
 8007110:	9304      	str	r3, [sp, #16]
 8007112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007116:	4829      	ldr	r0, [pc, #164]	; (80071bc <_vfiprintf_r+0x224>)
 8007118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800711c:	2206      	movs	r2, #6
 800711e:	f7f9 f85f 	bl	80001e0 <memchr>
 8007122:	2800      	cmp	r0, #0
 8007124:	d03f      	beq.n	80071a6 <_vfiprintf_r+0x20e>
 8007126:	4b26      	ldr	r3, [pc, #152]	; (80071c0 <_vfiprintf_r+0x228>)
 8007128:	bb1b      	cbnz	r3, 8007172 <_vfiprintf_r+0x1da>
 800712a:	9b03      	ldr	r3, [sp, #12]
 800712c:	3307      	adds	r3, #7
 800712e:	f023 0307 	bic.w	r3, r3, #7
 8007132:	3308      	adds	r3, #8
 8007134:	9303      	str	r3, [sp, #12]
 8007136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007138:	443b      	add	r3, r7
 800713a:	9309      	str	r3, [sp, #36]	; 0x24
 800713c:	e768      	b.n	8007010 <_vfiprintf_r+0x78>
 800713e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007142:	460c      	mov	r4, r1
 8007144:	2001      	movs	r0, #1
 8007146:	e7a6      	b.n	8007096 <_vfiprintf_r+0xfe>
 8007148:	2300      	movs	r3, #0
 800714a:	3401      	adds	r4, #1
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	4619      	mov	r1, r3
 8007150:	f04f 0c0a 	mov.w	ip, #10
 8007154:	4620      	mov	r0, r4
 8007156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715a:	3a30      	subs	r2, #48	; 0x30
 800715c:	2a09      	cmp	r2, #9
 800715e:	d903      	bls.n	8007168 <_vfiprintf_r+0x1d0>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d0c6      	beq.n	80070f2 <_vfiprintf_r+0x15a>
 8007164:	9105      	str	r1, [sp, #20]
 8007166:	e7c4      	b.n	80070f2 <_vfiprintf_r+0x15a>
 8007168:	fb0c 2101 	mla	r1, ip, r1, r2
 800716c:	4604      	mov	r4, r0
 800716e:	2301      	movs	r3, #1
 8007170:	e7f0      	b.n	8007154 <_vfiprintf_r+0x1bc>
 8007172:	ab03      	add	r3, sp, #12
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	462a      	mov	r2, r5
 8007178:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <_vfiprintf_r+0x22c>)
 800717a:	a904      	add	r1, sp, #16
 800717c:	4630      	mov	r0, r6
 800717e:	f7fc fb4b 	bl	8003818 <_printf_float>
 8007182:	4607      	mov	r7, r0
 8007184:	1c78      	adds	r0, r7, #1
 8007186:	d1d6      	bne.n	8007136 <_vfiprintf_r+0x19e>
 8007188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800718a:	07d9      	lsls	r1, r3, #31
 800718c:	d405      	bmi.n	800719a <_vfiprintf_r+0x202>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	059a      	lsls	r2, r3, #22
 8007192:	d402      	bmi.n	800719a <_vfiprintf_r+0x202>
 8007194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007196:	f7fd fab8 	bl	800470a <__retarget_lock_release_recursive>
 800719a:	89ab      	ldrh	r3, [r5, #12]
 800719c:	065b      	lsls	r3, r3, #25
 800719e:	f53f af1d 	bmi.w	8006fdc <_vfiprintf_r+0x44>
 80071a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071a4:	e71c      	b.n	8006fe0 <_vfiprintf_r+0x48>
 80071a6:	ab03      	add	r3, sp, #12
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	462a      	mov	r2, r5
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <_vfiprintf_r+0x22c>)
 80071ae:	a904      	add	r1, sp, #16
 80071b0:	4630      	mov	r0, r6
 80071b2:	f7fc fdd5 	bl	8003d60 <_printf_i>
 80071b6:	e7e4      	b.n	8007182 <_vfiprintf_r+0x1ea>
 80071b8:	08008249 	.word	0x08008249
 80071bc:	08008253 	.word	0x08008253
 80071c0:	08003819 	.word	0x08003819
 80071c4:	08006f73 	.word	0x08006f73
 80071c8:	0800824f 	.word	0x0800824f

080071cc <__sflush_r>:
 80071cc:	898a      	ldrh	r2, [r1, #12]
 80071ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	0710      	lsls	r0, r2, #28
 80071d6:	460c      	mov	r4, r1
 80071d8:	d458      	bmi.n	800728c <__sflush_r+0xc0>
 80071da:	684b      	ldr	r3, [r1, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc05      	bgt.n	80071ec <__sflush_r+0x20>
 80071e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	dc02      	bgt.n	80071ec <__sflush_r+0x20>
 80071e6:	2000      	movs	r0, #0
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d0f9      	beq.n	80071e6 <__sflush_r+0x1a>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071f8:	682f      	ldr	r7, [r5, #0]
 80071fa:	6a21      	ldr	r1, [r4, #32]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	d032      	beq.n	8007266 <__sflush_r+0x9a>
 8007200:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	075a      	lsls	r2, r3, #29
 8007206:	d505      	bpl.n	8007214 <__sflush_r+0x48>
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	1ac0      	subs	r0, r0, r3
 800720c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800720e:	b10b      	cbz	r3, 8007214 <__sflush_r+0x48>
 8007210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007212:	1ac0      	subs	r0, r0, r3
 8007214:	2300      	movs	r3, #0
 8007216:	4602      	mov	r2, r0
 8007218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800721a:	6a21      	ldr	r1, [r4, #32]
 800721c:	4628      	mov	r0, r5
 800721e:	47b0      	blx	r6
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	d106      	bne.n	8007234 <__sflush_r+0x68>
 8007226:	6829      	ldr	r1, [r5, #0]
 8007228:	291d      	cmp	r1, #29
 800722a:	d82b      	bhi.n	8007284 <__sflush_r+0xb8>
 800722c:	4a29      	ldr	r2, [pc, #164]	; (80072d4 <__sflush_r+0x108>)
 800722e:	410a      	asrs	r2, r1
 8007230:	07d6      	lsls	r6, r2, #31
 8007232:	d427      	bmi.n	8007284 <__sflush_r+0xb8>
 8007234:	2200      	movs	r2, #0
 8007236:	6062      	str	r2, [r4, #4]
 8007238:	04d9      	lsls	r1, r3, #19
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	d504      	bpl.n	800724a <__sflush_r+0x7e>
 8007240:	1c42      	adds	r2, r0, #1
 8007242:	d101      	bne.n	8007248 <__sflush_r+0x7c>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b903      	cbnz	r3, 800724a <__sflush_r+0x7e>
 8007248:	6560      	str	r0, [r4, #84]	; 0x54
 800724a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800724c:	602f      	str	r7, [r5, #0]
 800724e:	2900      	cmp	r1, #0
 8007250:	d0c9      	beq.n	80071e6 <__sflush_r+0x1a>
 8007252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007256:	4299      	cmp	r1, r3
 8007258:	d002      	beq.n	8007260 <__sflush_r+0x94>
 800725a:	4628      	mov	r0, r5
 800725c:	f7fe f8d6 	bl	800540c <_free_r>
 8007260:	2000      	movs	r0, #0
 8007262:	6360      	str	r0, [r4, #52]	; 0x34
 8007264:	e7c0      	b.n	80071e8 <__sflush_r+0x1c>
 8007266:	2301      	movs	r3, #1
 8007268:	4628      	mov	r0, r5
 800726a:	47b0      	blx	r6
 800726c:	1c41      	adds	r1, r0, #1
 800726e:	d1c8      	bne.n	8007202 <__sflush_r+0x36>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c5      	beq.n	8007202 <__sflush_r+0x36>
 8007276:	2b1d      	cmp	r3, #29
 8007278:	d001      	beq.n	800727e <__sflush_r+0xb2>
 800727a:	2b16      	cmp	r3, #22
 800727c:	d101      	bne.n	8007282 <__sflush_r+0xb6>
 800727e:	602f      	str	r7, [r5, #0]
 8007280:	e7b1      	b.n	80071e6 <__sflush_r+0x1a>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	e7ad      	b.n	80071e8 <__sflush_r+0x1c>
 800728c:	690f      	ldr	r7, [r1, #16]
 800728e:	2f00      	cmp	r7, #0
 8007290:	d0a9      	beq.n	80071e6 <__sflush_r+0x1a>
 8007292:	0793      	lsls	r3, r2, #30
 8007294:	680e      	ldr	r6, [r1, #0]
 8007296:	bf08      	it	eq
 8007298:	694b      	ldreq	r3, [r1, #20]
 800729a:	600f      	str	r7, [r1, #0]
 800729c:	bf18      	it	ne
 800729e:	2300      	movne	r3, #0
 80072a0:	eba6 0807 	sub.w	r8, r6, r7
 80072a4:	608b      	str	r3, [r1, #8]
 80072a6:	f1b8 0f00 	cmp.w	r8, #0
 80072aa:	dd9c      	ble.n	80071e6 <__sflush_r+0x1a>
 80072ac:	6a21      	ldr	r1, [r4, #32]
 80072ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80072b0:	4643      	mov	r3, r8
 80072b2:	463a      	mov	r2, r7
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b0      	blx	r6
 80072b8:	2800      	cmp	r0, #0
 80072ba:	dc06      	bgt.n	80072ca <__sflush_r+0xfe>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	f04f 30ff 	mov.w	r0, #4294967295
 80072c8:	e78e      	b.n	80071e8 <__sflush_r+0x1c>
 80072ca:	4407      	add	r7, r0
 80072cc:	eba8 0800 	sub.w	r8, r8, r0
 80072d0:	e7e9      	b.n	80072a6 <__sflush_r+0xda>
 80072d2:	bf00      	nop
 80072d4:	dfbffffe 	.word	0xdfbffffe

080072d8 <_fflush_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	4605      	mov	r5, r0
 80072de:	460c      	mov	r4, r1
 80072e0:	b913      	cbnz	r3, 80072e8 <_fflush_r+0x10>
 80072e2:	2500      	movs	r5, #0
 80072e4:	4628      	mov	r0, r5
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	b118      	cbz	r0, 80072f2 <_fflush_r+0x1a>
 80072ea:	6a03      	ldr	r3, [r0, #32]
 80072ec:	b90b      	cbnz	r3, 80072f2 <_fflush_r+0x1a>
 80072ee:	f7fd f8e3 	bl	80044b8 <__sinit>
 80072f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0f3      	beq.n	80072e2 <_fflush_r+0xa>
 80072fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072fc:	07d0      	lsls	r0, r2, #31
 80072fe:	d404      	bmi.n	800730a <_fflush_r+0x32>
 8007300:	0599      	lsls	r1, r3, #22
 8007302:	d402      	bmi.n	800730a <_fflush_r+0x32>
 8007304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007306:	f7fd f9ff 	bl	8004708 <__retarget_lock_acquire_recursive>
 800730a:	4628      	mov	r0, r5
 800730c:	4621      	mov	r1, r4
 800730e:	f7ff ff5d 	bl	80071cc <__sflush_r>
 8007312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007314:	07da      	lsls	r2, r3, #31
 8007316:	4605      	mov	r5, r0
 8007318:	d4e4      	bmi.n	80072e4 <_fflush_r+0xc>
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	059b      	lsls	r3, r3, #22
 800731e:	d4e1      	bmi.n	80072e4 <_fflush_r+0xc>
 8007320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007322:	f7fd f9f2 	bl	800470a <__retarget_lock_release_recursive>
 8007326:	e7dd      	b.n	80072e4 <_fflush_r+0xc>

08007328 <__swbuf_r>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	460e      	mov	r6, r1
 800732c:	4614      	mov	r4, r2
 800732e:	4605      	mov	r5, r0
 8007330:	b118      	cbz	r0, 800733a <__swbuf_r+0x12>
 8007332:	6a03      	ldr	r3, [r0, #32]
 8007334:	b90b      	cbnz	r3, 800733a <__swbuf_r+0x12>
 8007336:	f7fd f8bf 	bl	80044b8 <__sinit>
 800733a:	69a3      	ldr	r3, [r4, #24]
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	071a      	lsls	r2, r3, #28
 8007342:	d525      	bpl.n	8007390 <__swbuf_r+0x68>
 8007344:	6923      	ldr	r3, [r4, #16]
 8007346:	b31b      	cbz	r3, 8007390 <__swbuf_r+0x68>
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	6922      	ldr	r2, [r4, #16]
 800734c:	1a98      	subs	r0, r3, r2
 800734e:	6963      	ldr	r3, [r4, #20]
 8007350:	b2f6      	uxtb	r6, r6
 8007352:	4283      	cmp	r3, r0
 8007354:	4637      	mov	r7, r6
 8007356:	dc04      	bgt.n	8007362 <__swbuf_r+0x3a>
 8007358:	4621      	mov	r1, r4
 800735a:	4628      	mov	r0, r5
 800735c:	f7ff ffbc 	bl	80072d8 <_fflush_r>
 8007360:	b9e0      	cbnz	r0, 800739c <__swbuf_r+0x74>
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	3b01      	subs	r3, #1
 8007366:	60a3      	str	r3, [r4, #8]
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	6022      	str	r2, [r4, #0]
 800736e:	701e      	strb	r6, [r3, #0]
 8007370:	6962      	ldr	r2, [r4, #20]
 8007372:	1c43      	adds	r3, r0, #1
 8007374:	429a      	cmp	r2, r3
 8007376:	d004      	beq.n	8007382 <__swbuf_r+0x5a>
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	07db      	lsls	r3, r3, #31
 800737c:	d506      	bpl.n	800738c <__swbuf_r+0x64>
 800737e:	2e0a      	cmp	r6, #10
 8007380:	d104      	bne.n	800738c <__swbuf_r+0x64>
 8007382:	4621      	mov	r1, r4
 8007384:	4628      	mov	r0, r5
 8007386:	f7ff ffa7 	bl	80072d8 <_fflush_r>
 800738a:	b938      	cbnz	r0, 800739c <__swbuf_r+0x74>
 800738c:	4638      	mov	r0, r7
 800738e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f806 	bl	80073a4 <__swsetup_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	d0d5      	beq.n	8007348 <__swbuf_r+0x20>
 800739c:	f04f 37ff 	mov.w	r7, #4294967295
 80073a0:	e7f4      	b.n	800738c <__swbuf_r+0x64>
	...

080073a4 <__swsetup_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <__swsetup_r+0xac>)
 80073a8:	4605      	mov	r5, r0
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	460c      	mov	r4, r1
 80073ae:	b118      	cbz	r0, 80073b8 <__swsetup_r+0x14>
 80073b0:	6a03      	ldr	r3, [r0, #32]
 80073b2:	b90b      	cbnz	r3, 80073b8 <__swsetup_r+0x14>
 80073b4:	f7fd f880 	bl	80044b8 <__sinit>
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073be:	0718      	lsls	r0, r3, #28
 80073c0:	d422      	bmi.n	8007408 <__swsetup_r+0x64>
 80073c2:	06d9      	lsls	r1, r3, #27
 80073c4:	d407      	bmi.n	80073d6 <__swsetup_r+0x32>
 80073c6:	2309      	movs	r3, #9
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073ce:	81a3      	strh	r3, [r4, #12]
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	e034      	b.n	8007440 <__swsetup_r+0x9c>
 80073d6:	0758      	lsls	r0, r3, #29
 80073d8:	d512      	bpl.n	8007400 <__swsetup_r+0x5c>
 80073da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073dc:	b141      	cbz	r1, 80073f0 <__swsetup_r+0x4c>
 80073de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073e2:	4299      	cmp	r1, r3
 80073e4:	d002      	beq.n	80073ec <__swsetup_r+0x48>
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7fe f810 	bl	800540c <_free_r>
 80073ec:	2300      	movs	r3, #0
 80073ee:	6363      	str	r3, [r4, #52]	; 0x34
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	2300      	movs	r3, #0
 80073fa:	6063      	str	r3, [r4, #4]
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	6023      	str	r3, [r4, #0]
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	f043 0308 	orr.w	r3, r3, #8
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	6923      	ldr	r3, [r4, #16]
 800740a:	b94b      	cbnz	r3, 8007420 <__swsetup_r+0x7c>
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007416:	d003      	beq.n	8007420 <__swsetup_r+0x7c>
 8007418:	4621      	mov	r1, r4
 800741a:	4628      	mov	r0, r5
 800741c:	f000 fc7e 	bl	8007d1c <__smakebuf_r>
 8007420:	89a0      	ldrh	r0, [r4, #12]
 8007422:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007426:	f010 0301 	ands.w	r3, r0, #1
 800742a:	d00a      	beq.n	8007442 <__swsetup_r+0x9e>
 800742c:	2300      	movs	r3, #0
 800742e:	60a3      	str	r3, [r4, #8]
 8007430:	6963      	ldr	r3, [r4, #20]
 8007432:	425b      	negs	r3, r3
 8007434:	61a3      	str	r3, [r4, #24]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	b943      	cbnz	r3, 800744c <__swsetup_r+0xa8>
 800743a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800743e:	d1c4      	bne.n	80073ca <__swsetup_r+0x26>
 8007440:	bd38      	pop	{r3, r4, r5, pc}
 8007442:	0781      	lsls	r1, r0, #30
 8007444:	bf58      	it	pl
 8007446:	6963      	ldrpl	r3, [r4, #20]
 8007448:	60a3      	str	r3, [r4, #8]
 800744a:	e7f4      	b.n	8007436 <__swsetup_r+0x92>
 800744c:	2000      	movs	r0, #0
 800744e:	e7f7      	b.n	8007440 <__swsetup_r+0x9c>
 8007450:	20000064 	.word	0x20000064

08007454 <memmove>:
 8007454:	4288      	cmp	r0, r1
 8007456:	b510      	push	{r4, lr}
 8007458:	eb01 0402 	add.w	r4, r1, r2
 800745c:	d902      	bls.n	8007464 <memmove+0x10>
 800745e:	4284      	cmp	r4, r0
 8007460:	4623      	mov	r3, r4
 8007462:	d807      	bhi.n	8007474 <memmove+0x20>
 8007464:	1e43      	subs	r3, r0, #1
 8007466:	42a1      	cmp	r1, r4
 8007468:	d008      	beq.n	800747c <memmove+0x28>
 800746a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800746e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007472:	e7f8      	b.n	8007466 <memmove+0x12>
 8007474:	4402      	add	r2, r0
 8007476:	4601      	mov	r1, r0
 8007478:	428a      	cmp	r2, r1
 800747a:	d100      	bne.n	800747e <memmove+0x2a>
 800747c:	bd10      	pop	{r4, pc}
 800747e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007486:	e7f7      	b.n	8007478 <memmove+0x24>

08007488 <strncmp>:
 8007488:	b510      	push	{r4, lr}
 800748a:	b16a      	cbz	r2, 80074a8 <strncmp+0x20>
 800748c:	3901      	subs	r1, #1
 800748e:	1884      	adds	r4, r0, r2
 8007490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007494:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007498:	429a      	cmp	r2, r3
 800749a:	d103      	bne.n	80074a4 <strncmp+0x1c>
 800749c:	42a0      	cmp	r0, r4
 800749e:	d001      	beq.n	80074a4 <strncmp+0x1c>
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d1f5      	bne.n	8007490 <strncmp+0x8>
 80074a4:	1ad0      	subs	r0, r2, r3
 80074a6:	bd10      	pop	{r4, pc}
 80074a8:	4610      	mov	r0, r2
 80074aa:	e7fc      	b.n	80074a6 <strncmp+0x1e>

080074ac <_sbrk_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	4d06      	ldr	r5, [pc, #24]	; (80074c8 <_sbrk_r+0x1c>)
 80074b0:	2300      	movs	r3, #0
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f7fa f84a 	bl	8001550 <_sbrk>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_sbrk_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_sbrk_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200003dc 	.word	0x200003dc

080074cc <memcpy>:
 80074cc:	440a      	add	r2, r1
 80074ce:	4291      	cmp	r1, r2
 80074d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80074d4:	d100      	bne.n	80074d8 <memcpy+0xc>
 80074d6:	4770      	bx	lr
 80074d8:	b510      	push	{r4, lr}
 80074da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074e2:	4291      	cmp	r1, r2
 80074e4:	d1f9      	bne.n	80074da <memcpy+0xe>
 80074e6:	bd10      	pop	{r4, pc}

080074e8 <nan>:
 80074e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80074f0 <nan+0x8>
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	00000000 	.word	0x00000000
 80074f4:	7ff80000 	.word	0x7ff80000

080074f8 <__assert_func>:
 80074f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074fa:	4614      	mov	r4, r2
 80074fc:	461a      	mov	r2, r3
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <__assert_func+0x2c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4605      	mov	r5, r0
 8007504:	68d8      	ldr	r0, [r3, #12]
 8007506:	b14c      	cbz	r4, 800751c <__assert_func+0x24>
 8007508:	4b07      	ldr	r3, [pc, #28]	; (8007528 <__assert_func+0x30>)
 800750a:	9100      	str	r1, [sp, #0]
 800750c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007510:	4906      	ldr	r1, [pc, #24]	; (800752c <__assert_func+0x34>)
 8007512:	462b      	mov	r3, r5
 8007514:	f000 fbca 	bl	8007cac <fiprintf>
 8007518:	f000 fc5e 	bl	8007dd8 <abort>
 800751c:	4b04      	ldr	r3, [pc, #16]	; (8007530 <__assert_func+0x38>)
 800751e:	461c      	mov	r4, r3
 8007520:	e7f3      	b.n	800750a <__assert_func+0x12>
 8007522:	bf00      	nop
 8007524:	20000064 	.word	0x20000064
 8007528:	08008262 	.word	0x08008262
 800752c:	0800826f 	.word	0x0800826f
 8007530:	0800829d 	.word	0x0800829d

08007534 <_calloc_r>:
 8007534:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007536:	fba1 2402 	umull	r2, r4, r1, r2
 800753a:	b94c      	cbnz	r4, 8007550 <_calloc_r+0x1c>
 800753c:	4611      	mov	r1, r2
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	f7fd ffd8 	bl	80054f4 <_malloc_r>
 8007544:	9a01      	ldr	r2, [sp, #4]
 8007546:	4605      	mov	r5, r0
 8007548:	b930      	cbnz	r0, 8007558 <_calloc_r+0x24>
 800754a:	4628      	mov	r0, r5
 800754c:	b003      	add	sp, #12
 800754e:	bd30      	pop	{r4, r5, pc}
 8007550:	220c      	movs	r2, #12
 8007552:	6002      	str	r2, [r0, #0]
 8007554:	2500      	movs	r5, #0
 8007556:	e7f8      	b.n	800754a <_calloc_r+0x16>
 8007558:	4621      	mov	r1, r4
 800755a:	f7fd f858 	bl	800460e <memset>
 800755e:	e7f4      	b.n	800754a <_calloc_r+0x16>

08007560 <rshift>:
 8007560:	6903      	ldr	r3, [r0, #16]
 8007562:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007566:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800756a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800756e:	f100 0414 	add.w	r4, r0, #20
 8007572:	dd45      	ble.n	8007600 <rshift+0xa0>
 8007574:	f011 011f 	ands.w	r1, r1, #31
 8007578:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800757c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007580:	d10c      	bne.n	800759c <rshift+0x3c>
 8007582:	f100 0710 	add.w	r7, r0, #16
 8007586:	4629      	mov	r1, r5
 8007588:	42b1      	cmp	r1, r6
 800758a:	d334      	bcc.n	80075f6 <rshift+0x96>
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	1eea      	subs	r2, r5, #3
 8007592:	4296      	cmp	r6, r2
 8007594:	bf38      	it	cc
 8007596:	2300      	movcc	r3, #0
 8007598:	4423      	add	r3, r4
 800759a:	e015      	b.n	80075c8 <rshift+0x68>
 800759c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80075a0:	f1c1 0820 	rsb	r8, r1, #32
 80075a4:	40cf      	lsrs	r7, r1
 80075a6:	f105 0e04 	add.w	lr, r5, #4
 80075aa:	46a1      	mov	r9, r4
 80075ac:	4576      	cmp	r6, lr
 80075ae:	46f4      	mov	ip, lr
 80075b0:	d815      	bhi.n	80075de <rshift+0x7e>
 80075b2:	1a9a      	subs	r2, r3, r2
 80075b4:	0092      	lsls	r2, r2, #2
 80075b6:	3a04      	subs	r2, #4
 80075b8:	3501      	adds	r5, #1
 80075ba:	42ae      	cmp	r6, r5
 80075bc:	bf38      	it	cc
 80075be:	2200      	movcc	r2, #0
 80075c0:	18a3      	adds	r3, r4, r2
 80075c2:	50a7      	str	r7, [r4, r2]
 80075c4:	b107      	cbz	r7, 80075c8 <rshift+0x68>
 80075c6:	3304      	adds	r3, #4
 80075c8:	1b1a      	subs	r2, r3, r4
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80075d0:	bf08      	it	eq
 80075d2:	2300      	moveq	r3, #0
 80075d4:	6102      	str	r2, [r0, #16]
 80075d6:	bf08      	it	eq
 80075d8:	6143      	streq	r3, [r0, #20]
 80075da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075de:	f8dc c000 	ldr.w	ip, [ip]
 80075e2:	fa0c fc08 	lsl.w	ip, ip, r8
 80075e6:	ea4c 0707 	orr.w	r7, ip, r7
 80075ea:	f849 7b04 	str.w	r7, [r9], #4
 80075ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80075f2:	40cf      	lsrs	r7, r1
 80075f4:	e7da      	b.n	80075ac <rshift+0x4c>
 80075f6:	f851 cb04 	ldr.w	ip, [r1], #4
 80075fa:	f847 cf04 	str.w	ip, [r7, #4]!
 80075fe:	e7c3      	b.n	8007588 <rshift+0x28>
 8007600:	4623      	mov	r3, r4
 8007602:	e7e1      	b.n	80075c8 <rshift+0x68>

08007604 <__hexdig_fun>:
 8007604:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007608:	2b09      	cmp	r3, #9
 800760a:	d802      	bhi.n	8007612 <__hexdig_fun+0xe>
 800760c:	3820      	subs	r0, #32
 800760e:	b2c0      	uxtb	r0, r0
 8007610:	4770      	bx	lr
 8007612:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007616:	2b05      	cmp	r3, #5
 8007618:	d801      	bhi.n	800761e <__hexdig_fun+0x1a>
 800761a:	3847      	subs	r0, #71	; 0x47
 800761c:	e7f7      	b.n	800760e <__hexdig_fun+0xa>
 800761e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007622:	2b05      	cmp	r3, #5
 8007624:	d801      	bhi.n	800762a <__hexdig_fun+0x26>
 8007626:	3827      	subs	r0, #39	; 0x27
 8007628:	e7f1      	b.n	800760e <__hexdig_fun+0xa>
 800762a:	2000      	movs	r0, #0
 800762c:	4770      	bx	lr
	...

08007630 <__gethex>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	4617      	mov	r7, r2
 8007636:	680a      	ldr	r2, [r1, #0]
 8007638:	b085      	sub	sp, #20
 800763a:	f102 0b02 	add.w	fp, r2, #2
 800763e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007642:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007646:	4681      	mov	r9, r0
 8007648:	468a      	mov	sl, r1
 800764a:	9302      	str	r3, [sp, #8]
 800764c:	32fe      	adds	r2, #254	; 0xfe
 800764e:	eb02 030b 	add.w	r3, r2, fp
 8007652:	46d8      	mov	r8, fp
 8007654:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	2830      	cmp	r0, #48	; 0x30
 800765c:	d0f7      	beq.n	800764e <__gethex+0x1e>
 800765e:	f7ff ffd1 	bl	8007604 <__hexdig_fun>
 8007662:	4604      	mov	r4, r0
 8007664:	2800      	cmp	r0, #0
 8007666:	d138      	bne.n	80076da <__gethex+0xaa>
 8007668:	49a7      	ldr	r1, [pc, #668]	; (8007908 <__gethex+0x2d8>)
 800766a:	2201      	movs	r2, #1
 800766c:	4640      	mov	r0, r8
 800766e:	f7ff ff0b 	bl	8007488 <strncmp>
 8007672:	4606      	mov	r6, r0
 8007674:	2800      	cmp	r0, #0
 8007676:	d169      	bne.n	800774c <__gethex+0x11c>
 8007678:	f898 0001 	ldrb.w	r0, [r8, #1]
 800767c:	465d      	mov	r5, fp
 800767e:	f7ff ffc1 	bl	8007604 <__hexdig_fun>
 8007682:	2800      	cmp	r0, #0
 8007684:	d064      	beq.n	8007750 <__gethex+0x120>
 8007686:	465a      	mov	r2, fp
 8007688:	7810      	ldrb	r0, [r2, #0]
 800768a:	2830      	cmp	r0, #48	; 0x30
 800768c:	4690      	mov	r8, r2
 800768e:	f102 0201 	add.w	r2, r2, #1
 8007692:	d0f9      	beq.n	8007688 <__gethex+0x58>
 8007694:	f7ff ffb6 	bl	8007604 <__hexdig_fun>
 8007698:	2301      	movs	r3, #1
 800769a:	fab0 f480 	clz	r4, r0
 800769e:	0964      	lsrs	r4, r4, #5
 80076a0:	465e      	mov	r6, fp
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	4642      	mov	r2, r8
 80076a6:	4615      	mov	r5, r2
 80076a8:	3201      	adds	r2, #1
 80076aa:	7828      	ldrb	r0, [r5, #0]
 80076ac:	f7ff ffaa 	bl	8007604 <__hexdig_fun>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d1f8      	bne.n	80076a6 <__gethex+0x76>
 80076b4:	4994      	ldr	r1, [pc, #592]	; (8007908 <__gethex+0x2d8>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	4628      	mov	r0, r5
 80076ba:	f7ff fee5 	bl	8007488 <strncmp>
 80076be:	b978      	cbnz	r0, 80076e0 <__gethex+0xb0>
 80076c0:	b946      	cbnz	r6, 80076d4 <__gethex+0xa4>
 80076c2:	1c6e      	adds	r6, r5, #1
 80076c4:	4632      	mov	r2, r6
 80076c6:	4615      	mov	r5, r2
 80076c8:	3201      	adds	r2, #1
 80076ca:	7828      	ldrb	r0, [r5, #0]
 80076cc:	f7ff ff9a 	bl	8007604 <__hexdig_fun>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1f8      	bne.n	80076c6 <__gethex+0x96>
 80076d4:	1b73      	subs	r3, r6, r5
 80076d6:	009e      	lsls	r6, r3, #2
 80076d8:	e004      	b.n	80076e4 <__gethex+0xb4>
 80076da:	2400      	movs	r4, #0
 80076dc:	4626      	mov	r6, r4
 80076de:	e7e1      	b.n	80076a4 <__gethex+0x74>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	d1f7      	bne.n	80076d4 <__gethex+0xa4>
 80076e4:	782b      	ldrb	r3, [r5, #0]
 80076e6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80076ea:	2b50      	cmp	r3, #80	; 0x50
 80076ec:	d13d      	bne.n	800776a <__gethex+0x13a>
 80076ee:	786b      	ldrb	r3, [r5, #1]
 80076f0:	2b2b      	cmp	r3, #43	; 0x2b
 80076f2:	d02f      	beq.n	8007754 <__gethex+0x124>
 80076f4:	2b2d      	cmp	r3, #45	; 0x2d
 80076f6:	d031      	beq.n	800775c <__gethex+0x12c>
 80076f8:	1c69      	adds	r1, r5, #1
 80076fa:	f04f 0b00 	mov.w	fp, #0
 80076fe:	7808      	ldrb	r0, [r1, #0]
 8007700:	f7ff ff80 	bl	8007604 <__hexdig_fun>
 8007704:	1e42      	subs	r2, r0, #1
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	2a18      	cmp	r2, #24
 800770a:	d82e      	bhi.n	800776a <__gethex+0x13a>
 800770c:	f1a0 0210 	sub.w	r2, r0, #16
 8007710:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007714:	f7ff ff76 	bl	8007604 <__hexdig_fun>
 8007718:	f100 3cff 	add.w	ip, r0, #4294967295
 800771c:	fa5f fc8c 	uxtb.w	ip, ip
 8007720:	f1bc 0f18 	cmp.w	ip, #24
 8007724:	d91d      	bls.n	8007762 <__gethex+0x132>
 8007726:	f1bb 0f00 	cmp.w	fp, #0
 800772a:	d000      	beq.n	800772e <__gethex+0xfe>
 800772c:	4252      	negs	r2, r2
 800772e:	4416      	add	r6, r2
 8007730:	f8ca 1000 	str.w	r1, [sl]
 8007734:	b1dc      	cbz	r4, 800776e <__gethex+0x13e>
 8007736:	9b01      	ldr	r3, [sp, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bf14      	ite	ne
 800773c:	f04f 0800 	movne.w	r8, #0
 8007740:	f04f 0806 	moveq.w	r8, #6
 8007744:	4640      	mov	r0, r8
 8007746:	b005      	add	sp, #20
 8007748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774c:	4645      	mov	r5, r8
 800774e:	4626      	mov	r6, r4
 8007750:	2401      	movs	r4, #1
 8007752:	e7c7      	b.n	80076e4 <__gethex+0xb4>
 8007754:	f04f 0b00 	mov.w	fp, #0
 8007758:	1ca9      	adds	r1, r5, #2
 800775a:	e7d0      	b.n	80076fe <__gethex+0xce>
 800775c:	f04f 0b01 	mov.w	fp, #1
 8007760:	e7fa      	b.n	8007758 <__gethex+0x128>
 8007762:	230a      	movs	r3, #10
 8007764:	fb03 0002 	mla	r0, r3, r2, r0
 8007768:	e7d0      	b.n	800770c <__gethex+0xdc>
 800776a:	4629      	mov	r1, r5
 800776c:	e7e0      	b.n	8007730 <__gethex+0x100>
 800776e:	eba5 0308 	sub.w	r3, r5, r8
 8007772:	3b01      	subs	r3, #1
 8007774:	4621      	mov	r1, r4
 8007776:	2b07      	cmp	r3, #7
 8007778:	dc0a      	bgt.n	8007790 <__gethex+0x160>
 800777a:	4648      	mov	r0, r9
 800777c:	f7fd ff46 	bl	800560c <_Balloc>
 8007780:	4604      	mov	r4, r0
 8007782:	b940      	cbnz	r0, 8007796 <__gethex+0x166>
 8007784:	4b61      	ldr	r3, [pc, #388]	; (800790c <__gethex+0x2dc>)
 8007786:	4602      	mov	r2, r0
 8007788:	21e4      	movs	r1, #228	; 0xe4
 800778a:	4861      	ldr	r0, [pc, #388]	; (8007910 <__gethex+0x2e0>)
 800778c:	f7ff feb4 	bl	80074f8 <__assert_func>
 8007790:	3101      	adds	r1, #1
 8007792:	105b      	asrs	r3, r3, #1
 8007794:	e7ef      	b.n	8007776 <__gethex+0x146>
 8007796:	f100 0a14 	add.w	sl, r0, #20
 800779a:	2300      	movs	r3, #0
 800779c:	495a      	ldr	r1, [pc, #360]	; (8007908 <__gethex+0x2d8>)
 800779e:	f8cd a004 	str.w	sl, [sp, #4]
 80077a2:	469b      	mov	fp, r3
 80077a4:	45a8      	cmp	r8, r5
 80077a6:	d342      	bcc.n	800782e <__gethex+0x1fe>
 80077a8:	9801      	ldr	r0, [sp, #4]
 80077aa:	f840 bb04 	str.w	fp, [r0], #4
 80077ae:	eba0 000a 	sub.w	r0, r0, sl
 80077b2:	1080      	asrs	r0, r0, #2
 80077b4:	6120      	str	r0, [r4, #16]
 80077b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80077ba:	4658      	mov	r0, fp
 80077bc:	f7fe f818 	bl	80057f0 <__hi0bits>
 80077c0:	683d      	ldr	r5, [r7, #0]
 80077c2:	eba8 0000 	sub.w	r0, r8, r0
 80077c6:	42a8      	cmp	r0, r5
 80077c8:	dd59      	ble.n	800787e <__gethex+0x24e>
 80077ca:	eba0 0805 	sub.w	r8, r0, r5
 80077ce:	4641      	mov	r1, r8
 80077d0:	4620      	mov	r0, r4
 80077d2:	f7fe fba7 	bl	8005f24 <__any_on>
 80077d6:	4683      	mov	fp, r0
 80077d8:	b1b8      	cbz	r0, 800780a <__gethex+0x1da>
 80077da:	f108 33ff 	add.w	r3, r8, #4294967295
 80077de:	1159      	asrs	r1, r3, #5
 80077e0:	f003 021f 	and.w	r2, r3, #31
 80077e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80077e8:	f04f 0b01 	mov.w	fp, #1
 80077ec:	fa0b f202 	lsl.w	r2, fp, r2
 80077f0:	420a      	tst	r2, r1
 80077f2:	d00a      	beq.n	800780a <__gethex+0x1da>
 80077f4:	455b      	cmp	r3, fp
 80077f6:	dd06      	ble.n	8007806 <__gethex+0x1d6>
 80077f8:	f1a8 0102 	sub.w	r1, r8, #2
 80077fc:	4620      	mov	r0, r4
 80077fe:	f7fe fb91 	bl	8005f24 <__any_on>
 8007802:	2800      	cmp	r0, #0
 8007804:	d138      	bne.n	8007878 <__gethex+0x248>
 8007806:	f04f 0b02 	mov.w	fp, #2
 800780a:	4641      	mov	r1, r8
 800780c:	4620      	mov	r0, r4
 800780e:	f7ff fea7 	bl	8007560 <rshift>
 8007812:	4446      	add	r6, r8
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	42b3      	cmp	r3, r6
 8007818:	da41      	bge.n	800789e <__gethex+0x26e>
 800781a:	4621      	mov	r1, r4
 800781c:	4648      	mov	r0, r9
 800781e:	f7fd ff35 	bl	800568c <_Bfree>
 8007822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007824:	2300      	movs	r3, #0
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800782c:	e78a      	b.n	8007744 <__gethex+0x114>
 800782e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007832:	2a2e      	cmp	r2, #46	; 0x2e
 8007834:	d014      	beq.n	8007860 <__gethex+0x230>
 8007836:	2b20      	cmp	r3, #32
 8007838:	d106      	bne.n	8007848 <__gethex+0x218>
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	f843 bb04 	str.w	fp, [r3], #4
 8007840:	f04f 0b00 	mov.w	fp, #0
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	465b      	mov	r3, fp
 8007848:	7828      	ldrb	r0, [r5, #0]
 800784a:	9303      	str	r3, [sp, #12]
 800784c:	f7ff feda 	bl	8007604 <__hexdig_fun>
 8007850:	9b03      	ldr	r3, [sp, #12]
 8007852:	f000 000f 	and.w	r0, r0, #15
 8007856:	4098      	lsls	r0, r3
 8007858:	ea4b 0b00 	orr.w	fp, fp, r0
 800785c:	3304      	adds	r3, #4
 800785e:	e7a1      	b.n	80077a4 <__gethex+0x174>
 8007860:	45a8      	cmp	r8, r5
 8007862:	d8e8      	bhi.n	8007836 <__gethex+0x206>
 8007864:	2201      	movs	r2, #1
 8007866:	4628      	mov	r0, r5
 8007868:	9303      	str	r3, [sp, #12]
 800786a:	f7ff fe0d 	bl	8007488 <strncmp>
 800786e:	4926      	ldr	r1, [pc, #152]	; (8007908 <__gethex+0x2d8>)
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	2800      	cmp	r0, #0
 8007874:	d1df      	bne.n	8007836 <__gethex+0x206>
 8007876:	e795      	b.n	80077a4 <__gethex+0x174>
 8007878:	f04f 0b03 	mov.w	fp, #3
 800787c:	e7c5      	b.n	800780a <__gethex+0x1da>
 800787e:	da0b      	bge.n	8007898 <__gethex+0x268>
 8007880:	eba5 0800 	sub.w	r8, r5, r0
 8007884:	4621      	mov	r1, r4
 8007886:	4642      	mov	r2, r8
 8007888:	4648      	mov	r0, r9
 800788a:	f7fe f919 	bl	8005ac0 <__lshift>
 800788e:	eba6 0608 	sub.w	r6, r6, r8
 8007892:	4604      	mov	r4, r0
 8007894:	f100 0a14 	add.w	sl, r0, #20
 8007898:	f04f 0b00 	mov.w	fp, #0
 800789c:	e7ba      	b.n	8007814 <__gethex+0x1e4>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	42b3      	cmp	r3, r6
 80078a2:	dd73      	ble.n	800798c <__gethex+0x35c>
 80078a4:	1b9e      	subs	r6, r3, r6
 80078a6:	42b5      	cmp	r5, r6
 80078a8:	dc34      	bgt.n	8007914 <__gethex+0x2e4>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d023      	beq.n	80078f8 <__gethex+0x2c8>
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d025      	beq.n	8007900 <__gethex+0x2d0>
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d115      	bne.n	80078e4 <__gethex+0x2b4>
 80078b8:	42b5      	cmp	r5, r6
 80078ba:	d113      	bne.n	80078e4 <__gethex+0x2b4>
 80078bc:	2d01      	cmp	r5, #1
 80078be:	d10b      	bne.n	80078d8 <__gethex+0x2a8>
 80078c0:	9a02      	ldr	r2, [sp, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	2301      	movs	r3, #1
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	f8ca 3000 	str.w	r3, [sl]
 80078ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80078d4:	601c      	str	r4, [r3, #0]
 80078d6:	e735      	b.n	8007744 <__gethex+0x114>
 80078d8:	1e69      	subs	r1, r5, #1
 80078da:	4620      	mov	r0, r4
 80078dc:	f7fe fb22 	bl	8005f24 <__any_on>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d1ed      	bne.n	80078c0 <__gethex+0x290>
 80078e4:	4621      	mov	r1, r4
 80078e6:	4648      	mov	r0, r9
 80078e8:	f7fd fed0 	bl	800568c <_Bfree>
 80078ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078ee:	2300      	movs	r3, #0
 80078f0:	6013      	str	r3, [r2, #0]
 80078f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80078f6:	e725      	b.n	8007744 <__gethex+0x114>
 80078f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f2      	bne.n	80078e4 <__gethex+0x2b4>
 80078fe:	e7df      	b.n	80078c0 <__gethex+0x290>
 8007900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1dc      	bne.n	80078c0 <__gethex+0x290>
 8007906:	e7ed      	b.n	80078e4 <__gethex+0x2b4>
 8007908:	080080f4 	.word	0x080080f4
 800790c:	08007f89 	.word	0x08007f89
 8007910:	0800829e 	.word	0x0800829e
 8007914:	f106 38ff 	add.w	r8, r6, #4294967295
 8007918:	f1bb 0f00 	cmp.w	fp, #0
 800791c:	d133      	bne.n	8007986 <__gethex+0x356>
 800791e:	f1b8 0f00 	cmp.w	r8, #0
 8007922:	d004      	beq.n	800792e <__gethex+0x2fe>
 8007924:	4641      	mov	r1, r8
 8007926:	4620      	mov	r0, r4
 8007928:	f7fe fafc 	bl	8005f24 <__any_on>
 800792c:	4683      	mov	fp, r0
 800792e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007932:	2301      	movs	r3, #1
 8007934:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007938:	f008 081f 	and.w	r8, r8, #31
 800793c:	fa03 f308 	lsl.w	r3, r3, r8
 8007940:	4213      	tst	r3, r2
 8007942:	4631      	mov	r1, r6
 8007944:	4620      	mov	r0, r4
 8007946:	bf18      	it	ne
 8007948:	f04b 0b02 	orrne.w	fp, fp, #2
 800794c:	1bad      	subs	r5, r5, r6
 800794e:	f7ff fe07 	bl	8007560 <rshift>
 8007952:	687e      	ldr	r6, [r7, #4]
 8007954:	f04f 0802 	mov.w	r8, #2
 8007958:	f1bb 0f00 	cmp.w	fp, #0
 800795c:	d04a      	beq.n	80079f4 <__gethex+0x3c4>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b02      	cmp	r3, #2
 8007962:	d016      	beq.n	8007992 <__gethex+0x362>
 8007964:	2b03      	cmp	r3, #3
 8007966:	d018      	beq.n	800799a <__gethex+0x36a>
 8007968:	2b01      	cmp	r3, #1
 800796a:	d109      	bne.n	8007980 <__gethex+0x350>
 800796c:	f01b 0f02 	tst.w	fp, #2
 8007970:	d006      	beq.n	8007980 <__gethex+0x350>
 8007972:	f8da 3000 	ldr.w	r3, [sl]
 8007976:	ea4b 0b03 	orr.w	fp, fp, r3
 800797a:	f01b 0f01 	tst.w	fp, #1
 800797e:	d10f      	bne.n	80079a0 <__gethex+0x370>
 8007980:	f048 0810 	orr.w	r8, r8, #16
 8007984:	e036      	b.n	80079f4 <__gethex+0x3c4>
 8007986:	f04f 0b01 	mov.w	fp, #1
 800798a:	e7d0      	b.n	800792e <__gethex+0x2fe>
 800798c:	f04f 0801 	mov.w	r8, #1
 8007990:	e7e2      	b.n	8007958 <__gethex+0x328>
 8007992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007994:	f1c3 0301 	rsb	r3, r3, #1
 8007998:	930f      	str	r3, [sp, #60]	; 0x3c
 800799a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ef      	beq.n	8007980 <__gethex+0x350>
 80079a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80079a4:	f104 0214 	add.w	r2, r4, #20
 80079a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80079b2:	2300      	movs	r3, #0
 80079b4:	4694      	mov	ip, r2
 80079b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80079ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80079be:	d01e      	beq.n	80079fe <__gethex+0x3ce>
 80079c0:	3101      	adds	r1, #1
 80079c2:	f8cc 1000 	str.w	r1, [ip]
 80079c6:	f1b8 0f02 	cmp.w	r8, #2
 80079ca:	f104 0214 	add.w	r2, r4, #20
 80079ce:	d13d      	bne.n	8007a4c <__gethex+0x41c>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	42ab      	cmp	r3, r5
 80079d6:	d10b      	bne.n	80079f0 <__gethex+0x3c0>
 80079d8:	1169      	asrs	r1, r5, #5
 80079da:	2301      	movs	r3, #1
 80079dc:	f005 051f 	and.w	r5, r5, #31
 80079e0:	fa03 f505 	lsl.w	r5, r3, r5
 80079e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079e8:	421d      	tst	r5, r3
 80079ea:	bf18      	it	ne
 80079ec:	f04f 0801 	movne.w	r8, #1
 80079f0:	f048 0820 	orr.w	r8, r8, #32
 80079f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079f6:	601c      	str	r4, [r3, #0]
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	601e      	str	r6, [r3, #0]
 80079fc:	e6a2      	b.n	8007744 <__gethex+0x114>
 80079fe:	4290      	cmp	r0, r2
 8007a00:	f842 3c04 	str.w	r3, [r2, #-4]
 8007a04:	d8d6      	bhi.n	80079b4 <__gethex+0x384>
 8007a06:	68a2      	ldr	r2, [r4, #8]
 8007a08:	4593      	cmp	fp, r2
 8007a0a:	db17      	blt.n	8007a3c <__gethex+0x40c>
 8007a0c:	6861      	ldr	r1, [r4, #4]
 8007a0e:	4648      	mov	r0, r9
 8007a10:	3101      	adds	r1, #1
 8007a12:	f7fd fdfb 	bl	800560c <_Balloc>
 8007a16:	4682      	mov	sl, r0
 8007a18:	b918      	cbnz	r0, 8007a22 <__gethex+0x3f2>
 8007a1a:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <__gethex+0x458>)
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	2184      	movs	r1, #132	; 0x84
 8007a20:	e6b3      	b.n	800778a <__gethex+0x15a>
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	3202      	adds	r2, #2
 8007a26:	f104 010c 	add.w	r1, r4, #12
 8007a2a:	0092      	lsls	r2, r2, #2
 8007a2c:	300c      	adds	r0, #12
 8007a2e:	f7ff fd4d 	bl	80074cc <memcpy>
 8007a32:	4621      	mov	r1, r4
 8007a34:	4648      	mov	r0, r9
 8007a36:	f7fd fe29 	bl	800568c <_Bfree>
 8007a3a:	4654      	mov	r4, sl
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	1c51      	adds	r1, r2, #1
 8007a40:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007a44:	6121      	str	r1, [r4, #16]
 8007a46:	2101      	movs	r1, #1
 8007a48:	6151      	str	r1, [r2, #20]
 8007a4a:	e7bc      	b.n	80079c6 <__gethex+0x396>
 8007a4c:	6921      	ldr	r1, [r4, #16]
 8007a4e:	4559      	cmp	r1, fp
 8007a50:	dd0b      	ble.n	8007a6a <__gethex+0x43a>
 8007a52:	2101      	movs	r1, #1
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7ff fd83 	bl	8007560 <rshift>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	3601      	adds	r6, #1
 8007a5e:	42b3      	cmp	r3, r6
 8007a60:	f6ff aedb 	blt.w	800781a <__gethex+0x1ea>
 8007a64:	f04f 0801 	mov.w	r8, #1
 8007a68:	e7c2      	b.n	80079f0 <__gethex+0x3c0>
 8007a6a:	f015 051f 	ands.w	r5, r5, #31
 8007a6e:	d0f9      	beq.n	8007a64 <__gethex+0x434>
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	441a      	add	r2, r3
 8007a74:	f1c5 0520 	rsb	r5, r5, #32
 8007a78:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007a7c:	f7fd feb8 	bl	80057f0 <__hi0bits>
 8007a80:	42a8      	cmp	r0, r5
 8007a82:	dbe6      	blt.n	8007a52 <__gethex+0x422>
 8007a84:	e7ee      	b.n	8007a64 <__gethex+0x434>
 8007a86:	bf00      	nop
 8007a88:	08007f89 	.word	0x08007f89

08007a8c <L_shift>:
 8007a8c:	f1c2 0208 	rsb	r2, r2, #8
 8007a90:	0092      	lsls	r2, r2, #2
 8007a92:	b570      	push	{r4, r5, r6, lr}
 8007a94:	f1c2 0620 	rsb	r6, r2, #32
 8007a98:	6843      	ldr	r3, [r0, #4]
 8007a9a:	6804      	ldr	r4, [r0, #0]
 8007a9c:	fa03 f506 	lsl.w	r5, r3, r6
 8007aa0:	432c      	orrs	r4, r5
 8007aa2:	40d3      	lsrs	r3, r2
 8007aa4:	6004      	str	r4, [r0, #0]
 8007aa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007aaa:	4288      	cmp	r0, r1
 8007aac:	d3f4      	bcc.n	8007a98 <L_shift+0xc>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}

08007ab0 <__match>:
 8007ab0:	b530      	push	{r4, r5, lr}
 8007ab2:	6803      	ldr	r3, [r0, #0]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007aba:	b914      	cbnz	r4, 8007ac2 <__match+0x12>
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	2001      	movs	r0, #1
 8007ac0:	bd30      	pop	{r4, r5, pc}
 8007ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007aca:	2d19      	cmp	r5, #25
 8007acc:	bf98      	it	ls
 8007ace:	3220      	addls	r2, #32
 8007ad0:	42a2      	cmp	r2, r4
 8007ad2:	d0f0      	beq.n	8007ab6 <__match+0x6>
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	e7f3      	b.n	8007ac0 <__match+0x10>

08007ad8 <__hexnan>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	680b      	ldr	r3, [r1, #0]
 8007ade:	6801      	ldr	r1, [r0, #0]
 8007ae0:	115e      	asrs	r6, r3, #5
 8007ae2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ae6:	f013 031f 	ands.w	r3, r3, #31
 8007aea:	b087      	sub	sp, #28
 8007aec:	bf18      	it	ne
 8007aee:	3604      	addne	r6, #4
 8007af0:	2500      	movs	r5, #0
 8007af2:	1f37      	subs	r7, r6, #4
 8007af4:	4682      	mov	sl, r0
 8007af6:	4690      	mov	r8, r2
 8007af8:	9301      	str	r3, [sp, #4]
 8007afa:	f846 5c04 	str.w	r5, [r6, #-4]
 8007afe:	46b9      	mov	r9, r7
 8007b00:	463c      	mov	r4, r7
 8007b02:	9502      	str	r5, [sp, #8]
 8007b04:	46ab      	mov	fp, r5
 8007b06:	784a      	ldrb	r2, [r1, #1]
 8007b08:	1c4b      	adds	r3, r1, #1
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	b342      	cbz	r2, 8007b60 <__hexnan+0x88>
 8007b0e:	4610      	mov	r0, r2
 8007b10:	9105      	str	r1, [sp, #20]
 8007b12:	9204      	str	r2, [sp, #16]
 8007b14:	f7ff fd76 	bl	8007604 <__hexdig_fun>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	d14f      	bne.n	8007bbc <__hexnan+0xe4>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	2a20      	cmp	r2, #32
 8007b22:	d818      	bhi.n	8007b56 <__hexnan+0x7e>
 8007b24:	9b02      	ldr	r3, [sp, #8]
 8007b26:	459b      	cmp	fp, r3
 8007b28:	dd13      	ble.n	8007b52 <__hexnan+0x7a>
 8007b2a:	454c      	cmp	r4, r9
 8007b2c:	d206      	bcs.n	8007b3c <__hexnan+0x64>
 8007b2e:	2d07      	cmp	r5, #7
 8007b30:	dc04      	bgt.n	8007b3c <__hexnan+0x64>
 8007b32:	462a      	mov	r2, r5
 8007b34:	4649      	mov	r1, r9
 8007b36:	4620      	mov	r0, r4
 8007b38:	f7ff ffa8 	bl	8007a8c <L_shift>
 8007b3c:	4544      	cmp	r4, r8
 8007b3e:	d950      	bls.n	8007be2 <__hexnan+0x10a>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f1a4 0904 	sub.w	r9, r4, #4
 8007b46:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b4a:	f8cd b008 	str.w	fp, [sp, #8]
 8007b4e:	464c      	mov	r4, r9
 8007b50:	461d      	mov	r5, r3
 8007b52:	9903      	ldr	r1, [sp, #12]
 8007b54:	e7d7      	b.n	8007b06 <__hexnan+0x2e>
 8007b56:	2a29      	cmp	r2, #41	; 0x29
 8007b58:	d155      	bne.n	8007c06 <__hexnan+0x12e>
 8007b5a:	3102      	adds	r1, #2
 8007b5c:	f8ca 1000 	str.w	r1, [sl]
 8007b60:	f1bb 0f00 	cmp.w	fp, #0
 8007b64:	d04f      	beq.n	8007c06 <__hexnan+0x12e>
 8007b66:	454c      	cmp	r4, r9
 8007b68:	d206      	bcs.n	8007b78 <__hexnan+0xa0>
 8007b6a:	2d07      	cmp	r5, #7
 8007b6c:	dc04      	bgt.n	8007b78 <__hexnan+0xa0>
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4649      	mov	r1, r9
 8007b72:	4620      	mov	r0, r4
 8007b74:	f7ff ff8a 	bl	8007a8c <L_shift>
 8007b78:	4544      	cmp	r4, r8
 8007b7a:	d934      	bls.n	8007be6 <__hexnan+0x10e>
 8007b7c:	f1a8 0204 	sub.w	r2, r8, #4
 8007b80:	4623      	mov	r3, r4
 8007b82:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b86:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b8a:	429f      	cmp	r7, r3
 8007b8c:	d2f9      	bcs.n	8007b82 <__hexnan+0xaa>
 8007b8e:	1b3b      	subs	r3, r7, r4
 8007b90:	f023 0303 	bic.w	r3, r3, #3
 8007b94:	3304      	adds	r3, #4
 8007b96:	3e03      	subs	r6, #3
 8007b98:	3401      	adds	r4, #1
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	bf38      	it	cc
 8007b9e:	2304      	movcc	r3, #4
 8007ba0:	4443      	add	r3, r8
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f843 2b04 	str.w	r2, [r3], #4
 8007ba8:	429f      	cmp	r7, r3
 8007baa:	d2fb      	bcs.n	8007ba4 <__hexnan+0xcc>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b91b      	cbnz	r3, 8007bb8 <__hexnan+0xe0>
 8007bb0:	4547      	cmp	r7, r8
 8007bb2:	d126      	bne.n	8007c02 <__hexnan+0x12a>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	2005      	movs	r0, #5
 8007bba:	e025      	b.n	8007c08 <__hexnan+0x130>
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	2d08      	cmp	r5, #8
 8007bc0:	f10b 0b01 	add.w	fp, fp, #1
 8007bc4:	dd06      	ble.n	8007bd4 <__hexnan+0xfc>
 8007bc6:	4544      	cmp	r4, r8
 8007bc8:	d9c3      	bls.n	8007b52 <__hexnan+0x7a>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bd0:	2501      	movs	r5, #1
 8007bd2:	3c04      	subs	r4, #4
 8007bd4:	6822      	ldr	r2, [r4, #0]
 8007bd6:	f000 000f 	and.w	r0, r0, #15
 8007bda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007bde:	6020      	str	r0, [r4, #0]
 8007be0:	e7b7      	b.n	8007b52 <__hexnan+0x7a>
 8007be2:	2508      	movs	r5, #8
 8007be4:	e7b5      	b.n	8007b52 <__hexnan+0x7a>
 8007be6:	9b01      	ldr	r3, [sp, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0df      	beq.n	8007bac <__hexnan+0xd4>
 8007bec:	f1c3 0320 	rsb	r3, r3, #32
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf4:	40da      	lsrs	r2, r3
 8007bf6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	f846 3c04 	str.w	r3, [r6, #-4]
 8007c00:	e7d4      	b.n	8007bac <__hexnan+0xd4>
 8007c02:	3f04      	subs	r7, #4
 8007c04:	e7d2      	b.n	8007bac <__hexnan+0xd4>
 8007c06:	2004      	movs	r0, #4
 8007c08:	b007      	add	sp, #28
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007c0e <__ascii_mbtowc>:
 8007c0e:	b082      	sub	sp, #8
 8007c10:	b901      	cbnz	r1, 8007c14 <__ascii_mbtowc+0x6>
 8007c12:	a901      	add	r1, sp, #4
 8007c14:	b142      	cbz	r2, 8007c28 <__ascii_mbtowc+0x1a>
 8007c16:	b14b      	cbz	r3, 8007c2c <__ascii_mbtowc+0x1e>
 8007c18:	7813      	ldrb	r3, [r2, #0]
 8007c1a:	600b      	str	r3, [r1, #0]
 8007c1c:	7812      	ldrb	r2, [r2, #0]
 8007c1e:	1e10      	subs	r0, r2, #0
 8007c20:	bf18      	it	ne
 8007c22:	2001      	movne	r0, #1
 8007c24:	b002      	add	sp, #8
 8007c26:	4770      	bx	lr
 8007c28:	4610      	mov	r0, r2
 8007c2a:	e7fb      	b.n	8007c24 <__ascii_mbtowc+0x16>
 8007c2c:	f06f 0001 	mvn.w	r0, #1
 8007c30:	e7f8      	b.n	8007c24 <__ascii_mbtowc+0x16>

08007c32 <_realloc_r>:
 8007c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c36:	4680      	mov	r8, r0
 8007c38:	4614      	mov	r4, r2
 8007c3a:	460e      	mov	r6, r1
 8007c3c:	b921      	cbnz	r1, 8007c48 <_realloc_r+0x16>
 8007c3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c42:	4611      	mov	r1, r2
 8007c44:	f7fd bc56 	b.w	80054f4 <_malloc_r>
 8007c48:	b92a      	cbnz	r2, 8007c56 <_realloc_r+0x24>
 8007c4a:	f7fd fbdf 	bl	800540c <_free_r>
 8007c4e:	4625      	mov	r5, r4
 8007c50:	4628      	mov	r0, r5
 8007c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c56:	f000 f8c6 	bl	8007de6 <_malloc_usable_size_r>
 8007c5a:	4284      	cmp	r4, r0
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	d802      	bhi.n	8007c66 <_realloc_r+0x34>
 8007c60:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c64:	d812      	bhi.n	8007c8c <_realloc_r+0x5a>
 8007c66:	4621      	mov	r1, r4
 8007c68:	4640      	mov	r0, r8
 8007c6a:	f7fd fc43 	bl	80054f4 <_malloc_r>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d0ed      	beq.n	8007c50 <_realloc_r+0x1e>
 8007c74:	42bc      	cmp	r4, r7
 8007c76:	4622      	mov	r2, r4
 8007c78:	4631      	mov	r1, r6
 8007c7a:	bf28      	it	cs
 8007c7c:	463a      	movcs	r2, r7
 8007c7e:	f7ff fc25 	bl	80074cc <memcpy>
 8007c82:	4631      	mov	r1, r6
 8007c84:	4640      	mov	r0, r8
 8007c86:	f7fd fbc1 	bl	800540c <_free_r>
 8007c8a:	e7e1      	b.n	8007c50 <_realloc_r+0x1e>
 8007c8c:	4635      	mov	r5, r6
 8007c8e:	e7df      	b.n	8007c50 <_realloc_r+0x1e>

08007c90 <__ascii_wctomb>:
 8007c90:	b149      	cbz	r1, 8007ca6 <__ascii_wctomb+0x16>
 8007c92:	2aff      	cmp	r2, #255	; 0xff
 8007c94:	bf85      	ittet	hi
 8007c96:	238a      	movhi	r3, #138	; 0x8a
 8007c98:	6003      	strhi	r3, [r0, #0]
 8007c9a:	700a      	strbls	r2, [r1, #0]
 8007c9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ca0:	bf98      	it	ls
 8007ca2:	2001      	movls	r0, #1
 8007ca4:	4770      	bx	lr
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	4770      	bx	lr
	...

08007cac <fiprintf>:
 8007cac:	b40e      	push	{r1, r2, r3}
 8007cae:	b503      	push	{r0, r1, lr}
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	ab03      	add	r3, sp, #12
 8007cb4:	4805      	ldr	r0, [pc, #20]	; (8007ccc <fiprintf+0x20>)
 8007cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cba:	6800      	ldr	r0, [r0, #0]
 8007cbc:	9301      	str	r3, [sp, #4]
 8007cbe:	f7ff f96b 	bl	8006f98 <_vfiprintf_r>
 8007cc2:	b002      	add	sp, #8
 8007cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cc8:	b003      	add	sp, #12
 8007cca:	4770      	bx	lr
 8007ccc:	20000064 	.word	0x20000064

08007cd0 <__swhatbuf_r>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	b096      	sub	sp, #88	; 0x58
 8007cdc:	4615      	mov	r5, r2
 8007cde:	461e      	mov	r6, r3
 8007ce0:	da0d      	bge.n	8007cfe <__swhatbuf_r+0x2e>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	bf0c      	ite	eq
 8007cee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cf2:	2340      	movne	r3, #64	; 0x40
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	6031      	str	r1, [r6, #0]
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	b016      	add	sp, #88	; 0x58
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
 8007cfe:	466a      	mov	r2, sp
 8007d00:	f000 f848 	bl	8007d94 <_fstat_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	dbec      	blt.n	8007ce2 <__swhatbuf_r+0x12>
 8007d08:	9901      	ldr	r1, [sp, #4]
 8007d0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d12:	4259      	negs	r1, r3
 8007d14:	4159      	adcs	r1, r3
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	e7eb      	b.n	8007cf4 <__swhatbuf_r+0x24>

08007d1c <__smakebuf_r>:
 8007d1c:	898b      	ldrh	r3, [r1, #12]
 8007d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d20:	079d      	lsls	r5, r3, #30
 8007d22:	4606      	mov	r6, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	d507      	bpl.n	8007d38 <__smakebuf_r+0x1c>
 8007d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	2301      	movs	r3, #1
 8007d32:	6163      	str	r3, [r4, #20]
 8007d34:	b002      	add	sp, #8
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	ab01      	add	r3, sp, #4
 8007d3a:	466a      	mov	r2, sp
 8007d3c:	f7ff ffc8 	bl	8007cd0 <__swhatbuf_r>
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	4605      	mov	r5, r0
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7fd fbd5 	bl	80054f4 <_malloc_r>
 8007d4a:	b948      	cbnz	r0, 8007d60 <__smakebuf_r+0x44>
 8007d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d4ef      	bmi.n	8007d34 <__smakebuf_r+0x18>
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	f043 0302 	orr.w	r3, r3, #2
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	e7e3      	b.n	8007d28 <__smakebuf_r+0xc>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	6163      	str	r3, [r4, #20]
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	6120      	str	r0, [r4, #16]
 8007d72:	b15b      	cbz	r3, 8007d8c <__smakebuf_r+0x70>
 8007d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f81d 	bl	8007db8 <_isatty_r>
 8007d7e:	b128      	cbz	r0, 8007d8c <__smakebuf_r+0x70>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	431d      	orrs	r5, r3
 8007d90:	81a5      	strh	r5, [r4, #12]
 8007d92:	e7cf      	b.n	8007d34 <__smakebuf_r+0x18>

08007d94 <_fstat_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4d07      	ldr	r5, [pc, #28]	; (8007db4 <_fstat_r+0x20>)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	4608      	mov	r0, r1
 8007d9e:	4611      	mov	r1, r2
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	f7f9 fbac 	bl	80014fe <_fstat>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d102      	bne.n	8007db0 <_fstat_r+0x1c>
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	b103      	cbz	r3, 8007db0 <_fstat_r+0x1c>
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	200003dc 	.word	0x200003dc

08007db8 <_isatty_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d06      	ldr	r5, [pc, #24]	; (8007dd4 <_isatty_r+0x1c>)
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	f7f9 fbab 	bl	800151e <_isatty>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d102      	bne.n	8007dd2 <_isatty_r+0x1a>
 8007dcc:	682b      	ldr	r3, [r5, #0]
 8007dce:	b103      	cbz	r3, 8007dd2 <_isatty_r+0x1a>
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
 8007dd4:	200003dc 	.word	0x200003dc

08007dd8 <abort>:
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	2006      	movs	r0, #6
 8007ddc:	f000 f834 	bl	8007e48 <raise>
 8007de0:	2001      	movs	r0, #1
 8007de2:	f7f9 fb3d 	bl	8001460 <_exit>

08007de6 <_malloc_usable_size_r>:
 8007de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dea:	1f18      	subs	r0, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbc      	itt	lt
 8007df0:	580b      	ldrlt	r3, [r1, r0]
 8007df2:	18c0      	addlt	r0, r0, r3
 8007df4:	4770      	bx	lr

08007df6 <_raise_r>:
 8007df6:	291f      	cmp	r1, #31
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	460d      	mov	r5, r1
 8007dfe:	d904      	bls.n	8007e0a <_raise_r+0x14>
 8007e00:	2316      	movs	r3, #22
 8007e02:	6003      	str	r3, [r0, #0]
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	bd38      	pop	{r3, r4, r5, pc}
 8007e0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007e0c:	b112      	cbz	r2, 8007e14 <_raise_r+0x1e>
 8007e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e12:	b94b      	cbnz	r3, 8007e28 <_raise_r+0x32>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 f831 	bl	8007e7c <_getpid_r>
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	4620      	mov	r0, r4
 8007e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e24:	f000 b818 	b.w	8007e58 <_kill_r>
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d00a      	beq.n	8007e42 <_raise_r+0x4c>
 8007e2c:	1c59      	adds	r1, r3, #1
 8007e2e:	d103      	bne.n	8007e38 <_raise_r+0x42>
 8007e30:	2316      	movs	r3, #22
 8007e32:	6003      	str	r3, [r0, #0]
 8007e34:	2001      	movs	r0, #1
 8007e36:	e7e7      	b.n	8007e08 <_raise_r+0x12>
 8007e38:	2400      	movs	r4, #0
 8007e3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e3e:	4628      	mov	r0, r5
 8007e40:	4798      	blx	r3
 8007e42:	2000      	movs	r0, #0
 8007e44:	e7e0      	b.n	8007e08 <_raise_r+0x12>
	...

08007e48 <raise>:
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <raise+0xc>)
 8007e4a:	4601      	mov	r1, r0
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	f7ff bfd2 	b.w	8007df6 <_raise_r>
 8007e52:	bf00      	nop
 8007e54:	20000064 	.word	0x20000064

08007e58 <_kill_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d07      	ldr	r5, [pc, #28]	; (8007e78 <_kill_r+0x20>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	4611      	mov	r1, r2
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	f7f9 faeb 	bl	8001440 <_kill>
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d102      	bne.n	8007e74 <_kill_r+0x1c>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b103      	cbz	r3, 8007e74 <_kill_r+0x1c>
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	200003dc 	.word	0x200003dc

08007e7c <_getpid_r>:
 8007e7c:	f7f9 bad8 	b.w	8001430 <_getpid>

08007e80 <_init>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	bf00      	nop
 8007e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e86:	bc08      	pop	{r3}
 8007e88:	469e      	mov	lr, r3
 8007e8a:	4770      	bx	lr

08007e8c <_fini>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	bf00      	nop
 8007e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e92:	bc08      	pop	{r3}
 8007e94:	469e      	mov	lr, r3
 8007e96:	4770      	bx	lr

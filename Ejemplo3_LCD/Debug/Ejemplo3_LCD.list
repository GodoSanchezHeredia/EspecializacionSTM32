
Ejemplo3_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027f4  080027f4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080027fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08002858  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08002858  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b43  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010b7  00000000  00000000  00023c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000478  00000000  00000000  00024cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000332  00000000  00000000  00025148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000147b0  00000000  00000000  0002547a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005c5e  00000000  00000000  00039c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008083e  00000000  00000000  0003f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014e4  00000000  00000000  000c00c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000c15ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002770 	.word	0x08002770

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002770 	.word	0x08002770

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LCD_STM32_CMD>:
#include "LCD.h"
#include "main.h"
#include "stm32f4xx_hal.h"


void LCD_STM32_CMD(uint8_t a){
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
	E_OFF;
 8000586:	2200      	movs	r2, #0
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	480c      	ldr	r0, [pc, #48]	; (80005bc <LCD_STM32_CMD+0x40>)
 800058c:	f001 f80e 	bl	80015ac <HAL_GPIO_WritePin>
	E_ON;
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4809      	ldr	r0, [pc, #36]	; (80005bc <LCD_STM32_CMD+0x40>)
 8000596:	f001 f809 	bl	80015ac <HAL_GPIO_WritePin>
	LCD_STM32_BUS(a);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f80f 	bl	80005c0 <LCD_STM32_BUS>
	HAL_Delay(2);
 80005a2:	2002      	movs	r0, #2
 80005a4:	f000 fd74 	bl	8001090 <HAL_Delay>
	E_OFF;
 80005a8:	2200      	movs	r2, #0
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <LCD_STM32_CMD+0x40>)
 80005ae:	f000 fffd 	bl	80015ac <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020800 	.word	0x40020800

080005c0 <LCD_STM32_BUS>:
void LCD_STM32_BUS(uint8_t a){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]

	//0001
	if(a & 0x01){D4_ON;}
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d005      	beq.n	80005e0 <LCD_STM32_BUS+0x20>
 80005d4:	2201      	movs	r2, #1
 80005d6:	2140      	movs	r1, #64	; 0x40
 80005d8:	481e      	ldr	r0, [pc, #120]	; (8000654 <LCD_STM32_BUS+0x94>)
 80005da:	f000 ffe7 	bl	80015ac <HAL_GPIO_WritePin>
 80005de:	e004      	b.n	80005ea <LCD_STM32_BUS+0x2a>
	else{D4_OFF};
 80005e0:	2200      	movs	r2, #0
 80005e2:	2140      	movs	r1, #64	; 0x40
 80005e4:	481b      	ldr	r0, [pc, #108]	; (8000654 <LCD_STM32_BUS+0x94>)
 80005e6:	f000 ffe1 	bl	80015ac <HAL_GPIO_WritePin>
	//0010
	if(a & 0x02){D5_ON;}
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d005      	beq.n	8000600 <LCD_STM32_BUS+0x40>
 80005f4:	2201      	movs	r2, #1
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	4817      	ldr	r0, [pc, #92]	; (8000658 <LCD_STM32_BUS+0x98>)
 80005fa:	f000 ffd7 	bl	80015ac <HAL_GPIO_WritePin>
 80005fe:	e004      	b.n	800060a <LCD_STM32_BUS+0x4a>
	else{D5_OFF};
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	4814      	ldr	r0, [pc, #80]	; (8000658 <LCD_STM32_BUS+0x98>)
 8000606:	f000 ffd1 	bl	80015ac <HAL_GPIO_WritePin>
	//0100
	if(a & 0x04){D6_ON;}
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 0304 	and.w	r3, r3, #4
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <LCD_STM32_BUS+0x60>
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <LCD_STM32_BUS+0x98>)
 800061a:	f000 ffc7 	bl	80015ac <HAL_GPIO_WritePin>
 800061e:	e004      	b.n	800062a <LCD_STM32_BUS+0x6a>
	else{D6_OFF};
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LCD_STM32_BUS+0x98>)
 8000626:	f000 ffc1 	bl	80015ac <HAL_GPIO_WritePin>
	//1000
	if(a & 0x08){D7_ON;}
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d005      	beq.n	8000640 <LCD_STM32_BUS+0x80>
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	4807      	ldr	r0, [pc, #28]	; (8000658 <LCD_STM32_BUS+0x98>)
 800063a:	f000 ffb7 	bl	80015ac <HAL_GPIO_WritePin>
	else{D7_OFF};
}
 800063e:	e004      	b.n	800064a <LCD_STM32_BUS+0x8a>
	else{D7_OFF};
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <LCD_STM32_BUS+0x98>)
 8000646:	f000 ffb1 	bl	80015ac <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40020400 	.word	0x40020400
 8000658:	40020000 	.word	0x40020000

0800065c <LCD_STM32_INIT>:

void LCD_STM32_INIT(void){
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

	LCD_STM32_CMD(0x03);
 8000660:	2003      	movs	r0, #3
 8000662:	f7ff ff8b 	bl	800057c <LCD_STM32_CMD>
	HAL_Delay(3);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 fd12 	bl	8001090 <HAL_Delay>
	LCD_STM32_CMD(0x03);
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff ff85 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x03);
 8000672:	2003      	movs	r0, #3
 8000674:	f7ff ff82 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x02);
 8000678:	2002      	movs	r0, #2
 800067a:	f7ff ff7f 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x02);
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff ff7c 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x08);
 8000684:	2008      	movs	r0, #8
 8000686:	f7ff ff79 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff76 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x08);
 8000690:	2008      	movs	r0, #8
 8000692:	f7ff ff73 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff70 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x01);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff6d 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f7ff ff6a 	bl	800057c <LCD_STM32_CMD>
	//Con curso activado es 0XD,  sin cursor : 0xC
	LCD_STM32_CMD(0x0D);
 80006a8:	200d      	movs	r0, #13
 80006aa:	f7ff ff67 	bl	800057c <LCD_STM32_CMD>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <LCD_STM32_SET_CURSOR>:


void LCD_STM32_SET_CURSOR(uint8_t x,Ubicacion y){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]

	uint8_t m,n;

	RS_OFF;
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <LCD_STM32_SET_CURSOR+0x84>)
 80006cc:	f000 ff6e 	bl	80015ac <HAL_GPIO_WritePin>
	switch (y) {
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b03      	cmp	r3, #3
 80006d4:	d82b      	bhi.n	800072e <LCD_STM32_SET_CURSOR+0x7a>
 80006d6:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <LCD_STM32_SET_CURSOR+0x28>)
 80006d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006dc:	080006ed 	.word	0x080006ed
 80006e0:	0800070d 	.word	0x0800070d
 80006e4:	0800072d 	.word	0x0800072d
 80006e8:	0800072d 	.word	0x0800072d
		case fila1:
			m=0x80+x;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	3b80      	subs	r3, #128	; 0x80
 80006f0:	73fb      	strb	r3, [r7, #15]
			n=(0x80+x)>>4;
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	3380      	adds	r3, #128	; 0x80
 80006f6:	111b      	asrs	r3, r3, #4
 80006f8:	73bb      	strb	r3, [r7, #14]
			LCD_STM32_CMD(n);
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff3d 	bl	800057c <LCD_STM32_CMD>
			LCD_STM32_CMD(m);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff39 	bl	800057c <LCD_STM32_CMD>
			break;
 800070a:	e010      	b.n	800072e <LCD_STM32_SET_CURSOR+0x7a>
		case fila2:
			m=0xC0+x;
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3b40      	subs	r3, #64	; 0x40
 8000710:	73fb      	strb	r3, [r7, #15]
			n=(0xC0+x)>>4;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	33c0      	adds	r3, #192	; 0xc0
 8000716:	111b      	asrs	r3, r3, #4
 8000718:	73bb      	strb	r3, [r7, #14]
			LCD_STM32_CMD(n);
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff ff2d 	bl	800057c <LCD_STM32_CMD>
			LCD_STM32_CMD(m);
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff29 	bl	800057c <LCD_STM32_CMD>
			break;
 800072a:	e000      	b.n	800072e <LCD_STM32_SET_CURSOR+0x7a>
		case fila3:

			break;
 800072c:	bf00      	nop

			break;
	}


}
 800072e:	bf00      	nop
 8000730:	3710      	adds	r7, #16
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020000 	.word	0x40020000

0800073c <LCD_STM32_PRINT_CHAR>:
void LCD_STM32_PRINT_CHAR(char a){
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m = a>>4;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	73fb      	strb	r3, [r7, #15]
    n = a;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	73bb      	strb	r3, [r7, #14]
	RS_ON;
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000756:	4807      	ldr	r0, [pc, #28]	; (8000774 <LCD_STM32_PRINT_CHAR+0x38>)
 8000758:	f000 ff28 	bl	80015ac <HAL_GPIO_WritePin>
	LCD_STM32_CMD(m);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff0c 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(n);
 8000764:	7bbb      	ldrb	r3, [r7, #14]
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff08 	bl	800057c <LCD_STM32_CMD>

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020000 	.word	0x40020000

08000778 <LCD_STM32_PRINT_STRING>:
void LCD_STM32_PRINT_STRING(char *a){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]


	while(*a){
 8000780:	e006      	b.n	8000790 <LCD_STM32_PRINT_STRING+0x18>
			LCD_STM32_PRINT_CHAR(*a++);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffd6 	bl	800073c <LCD_STM32_PRINT_CHAR>
	while(*a){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f4      	bne.n	8000782 <LCD_STM32_PRINT_STRING+0xa>
	}

}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <LCD_STM32_New_Char>:

void LCD_STM32_New_Char(uint8_t a,uint8_t b,uint8_t c,uint8_t d ,uint8_t e ,uint8_t f,uint8_t g,uint8_t h,uint8_t i){
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	71fb      	strb	r3, [r7, #7]
 80007b6:	4603      	mov	r3, r0
 80007b8:	71bb      	strb	r3, [r7, #6]
 80007ba:	460b      	mov	r3, r1
 80007bc:	717b      	strb	r3, [r7, #5]
 80007be:	4613      	mov	r3, r2
 80007c0:	713b      	strb	r3, [r7, #4]

	  uint8_t m,n;
		  switch(a){
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	f000 8132 	beq.w	8000a2e <LCD_STM32_New_Char+0x28a>
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	f300 81bd 	bgt.w	8000b4a <LCD_STM32_New_Char+0x3a6>
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d003      	beq.n	80007dc <LCD_STM32_New_Char+0x38>
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	f000 808f 	beq.w	80008f8 <LCD_STM32_New_Char+0x154>
			  break;
		  }



}
 80007da:	e1b6      	b.n	8000b4a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_CMD(0x04);
 80007dc:	2004      	movs	r0, #4
 80007de:	f7ff fecd 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0x00);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff feca 	bl	800057c <LCD_STM32_CMD>
			  RS_ON;
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	48d9      	ldr	r0, [pc, #868]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 80007f0:	f000 fedc 	bl	80015ac <HAL_GPIO_WritePin>
			  m=b>>4;
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	73fb      	strb	r3, [r7, #15]
			  n=b;
 80007fa:	79bb      	ldrb	r3, [r7, #6]
 80007fc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff febb 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff feb7 	bl	800057c <LCD_STM32_CMD>
			  m=c>>4;
 800080e:	797b      	ldrb	r3, [r7, #5]
 8000810:	091b      	lsrs	r3, r3, #4
 8000812:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000814:	797b      	ldrb	r3, [r7, #5]
 8000816:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff feae 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000820:	7bbb      	ldrb	r3, [r7, #14]
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff feaa 	bl	800057c <LCD_STM32_CMD>
			  m=d>>4;
 8000828:	793b      	ldrb	r3, [r7, #4]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	73fb      	strb	r3, [r7, #15]
			  n=d;
 800082e:	793b      	ldrb	r3, [r7, #4]
 8000830:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fea1 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 800083a:	7bbb      	ldrb	r3, [r7, #14]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fe9d 	bl	800057c <LCD_STM32_CMD>
			  m=e>>4;
 8000842:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	73fb      	strb	r3, [r7, #15]
			  n=e;
 800084a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800084e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fe92 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000858:	7bbb      	ldrb	r3, [r7, #14]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fe8e 	bl	800057c <LCD_STM32_CMD>
			  m=f>>4;
 8000860:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000864:	091b      	lsrs	r3, r3, #4
 8000866:	73fb      	strb	r3, [r7, #15]
			  n=f;
 8000868:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800086c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe83 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe7f 	bl	800057c <LCD_STM32_CMD>
			  m=g>>4;
 800087e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	73fb      	strb	r3, [r7, #15]
			  n=g;
 8000886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800088a:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe74 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe70 	bl	800057c <LCD_STM32_CMD>
			  m=h>>4;
 800089c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	73fb      	strb	r3, [r7, #15]
			  n=h;
 80008a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008a8:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe65 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe61 	bl	800057c <LCD_STM32_CMD>
			  m=i>>4;
 80008ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	73fb      	strb	r3, [r7, #15]
			  n=i;
 80008c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80008c6:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80008c8:	7bfb      	ldrb	r3, [r7, #15]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe56 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe52 	bl	800057c <LCD_STM32_CMD>
			  RS_OFF;
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008de:	489d      	ldr	r0, [pc, #628]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 80008e0:	f000 fe64 	bl	80015ac <HAL_GPIO_WritePin>
			  LCD_STM32_CMD(0x00);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff fe49 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0x01);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fe46 	bl	800057c <LCD_STM32_CMD>
			  HAL_Delay(100);
 80008f0:	2064      	movs	r0, #100	; 0x64
 80008f2:	f000 fbcd 	bl	8001090 <HAL_Delay>
			  break;
 80008f6:	e128      	b.n	8000b4a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_CMD(0x04);
 80008f8:	2004      	movs	r0, #4
 80008fa:	f7ff fe3f 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0x08);
 80008fe:	2008      	movs	r0, #8
 8000900:	f7ff fe3c 	bl	800057c <LCD_STM32_CMD>
			  RS_ON;
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090a:	4892      	ldr	r0, [pc, #584]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 800090c:	f000 fe4e 	bl	80015ac <HAL_GPIO_WritePin>
			  m=b>>4;
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	091b      	lsrs	r3, r3, #4
 8000914:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe2d 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fe29 	bl	800057c <LCD_STM32_CMD>
			  m=c>>4;
 800092a:	797b      	ldrb	r3, [r7, #5]
 800092c:	091b      	lsrs	r3, r3, #4
 800092e:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000930:	797b      	ldrb	r3, [r7, #5]
 8000932:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fe20 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe1c 	bl	800057c <LCD_STM32_CMD>
			  m=c>>4;
 8000944:	797b      	ldrb	r3, [r7, #5]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	73fb      	strb	r3, [r7, #15]
			  n=c;
 800094a:	797b      	ldrb	r3, [r7, #5]
 800094c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fe13 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000956:	7bbb      	ldrb	r3, [r7, #14]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe0f 	bl	800057c <LCD_STM32_CMD>
			  m=d>>4;
 800095e:	793b      	ldrb	r3, [r7, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	73fb      	strb	r3, [r7, #15]
			  n=d;
 8000964:	793b      	ldrb	r3, [r7, #4]
 8000966:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fe06 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000970:	7bbb      	ldrb	r3, [r7, #14]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fe02 	bl	800057c <LCD_STM32_CMD>
			  m=e>>4;
 8000978:	f897 3020 	ldrb.w	r3, [r7, #32]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	73fb      	strb	r3, [r7, #15]
			  n=e;
 8000980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000984:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fdf7 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fdf3 	bl	800057c <LCD_STM32_CMD>
			  m=f>>4;
 8000996:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800099a:	091b      	lsrs	r3, r3, #4
 800099c:	73fb      	strb	r3, [r7, #15]
			  n=f;
 800099e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009a2:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fde8 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fde4 	bl	800057c <LCD_STM32_CMD>
			  m=g>>4;
 80009b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009b8:	091b      	lsrs	r3, r3, #4
 80009ba:	73fb      	strb	r3, [r7, #15]
			  n=g;
 80009bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009c0:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fdd9 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 80009ca:	7bbb      	ldrb	r3, [r7, #14]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fdd5 	bl	800057c <LCD_STM32_CMD>
			  m=h>>4;
 80009d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	73fb      	strb	r3, [r7, #15]
			  n=h;
 80009da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80009de:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fdca 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdc6 	bl	800057c <LCD_STM32_CMD>
			  m=i>>4;
 80009f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	73fb      	strb	r3, [r7, #15]
			  n=i;
 80009f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009fc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 80009fe:	7bfb      	ldrb	r3, [r7, #15]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fdbb 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fdb7 	bl	800057c <LCD_STM32_CMD>
			  RS_OFF;
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a14:	484f      	ldr	r0, [pc, #316]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 8000a16:	f000 fdc9 	bl	80015ac <HAL_GPIO_WritePin>
			  LCD_STM32_CMD(0x00);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fdae 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0x01);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f7ff fdab 	bl	800057c <LCD_STM32_CMD>
			  HAL_Delay(100);
 8000a26:	2064      	movs	r0, #100	; 0x64
 8000a28:	f000 fb32 	bl	8001090 <HAL_Delay>
			  break;
 8000a2c:	e08d      	b.n	8000b4a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_CMD(0x04);
 8000a2e:	2004      	movs	r0, #4
 8000a30:	f7ff fda4 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0xFF);
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	f7ff fda1 	bl	800057c <LCD_STM32_CMD>
			  RS_ON;
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 8000a42:	f000 fdb3 	bl	80015ac <HAL_GPIO_WritePin>
			  m=b>>4;
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000a50:	7bfb      	ldrb	r3, [r7, #15]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fd92 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000a58:	7bbb      	ldrb	r3, [r7, #14]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd8e 	bl	800057c <LCD_STM32_CMD>
			  m=c>>4;
 8000a60:	797b      	ldrb	r3, [r7, #5]
 8000a62:	091b      	lsrs	r3, r3, #4
 8000a64:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000a66:	797b      	ldrb	r3, [r7, #5]
 8000a68:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd85 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd81 	bl	800057c <LCD_STM32_CMD>
			  m=d>>4;
 8000a7a:	793b      	ldrb	r3, [r7, #4]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	73fb      	strb	r3, [r7, #15]
			  n=d;
 8000a80:	793b      	ldrb	r3, [r7, #4]
 8000a82:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff fd78 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd74 	bl	800057c <LCD_STM32_CMD>
			  m=e>>4;
 8000a94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	73fb      	strb	r3, [r7, #15]
			  n=e;
 8000a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa0:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd69 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd65 	bl	800057c <LCD_STM32_CMD>
			  m=f>>4;
 8000ab2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ab6:	091b      	lsrs	r3, r3, #4
 8000ab8:	73fb      	strb	r3, [r7, #15]
			  n=f;
 8000aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000abe:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fd5a 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000ac8:	7bbb      	ldrb	r3, [r7, #14]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fd56 	bl	800057c <LCD_STM32_CMD>
			  m=g>>4;
 8000ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ad4:	091b      	lsrs	r3, r3, #4
 8000ad6:	73fb      	strb	r3, [r7, #15]
			  n=g;
 8000ad8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000adc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000ade:	7bfb      	ldrb	r3, [r7, #15]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fd4b 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000ae6:	7bbb      	ldrb	r3, [r7, #14]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fd47 	bl	800057c <LCD_STM32_CMD>
			  m=h>>4;
 8000aee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	73fb      	strb	r3, [r7, #15]
			  n=h;
 8000af6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000afa:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fd3c 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fd38 	bl	800057c <LCD_STM32_CMD>
			  m=i>>4;
 8000b0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000b14:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b18:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_CMD(m);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd2d 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(n);
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fd29 	bl	800057c <LCD_STM32_CMD>
			  RS_OFF;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <LCD_STM32_New_Char+0x3b0>)
 8000b32:	f000 fd3b 	bl	80015ac <HAL_GPIO_WritePin>
			  LCD_STM32_CMD(0x00);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f7ff fd20 	bl	800057c <LCD_STM32_CMD>
			  LCD_STM32_CMD(0x01);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff fd1d 	bl	800057c <LCD_STM32_CMD>
			  HAL_Delay(100);
 8000b42:	2064      	movs	r0, #100	; 0x64
 8000b44:	f000 faa4 	bl	8001090 <HAL_Delay>
			  break;
 8000b48:	bf00      	nop
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020000 	.word	0x40020000

08000b58 <LCD_STM32_Print_New_Char>:
void LCD_STM32_Print_New_Char(uint8_t a){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
	RS_ON;
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	480a      	ldr	r0, [pc, #40]	; (8000b94 <LCD_STM32_Print_New_Char+0x3c>)
 8000b6a:	f000 fd1f 	bl	80015ac <HAL_GPIO_WritePin>
	LCD_STM32_CMD(0x00);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff fd04 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(a-1);
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fcfe 	bl	800057c <LCD_STM32_CMD>
	RS_OFF;
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	4803      	ldr	r0, [pc, #12]	; (8000b94 <LCD_STM32_Print_New_Char+0x3c>)
 8000b88:	f000 fd10 	bl	80015ac <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40020000 	.word	0x40020000

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fa05 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f85d 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 f8bb 	bl	8000d20 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_INIT();
 8000baa:	f7ff fd57 	bl	800065c <LCD_STM32_INIT>
  LCD_STM32_PRINT_CHAR('M');
  LCD_STM32_PRINT_CHAR('3');
  LCD_STM32_PRINT_CHAR('2');*/


  LCD_STM32_New_Char(1, 0x0A,0x1F,0x1F, 0x1F,0x0E,0x04,0x00,0x00);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9303      	str	r3, [sp, #12]
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	230e      	movs	r3, #14
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	231f      	movs	r3, #31
 8000bc4:	221f      	movs	r2, #31
 8000bc6:	210a      	movs	r1, #10
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f7ff fdeb 	bl	80007a4 <LCD_STM32_New_Char>
  LCD_STM32_New_Char(2,   0x00,0x0F,0x1F,0x18,0x18,0x1F,0x0F,0x00);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	231f      	movs	r3, #31
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2318      	movs	r3, #24
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	2318      	movs	r3, #24
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	231f      	movs	r3, #31
 8000be4:	220f      	movs	r2, #15
 8000be6:	2100      	movs	r1, #0
 8000be8:	2002      	movs	r0, #2
 8000bea:	f7ff fddb 	bl	80007a4 <LCD_STM32_New_Char>
  LCD_STM32_SET_CURSOR(0, fila1);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f7ff fd5f 	bl	80006b4 <LCD_STM32_SET_CURSOR>
  LCD_STM32_PRINT_STRING("Welcome STM32");
 8000bf6:	4817      	ldr	r0, [pc, #92]	; (8000c54 <main+0xbc>)
 8000bf8:	f7ff fdbe 	bl	8000778 <LCD_STM32_PRINT_STRING>
  LCD_STM32_Print_New_Char(2);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f7ff ffab 	bl	8000b58 <LCD_STM32_Print_New_Char>
  LCD_STM32_SET_CURSOR(0, fila2);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f7ff fd55 	bl	80006b4 <LCD_STM32_SET_CURSOR>
  LCD_STM32_PRINT_STRING("GAAAAAA");
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <main+0xc0>)
 8000c0c:	f7ff fdb4 	bl	8000778 <LCD_STM32_PRINT_STRING>
  LCD_STM32_Print_New_Char(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f7ff ffa1 	bl	8000b58 <LCD_STM32_Print_New_Char>

  uint8_t i=0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=0;i<255;i++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	e014      	b.n	8000c4a <main+0xb2>
		  sprintf(i_str,"%03u",i);
 8000c20:	79fa      	ldrb	r2, [r7, #7]
 8000c22:	463b      	mov	r3, r7
 8000c24:	490d      	ldr	r1, [pc, #52]	; (8000c5c <main+0xc4>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 f8fe 	bl	8001e28 <siprintf>
		  LCD_STM32_SET_CURSOR(10, fila2);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f7ff fd40 	bl	80006b4 <LCD_STM32_SET_CURSOR>
		  LCD_STM32_PRINT_STRING(i_str);
 8000c34:	463b      	mov	r3, r7
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fd9e 	bl	8000778 <LCD_STM32_PRINT_STRING>
		  HAL_Delay(500);
 8000c3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c40:	f000 fa26 	bl	8001090 <HAL_Delay>
	  for(i=0;i<255;i++){
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	3301      	adds	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2bff      	cmp	r3, #255	; 0xff
 8000c4e:	d1e7      	bne.n	8000c20 <main+0x88>
 8000c50:	e7e3      	b.n	8000c1a <main+0x82>
 8000c52:	bf00      	nop
 8000c54:	08002788 	.word	0x08002788
 8000c58:	08002798 	.word	0x08002798
 8000c5c:	080027a0 	.word	0x080027a0

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b094      	sub	sp, #80	; 0x50
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0320 	add.w	r3, r7, #32
 8000c6a:	2230      	movs	r2, #48	; 0x30
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 f8fa 	bl	8001e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <SystemClock_Config+0xb8>)
 8000c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <SystemClock_Config+0xb8>)
 8000c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c92:	6413      	str	r3, [r2, #64]	; 0x40
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <SystemClock_Config+0xb8>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <SystemClock_Config+0xbc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <SystemClock_Config+0xbc>)
 8000cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <SystemClock_Config+0xbc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0320 	add.w	r3, r7, #32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 fc83 	bl	80015e0 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ce0:	f000 f89a 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 fee6 	bl	8001ad0 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d0a:	f000 f885 	bl	8000e18 <Error_Handler>
  }
}
 8000d0e:	bf00      	nop
 8000d10:	3750      	adds	r7, #80	; 0x50
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b33      	ldr	r3, [pc, #204]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a2b      	ldr	r2, [pc, #172]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b29      	ldr	r3, [pc, #164]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a24      	ldr	r2, [pc, #144]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b22      	ldr	r3, [pc, #136]	; (8000e08 <MX_GPIO_Init+0xe8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin|RS_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8000d90:	481e      	ldr	r0, [pc, #120]	; (8000e0c <MX_GPIO_Init+0xec>)
 8000d92:	f000 fc0b 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	481d      	ldr	r0, [pc, #116]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000d9c:	f000 fc06 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2140      	movs	r1, #64	; 0x40
 8000da4:	481b      	ldr	r0, [pc, #108]	; (8000e14 <MX_GPIO_Init+0xf4>)
 8000da6:	f000 fc01 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin RS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|RS_Pin;
 8000daa:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4812      	ldr	r0, [pc, #72]	; (8000e0c <MX_GPIO_Init+0xec>)
 8000dc4:	f000 fa6e 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_Pin */
  GPIO_InitStruct.Pin = E_Pin;
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <MX_GPIO_Init+0xf0>)
 8000de0:	f000 fa60 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_GPIO_Init+0xf4>)
 8000dfc:	f000 fa52 	bl	80012a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020000 	.word	0x40020000
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020400 	.word	0x40020400

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f8c6 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f000 ffbe 	bl	8001e78 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20018000 	.word	0x20018000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	20000078 	.word	0x20000078
 8000f30:	200001c8 	.word	0x200001c8

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f000 ff7d 	bl	8001e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fe05 	bl	8000b98 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f9c:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 8000fa0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fa4:	200001c8 	.word	0x200001c8

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f931 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff ff20 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f93b 	bl	800128a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f911 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	2000007c 	.word	0x2000007c

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000007c 	.word	0x2000007c

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff47 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff5c 	bl	8001120 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb0 	bl	80011f8 <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e159      	b.n	8001574 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8148 	bne.w	800156e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a2 	beq.w	800156e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b57      	ldr	r3, [pc, #348]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a56      	ldr	r2, [pc, #344]	; (800158c <HAL_GPIO_Init+0x2e8>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b54      	ldr	r3, [pc, #336]	; (800158c <HAL_GPIO_Init+0x2e8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a49      	ldr	r2, [pc, #292]	; (8001594 <HAL_GPIO_Init+0x2f0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x202>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a48      	ldr	r2, [pc, #288]	; (8001598 <HAL_GPIO_Init+0x2f4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x1fe>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_GPIO_Init+0x2f8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x1fa>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <HAL_GPIO_Init+0x2fc>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x1f6>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a45      	ldr	r2, [pc, #276]	; (80015a4 <HAL_GPIO_Init+0x300>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x1f2>
 8001492:	2304      	movs	r3, #4
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 8001496:	2307      	movs	r3, #7
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x204>
 80014a6:	2300      	movs	r3, #0
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	; (8001590 <HAL_GPIO_Init+0x2ec>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_GPIO_Init+0x304>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ea:	4a2f      	ldr	r2, [pc, #188]	; (80015a8 <HAL_GPIO_Init+0x304>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f0:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <HAL_GPIO_Init+0x304>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001514:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <HAL_GPIO_Init+0x304>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <HAL_GPIO_Init+0x304>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153e:	4a1a      	ldr	r2, [pc, #104]	; (80015a8 <HAL_GPIO_Init+0x304>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <HAL_GPIO_Init+0x304>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_GPIO_Init+0x304>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	f67f aea2 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40013c00 	.word	0x40013c00

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e267      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d075      	beq.n	80016ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015fe:	4b88      	ldr	r3, [pc, #544]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d00c      	beq.n	8001624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	2b08      	cmp	r3, #8
 8001614:	d112      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b82      	ldr	r3, [pc, #520]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001622:	d10b      	bne.n	800163c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4b7e      	ldr	r3, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d05b      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d157      	bne.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e242      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x74>
 8001646:	4b76      	ldr	r3, [pc, #472]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a75      	ldr	r2, [pc, #468]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b70      	ldr	r3, [pc, #448]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6f      	ldr	r2, [pc, #444]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6c      	ldr	r2, [pc, #432]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0xb0>
 8001678:	4b69      	ldr	r3, [pc, #420]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a68      	ldr	r2, [pc, #416]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d013      	beq.n	80016c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fcee 	bl	8001078 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fcea 	bl	8001078 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e207      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b5b      	ldr	r3, [pc, #364]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xc0>
 80016be:	e014      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fcda 	bl	8001078 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fcd6 	bl	8001078 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e1f3      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0xe8>
 80016e6:	e000      	b.n	80016ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d063      	beq.n	80017be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00b      	beq.n	800171a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	2b08      	cmp	r3, #8
 800170c:	d11c      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d001      	beq.n	8001732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e1c7      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4937      	ldr	r1, [pc, #220]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001742:	4313      	orrs	r3, r2
 8001744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	e03a      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b34      	ldr	r3, [pc, #208]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc8f 	bl	8001078 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fc8b 	bl	8001078 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e1a8      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 800178c:	4313      	orrs	r3, r2
 800178e:	600b      	str	r3, [r1, #0]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_OscConfig+0x244>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fc6e 	bl	8001078 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc6a 	bl	8001078 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e187      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d036      	beq.n	8001838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc4e 	bl	8001078 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fc4a 	bl	8001078 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e167      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_OscConfig+0x240>)
 80017f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x200>
 80017fe:	e01b      	b.n	8001838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0x248>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fc37 	bl	8001078 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800180c:	e00e      	b.n	800182c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fc33 	bl	8001078 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d907      	bls.n	800182c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e150      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001820:	40023800 	.word	0x40023800
 8001824:	42470000 	.word	0x42470000
 8001828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182c:	4b88      	ldr	r3, [pc, #544]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1ea      	bne.n	800180e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8097 	beq.w	8001974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001846:	2300      	movs	r3, #0
 8001848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184a:	4b81      	ldr	r3, [pc, #516]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10f      	bne.n	8001876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b7d      	ldr	r3, [pc, #500]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a7c      	ldr	r2, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001872:	2301      	movs	r3, #1
 8001874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b77      	ldr	r3, [pc, #476]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001882:	4b74      	ldr	r3, [pc, #464]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a73      	ldr	r2, [pc, #460]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 8001888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188e:	f7ff fbf3 	bl	8001078 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001896:	f7ff fbef 	bl	8001078 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e10c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4b6a      	ldr	r3, [pc, #424]	; (8001a54 <HAL_RCC_OscConfig+0x474>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x2ea>
 80018bc:	4b64      	ldr	r3, [pc, #400]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a63      	ldr	r2, [pc, #396]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x30c>
 80018d2:	4b5f      	ldr	r3, [pc, #380]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x324>
 80018ec:	4b58      	ldr	r3, [pc, #352]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	4a57      	ldr	r2, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6713      	str	r3, [r2, #112]	; 0x70
 80018f8:	4b55      	ldr	r3, [pc, #340]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a54      	ldr	r2, [pc, #336]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0304 	bic.w	r3, r3, #4
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fbb4 	bl	8001078 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001912:	e00a      	b.n	800192a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fbb0 	bl	8001078 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e0cb      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0ee      	beq.n	8001914 <HAL_RCC_OscConfig+0x334>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fb9e 	bl	8001078 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fb9a 	bl	8001078 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e0b5      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001956:	4b3e      	ldr	r3, [pc, #248]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ee      	bne.n	8001940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80a1 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b08      	cmp	r3, #8
 8001988:	d05c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d141      	bne.n	8001a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb6e 	bl	8001078 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff fb6a 	bl	8001078 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e087      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	019b      	lsls	r3, r3, #6
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	085b      	lsrs	r3, r3, #1
 80019d6:	3b01      	subs	r3, #1
 80019d8:	041b      	lsls	r3, r3, #16
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fb43 	bl	8001078 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff fb3f 	bl	8001078 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e05c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x416>
 8001a14:	e054      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_OscConfig+0x478>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb2c 	bl	8001078 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fb28 	bl	8001078 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e045      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_RCC_OscConfig+0x470>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
 8001a42:	e03d      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d107      	bne.n	8001a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e038      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
 8001a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4ec>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d028      	beq.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d121      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d11a      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d111      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0cc      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d90c      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	b2d2      	uxtb	r2, r2
 8001af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a58      	ldr	r2, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a52      	ldr	r2, [pc, #328]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d044      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d119      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b3f      	ldr	r3, [pc, #252]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e06f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3b      	ldr	r3, [pc, #236]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e067      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4934      	ldr	r1, [pc, #208]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa5a 	bl	8001078 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa56 	bl	8001078 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e04f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d20c      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_RCC_ClockConfig+0x1b8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f9ba 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	080027a8 	.word	0x080027a8
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca0:	b090      	sub	sp, #64	; 0x40
 8001ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cac:	2300      	movs	r3, #0
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d00d      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x40>
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	f200 80a1 	bhi.w	8001e08 <HAL_RCC_GetSysClockFreq+0x16c>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d003      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cce:	e09b      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cd2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001cd4:	e09b      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001cda:	e098      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	623b      	str	r3, [r7, #32]
 8001cfc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d04:	2100      	movs	r1, #0
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d08:	fb03 f201 	mul.w	r2, r3, r1
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	fb00 f303 	mul.w	r3, r0, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	4a43      	ldr	r2, [pc, #268]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d16:	fba0 1202 	umull	r1, r2, r0, r2
 8001d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d1c:	460a      	mov	r2, r1
 8001d1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d22:	4413      	add	r3, r2
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	2200      	movs	r2, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	61fa      	str	r2, [r7, #28]
 8001d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d36:	f7fe faa3 	bl	8000280 <__aeabi_uldivmod>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4613      	mov	r3, r2
 8001d40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d42:	e053      	b.n	8001dec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	099b      	lsrs	r3, r3, #6
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	617a      	str	r2, [r7, #20]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d56:	f04f 0b00 	mov.w	fp, #0
 8001d5a:	4652      	mov	r2, sl
 8001d5c:	465b      	mov	r3, fp
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0159      	lsls	r1, r3, #5
 8001d68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d6c:	0150      	lsls	r0, r2, #5
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ebb2 080a 	subs.w	r8, r2, sl
 8001d76:	eb63 090b 	sbc.w	r9, r3, fp
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d8e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d92:	eb63 0509 	sbc.w	r5, r3, r9
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	00eb      	lsls	r3, r5, #3
 8001da0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001da4:	00e2      	lsls	r2, r4, #3
 8001da6:	4614      	mov	r4, r2
 8001da8:	461d      	mov	r5, r3
 8001daa:	eb14 030a 	adds.w	r3, r4, sl
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	eb45 030b 	adc.w	r3, r5, fp
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	028b      	lsls	r3, r1, #10
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dcc:	4621      	mov	r1, r4
 8001dce:	028a      	lsls	r2, r1, #10
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	60fa      	str	r2, [r7, #12]
 8001ddc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001de0:	f7fe fa4e 	bl	8000280 <__aeabi_uldivmod>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4613      	mov	r3, r2
 8001dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RCC_GetSysClockFreq+0x180>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e06:	e002      	b.n	8001e0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3740      	adds	r7, #64	; 0x40
 8001e14:	46bd      	mov	sp, r7
 8001e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	017d7840 	.word	0x017d7840

08001e28 <siprintf>:
 8001e28:	b40e      	push	{r1, r2, r3}
 8001e2a:	b500      	push	{lr}
 8001e2c:	b09c      	sub	sp, #112	; 0x70
 8001e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8001e30:	9002      	str	r0, [sp, #8]
 8001e32:	9006      	str	r0, [sp, #24]
 8001e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <siprintf+0x38>)
 8001e3a:	9107      	str	r1, [sp, #28]
 8001e3c:	9104      	str	r1, [sp, #16]
 8001e3e:	4909      	ldr	r1, [pc, #36]	; (8001e64 <siprintf+0x3c>)
 8001e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e44:	9105      	str	r1, [sp, #20]
 8001e46:	6800      	ldr	r0, [r0, #0]
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	a902      	add	r1, sp, #8
 8001e4c:	f000 f992 	bl	8002174 <_svfiprintf_r>
 8001e50:	9b02      	ldr	r3, [sp, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	b01c      	add	sp, #112	; 0x70
 8001e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e5c:	b003      	add	sp, #12
 8001e5e:	4770      	bx	lr
 8001e60:	20000058 	.word	0x20000058
 8001e64:	ffff0208 	.word	0xffff0208

08001e68 <memset>:
 8001e68:	4402      	add	r2, r0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d100      	bne.n	8001e72 <memset+0xa>
 8001e70:	4770      	bx	lr
 8001e72:	f803 1b01 	strb.w	r1, [r3], #1
 8001e76:	e7f9      	b.n	8001e6c <memset+0x4>

08001e78 <__errno>:
 8001e78:	4b01      	ldr	r3, [pc, #4]	; (8001e80 <__errno+0x8>)
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20000058 	.word	0x20000058

08001e84 <__libc_init_array>:
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4d0d      	ldr	r5, [pc, #52]	; (8001ebc <__libc_init_array+0x38>)
 8001e88:	4c0d      	ldr	r4, [pc, #52]	; (8001ec0 <__libc_init_array+0x3c>)
 8001e8a:	1b64      	subs	r4, r4, r5
 8001e8c:	10a4      	asrs	r4, r4, #2
 8001e8e:	2600      	movs	r6, #0
 8001e90:	42a6      	cmp	r6, r4
 8001e92:	d109      	bne.n	8001ea8 <__libc_init_array+0x24>
 8001e94:	4d0b      	ldr	r5, [pc, #44]	; (8001ec4 <__libc_init_array+0x40>)
 8001e96:	4c0c      	ldr	r4, [pc, #48]	; (8001ec8 <__libc_init_array+0x44>)
 8001e98:	f000 fc6a 	bl	8002770 <_init>
 8001e9c:	1b64      	subs	r4, r4, r5
 8001e9e:	10a4      	asrs	r4, r4, #2
 8001ea0:	2600      	movs	r6, #0
 8001ea2:	42a6      	cmp	r6, r4
 8001ea4:	d105      	bne.n	8001eb2 <__libc_init_array+0x2e>
 8001ea6:	bd70      	pop	{r4, r5, r6, pc}
 8001ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eac:	4798      	blx	r3
 8001eae:	3601      	adds	r6, #1
 8001eb0:	e7ee      	b.n	8001e90 <__libc_init_array+0xc>
 8001eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001eb6:	4798      	blx	r3
 8001eb8:	3601      	adds	r6, #1
 8001eba:	e7f2      	b.n	8001ea2 <__libc_init_array+0x1e>
 8001ebc:	080027f4 	.word	0x080027f4
 8001ec0:	080027f4 	.word	0x080027f4
 8001ec4:	080027f4 	.word	0x080027f4
 8001ec8:	080027f8 	.word	0x080027f8

08001ecc <__retarget_lock_acquire_recursive>:
 8001ecc:	4770      	bx	lr

08001ece <__retarget_lock_release_recursive>:
 8001ece:	4770      	bx	lr

08001ed0 <_free_r>:
 8001ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ed2:	2900      	cmp	r1, #0
 8001ed4:	d044      	beq.n	8001f60 <_free_r+0x90>
 8001ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eda:	9001      	str	r0, [sp, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f1a1 0404 	sub.w	r4, r1, #4
 8001ee2:	bfb8      	it	lt
 8001ee4:	18e4      	addlt	r4, r4, r3
 8001ee6:	f000 f8df 	bl	80020a8 <__malloc_lock>
 8001eea:	4a1e      	ldr	r2, [pc, #120]	; (8001f64 <_free_r+0x94>)
 8001eec:	9801      	ldr	r0, [sp, #4]
 8001eee:	6813      	ldr	r3, [r2, #0]
 8001ef0:	b933      	cbnz	r3, 8001f00 <_free_r+0x30>
 8001ef2:	6063      	str	r3, [r4, #4]
 8001ef4:	6014      	str	r4, [r2, #0]
 8001ef6:	b003      	add	sp, #12
 8001ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001efc:	f000 b8da 	b.w	80020b4 <__malloc_unlock>
 8001f00:	42a3      	cmp	r3, r4
 8001f02:	d908      	bls.n	8001f16 <_free_r+0x46>
 8001f04:	6825      	ldr	r5, [r4, #0]
 8001f06:	1961      	adds	r1, r4, r5
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	bf01      	itttt	eq
 8001f0c:	6819      	ldreq	r1, [r3, #0]
 8001f0e:	685b      	ldreq	r3, [r3, #4]
 8001f10:	1949      	addeq	r1, r1, r5
 8001f12:	6021      	streq	r1, [r4, #0]
 8001f14:	e7ed      	b.n	8001ef2 <_free_r+0x22>
 8001f16:	461a      	mov	r2, r3
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	b10b      	cbz	r3, 8001f20 <_free_r+0x50>
 8001f1c:	42a3      	cmp	r3, r4
 8001f1e:	d9fa      	bls.n	8001f16 <_free_r+0x46>
 8001f20:	6811      	ldr	r1, [r2, #0]
 8001f22:	1855      	adds	r5, r2, r1
 8001f24:	42a5      	cmp	r5, r4
 8001f26:	d10b      	bne.n	8001f40 <_free_r+0x70>
 8001f28:	6824      	ldr	r4, [r4, #0]
 8001f2a:	4421      	add	r1, r4
 8001f2c:	1854      	adds	r4, r2, r1
 8001f2e:	42a3      	cmp	r3, r4
 8001f30:	6011      	str	r1, [r2, #0]
 8001f32:	d1e0      	bne.n	8001ef6 <_free_r+0x26>
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	6053      	str	r3, [r2, #4]
 8001f3a:	440c      	add	r4, r1
 8001f3c:	6014      	str	r4, [r2, #0]
 8001f3e:	e7da      	b.n	8001ef6 <_free_r+0x26>
 8001f40:	d902      	bls.n	8001f48 <_free_r+0x78>
 8001f42:	230c      	movs	r3, #12
 8001f44:	6003      	str	r3, [r0, #0]
 8001f46:	e7d6      	b.n	8001ef6 <_free_r+0x26>
 8001f48:	6825      	ldr	r5, [r4, #0]
 8001f4a:	1961      	adds	r1, r4, r5
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	bf04      	itt	eq
 8001f50:	6819      	ldreq	r1, [r3, #0]
 8001f52:	685b      	ldreq	r3, [r3, #4]
 8001f54:	6063      	str	r3, [r4, #4]
 8001f56:	bf04      	itt	eq
 8001f58:	1949      	addeq	r1, r1, r5
 8001f5a:	6021      	streq	r1, [r4, #0]
 8001f5c:	6054      	str	r4, [r2, #4]
 8001f5e:	e7ca      	b.n	8001ef6 <_free_r+0x26>
 8001f60:	b003      	add	sp, #12
 8001f62:	bd30      	pop	{r4, r5, pc}
 8001f64:	200001c0 	.word	0x200001c0

08001f68 <sbrk_aligned>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4e0e      	ldr	r6, [pc, #56]	; (8001fa4 <sbrk_aligned+0x3c>)
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	6831      	ldr	r1, [r6, #0]
 8001f70:	4605      	mov	r5, r0
 8001f72:	b911      	cbnz	r1, 8001f7a <sbrk_aligned+0x12>
 8001f74:	f000 fba6 	bl	80026c4 <_sbrk_r>
 8001f78:	6030      	str	r0, [r6, #0]
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f000 fba1 	bl	80026c4 <_sbrk_r>
 8001f82:	1c43      	adds	r3, r0, #1
 8001f84:	d00a      	beq.n	8001f9c <sbrk_aligned+0x34>
 8001f86:	1cc4      	adds	r4, r0, #3
 8001f88:	f024 0403 	bic.w	r4, r4, #3
 8001f8c:	42a0      	cmp	r0, r4
 8001f8e:	d007      	beq.n	8001fa0 <sbrk_aligned+0x38>
 8001f90:	1a21      	subs	r1, r4, r0
 8001f92:	4628      	mov	r0, r5
 8001f94:	f000 fb96 	bl	80026c4 <_sbrk_r>
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d101      	bne.n	8001fa0 <sbrk_aligned+0x38>
 8001f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	bd70      	pop	{r4, r5, r6, pc}
 8001fa4:	200001c4 	.word	0x200001c4

08001fa8 <_malloc_r>:
 8001fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fac:	1ccd      	adds	r5, r1, #3
 8001fae:	f025 0503 	bic.w	r5, r5, #3
 8001fb2:	3508      	adds	r5, #8
 8001fb4:	2d0c      	cmp	r5, #12
 8001fb6:	bf38      	it	cc
 8001fb8:	250c      	movcc	r5, #12
 8001fba:	2d00      	cmp	r5, #0
 8001fbc:	4607      	mov	r7, r0
 8001fbe:	db01      	blt.n	8001fc4 <_malloc_r+0x1c>
 8001fc0:	42a9      	cmp	r1, r5
 8001fc2:	d905      	bls.n	8001fd0 <_malloc_r+0x28>
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	2600      	movs	r6, #0
 8001fca:	4630      	mov	r0, r6
 8001fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80020a4 <_malloc_r+0xfc>
 8001fd4:	f000 f868 	bl	80020a8 <__malloc_lock>
 8001fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8001fdc:	461c      	mov	r4, r3
 8001fde:	bb5c      	cbnz	r4, 8002038 <_malloc_r+0x90>
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4638      	mov	r0, r7
 8001fe4:	f7ff ffc0 	bl	8001f68 <sbrk_aligned>
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	4604      	mov	r4, r0
 8001fec:	d155      	bne.n	800209a <_malloc_r+0xf2>
 8001fee:	f8d8 4000 	ldr.w	r4, [r8]
 8001ff2:	4626      	mov	r6, r4
 8001ff4:	2e00      	cmp	r6, #0
 8001ff6:	d145      	bne.n	8002084 <_malloc_r+0xdc>
 8001ff8:	2c00      	cmp	r4, #0
 8001ffa:	d048      	beq.n	800208e <_malloc_r+0xe6>
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	4631      	mov	r1, r6
 8002000:	4638      	mov	r0, r7
 8002002:	eb04 0903 	add.w	r9, r4, r3
 8002006:	f000 fb5d 	bl	80026c4 <_sbrk_r>
 800200a:	4581      	cmp	r9, r0
 800200c:	d13f      	bne.n	800208e <_malloc_r+0xe6>
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	1a6d      	subs	r5, r5, r1
 8002012:	4629      	mov	r1, r5
 8002014:	4638      	mov	r0, r7
 8002016:	f7ff ffa7 	bl	8001f68 <sbrk_aligned>
 800201a:	3001      	adds	r0, #1
 800201c:	d037      	beq.n	800208e <_malloc_r+0xe6>
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	442b      	add	r3, r5
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	f8d8 3000 	ldr.w	r3, [r8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d038      	beq.n	800209e <_malloc_r+0xf6>
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	42a2      	cmp	r2, r4
 8002030:	d12b      	bne.n	800208a <_malloc_r+0xe2>
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	e00f      	b.n	8002058 <_malloc_r+0xb0>
 8002038:	6822      	ldr	r2, [r4, #0]
 800203a:	1b52      	subs	r2, r2, r5
 800203c:	d41f      	bmi.n	800207e <_malloc_r+0xd6>
 800203e:	2a0b      	cmp	r2, #11
 8002040:	d917      	bls.n	8002072 <_malloc_r+0xca>
 8002042:	1961      	adds	r1, r4, r5
 8002044:	42a3      	cmp	r3, r4
 8002046:	6025      	str	r5, [r4, #0]
 8002048:	bf18      	it	ne
 800204a:	6059      	strne	r1, [r3, #4]
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	bf08      	it	eq
 8002050:	f8c8 1000 	streq.w	r1, [r8]
 8002054:	5162      	str	r2, [r4, r5]
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	4638      	mov	r0, r7
 800205a:	f104 060b 	add.w	r6, r4, #11
 800205e:	f000 f829 	bl	80020b4 <__malloc_unlock>
 8002062:	f026 0607 	bic.w	r6, r6, #7
 8002066:	1d23      	adds	r3, r4, #4
 8002068:	1af2      	subs	r2, r6, r3
 800206a:	d0ae      	beq.n	8001fca <_malloc_r+0x22>
 800206c:	1b9b      	subs	r3, r3, r6
 800206e:	50a3      	str	r3, [r4, r2]
 8002070:	e7ab      	b.n	8001fca <_malloc_r+0x22>
 8002072:	42a3      	cmp	r3, r4
 8002074:	6862      	ldr	r2, [r4, #4]
 8002076:	d1dd      	bne.n	8002034 <_malloc_r+0x8c>
 8002078:	f8c8 2000 	str.w	r2, [r8]
 800207c:	e7ec      	b.n	8002058 <_malloc_r+0xb0>
 800207e:	4623      	mov	r3, r4
 8002080:	6864      	ldr	r4, [r4, #4]
 8002082:	e7ac      	b.n	8001fde <_malloc_r+0x36>
 8002084:	4634      	mov	r4, r6
 8002086:	6876      	ldr	r6, [r6, #4]
 8002088:	e7b4      	b.n	8001ff4 <_malloc_r+0x4c>
 800208a:	4613      	mov	r3, r2
 800208c:	e7cc      	b.n	8002028 <_malloc_r+0x80>
 800208e:	230c      	movs	r3, #12
 8002090:	603b      	str	r3, [r7, #0]
 8002092:	4638      	mov	r0, r7
 8002094:	f000 f80e 	bl	80020b4 <__malloc_unlock>
 8002098:	e797      	b.n	8001fca <_malloc_r+0x22>
 800209a:	6025      	str	r5, [r4, #0]
 800209c:	e7dc      	b.n	8002058 <_malloc_r+0xb0>
 800209e:	605b      	str	r3, [r3, #4]
 80020a0:	deff      	udf	#255	; 0xff
 80020a2:	bf00      	nop
 80020a4:	200001c0 	.word	0x200001c0

080020a8 <__malloc_lock>:
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <__malloc_lock+0x8>)
 80020aa:	f7ff bf0f 	b.w	8001ecc <__retarget_lock_acquire_recursive>
 80020ae:	bf00      	nop
 80020b0:	200001bc 	.word	0x200001bc

080020b4 <__malloc_unlock>:
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <__malloc_unlock+0x8>)
 80020b6:	f7ff bf0a 	b.w	8001ece <__retarget_lock_release_recursive>
 80020ba:	bf00      	nop
 80020bc:	200001bc 	.word	0x200001bc

080020c0 <__ssputs_r>:
 80020c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c4:	688e      	ldr	r6, [r1, #8]
 80020c6:	461f      	mov	r7, r3
 80020c8:	42be      	cmp	r6, r7
 80020ca:	680b      	ldr	r3, [r1, #0]
 80020cc:	4682      	mov	sl, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4690      	mov	r8, r2
 80020d2:	d82c      	bhi.n	800212e <__ssputs_r+0x6e>
 80020d4:	898a      	ldrh	r2, [r1, #12]
 80020d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020da:	d026      	beq.n	800212a <__ssputs_r+0x6a>
 80020dc:	6965      	ldr	r5, [r4, #20]
 80020de:	6909      	ldr	r1, [r1, #16]
 80020e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020e4:	eba3 0901 	sub.w	r9, r3, r1
 80020e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80020ec:	1c7b      	adds	r3, r7, #1
 80020ee:	444b      	add	r3, r9
 80020f0:	106d      	asrs	r5, r5, #1
 80020f2:	429d      	cmp	r5, r3
 80020f4:	bf38      	it	cc
 80020f6:	461d      	movcc	r5, r3
 80020f8:	0553      	lsls	r3, r2, #21
 80020fa:	d527      	bpl.n	800214c <__ssputs_r+0x8c>
 80020fc:	4629      	mov	r1, r5
 80020fe:	f7ff ff53 	bl	8001fa8 <_malloc_r>
 8002102:	4606      	mov	r6, r0
 8002104:	b360      	cbz	r0, 8002160 <__ssputs_r+0xa0>
 8002106:	6921      	ldr	r1, [r4, #16]
 8002108:	464a      	mov	r2, r9
 800210a:	f000 faeb 	bl	80026e4 <memcpy>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002118:	81a3      	strh	r3, [r4, #12]
 800211a:	6126      	str	r6, [r4, #16]
 800211c:	6165      	str	r5, [r4, #20]
 800211e:	444e      	add	r6, r9
 8002120:	eba5 0509 	sub.w	r5, r5, r9
 8002124:	6026      	str	r6, [r4, #0]
 8002126:	60a5      	str	r5, [r4, #8]
 8002128:	463e      	mov	r6, r7
 800212a:	42be      	cmp	r6, r7
 800212c:	d900      	bls.n	8002130 <__ssputs_r+0x70>
 800212e:	463e      	mov	r6, r7
 8002130:	6820      	ldr	r0, [r4, #0]
 8002132:	4632      	mov	r2, r6
 8002134:	4641      	mov	r1, r8
 8002136:	f000 faab 	bl	8002690 <memmove>
 800213a:	68a3      	ldr	r3, [r4, #8]
 800213c:	1b9b      	subs	r3, r3, r6
 800213e:	60a3      	str	r3, [r4, #8]
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	4433      	add	r3, r6
 8002144:	6023      	str	r3, [r4, #0]
 8002146:	2000      	movs	r0, #0
 8002148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800214c:	462a      	mov	r2, r5
 800214e:	f000 fad7 	bl	8002700 <_realloc_r>
 8002152:	4606      	mov	r6, r0
 8002154:	2800      	cmp	r0, #0
 8002156:	d1e0      	bne.n	800211a <__ssputs_r+0x5a>
 8002158:	6921      	ldr	r1, [r4, #16]
 800215a:	4650      	mov	r0, sl
 800215c:	f7ff feb8 	bl	8001ed0 <_free_r>
 8002160:	230c      	movs	r3, #12
 8002162:	f8ca 3000 	str.w	r3, [sl]
 8002166:	89a3      	ldrh	r3, [r4, #12]
 8002168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216c:	81a3      	strh	r3, [r4, #12]
 800216e:	f04f 30ff 	mov.w	r0, #4294967295
 8002172:	e7e9      	b.n	8002148 <__ssputs_r+0x88>

08002174 <_svfiprintf_r>:
 8002174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002178:	4698      	mov	r8, r3
 800217a:	898b      	ldrh	r3, [r1, #12]
 800217c:	061b      	lsls	r3, r3, #24
 800217e:	b09d      	sub	sp, #116	; 0x74
 8002180:	4607      	mov	r7, r0
 8002182:	460d      	mov	r5, r1
 8002184:	4614      	mov	r4, r2
 8002186:	d50e      	bpl.n	80021a6 <_svfiprintf_r+0x32>
 8002188:	690b      	ldr	r3, [r1, #16]
 800218a:	b963      	cbnz	r3, 80021a6 <_svfiprintf_r+0x32>
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	f7ff ff0b 	bl	8001fa8 <_malloc_r>
 8002192:	6028      	str	r0, [r5, #0]
 8002194:	6128      	str	r0, [r5, #16]
 8002196:	b920      	cbnz	r0, 80021a2 <_svfiprintf_r+0x2e>
 8002198:	230c      	movs	r3, #12
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	e0d0      	b.n	8002344 <_svfiprintf_r+0x1d0>
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	616b      	str	r3, [r5, #20]
 80021a6:	2300      	movs	r3, #0
 80021a8:	9309      	str	r3, [sp, #36]	; 0x24
 80021aa:	2320      	movs	r3, #32
 80021ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80021b4:	2330      	movs	r3, #48	; 0x30
 80021b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800235c <_svfiprintf_r+0x1e8>
 80021ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021be:	f04f 0901 	mov.w	r9, #1
 80021c2:	4623      	mov	r3, r4
 80021c4:	469a      	mov	sl, r3
 80021c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ca:	b10a      	cbz	r2, 80021d0 <_svfiprintf_r+0x5c>
 80021cc:	2a25      	cmp	r2, #37	; 0x25
 80021ce:	d1f9      	bne.n	80021c4 <_svfiprintf_r+0x50>
 80021d0:	ebba 0b04 	subs.w	fp, sl, r4
 80021d4:	d00b      	beq.n	80021ee <_svfiprintf_r+0x7a>
 80021d6:	465b      	mov	r3, fp
 80021d8:	4622      	mov	r2, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	4638      	mov	r0, r7
 80021de:	f7ff ff6f 	bl	80020c0 <__ssputs_r>
 80021e2:	3001      	adds	r0, #1
 80021e4:	f000 80a9 	beq.w	800233a <_svfiprintf_r+0x1c6>
 80021e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021ea:	445a      	add	r2, fp
 80021ec:	9209      	str	r2, [sp, #36]	; 0x24
 80021ee:	f89a 3000 	ldrb.w	r3, [sl]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 80a1 	beq.w	800233a <_svfiprintf_r+0x1c6>
 80021f8:	2300      	movs	r3, #0
 80021fa:	f04f 32ff 	mov.w	r2, #4294967295
 80021fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002202:	f10a 0a01 	add.w	sl, sl, #1
 8002206:	9304      	str	r3, [sp, #16]
 8002208:	9307      	str	r3, [sp, #28]
 800220a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800220e:	931a      	str	r3, [sp, #104]	; 0x68
 8002210:	4654      	mov	r4, sl
 8002212:	2205      	movs	r2, #5
 8002214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002218:	4850      	ldr	r0, [pc, #320]	; (800235c <_svfiprintf_r+0x1e8>)
 800221a:	f7fd ffe1 	bl	80001e0 <memchr>
 800221e:	9a04      	ldr	r2, [sp, #16]
 8002220:	b9d8      	cbnz	r0, 800225a <_svfiprintf_r+0xe6>
 8002222:	06d0      	lsls	r0, r2, #27
 8002224:	bf44      	itt	mi
 8002226:	2320      	movmi	r3, #32
 8002228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800222c:	0711      	lsls	r1, r2, #28
 800222e:	bf44      	itt	mi
 8002230:	232b      	movmi	r3, #43	; 0x2b
 8002232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002236:	f89a 3000 	ldrb.w	r3, [sl]
 800223a:	2b2a      	cmp	r3, #42	; 0x2a
 800223c:	d015      	beq.n	800226a <_svfiprintf_r+0xf6>
 800223e:	9a07      	ldr	r2, [sp, #28]
 8002240:	4654      	mov	r4, sl
 8002242:	2000      	movs	r0, #0
 8002244:	f04f 0c0a 	mov.w	ip, #10
 8002248:	4621      	mov	r1, r4
 800224a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800224e:	3b30      	subs	r3, #48	; 0x30
 8002250:	2b09      	cmp	r3, #9
 8002252:	d94d      	bls.n	80022f0 <_svfiprintf_r+0x17c>
 8002254:	b1b0      	cbz	r0, 8002284 <_svfiprintf_r+0x110>
 8002256:	9207      	str	r2, [sp, #28]
 8002258:	e014      	b.n	8002284 <_svfiprintf_r+0x110>
 800225a:	eba0 0308 	sub.w	r3, r0, r8
 800225e:	fa09 f303 	lsl.w	r3, r9, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	46a2      	mov	sl, r4
 8002268:	e7d2      	b.n	8002210 <_svfiprintf_r+0x9c>
 800226a:	9b03      	ldr	r3, [sp, #12]
 800226c:	1d19      	adds	r1, r3, #4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	9103      	str	r1, [sp, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	bfbb      	ittet	lt
 8002276:	425b      	neglt	r3, r3
 8002278:	f042 0202 	orrlt.w	r2, r2, #2
 800227c:	9307      	strge	r3, [sp, #28]
 800227e:	9307      	strlt	r3, [sp, #28]
 8002280:	bfb8      	it	lt
 8002282:	9204      	strlt	r2, [sp, #16]
 8002284:	7823      	ldrb	r3, [r4, #0]
 8002286:	2b2e      	cmp	r3, #46	; 0x2e
 8002288:	d10c      	bne.n	80022a4 <_svfiprintf_r+0x130>
 800228a:	7863      	ldrb	r3, [r4, #1]
 800228c:	2b2a      	cmp	r3, #42	; 0x2a
 800228e:	d134      	bne.n	80022fa <_svfiprintf_r+0x186>
 8002290:	9b03      	ldr	r3, [sp, #12]
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	9203      	str	r2, [sp, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	bfb8      	it	lt
 800229c:	f04f 33ff 	movlt.w	r3, #4294967295
 80022a0:	3402      	adds	r4, #2
 80022a2:	9305      	str	r3, [sp, #20]
 80022a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800236c <_svfiprintf_r+0x1f8>
 80022a8:	7821      	ldrb	r1, [r4, #0]
 80022aa:	2203      	movs	r2, #3
 80022ac:	4650      	mov	r0, sl
 80022ae:	f7fd ff97 	bl	80001e0 <memchr>
 80022b2:	b138      	cbz	r0, 80022c4 <_svfiprintf_r+0x150>
 80022b4:	9b04      	ldr	r3, [sp, #16]
 80022b6:	eba0 000a 	sub.w	r0, r0, sl
 80022ba:	2240      	movs	r2, #64	; 0x40
 80022bc:	4082      	lsls	r2, r0
 80022be:	4313      	orrs	r3, r2
 80022c0:	3401      	adds	r4, #1
 80022c2:	9304      	str	r3, [sp, #16]
 80022c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022c8:	4825      	ldr	r0, [pc, #148]	; (8002360 <_svfiprintf_r+0x1ec>)
 80022ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022ce:	2206      	movs	r2, #6
 80022d0:	f7fd ff86 	bl	80001e0 <memchr>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d038      	beq.n	800234a <_svfiprintf_r+0x1d6>
 80022d8:	4b22      	ldr	r3, [pc, #136]	; (8002364 <_svfiprintf_r+0x1f0>)
 80022da:	bb1b      	cbnz	r3, 8002324 <_svfiprintf_r+0x1b0>
 80022dc:	9b03      	ldr	r3, [sp, #12]
 80022de:	3307      	adds	r3, #7
 80022e0:	f023 0307 	bic.w	r3, r3, #7
 80022e4:	3308      	adds	r3, #8
 80022e6:	9303      	str	r3, [sp, #12]
 80022e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022ea:	4433      	add	r3, r6
 80022ec:	9309      	str	r3, [sp, #36]	; 0x24
 80022ee:	e768      	b.n	80021c2 <_svfiprintf_r+0x4e>
 80022f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80022f4:	460c      	mov	r4, r1
 80022f6:	2001      	movs	r0, #1
 80022f8:	e7a6      	b.n	8002248 <_svfiprintf_r+0xd4>
 80022fa:	2300      	movs	r3, #0
 80022fc:	3401      	adds	r4, #1
 80022fe:	9305      	str	r3, [sp, #20]
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 0c0a 	mov.w	ip, #10
 8002306:	4620      	mov	r0, r4
 8002308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800230c:	3a30      	subs	r2, #48	; 0x30
 800230e:	2a09      	cmp	r2, #9
 8002310:	d903      	bls.n	800231a <_svfiprintf_r+0x1a6>
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0c6      	beq.n	80022a4 <_svfiprintf_r+0x130>
 8002316:	9105      	str	r1, [sp, #20]
 8002318:	e7c4      	b.n	80022a4 <_svfiprintf_r+0x130>
 800231a:	fb0c 2101 	mla	r1, ip, r1, r2
 800231e:	4604      	mov	r4, r0
 8002320:	2301      	movs	r3, #1
 8002322:	e7f0      	b.n	8002306 <_svfiprintf_r+0x192>
 8002324:	ab03      	add	r3, sp, #12
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	462a      	mov	r2, r5
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <_svfiprintf_r+0x1f4>)
 800232c:	a904      	add	r1, sp, #16
 800232e:	4638      	mov	r0, r7
 8002330:	f3af 8000 	nop.w
 8002334:	1c42      	adds	r2, r0, #1
 8002336:	4606      	mov	r6, r0
 8002338:	d1d6      	bne.n	80022e8 <_svfiprintf_r+0x174>
 800233a:	89ab      	ldrh	r3, [r5, #12]
 800233c:	065b      	lsls	r3, r3, #25
 800233e:	f53f af2d 	bmi.w	800219c <_svfiprintf_r+0x28>
 8002342:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002344:	b01d      	add	sp, #116	; 0x74
 8002346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800234a:	ab03      	add	r3, sp, #12
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	462a      	mov	r2, r5
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <_svfiprintf_r+0x1f4>)
 8002352:	a904      	add	r1, sp, #16
 8002354:	4638      	mov	r0, r7
 8002356:	f000 f879 	bl	800244c <_printf_i>
 800235a:	e7eb      	b.n	8002334 <_svfiprintf_r+0x1c0>
 800235c:	080027b8 	.word	0x080027b8
 8002360:	080027c2 	.word	0x080027c2
 8002364:	00000000 	.word	0x00000000
 8002368:	080020c1 	.word	0x080020c1
 800236c:	080027be 	.word	0x080027be

08002370 <_printf_common>:
 8002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002374:	4616      	mov	r6, r2
 8002376:	4699      	mov	r9, r3
 8002378:	688a      	ldr	r2, [r1, #8]
 800237a:	690b      	ldr	r3, [r1, #16]
 800237c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002380:	4293      	cmp	r3, r2
 8002382:	bfb8      	it	lt
 8002384:	4613      	movlt	r3, r2
 8002386:	6033      	str	r3, [r6, #0]
 8002388:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800238c:	4607      	mov	r7, r0
 800238e:	460c      	mov	r4, r1
 8002390:	b10a      	cbz	r2, 8002396 <_printf_common+0x26>
 8002392:	3301      	adds	r3, #1
 8002394:	6033      	str	r3, [r6, #0]
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	0699      	lsls	r1, r3, #26
 800239a:	bf42      	ittt	mi
 800239c:	6833      	ldrmi	r3, [r6, #0]
 800239e:	3302      	addmi	r3, #2
 80023a0:	6033      	strmi	r3, [r6, #0]
 80023a2:	6825      	ldr	r5, [r4, #0]
 80023a4:	f015 0506 	ands.w	r5, r5, #6
 80023a8:	d106      	bne.n	80023b8 <_printf_common+0x48>
 80023aa:	f104 0a19 	add.w	sl, r4, #25
 80023ae:	68e3      	ldr	r3, [r4, #12]
 80023b0:	6832      	ldr	r2, [r6, #0]
 80023b2:	1a9b      	subs	r3, r3, r2
 80023b4:	42ab      	cmp	r3, r5
 80023b6:	dc26      	bgt.n	8002406 <_printf_common+0x96>
 80023b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023bc:	1e13      	subs	r3, r2, #0
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	bf18      	it	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	0692      	lsls	r2, r2, #26
 80023c6:	d42b      	bmi.n	8002420 <_printf_common+0xb0>
 80023c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023cc:	4649      	mov	r1, r9
 80023ce:	4638      	mov	r0, r7
 80023d0:	47c0      	blx	r8
 80023d2:	3001      	adds	r0, #1
 80023d4:	d01e      	beq.n	8002414 <_printf_common+0xa4>
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	6922      	ldr	r2, [r4, #16]
 80023da:	f003 0306 	and.w	r3, r3, #6
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf02      	ittt	eq
 80023e2:	68e5      	ldreq	r5, [r4, #12]
 80023e4:	6833      	ldreq	r3, [r6, #0]
 80023e6:	1aed      	subeq	r5, r5, r3
 80023e8:	68a3      	ldr	r3, [r4, #8]
 80023ea:	bf0c      	ite	eq
 80023ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023f0:	2500      	movne	r5, #0
 80023f2:	4293      	cmp	r3, r2
 80023f4:	bfc4      	itt	gt
 80023f6:	1a9b      	subgt	r3, r3, r2
 80023f8:	18ed      	addgt	r5, r5, r3
 80023fa:	2600      	movs	r6, #0
 80023fc:	341a      	adds	r4, #26
 80023fe:	42b5      	cmp	r5, r6
 8002400:	d11a      	bne.n	8002438 <_printf_common+0xc8>
 8002402:	2000      	movs	r0, #0
 8002404:	e008      	b.n	8002418 <_printf_common+0xa8>
 8002406:	2301      	movs	r3, #1
 8002408:	4652      	mov	r2, sl
 800240a:	4649      	mov	r1, r9
 800240c:	4638      	mov	r0, r7
 800240e:	47c0      	blx	r8
 8002410:	3001      	adds	r0, #1
 8002412:	d103      	bne.n	800241c <_printf_common+0xac>
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241c:	3501      	adds	r5, #1
 800241e:	e7c6      	b.n	80023ae <_printf_common+0x3e>
 8002420:	18e1      	adds	r1, r4, r3
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	2030      	movs	r0, #48	; 0x30
 8002426:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800242a:	4422      	add	r2, r4
 800242c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002430:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002434:	3302      	adds	r3, #2
 8002436:	e7c7      	b.n	80023c8 <_printf_common+0x58>
 8002438:	2301      	movs	r3, #1
 800243a:	4622      	mov	r2, r4
 800243c:	4649      	mov	r1, r9
 800243e:	4638      	mov	r0, r7
 8002440:	47c0      	blx	r8
 8002442:	3001      	adds	r0, #1
 8002444:	d0e6      	beq.n	8002414 <_printf_common+0xa4>
 8002446:	3601      	adds	r6, #1
 8002448:	e7d9      	b.n	80023fe <_printf_common+0x8e>
	...

0800244c <_printf_i>:
 800244c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002450:	7e0f      	ldrb	r7, [r1, #24]
 8002452:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002454:	2f78      	cmp	r7, #120	; 0x78
 8002456:	4691      	mov	r9, r2
 8002458:	4680      	mov	r8, r0
 800245a:	460c      	mov	r4, r1
 800245c:	469a      	mov	sl, r3
 800245e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002462:	d807      	bhi.n	8002474 <_printf_i+0x28>
 8002464:	2f62      	cmp	r7, #98	; 0x62
 8002466:	d80a      	bhi.n	800247e <_printf_i+0x32>
 8002468:	2f00      	cmp	r7, #0
 800246a:	f000 80d4 	beq.w	8002616 <_printf_i+0x1ca>
 800246e:	2f58      	cmp	r7, #88	; 0x58
 8002470:	f000 80c0 	beq.w	80025f4 <_printf_i+0x1a8>
 8002474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002478:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800247c:	e03a      	b.n	80024f4 <_printf_i+0xa8>
 800247e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002482:	2b15      	cmp	r3, #21
 8002484:	d8f6      	bhi.n	8002474 <_printf_i+0x28>
 8002486:	a101      	add	r1, pc, #4	; (adr r1, 800248c <_printf_i+0x40>)
 8002488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800248c:	080024e5 	.word	0x080024e5
 8002490:	080024f9 	.word	0x080024f9
 8002494:	08002475 	.word	0x08002475
 8002498:	08002475 	.word	0x08002475
 800249c:	08002475 	.word	0x08002475
 80024a0:	08002475 	.word	0x08002475
 80024a4:	080024f9 	.word	0x080024f9
 80024a8:	08002475 	.word	0x08002475
 80024ac:	08002475 	.word	0x08002475
 80024b0:	08002475 	.word	0x08002475
 80024b4:	08002475 	.word	0x08002475
 80024b8:	080025fd 	.word	0x080025fd
 80024bc:	08002525 	.word	0x08002525
 80024c0:	080025b7 	.word	0x080025b7
 80024c4:	08002475 	.word	0x08002475
 80024c8:	08002475 	.word	0x08002475
 80024cc:	0800261f 	.word	0x0800261f
 80024d0:	08002475 	.word	0x08002475
 80024d4:	08002525 	.word	0x08002525
 80024d8:	08002475 	.word	0x08002475
 80024dc:	08002475 	.word	0x08002475
 80024e0:	080025bf 	.word	0x080025bf
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	602a      	str	r2, [r5, #0]
 80024ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024f4:	2301      	movs	r3, #1
 80024f6:	e09f      	b.n	8002638 <_printf_i+0x1ec>
 80024f8:	6820      	ldr	r0, [r4, #0]
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	0607      	lsls	r7, r0, #24
 80024fe:	f103 0104 	add.w	r1, r3, #4
 8002502:	6029      	str	r1, [r5, #0]
 8002504:	d501      	bpl.n	800250a <_printf_i+0xbe>
 8002506:	681e      	ldr	r6, [r3, #0]
 8002508:	e003      	b.n	8002512 <_printf_i+0xc6>
 800250a:	0646      	lsls	r6, r0, #25
 800250c:	d5fb      	bpl.n	8002506 <_printf_i+0xba>
 800250e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002512:	2e00      	cmp	r6, #0
 8002514:	da03      	bge.n	800251e <_printf_i+0xd2>
 8002516:	232d      	movs	r3, #45	; 0x2d
 8002518:	4276      	negs	r6, r6
 800251a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800251e:	485a      	ldr	r0, [pc, #360]	; (8002688 <_printf_i+0x23c>)
 8002520:	230a      	movs	r3, #10
 8002522:	e012      	b.n	800254a <_printf_i+0xfe>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	6820      	ldr	r0, [r4, #0]
 8002528:	1d19      	adds	r1, r3, #4
 800252a:	6029      	str	r1, [r5, #0]
 800252c:	0605      	lsls	r5, r0, #24
 800252e:	d501      	bpl.n	8002534 <_printf_i+0xe8>
 8002530:	681e      	ldr	r6, [r3, #0]
 8002532:	e002      	b.n	800253a <_printf_i+0xee>
 8002534:	0641      	lsls	r1, r0, #25
 8002536:	d5fb      	bpl.n	8002530 <_printf_i+0xe4>
 8002538:	881e      	ldrh	r6, [r3, #0]
 800253a:	4853      	ldr	r0, [pc, #332]	; (8002688 <_printf_i+0x23c>)
 800253c:	2f6f      	cmp	r7, #111	; 0x6f
 800253e:	bf0c      	ite	eq
 8002540:	2308      	moveq	r3, #8
 8002542:	230a      	movne	r3, #10
 8002544:	2100      	movs	r1, #0
 8002546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800254a:	6865      	ldr	r5, [r4, #4]
 800254c:	60a5      	str	r5, [r4, #8]
 800254e:	2d00      	cmp	r5, #0
 8002550:	bfa2      	ittt	ge
 8002552:	6821      	ldrge	r1, [r4, #0]
 8002554:	f021 0104 	bicge.w	r1, r1, #4
 8002558:	6021      	strge	r1, [r4, #0]
 800255a:	b90e      	cbnz	r6, 8002560 <_printf_i+0x114>
 800255c:	2d00      	cmp	r5, #0
 800255e:	d04b      	beq.n	80025f8 <_printf_i+0x1ac>
 8002560:	4615      	mov	r5, r2
 8002562:	fbb6 f1f3 	udiv	r1, r6, r3
 8002566:	fb03 6711 	mls	r7, r3, r1, r6
 800256a:	5dc7      	ldrb	r7, [r0, r7]
 800256c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002570:	4637      	mov	r7, r6
 8002572:	42bb      	cmp	r3, r7
 8002574:	460e      	mov	r6, r1
 8002576:	d9f4      	bls.n	8002562 <_printf_i+0x116>
 8002578:	2b08      	cmp	r3, #8
 800257a:	d10b      	bne.n	8002594 <_printf_i+0x148>
 800257c:	6823      	ldr	r3, [r4, #0]
 800257e:	07de      	lsls	r6, r3, #31
 8002580:	d508      	bpl.n	8002594 <_printf_i+0x148>
 8002582:	6923      	ldr	r3, [r4, #16]
 8002584:	6861      	ldr	r1, [r4, #4]
 8002586:	4299      	cmp	r1, r3
 8002588:	bfde      	ittt	le
 800258a:	2330      	movle	r3, #48	; 0x30
 800258c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002590:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002594:	1b52      	subs	r2, r2, r5
 8002596:	6122      	str	r2, [r4, #16]
 8002598:	f8cd a000 	str.w	sl, [sp]
 800259c:	464b      	mov	r3, r9
 800259e:	aa03      	add	r2, sp, #12
 80025a0:	4621      	mov	r1, r4
 80025a2:	4640      	mov	r0, r8
 80025a4:	f7ff fee4 	bl	8002370 <_printf_common>
 80025a8:	3001      	adds	r0, #1
 80025aa:	d14a      	bne.n	8002642 <_printf_i+0x1f6>
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	b004      	add	sp, #16
 80025b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	4833      	ldr	r0, [pc, #204]	; (800268c <_printf_i+0x240>)
 80025c0:	2778      	movs	r7, #120	; 0x78
 80025c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80025c6:	6823      	ldr	r3, [r4, #0]
 80025c8:	6829      	ldr	r1, [r5, #0]
 80025ca:	061f      	lsls	r7, r3, #24
 80025cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80025d0:	d402      	bmi.n	80025d8 <_printf_i+0x18c>
 80025d2:	065f      	lsls	r7, r3, #25
 80025d4:	bf48      	it	mi
 80025d6:	b2b6      	uxthmi	r6, r6
 80025d8:	07df      	lsls	r7, r3, #31
 80025da:	bf48      	it	mi
 80025dc:	f043 0320 	orrmi.w	r3, r3, #32
 80025e0:	6029      	str	r1, [r5, #0]
 80025e2:	bf48      	it	mi
 80025e4:	6023      	strmi	r3, [r4, #0]
 80025e6:	b91e      	cbnz	r6, 80025f0 <_printf_i+0x1a4>
 80025e8:	6823      	ldr	r3, [r4, #0]
 80025ea:	f023 0320 	bic.w	r3, r3, #32
 80025ee:	6023      	str	r3, [r4, #0]
 80025f0:	2310      	movs	r3, #16
 80025f2:	e7a7      	b.n	8002544 <_printf_i+0xf8>
 80025f4:	4824      	ldr	r0, [pc, #144]	; (8002688 <_printf_i+0x23c>)
 80025f6:	e7e4      	b.n	80025c2 <_printf_i+0x176>
 80025f8:	4615      	mov	r5, r2
 80025fa:	e7bd      	b.n	8002578 <_printf_i+0x12c>
 80025fc:	682b      	ldr	r3, [r5, #0]
 80025fe:	6826      	ldr	r6, [r4, #0]
 8002600:	6961      	ldr	r1, [r4, #20]
 8002602:	1d18      	adds	r0, r3, #4
 8002604:	6028      	str	r0, [r5, #0]
 8002606:	0635      	lsls	r5, r6, #24
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	d501      	bpl.n	8002610 <_printf_i+0x1c4>
 800260c:	6019      	str	r1, [r3, #0]
 800260e:	e002      	b.n	8002616 <_printf_i+0x1ca>
 8002610:	0670      	lsls	r0, r6, #25
 8002612:	d5fb      	bpl.n	800260c <_printf_i+0x1c0>
 8002614:	8019      	strh	r1, [r3, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	6123      	str	r3, [r4, #16]
 800261a:	4615      	mov	r5, r2
 800261c:	e7bc      	b.n	8002598 <_printf_i+0x14c>
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	1d1a      	adds	r2, r3, #4
 8002622:	602a      	str	r2, [r5, #0]
 8002624:	681d      	ldr	r5, [r3, #0]
 8002626:	6862      	ldr	r2, [r4, #4]
 8002628:	2100      	movs	r1, #0
 800262a:	4628      	mov	r0, r5
 800262c:	f7fd fdd8 	bl	80001e0 <memchr>
 8002630:	b108      	cbz	r0, 8002636 <_printf_i+0x1ea>
 8002632:	1b40      	subs	r0, r0, r5
 8002634:	6060      	str	r0, [r4, #4]
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	6123      	str	r3, [r4, #16]
 800263a:	2300      	movs	r3, #0
 800263c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002640:	e7aa      	b.n	8002598 <_printf_i+0x14c>
 8002642:	6923      	ldr	r3, [r4, #16]
 8002644:	462a      	mov	r2, r5
 8002646:	4649      	mov	r1, r9
 8002648:	4640      	mov	r0, r8
 800264a:	47d0      	blx	sl
 800264c:	3001      	adds	r0, #1
 800264e:	d0ad      	beq.n	80025ac <_printf_i+0x160>
 8002650:	6823      	ldr	r3, [r4, #0]
 8002652:	079b      	lsls	r3, r3, #30
 8002654:	d413      	bmi.n	800267e <_printf_i+0x232>
 8002656:	68e0      	ldr	r0, [r4, #12]
 8002658:	9b03      	ldr	r3, [sp, #12]
 800265a:	4298      	cmp	r0, r3
 800265c:	bfb8      	it	lt
 800265e:	4618      	movlt	r0, r3
 8002660:	e7a6      	b.n	80025b0 <_printf_i+0x164>
 8002662:	2301      	movs	r3, #1
 8002664:	4632      	mov	r2, r6
 8002666:	4649      	mov	r1, r9
 8002668:	4640      	mov	r0, r8
 800266a:	47d0      	blx	sl
 800266c:	3001      	adds	r0, #1
 800266e:	d09d      	beq.n	80025ac <_printf_i+0x160>
 8002670:	3501      	adds	r5, #1
 8002672:	68e3      	ldr	r3, [r4, #12]
 8002674:	9903      	ldr	r1, [sp, #12]
 8002676:	1a5b      	subs	r3, r3, r1
 8002678:	42ab      	cmp	r3, r5
 800267a:	dcf2      	bgt.n	8002662 <_printf_i+0x216>
 800267c:	e7eb      	b.n	8002656 <_printf_i+0x20a>
 800267e:	2500      	movs	r5, #0
 8002680:	f104 0619 	add.w	r6, r4, #25
 8002684:	e7f5      	b.n	8002672 <_printf_i+0x226>
 8002686:	bf00      	nop
 8002688:	080027c9 	.word	0x080027c9
 800268c:	080027da 	.word	0x080027da

08002690 <memmove>:
 8002690:	4288      	cmp	r0, r1
 8002692:	b510      	push	{r4, lr}
 8002694:	eb01 0402 	add.w	r4, r1, r2
 8002698:	d902      	bls.n	80026a0 <memmove+0x10>
 800269a:	4284      	cmp	r4, r0
 800269c:	4623      	mov	r3, r4
 800269e:	d807      	bhi.n	80026b0 <memmove+0x20>
 80026a0:	1e43      	subs	r3, r0, #1
 80026a2:	42a1      	cmp	r1, r4
 80026a4:	d008      	beq.n	80026b8 <memmove+0x28>
 80026a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026ae:	e7f8      	b.n	80026a2 <memmove+0x12>
 80026b0:	4402      	add	r2, r0
 80026b2:	4601      	mov	r1, r0
 80026b4:	428a      	cmp	r2, r1
 80026b6:	d100      	bne.n	80026ba <memmove+0x2a>
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80026c2:	e7f7      	b.n	80026b4 <memmove+0x24>

080026c4 <_sbrk_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4d06      	ldr	r5, [pc, #24]	; (80026e0 <_sbrk_r+0x1c>)
 80026c8:	2300      	movs	r3, #0
 80026ca:	4604      	mov	r4, r0
 80026cc:	4608      	mov	r0, r1
 80026ce:	602b      	str	r3, [r5, #0]
 80026d0:	f7fe fbfa 	bl	8000ec8 <_sbrk>
 80026d4:	1c43      	adds	r3, r0, #1
 80026d6:	d102      	bne.n	80026de <_sbrk_r+0x1a>
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	b103      	cbz	r3, 80026de <_sbrk_r+0x1a>
 80026dc:	6023      	str	r3, [r4, #0]
 80026de:	bd38      	pop	{r3, r4, r5, pc}
 80026e0:	200001b8 	.word	0x200001b8

080026e4 <memcpy>:
 80026e4:	440a      	add	r2, r1
 80026e6:	4291      	cmp	r1, r2
 80026e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80026ec:	d100      	bne.n	80026f0 <memcpy+0xc>
 80026ee:	4770      	bx	lr
 80026f0:	b510      	push	{r4, lr}
 80026f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026fa:	4291      	cmp	r1, r2
 80026fc:	d1f9      	bne.n	80026f2 <memcpy+0xe>
 80026fe:	bd10      	pop	{r4, pc}

08002700 <_realloc_r>:
 8002700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002704:	4680      	mov	r8, r0
 8002706:	4614      	mov	r4, r2
 8002708:	460e      	mov	r6, r1
 800270a:	b921      	cbnz	r1, 8002716 <_realloc_r+0x16>
 800270c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002710:	4611      	mov	r1, r2
 8002712:	f7ff bc49 	b.w	8001fa8 <_malloc_r>
 8002716:	b92a      	cbnz	r2, 8002724 <_realloc_r+0x24>
 8002718:	f7ff fbda 	bl	8001ed0 <_free_r>
 800271c:	4625      	mov	r5, r4
 800271e:	4628      	mov	r0, r5
 8002720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002724:	f000 f81b 	bl	800275e <_malloc_usable_size_r>
 8002728:	4284      	cmp	r4, r0
 800272a:	4607      	mov	r7, r0
 800272c:	d802      	bhi.n	8002734 <_realloc_r+0x34>
 800272e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002732:	d812      	bhi.n	800275a <_realloc_r+0x5a>
 8002734:	4621      	mov	r1, r4
 8002736:	4640      	mov	r0, r8
 8002738:	f7ff fc36 	bl	8001fa8 <_malloc_r>
 800273c:	4605      	mov	r5, r0
 800273e:	2800      	cmp	r0, #0
 8002740:	d0ed      	beq.n	800271e <_realloc_r+0x1e>
 8002742:	42bc      	cmp	r4, r7
 8002744:	4622      	mov	r2, r4
 8002746:	4631      	mov	r1, r6
 8002748:	bf28      	it	cs
 800274a:	463a      	movcs	r2, r7
 800274c:	f7ff ffca 	bl	80026e4 <memcpy>
 8002750:	4631      	mov	r1, r6
 8002752:	4640      	mov	r0, r8
 8002754:	f7ff fbbc 	bl	8001ed0 <_free_r>
 8002758:	e7e1      	b.n	800271e <_realloc_r+0x1e>
 800275a:	4635      	mov	r5, r6
 800275c:	e7df      	b.n	800271e <_realloc_r+0x1e>

0800275e <_malloc_usable_size_r>:
 800275e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002762:	1f18      	subs	r0, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	bfbc      	itt	lt
 8002768:	580b      	ldrlt	r3, [r1, r0]
 800276a:	18c0      	addlt	r0, r0, r3
 800276c:	4770      	bx	lr
	...

08002770 <_init>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr

0800277c <_fini>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr

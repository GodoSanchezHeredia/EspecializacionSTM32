
Ejemplo43_MP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000528  0800f740  0800f740  0001f740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc68  0800fc68  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc68  0800fc68  0001fc68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc70  0800fc70  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc70  0800fc70  0001fc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc74  0800fc74  0001fc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800fc78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002508  200000b8  0800fd30  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200025c0  0800fd30  000225c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001df3d  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005568  00000000  00000000  0003e068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  000435d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001057  00000000  00000000  00044b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c7b0  00000000  00000000  00045bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000238bf  00000000  00000000  00062377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090104  00000000  00000000  00085c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a54  00000000  00000000  00115d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0011b790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b8 	.word	0x200000b8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800f728 	.word	0x0800f728

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000bc 	.word	0x200000bc
 80001d4:	0800f728 	.word	0x0800f728

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <AUDIO_OUT_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  AudioFreq: Audio frequency used to play the audio stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Init(uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{    
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	603a      	str	r2, [r7, #0]
 80004de:	80fb      	strh	r3, [r7, #6]
 80004e0:	460b      	mov	r3, r1
 80004e2:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 80004e8:	2200      	movs	r2, #0
 80004ea:	6839      	ldr	r1, [r7, #0]
 80004ec:	481c      	ldr	r0, [pc, #112]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004ee:	f000 f8f9 	bl	80006e4 <AUDIO_OUT_ClockConfig>
  
  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  hAudioOutI2s.Instance = I2S3;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <AUDIO_OUT_Init+0x90>)
 80004f6:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 80004f8:	4819      	ldr	r0, [pc, #100]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 80004fa:	f005 fe65 	bl	80061c8 <HAL_I2S_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <AUDIO_OUT_Init+0x38>
  {
    /* Init the I2S MSP: this __weak function can be redefined by the application*/
    AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8000504:	2100      	movs	r1, #0
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <AUDIO_OUT_Init+0x8c>)
 8000508:	f000 f94a 	bl	80007a0 <AUDIO_OUT_MspInit>
  }

  /* I2S data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to I2S peripheral */
  /* Configure the I2S peripheral */
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800050c:	6838      	ldr	r0, [r7, #0]
 800050e:	f000 fa0f 	bl	8000930 <I2S3_Init>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <AUDIO_OUT_Init+0x48>
  {
    ret = AUDIO_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10e      	bne.n	8000540 <AUDIO_OUT_Init+0x6c>
  {
    /* Retieve audio codec identifier */
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	2094      	movs	r0, #148	; 0x94
 8000528:	4798      	blx	r3
 800052a:	4603      	mov	r3, r0
 800052c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000530:	2be0      	cmp	r3, #224	; 0xe0
 8000532:	d103      	bne.n	800053c <AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      pAudioDrv = &cs43l22_drv; 
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <AUDIO_OUT_Init+0x94>)
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	e001      	b.n	8000540 <AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 800053c:	2301      	movs	r3, #1
 800053e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  if(ret == AUDIO_OK)
 8000540:	7bfb      	ldrb	r3, [r7, #15]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <AUDIO_OUT_Init+0x82>
  {
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <AUDIO_OUT_Init+0x98>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681c      	ldr	r4, [r3, #0]
 800054c:	797a      	ldrb	r2, [r7, #5]
 800054e:	88f9      	ldrh	r1, [r7, #6]
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2094      	movs	r0, #148	; 0x94
 8000554:	47a0      	blx	r4
  }
  
  return ret;
 8000556:	7bfb      	ldrb	r3, [r7, #15]
}
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	200000d8 	.word	0x200000d8
 8000564:	40003c00 	.word	0x40003c00
 8000568:	20000004 	.word	0x20000004
 800056c:	200000d4 	.word	0x200000d4

08000570 <AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer 
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <AUDIO_OUT_Play+0x4c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	683a      	ldr	r2, [r7, #0]
 8000582:	b292      	uxth	r2, r2
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	2094      	movs	r0, #148	; 0x94
 8000588:	4798      	blx	r3
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <AUDIO_OUT_Play+0x24>
  {
    return AUDIO_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	e00f      	b.n	80005b4 <AUDIO_OUT_Play+0x44>
  }
  else 
  {
    /* Update the Media layer and enable it for play */  
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800059a:	d203      	bcs.n	80005a4 <AUDIO_OUT_Play+0x34>
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	085b      	lsrs	r3, r3, #1
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	e001      	b.n	80005a8 <AUDIO_OUT_Play+0x38>
 80005a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a8:	461a      	mov	r2, r3
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <AUDIO_OUT_Play+0x50>)
 80005ae:	f005 fa89 	bl	8005ac4 <HAL_I2S_Transmit_DMA>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005b2:	2300      	movs	r3, #0
  }
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000d4 	.word	0x200000d4
 80005c0:	200000d8 	.word	0x200000d8

080005c4 <AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Pause(void)
{    
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <AUDIO_OUT_Pause+0x24>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	691b      	ldr	r3, [r3, #16]
 80005ce:	2094      	movs	r0, #148	; 0x94
 80005d0:	4798      	blx	r3
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <AUDIO_OUT_Pause+0x18>
  {
    return AUDIO_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	e003      	b.n	80005e4 <AUDIO_OUT_Pause+0x20>
  }
  else
  {
    /* Call the Media layer pause function */
    HAL_I2S_DMAPause(&hAudioOutI2s);
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <AUDIO_OUT_Pause+0x28>)
 80005de:	f005 fb19 	bl	8005c14 <HAL_I2S_DMAPause>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80005e2:	2300      	movs	r3, #0
  }
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200000d4 	.word	0x200000d4
 80005ec:	200000d8 	.word	0x200000d8

080005f0 <AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play() 
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Resume(void)
{    
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* Call the Audio Codec Pause/Resume function */
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <AUDIO_OUT_Resume+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	2094      	movs	r0, #148	; 0x94
 80005fc:	4798      	blx	r3
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <AUDIO_OUT_Resume+0x18>
  {
    return AUDIO_ERROR;
 8000604:	2301      	movs	r3, #1
 8000606:	e003      	b.n	8000610 <AUDIO_OUT_Resume+0x20>
  }
  else
  {
    /* Call the Media layer resume function */
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <AUDIO_OUT_Resume+0x28>)
 800060a:	f005 fb65 	bl	8005cd8 <HAL_I2S_DMAResume>
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800060e:	2300      	movs	r3, #0
  }
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000d4 	.word	0x200000d4
 8000618:	200000d8 	.word	0x200000d8

0800061c <AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically). 
  *                            Then need to reconfigure the Codec after power on.  
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_Stop(uint32_t Option)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Call DMA Stop to disable DMA stream before stopping codec */
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <AUDIO_OUT_Stop+0x44>)
 8000626:	f005 fbeb 	bl	8005e00 <HAL_I2S_DMAStop>
  
  /* Call Audio Codec Stop function */
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <AUDIO_OUT_Stop+0x48>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	2094      	movs	r0, #148	; 0x94
 8000634:	4798      	blx	r3
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <AUDIO_OUT_Stop+0x24>
  {
    return AUDIO_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00b      	b.n	8000658 <AUDIO_OUT_Stop+0x3c>
  }
  else
  {
    if(Option == CODEC_PDWN_HW)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d107      	bne.n	8000656 <AUDIO_OUT_Stop+0x3a>
    { 
      /* Wait at least 1ms */
      HAL_Delay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f001 fce6 	bl	8002018 <HAL_Delay>
      
      /* Reset the pin */
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <AUDIO_OUT_Stop+0x4c>)
 8000652:	f002 fcbd 	bl	8002fd0 <HAL_GPIO_WritePin>
    }
    
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 8000656:	2300      	movs	r3, #0
  }
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	200000d8 	.word	0x200000d8
 8000664:	200000d4 	.word	0x200000d4
 8000668:	40020c00 	.word	0x40020c00

0800066c <AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for 
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t AUDIO_OUT_SetVolume(uint8_t Volume)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(pAudioDrv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <AUDIO_OUT_SetVolume+0x2c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	4611      	mov	r1, r2
 8000680:	2094      	movs	r0, #148	; 0x94
 8000682:	4798      	blx	r3
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <AUDIO_OUT_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e000      	b.n	8000690 <AUDIO_OUT_SetVolume+0x24>
  }
  else
  {
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800068e:	2300      	movs	r3, #0
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000d4 	.word	0x200000d4

0800069c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_I2S_TxCpltCallback+0x20>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d101      	bne.n	80006b2 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    AUDIO_OUT_TransferComplete_CallBack();
 80006ae:	f001 fbef 	bl	8001e90 <AUDIO_OUT_TransferComplete_CallBack>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40003c00 	.word	0x40003c00

080006c0 <HAL_I2S_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_I2S_TxHalfCpltCallback+0x20>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d101      	bne.n	80006d6 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    /* Manage the remaining file size and new address offset: This function should
       be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
    AUDIO_OUT_HalfTransfer_CallBack();
 80006d2:	f001 fbf1 	bl	8001eb8 <AUDIO_OUT_HalfTransfer_CallBack>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40003c00 	.word	0x40003c00

080006e4 <AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	; 0x30
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80006f6:	23ff      	movs	r3, #255	; 0xff
 80006f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  
  for(index = 0; index < 8; index++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000702:	e010      	b.n	8000726 <AUDIO_OUT_ClockConfig+0x42>
  {
    if(I2SFreq[index] == AudioFreq)
 8000704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <AUDIO_OUT_ClockConfig+0xb0>)
 800070a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	429a      	cmp	r2, r3
 8000712:	d103      	bne.n	800071c <AUDIO_OUT_ClockConfig+0x38>
    {
      freqindex = index;
 8000714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000718:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  for(index = 0; index < 8; index++)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000720:	3301      	adds	r3, #1
 8000722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800072a:	2b07      	cmp	r3, #7
 800072c:	d9ea      	bls.n	8000704 <AUDIO_OUT_ClockConfig+0x20>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fe9a 	bl	800746c <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000738:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800073c:	f003 0307 	and.w	r3, r3, #7
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <AUDIO_OUT_ClockConfig+0x8c>
  {
    /* I2S clock config 
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) � (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000748:	2308      	movs	r3, #8
 800074a:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 800074c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <AUDIO_OUT_ClockConfig+0xb4>)
 8000752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000756:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000758:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <AUDIO_OUT_ClockConfig+0xb8>)
 800075e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000762:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4618      	mov	r0, r3
 800076a:	f006 fd8f 	bl	800728c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PLLI2S.PLLI2SM = 8;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 800076e:	e00d      	b.n	800078c <AUDIO_OUT_ClockConfig+0xa8>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	61bb      	str	r3, [r7, #24]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000778:	f44f 7381 	mov.w	r3, #258	; 0x102
 800077c:	61fb      	str	r3, [r7, #28]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 800077e:	2303      	movs	r3, #3
 8000780:	623b      	str	r3, [r7, #32]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fd80 	bl	800728c <HAL_RCCEx_PeriphCLKConfig>
}
 800078c:	bf00      	nop
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	0800f794 	.word	0x0800f794
 8000798:	0800f7b4 	.word	0x0800f7b4
 800079c:	0800f7d4 	.word	0x0800f7d4

080007a0 <AUDIO_OUT_MspInit>:
  * @brief  AUDIO OUT I2S MSP Init.
  * @param  hi2s: might be required to set audio peripheral predivider if any.
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void AUDIO_OUT_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2sTx;
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2S3 clock */
  I2S3_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b2:	4a55      	ldr	r2, [pc, #340]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b8:	6413      	str	r3, [r2, #64]	; 0x40
 80007ba:	4b53      	ldr	r3, [pc, #332]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]

  /*** Configure the GPIOs ***/  
  /* Enable I2S GPIO clocks */
  I2S3_SCK_SD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a4e      	ldr	r2, [pc, #312]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b4c      	ldr	r3, [pc, #304]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  I2S3_WS_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b48      	ldr	r3, [pc, #288]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a47      	ldr	r2, [pc, #284]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b45      	ldr	r3, [pc, #276]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

  /* I2S3 pins configuration: WS, SCK and SD pins ----------------------------*/
  GPIO_InitStruct.Pin         = I2S3_SCK_PIN | I2S3_SD_PIN; 
 80007fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull        = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 800080c:	2302      	movs	r3, #2
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8000810:	2306      	movs	r3, #6
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 800081c:	f002 f970 	bl	8002b00 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8000820:	2310      	movs	r3, #16
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4839      	ldr	r0, [pc, #228]	; (8000910 <AUDIO_OUT_MspInit+0x170>)
 800082c:	f002 f968 	bl	8002b00 <HAL_GPIO_Init>

  /* I2S3 pins configuration: MCK pin */
  I2S3_MCK_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	4b34      	ldr	r3, [pc, #208]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a33      	ldr	r2, [pc, #204]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b31      	ldr	r3, [pc, #196]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	482d      	ldr	r0, [pc, #180]	; (800090c <AUDIO_OUT_MspInit+0x16c>)
 8000858:	f002 f952 	bl	8002b00 <HAL_GPIO_Init>

  /* Enable the I2S DMA clock */
  I2S3_DMAx_CLK_ENABLE(); 
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 8000866:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800086a:	6313      	str	r3, [r2, #48]	; 0x30
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <AUDIO_OUT_MspInit+0x168>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  
  if(hi2s->Instance == I2S3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <AUDIO_OUT_MspInit+0x174>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d136      	bne.n	80008f0 <AUDIO_OUT_MspInit+0x150>
  {
    /* Configure the hdma_i2sTx handle parameters */   
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8000882:	4b25      	ldr	r3, [pc, #148]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000888:	4b23      	ldr	r3, [pc, #140]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800088a:	2240      	movs	r2, #64	; 0x40
 800088c:	609a      	str	r2, [r3, #8]
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800088e:	4b22      	ldr	r3, [pc, #136]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
    hdma_i2sTx.Init.MemInc              = DMA_MINC_ENABLE;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 8000896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800089a:	611a      	str	r2, [r3, #16]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	615a      	str	r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008aa:	619a      	str	r2, [r3, #24]
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
    hdma_i2sTx.Init.Priority            = DMA_PRIORITY_HIGH;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b8:	621a      	str	r2, [r3, #32]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008bc:	2204      	movs	r2, #4
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c2:	2203      	movs	r2, #3
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008d4:	4a11      	ldr	r2, [pc, #68]	; (800091c <AUDIO_OUT_MspInit+0x17c>)
 80008d6:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sTx);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008e6:	f001 fd7b 	bl	80023e0 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sTx);
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <AUDIO_OUT_MspInit+0x178>)
 80008ec:	f001 fcca 	bl	8002284 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	210e      	movs	r1, #14
 80008f4:	202f      	movs	r0, #47	; 0x2f
 80008f6:	f001 fc8e 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ);  
 80008fa:	202f      	movs	r0, #47	; 0x2f
 80008fc:	f001 fca7 	bl	800224e <HAL_NVIC_EnableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3730      	adds	r7, #48	; 0x30
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40020800 	.word	0x40020800
 8000910:	40020000 	.word	0x40020000
 8000914:	40003c00 	.word	0x40003c00
 8000918:	20000120 	.word	0x20000120
 800091c:	400260b8 	.word	0x400260b8

08000920 <AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void AUDIO_OUT_Error_CallBack(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <I2S3_Init>:
/**
  * @brief  Initializes the Audio Codec audio interface (I2S).
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <I2S3_Init+0x68>)
 800093a:	4a18      	ldr	r2, [pc, #96]	; (800099c <I2S3_Init+0x6c>)
 800093c:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <I2S3_Init+0x68>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <I2S3_Init+0x68>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800094c:	61da      	str	r2, [r3, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2S3_Init+0x68>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6153      	str	r3, [r2, #20]
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <I2S3_Init+0x68>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <I2S3_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <I2S3_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <I2S3_Init+0x68>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <I2S3_Init+0x68>)
 8000970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000974:	605a      	str	r2, [r3, #4]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <I2S3_Init+0x68>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <I2S3_Init+0x68>)
 800097e:	f004 ff61 	bl	8005844 <HAL_I2S_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <I2S3_Init+0x5c>
  {
    return AUDIO_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <I2S3_Init+0x5e>
  }
  else
  {
    return AUDIO_OK;
 800098c:	2300      	movs	r3, #0
  }
}
 800098e:	4618      	mov	r0, r3
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000d8 	.word	0x200000d8
 800099c:	40003c00 	.word	0x40003c00

080009a0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_I2S_ErrorCallback+0x20>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d101      	bne.n	80009b6 <HAL_I2S_ErrorCallback+0x16>
  {
    AUDIO_OUT_Error_CallBack();
 80009b2:	f7ff ffb5 	bl	8000920 <AUDIO_OUT_Error_CallBack>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40003c00 	.word	0x40003c00

080009c4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80009c8:	4814      	ldr	r0, [pc, #80]	; (8000a1c <I2Cx_Init+0x58>)
 80009ca:	f004 fbd1 	bl	8005170 <HAL_I2C_GetState>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d121      	bne.n	8000a18 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = AUDIO_I2Cx;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <I2Cx_Init+0x58>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <I2Cx_Init+0x5c>)
 80009d8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <I2Cx_Init+0x58>)
 80009dc:	2243      	movs	r2, #67	; 0x43
 80009de:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <I2Cx_Init+0x58>)
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <I2Cx_Init+0x60>)
 80009e4:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <I2Cx_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <I2Cx_Init+0x58>)
 80009ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009f2:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <I2Cx_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <I2Cx_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <I2Cx_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <I2Cx_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <I2Cx_Init+0x58>)
 8000a0e:	f000 f86b 	bl	8000ae8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8000a12:	4802      	ldr	r0, [pc, #8]	; (8000a1c <I2Cx_Init+0x58>)
 8000a14:	f003 ff18 	bl	8004848 <HAL_I2C_Init>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000180 	.word	0x20000180
 8000a20:	40005400 	.word	0x40005400
 8000a24:	000186a0 	.word	0x000186a0

08000a28 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	460b      	mov	r3, r1
 8000a34:	717b      	strb	r3, [r7, #5]
 8000a36:	4613      	mov	r3, r2
 8000a38:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <I2Cx_WriteData+0x48>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <I2Cx_WriteData+0x4c>)
 8000a56:	f004 f86b 	bl	8004b30 <HAL_I2C_Mem_Write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000a64:	f000 f834 	bl	8000ad0 <I2Cx_Error>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000180 	.word	0x20000180

08000a78 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af04      	add	r7, sp, #16
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8000a90:	797b      	ldrb	r3, [r7, #5]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <I2Cx_ReadData+0x50>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	88f9      	ldrh	r1, [r7, #6]
 8000a9a:	9302      	str	r3, [sp, #8]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	f107 030e 	add.w	r3, r7, #14
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <I2Cx_ReadData+0x54>)
 8000aaa:	f004 f93b 	bl	8004d24 <HAL_I2C_Mem_Read>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8000ab8:	f000 f80a 	bl	8000ad0 <I2Cx_Error>
  }
  return value;
 8000abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000180 	.word	0x20000180

08000ad0 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <I2Cx_Error+0x14>)
 8000ad6:	f003 fffb 	bl	8004ad0 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8000ada:	f7ff ff73 	bl	80009c4 <I2Cx_Init>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000180 	.word	0x20000180

08000ae8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the I2C peripheral */
  AUDIO_I2Cx_CLOCK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a24      	ldr	r2, [pc, #144]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  AUDIO_I2Cx_GPIO_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	4a1d      	ldr	r2, [pc, #116]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	f003 0302 	and.w	r3, r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = AUDIO_I2Cx_SDA_PIN | AUDIO_I2Cx_SCL_PIN;
 8000b28:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8000b2e:	2312      	movs	r3, #18
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = AUDIO_I2Cx_AF;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(AUDIO_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <I2Cx_MspInit+0xa8>)
 8000b46:	f001 ffdb 	bl	8002b00 <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  AUDIO_I2Cx_FORCE_RESET();
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b54:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  AUDIO_I2Cx_RELEASE_RESET();
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	4a0c      	ldr	r2, [pc, #48]	; (8000b8c <I2Cx_MspInit+0xa4>)
 8000b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000b60:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	210f      	movs	r1, #15
 8000b66:	201f      	movs	r0, #31
 8000b68:	f001 fb55 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_EV_IRQn);
 8000b6c:	201f      	movs	r0, #31
 8000b6e:	f001 fb6e 	bl	800224e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	210f      	movs	r1, #15
 8000b76:	2020      	movs	r0, #32
 8000b78:	f001 fb4d 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Cx_ER_IRQn);
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f001 fb66 	bl	800224e <HAL_NVIC_EnableIRQ>
}
 8000b82:	bf00      	nop
 8000b84:	3728      	adds	r7, #40	; 0x28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a16      	ldr	r2, [pc, #88]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <AUDIO_IO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  
  /* Audio reset pin configuration -------------------------------------------*/
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bcc:	f001 ff98 	bl	8002b00 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8000bd0:	f7ff fef8 	bl	80009c4 <I2Cx_Init>
  
  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4809      	ldr	r0, [pc, #36]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bda:	f002 f9f9 	bl	8002fd0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bde:	2005      	movs	r0, #5
 8000be0:	f001 fa1a 	bl	8002018 <HAL_Delay>
  
  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000be4:	2201      	movs	r2, #1
 8000be6:	2110      	movs	r1, #16
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <AUDIO_IO_Init+0x6c>)
 8000bea:	f002 f9f1 	bl	8002fd0 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f001 fa12 	bl	8002018 <HAL_Delay>
}
 8000bf4:	bf00      	nop
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void) 
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	71bb      	strb	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	797a      	ldrb	r2, [r7, #5]
 8000c2a:	79b9      	ldrb	r1, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fefb 	bl	8000a28 <I2Cx_WriteData>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read (uint8_t Addr, uint8_t Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	460a      	mov	r2, r1
 8000c44:	71fb      	strb	r3, [r7, #7]
 8000c46:	4613      	mov	r3, r2
 8000c48:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	79ba      	ldrb	r2, [r7, #6]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff10 	bl	8000a78 <I2Cx_ReadData>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <AUDIO_StorageParse>:

USBH_HandleTypeDef hUSBHost;
uint16_t NumObs = 0;

FRESULT AUDIO_StorageParse(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0d6      	sub	sp, #344	; 0x158
 8000c68:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FILINFO fno;
  DIR dir;
  char *fn;


  res = f_opendir(&dir, USBHPath);
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4945      	ldr	r1, [pc, #276]	; (8000d88 <AUDIO_StorageParse+0x124>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00d fe9b 	bl	800e9b0 <f_opendir>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  FileList.ptr = 0;
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8

  if(res == FR_OK)
 8000c88:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d16b      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
  {
    while(Appli_state == APPLICATION_READY)
 8000c90:	e066      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
    {
      res = f_readdir(&dir, &fno);
 8000c92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f00d ff21 	bl	800eae2 <f_readdir>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if(res != FR_OK || fno.fname[0] == 0)
 8000ca6:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d15c      	bne.n	8000d68 <AUDIO_StorageParse+0x104>
 8000cae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cb6:	7d9b      	ldrb	r3, [r3, #22]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d055      	beq.n	8000d68 <AUDIO_StorageParse+0x104>
      {
        break;
      }
      if(fno.fname[0] == '.')
 8000cbc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000cc0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000cc4:	7d9b      	ldrb	r3, [r3, #22]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d100      	bne.n	8000ccc <AUDIO_StorageParse+0x68>
      {
        continue;
 8000cca:	e049      	b.n	8000d60 <AUDIO_StorageParse+0xfc>
      }

      fn = fno.fname;
 8000ccc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000cd8:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000cdc:	2b17      	cmp	r3, #23
 8000cde:	d83f      	bhi.n	8000d60 <AUDIO_StorageParse+0xfc>
      {
        if((fno.fattrib & AM_DIR) == 0)
 8000ce0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d136      	bne.n	8000d60 <AUDIO_StorageParse+0xfc>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <AUDIO_StorageParse+0x12c>)
 8000cf4:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000cf8:	f00e fc69 	bl	800f5ce <strstr>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d107      	bne.n	8000d12 <AUDIO_StorageParse+0xae>
 8000d02:	4924      	ldr	r1, [pc, #144]	; (8000d94 <AUDIO_StorageParse+0x130>)
 8000d04:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8000d08:	f00e fc61 	bl	800f5ce <strstr>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d026      	beq.n	8000d60 <AUDIO_StorageParse+0xfc>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d14:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4413      	add	r3, r2
 8000d24:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d26:	4413      	add	r3, r2
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8000d30:	4618      	mov	r0, r3
 8000d32:	f00e fc39 	bl	800f5a8 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d38:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4913      	ldr	r1, [pc, #76]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d52:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	; 0x3d8
 8000d56:	3301      	adds	r3, #1
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d5c:	f8a3 23d8 	strh.w	r2, [r3, #984]	; 0x3d8
    while(Appli_state == APPLICATION_READY)
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <AUDIO_StorageParse+0x134>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d094      	beq.n	8000c92 <AUDIO_StorageParse+0x2e>
          }
        }
      }
    }
  }
  NumObs = FileList.ptr;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <AUDIO_StorageParse+0x128>)
 8000d6a:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	; 0x3d8
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <AUDIO_StorageParse+0x138>)
 8000d70:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4618      	mov	r0, r3
 8000d76:	f00d fe8e 	bl	800ea96 <f_closedir>
  return res;
 8000d7a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000192c 	.word	0x2000192c
 8000d8c:	200012ec 	.word	0x200012ec
 8000d90:	0800f740 	.word	0x0800f740
 8000d94:	0800f744 	.word	0x0800f744
 8000d98:	20002170 	.word	0x20002170
 8000d9c:	200001d6 	.word	0x200001d6

08000da0 <AUDIO_GetWavObjectNumber>:

uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	if (AUDIO_StorageParse() == FR_OK) return NumObs;
 8000da4:	f7ff ff5e 	bl	8000c64 <AUDIO_StorageParse>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d102      	bne.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
 8000dae:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <AUDIO_GetWavObjectNumber+0x18>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	e7ff      	b.n	8000db4 <AUDIO_GetWavObjectNumber+0x14>
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200001d6 	.word	0x200001d6

08000dbc <Mount_USB>:

void Mount_USB (void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <Mount_USB+0x1c>)
 8000dc4:	4805      	ldr	r0, [pc, #20]	; (8000ddc <Mount_USB+0x20>)
 8000dc6:	f00c ffff 	bl	800ddc8 <f_mount>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <Mount_USB+0x24>)
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000192c 	.word	0x2000192c
 8000ddc:	20001930 	.word	0x20001930
 8000de0:	200001d4 	.word	0x200001d4

08000de4 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
 8000df0:	460b      	mov	r3, r1
 8000df2:	81bb      	strh	r3, [r7, #12]
 8000df4:	4613      	mov	r3, r2
 8000df6:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 8000dfc:	f7ff feca 	bl	8000b94 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	2102      	movs	r1, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fb01 	bl	8001410 <CODEC_IO_Write>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	461a      	mov	r2, r3
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	2b03      	cmp	r3, #3
 8000e1e:	d81b      	bhi.n	8000e58 <cs43l22_Init+0x74>
 8000e20:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <cs43l22_Init+0x44>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e41 	.word	0x08000e41
 8000e30:	08000e49 	.word	0x08000e49
 8000e34:	08000e51 	.word	0x08000e51
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 8000e38:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e3a:	22fa      	movs	r2, #250	; 0xfa
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e00f      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 8000e40:	4b59      	ldr	r3, [pc, #356]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e42:	22af      	movs	r2, #175	; 0xaf
 8000e44:	701a      	strb	r2, [r3, #0]
    break;
 8000e46:	e00b      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e4a:	22aa      	movs	r2, #170	; 0xaa
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e007      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8000e50:	4b55      	ldr	r3, [pc, #340]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e52:	2205      	movs	r2, #5
 8000e54:	701a      	strb	r2, [r3, #0]
    break;    
 8000e56:	e003      	b.n	8000e60 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 8000e58:	4b53      	ldr	r3, [pc, #332]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;    
 8000e5e:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4a50      	ldr	r2, [pc, #320]	; (8000fa8 <cs43l22_Init+0x1c4>)
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 facf 	bl	8001410 <CODEC_IO_Write>
 8000e72:	4603      	mov	r3, r0
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2281      	movs	r2, #129	; 0x81
 8000e82:	2105      	movs	r1, #5
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 fac3 	bl	8001410 <CODEC_IO_Write>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	4413      	add	r3, r2
 8000e92:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2204      	movs	r2, #4
 8000e9a:	2106      	movs	r1, #6
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fab7 	bl	8001410 <CODEC_IO_Write>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000eac:	7afa      	ldrb	r2, [r7, #11]
 8000eae:	89fb      	ldrh	r3, [r7, #14]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f964 	bl	8001180 <cs43l22_SetVolume>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8000ec0:	89bb      	ldrh	r3, [r7, #12]
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d023      	beq.n	8000f0e <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 8000ec6:	89fb      	ldrh	r3, [r7, #14]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2206      	movs	r2, #6
 8000ecc:	210f      	movs	r1, #15
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 fa9e 	bl	8001410 <CODEC_IO_Write>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	4413      	add	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8000ede:	89fb      	ldrh	r3, [r7, #14]
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2124      	movs	r1, #36	; 0x24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fa92 	bl	8001410 <CODEC_IO_Write>
 8000eec:	4603      	mov	r3, r0
 8000eee:	461a      	mov	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 8000ef6:	89fb      	ldrh	r3, [r7, #14]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2200      	movs	r2, #0
 8000efc:	2125      	movs	r1, #37	; 0x25
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa86 	bl	8001410 <CODEC_IO_Write>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 8000f0e:	89fb      	ldrh	r3, [r7, #14]
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	210a      	movs	r1, #10
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa7a 	bl	8001410 <CODEC_IO_Write>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	461a      	mov	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	4413      	add	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	210e      	movs	r1, #14
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa6e 	bl	8001410 <CODEC_IO_Write>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 8000f3e:	89fb      	ldrh	r3, [r7, #14]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	2127      	movs	r1, #39	; 0x27
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fa62 	bl	8001410 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fa56 	bl	8001410 <CODEC_IO_Write>
 8000f64:	4603      	mov	r3, r0
 8000f66:	461a      	mov	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	220a      	movs	r2, #10
 8000f74:	211a      	movs	r1, #26
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fa4a 	bl	8001410 <CODEC_IO_Write>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461a      	mov	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	4413      	add	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	220a      	movs	r2, #10
 8000f8c:	211b      	movs	r1, #27
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fa3e 	bl	8001410 <CODEC_IO_Write>
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8000f9e:	697b      	ldr	r3, [r7, #20]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001d8 	.word	0x200001d8

08000fac <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8000fb0:	f7ff fe28 	bl	8000c04 <AUDIO_IO_DeInit>
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8000fc2:	f7ff fde7 	bl	8000b94 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe34 	bl	8000c3a <AUDIO_IO_Read>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f023 0307 	bic.w	r3, r3, #7
 8000fdc:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <cs43l22_Play+0x70>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d123      	bne.n	800104c <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2206      	movs	r2, #6
 800100a:	210e      	movs	r1, #14
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f9ff 	bl	8001410 <CODEC_IO_Write>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4413      	add	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f919 	bl	8001258 <cs43l22_SetMute>
 8001026:	4602      	mov	r2, r0
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	229e      	movs	r2, #158	; 0x9e
 8001034:	2102      	movs	r1, #2
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f9ea 	bl	8001410 <CODEC_IO_Write>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <cs43l22_Play+0x70>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034

0800105c <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	2101      	movs	r1, #1
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f8f2 	bl	8001258 <cs43l22_SetMute>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 800107c:	88fb      	ldrh	r3, [r7, #6]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f9c3 	bl	8001410 <CODEC_IO_Write>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f8ce 	bl	8001258 <cs43l22_SetMute>
 80010bc:	4602      	mov	r2, r0
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e002      	b.n	80010d0 <cs43l22_Resume+0x30>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2bfe      	cmp	r3, #254	; 0xfe
 80010d4:	d9f9      	bls.n	80010ca <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4a0e      	ldr	r2, [pc, #56]	; (8001114 <cs43l22_Resume+0x74>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	2104      	movs	r1, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f994 	bl	8001410 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	229e      	movs	r2, #158	; 0x9e
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 f988 	bl	8001410 <CODEC_IO_Write>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4413      	add	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200001d8 	.word	0x200001d8

08001118 <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	2101      	movs	r1, #1
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f893 	bl	8001258 <cs43l22_SetMute>
 8001132:	4602      	mov	r2, r0
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2204      	movs	r2, #4
 8001140:	210e      	movs	r1, #14
 8001142:	4618      	mov	r0, r3
 8001144:	f000 f964 	bl	8001410 <CODEC_IO_Write>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4413      	add	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	229f      	movs	r2, #159	; 0x9f
 8001158:	2102      	movs	r1, #2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f958 	bl	8001410 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <cs43l22_Stop+0x64>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
  return counter;    
 8001170:	68fb      	ldr	r3, [r7, #12]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000034 	.word	0x20000034

08001180 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	80fb      	strh	r3, [r7, #6]
 800118c:	4613      	mov	r3, r2
 800118e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001194:	797b      	ldrb	r3, [r7, #5]
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d80b      	bhi.n	80011b2 <cs43l22_SetVolume+0x32>
 800119a:	797a      	ldrb	r2, [r7, #5]
 800119c:	4613      	mov	r3, r2
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	4a25      	ldr	r2, [pc, #148]	; (8001238 <cs43l22_SetVolume+0xb8>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1152      	asrs	r2, r2, #5
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	e000      	b.n	80011b4 <cs43l22_SetVolume+0x34>
 80011b2:	23ff      	movs	r3, #255	; 0xff
 80011b4:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 80011b6:	7afb      	ldrb	r3, [r7, #11]
 80011b8:	2be6      	cmp	r3, #230	; 0xe6
 80011ba:	d91c      	bls.n	80011f6 <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2d8      	uxtb	r0, r3
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	3319      	adds	r3, #25
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	2120      	movs	r1, #32
 80011ca:	f000 f921 	bl	8001410 <CODEC_IO_Write>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2d8      	uxtb	r0, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	3319      	adds	r3, #25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	461a      	mov	r2, r3
 80011e4:	2121      	movs	r1, #33	; 0x21
 80011e6:	f000 f913 	bl	8001410 <CODEC_IO_Write>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	e01b      	b.n	800122e <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	b2d8      	uxtb	r0, r3
 80011fa:	7afb      	ldrb	r3, [r7, #11]
 80011fc:	3319      	adds	r3, #25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	2120      	movs	r1, #32
 8001204:	f000 f904 	bl	8001410 <CODEC_IO_Write>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	b2d8      	uxtb	r0, r3
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3319      	adds	r3, #25
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2121      	movs	r1, #33	; 0x21
 8001220:	f000 f8f6 	bl	8001410 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4413      	add	r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	51eb851f 	.word	0x51eb851f

0800123c <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d124      	bne.n	80012b8 <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	b2db      	uxtb	r3, r3
 8001272:	22ff      	movs	r2, #255	; 0xff
 8001274:	2104      	movs	r1, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f8ca 	bl	8001410 <CODEC_IO_Write>
 800127c:	4603      	mov	r3, r0
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 8001286:	88fb      	ldrh	r3, [r7, #6]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2201      	movs	r2, #1
 800128c:	2122      	movs	r1, #34	; 0x22
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f8be 	bl	8001410 <CODEC_IO_Write>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 800129e:	88fb      	ldrh	r3, [r7, #6]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	2123      	movs	r1, #35	; 0x23
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f8b2 	bl	8001410 <CODEC_IO_Write>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e025      	b.n	8001304 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2200      	movs	r2, #0
 80012be:	2122      	movs	r1, #34	; 0x22
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f8a5 	bl	8001410 <CODEC_IO_Write>
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2200      	movs	r2, #0
 80012d6:	2123      	movs	r1, #35	; 0x23
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f899 	bl	8001410 <CODEC_IO_Write>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4a08      	ldr	r2, [pc, #32]	; (8001310 <cs43l22_SetMute+0xb8>)
 80012ee:	7812      	ldrb	r2, [r2, #0]
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	2104      	movs	r1, #4
 80012f4:	4618      	mov	r0, r3
 80012f6:	f000 f88b 	bl	8001410 <CODEC_IO_Write>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001d8 	.word	0x200001d8

08001314 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	80fb      	strh	r3, [r7, #6]
 8001320:	4613      	mov	r3, r2
 8001322:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d84b      	bhi.n	80013c8 <cs43l22_SetOutputMode+0xb4>
 8001330:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <cs43l22_SetOutputMode+0x24>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	08001369 	.word	0x08001369
 8001340:	08001389 	.word	0x08001389
 8001344:	080013a9 	.word	0x080013a9
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	22fa      	movs	r2, #250	; 0xfa
 800134e:	2104      	movs	r1, #4
 8001350:	4618      	mov	r0, r3
 8001352:	f000 f85d 	bl	8001410 <CODEC_IO_Write>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8001360:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001362:	22fa      	movs	r2, #250	; 0xfa
 8001364:	701a      	strb	r2, [r3, #0]
      break;
 8001366:	e03f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	22af      	movs	r2, #175	; 0xaf
 800136e:	2104      	movs	r1, #4
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f84d 	bl	8001410 <CODEC_IO_Write>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4413      	add	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 8001382:	22af      	movs	r2, #175	; 0xaf
 8001384:	701a      	strb	r2, [r3, #0]
      break;
 8001386:	e02f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	22aa      	movs	r2, #170	; 0xaa
 800138e:	2104      	movs	r1, #4
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f83d 	bl	8001410 <CODEC_IO_Write>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4413      	add	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013a2:	22aa      	movs	r2, #170	; 0xaa
 80013a4:	701a      	strb	r2, [r3, #0]
      break;
 80013a6:	e01f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2205      	movs	r2, #5
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f82d 	bl	8001410 <CODEC_IO_Write>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013c2:	2205      	movs	r2, #5
 80013c4:	701a      	strb	r2, [r3, #0]
      break;    
 80013c6:	e00f      	b.n	80013e8 <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2205      	movs	r2, #5
 80013ce:	2104      	movs	r1, #4
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f81d 	bl	8001410 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <cs43l22_SetOutputMode+0xe0>)
 80013e2:	2205      	movs	r2, #5
 80013e4:	701a      	strb	r2, [r3, #0]
      break;
 80013e6:	bf00      	nop
  }  
  return counter;
 80013e8:	68fb      	ldr	r3, [r7, #12]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001d8 	.word	0x200001d8

080013f8 <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001426:	797a      	ldrb	r2, [r7, #5]
 8001428:	79b9      	ldrb	r1, [r7, #6]
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fbf0 	bl	8000c12 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	b2db      	uxtb	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fd76 	bl	8001f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f82e 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f000 f910 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 8001450:	f000 f8ee 	bl	8001630 <MX_DMA_Init>
  MX_I2C1_Init();
 8001454:	f000 f890 	bl	8001578 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001458:	f000 f8bc 	bl	80015d4 <MX_I2S3_Init>
  MX_FATFS_Init();
 800145c:	f007 f88e 	bl	800857c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001460:	f00d fc9e 	bl	800eda0 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001464:	f00d fcc2 	bl	800edec <MX_USB_HOST_Process>


    /* USER CODE BEGIN 3 */

    if (Appli_state == APPLICATION_READY) {
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <main+0x5c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d1f9      	bne.n	8001464 <main+0x24>
		Mount_USB();
 8001470:	f7ff fca4 	bl	8000dbc <Mount_USB>
		AUDIO_PLAYER_Start(0);
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fb91 	bl	8001b9c <AUDIO_PLAYER_Start>
		while(!finalcancion){
 800147a:	e009      	b.n	8001490 <main+0x50>

			AUDIO_PLAYER_Process(TRUE);
 800147c:	2001      	movs	r0, #1
 800147e:	f000 fbed 	bl	8001c5c <AUDIO_PLAYER_Process>
			if (AudioState == AUDIO_STATE_STOP) {
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <main+0x60>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b09      	cmp	r3, #9
 8001488:	d102      	bne.n	8001490 <main+0x50>
				finalcancion = 1;
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <main+0x64>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]
		while(!finalcancion){
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <main+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f1      	beq.n	800147c <main+0x3c>
    MX_USB_HOST_Process();
 8001498:	e7e4      	b.n	8001464 <main+0x24>
 800149a:	bf00      	nop
 800149c:	20002170 	.word	0x20002170
 80014a0:	200012e8 	.word	0x200012e8
 80014a4:	200002d8 	.word	0x200002d8

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00e f86e 	bl	800f598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <SystemClock_Config+0xc8>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <SystemClock_Config+0xc8>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <SystemClock_Config+0xc8>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <SystemClock_Config+0xcc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <SystemClock_Config+0xcc>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <SystemClock_Config+0xcc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001518:	2304      	movs	r3, #4
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800151c:	2360      	movs	r3, #96	; 0x60
 800151e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001520:	2302      	movs	r3, #2
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001524:	2304      	movs	r3, #4
 8001526:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f005 fa29 	bl	8006984 <HAL_RCC_OscConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001538:	f000 f920 	bl	800177c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153c:	230f      	movs	r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2103      	movs	r1, #3
 8001558:	4618      	mov	r0, r3
 800155a:	f005 fc8b 	bl	8006e74 <HAL_RCC_ClockConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001564:	f000 f90a 	bl	800177c <Error_Handler>
  }
}
 8001568:	bf00      	nop
 800156a:	3750      	adds	r7, #80	; 0x50
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40023800 	.word	0x40023800
 8001574:	40007000 	.word	0x40007000

08001578 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_I2C1_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	; (80015cc <MX_I2C1_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <MX_I2C1_Init+0x58>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_I2C1_Init+0x50>)
 8001596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_I2C1_Init+0x50>)
 80015b6:	f003 f947 	bl	8004848 <HAL_I2C_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 f8dc 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200001dc 	.word	0x200001dc
 80015cc:	40005400 	.word	0x40005400
 80015d0:	000186a0 	.word	0x000186a0

080015d4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_I2S3_Init+0x54>)
 80015da:	4a14      	ldr	r2, [pc, #80]	; (800162c <MX_I2S3_Init+0x58>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2S3_Init+0x54>)
 80015e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_I2S3_Init+0x54>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2S3_Init+0x54>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_I2S3_Init+0x54>)
 80015f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_I2S3_Init+0x54>)
 80015fc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001600:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_I2S3_Init+0x54>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <MX_I2S3_Init+0x54>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_I2S3_Init+0x54>)
 8001610:	2201      	movs	r2, #1
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <MX_I2S3_Init+0x54>)
 8001616:	f004 f915 	bl	8005844 <HAL_I2S_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001620:	f000 f8ac 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000230 	.word	0x20000230
 800162c:	40003c00 	.word	0x40003c00

08001630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_DMA_Init+0x3c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <MX_DMA_Init+0x3c>)
 8001640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_DMA_Init+0x3c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2010      	movs	r0, #16
 8001658:	f000 fddd 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800165c:	2010      	movs	r0, #16
 800165e:	f000 fdf6 	bl	800224e <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MX_GPIO_Init+0xe0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a30      	ldr	r2, [pc, #192]	; (8001750 <MX_GPIO_Init+0xe0>)
 8001690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_GPIO_Init+0xe0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a29      	ldr	r2, [pc, #164]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b27      	ldr	r3, [pc, #156]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a22      	ldr	r2, [pc, #136]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_GPIO_Init+0xe0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2101      	movs	r1, #1
 80016fa:	4816      	ldr	r0, [pc, #88]	; (8001754 <MX_GPIO_Init+0xe4>)
 80016fc:	f001 fc68 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001700:	2301      	movs	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	480f      	ldr	r0, [pc, #60]	; (8001754 <MX_GPIO_Init+0xe4>)
 8001718:	f001 f9f2 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800171c:	2301      	movs	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001726:	2302      	movs	r3, #2
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <MX_GPIO_Init+0xe8>)
 8001732:	f001 f9e5 	bl	8002b00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2100      	movs	r1, #0
 800173a:	2006      	movs	r0, #6
 800173c:	f000 fd6b 	bl	8002216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001740:	2006      	movs	r0, #6
 8001742:	f000 fd84 	bl	800224e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800
 8001758:	40020000 	.word	0x40020000

0800175c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]



		AudioState = AUDIO_STATE_NEXT;
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001768:	2205      	movs	r2, #5
 800176a:	701a      	strb	r2, [r3, #0]


}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200012e8 	.word	0x200012e8

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
}
 8001782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001784:	e7fe      	b.n	8001784 <Error_Handler+0x8>
	...

08001788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_MspInit+0x4c>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_MspInit+0x4c>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	6453      	str	r3, [r2, #68]	; 0x44
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_MspInit+0x4c>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x4c>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_I2C_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001816:	f44f 7310 	mov.w	r3, #576	; 0x240
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001828:	2304      	movs	r3, #4
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <HAL_I2C_MspInit+0x8c>)
 8001834:	f001 f964 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005400 	.word	0x40005400
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400

08001868 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_I2C_MspDeInit+0x38>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10e      	bne.n	8001898 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_I2C_MspDeInit+0x3c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_I2C_MspDeInit+0x3c>)
 8001880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001886:	2140      	movs	r1, #64	; 0x40
 8001888:	4807      	ldr	r0, [pc, #28]	; (80018a8 <HAL_I2C_MspDeInit+0x40>)
 800188a:	f001 fabd 	bl	8002e08 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800188e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_I2C_MspDeInit+0x40>)
 8001894:	f001 fab8 	bl	8002e08 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40005400 	.word	0x40005400
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400

080018ac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	; 0x40
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI3)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a57      	ldr	r2, [pc, #348]	; (8001a38 <HAL_I2S_MspInit+0x18c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	f040 80a7 	bne.w	8001a30 <HAL_I2S_MspInit+0x184>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80018e6:	23c8      	movs	r3, #200	; 0xc8
 80018e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80018ea:	2305      	movs	r3, #5
 80018ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f005 fcc8 	bl	800728c <HAL_RCCEx_PeriphCLKConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8001902:	f7ff ff3b 	bl	800177c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a4b      	ldr	r2, [pc, #300]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_I2S_MspInit+0x190>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195a:	2310      	movs	r3, #16
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196a:	2306      	movs	r3, #6
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001972:	4619      	mov	r1, r3
 8001974:	4832      	ldr	r0, [pc, #200]	; (8001a40 <HAL_I2S_MspInit+0x194>)
 8001976:	f001 f8c3 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800197a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800198c:	2306      	movs	r3, #6
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	482b      	ldr	r0, [pc, #172]	; (8001a44 <HAL_I2S_MspInit+0x198>)
 8001998:	f001 f8b2 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800199c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 80019ae:	2305      	movs	r3, #5
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4822      	ldr	r0, [pc, #136]	; (8001a44 <HAL_I2S_MspInit+0x198>)
 80019ba:	f001 f8a1 	bl	8002b00 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019c0:	4a22      	ldr	r2, [pc, #136]	; (8001a4c <HAL_I2S_MspInit+0x1a0>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ca:	4b1f      	ldr	r3, [pc, #124]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019cc:	2240      	movs	r2, #64	; 0x40
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a04:	2203      	movs	r2, #3
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a16:	f000 fc35 	bl	8002284 <HAL_DMA_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2S_MspInit+0x178>
    {
      Error_Handler();
 8001a20:	f7ff feac 	bl	800177c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a28:	639a      	str	r2, [r3, #56]	; 0x38
 8001a2a:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_I2S_MspInit+0x19c>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3740      	adds	r7, #64	; 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40003c00 	.word	0x40003c00
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000
 8001a44:	40020800 	.word	0x40020800
 8001a48:	20000278 	.word	0x20000278
 8001a4c:	40026088 	.word	0x40026088

08001a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler+0x4>

08001a56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <MemManage_Handler+0x4>

08001a62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9c:	f000 fa9c 	bl	8001fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f001 faab 	bl	8003004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <DMA1_Stream5_IRQHandler+0x10>)
 8001aba:	f000 fdb7 	bl	800262c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000278 	.word	0x20000278

08001ac8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <OTG_FS_IRQHandler+0x10>)
 8001ace:	f001 fd1b 	bl	8003508 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20002174 	.word	0x20002174

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f00d fd86 	bl	800f61c <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20020000 	.word	0x20020000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200002dc 	.word	0x200002dc
 8001b44:	200025c0 	.word	0x200025c0

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <PlayerInit>:

FIL WavFile;

/* Private function prototypes -----------------------------------------------*/
uint8_t PlayerInit(uint32_t AudioFreq)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	/* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */
	if(AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <PlayerInit+0x2c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2003      	movs	r0, #3
 8001b80:	f7fe fca8 	bl	80004d4 <AUDIO_OUT_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <PlayerInit+0x22>
	{
		return 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <PlayerInit+0x24>
	}
	else
	{
		return 0;
 8001b8e:	2300      	movs	r3, #0
	}
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000003c 	.word	0x2000003c

08001b9c <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
  uint bytesread;

  f_close(&WavFile);
 8001ba6:	4828      	ldr	r0, [pc, #160]	; (8001c48 <AUDIO_PLAYER_Start+0xac>)
 8001ba8:	f00c fccf 	bl	800e54a <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001bac:	f7ff f8f8 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d93f      	bls.n	8001c3c <AUDIO_PLAYER_Start+0xa0>
  {

    //Open WAV file
    f_open(&WavFile, (char *)FileList.file[idx].name, FA_READ);
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <AUDIO_PLAYER_Start+0xb0>)
 8001bca:	4413      	add	r3, r2
 8001bcc:	3301      	adds	r3, #1
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <AUDIO_PLAYER_Start+0xac>)
 8001bd4:	f00c f93e 	bl	800de54 <f_open>
    //Read WAV file Header
    f_read(&WavFile, &WaveFormat, sizeof(WaveFormat), &bytesread);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	222c      	movs	r2, #44	; 0x2c
 8001bde:	491c      	ldr	r1, [pc, #112]	; (8001c50 <AUDIO_PLAYER_Start+0xb4>)
 8001be0:	4819      	ldr	r0, [pc, #100]	; (8001c48 <AUDIO_PLAYER_Start+0xac>)
 8001be2:	f00c faf5 	bl	800e1d0 <f_read>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate);
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <AUDIO_PLAYER_Start+0xb4>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffbe 	bl	8001b6c <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <AUDIO_PLAYER_Start+0xb8>)
 8001bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4812      	ldr	r0, [pc, #72]	; (8001c48 <AUDIO_PLAYER_Start+0xac>)
 8001bfe:	f00c fcce 	bl	800e59e <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile,&BufferCtl.buff[0],AUDIO_OUT_BUFFER_SIZE,(void *)&bytesread) == FR_OK)
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0a:	4912      	ldr	r1, [pc, #72]	; (8001c54 <AUDIO_PLAYER_Start+0xb8>)
 8001c0c:	480e      	ldr	r0, [pc, #56]	; (8001c48 <AUDIO_PLAYER_Start+0xac>)
 8001c0e:	f00c fadf 	bl	800e1d0 <f_read>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d111      	bne.n	8001c3c <AUDIO_PLAYER_Start+0xa0>
    {
      AudioState = AUDIO_STATE_PLAY;
 8001c18:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <AUDIO_PLAYER_Start+0xbc>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
        if(bytesread != 0)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <AUDIO_PLAYER_Start+0xa0>
        {
          AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001c24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c28:	480a      	ldr	r0, [pc, #40]	; (8001c54 <AUDIO_PLAYER_Start+0xb8>)
 8001c2a:	f7fe fca1 	bl	8000570 <AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <AUDIO_PLAYER_Start+0xb8>)
 8001c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c36:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e000      	b.n	8001c3e <AUDIO_PLAYER_Start+0xa2>
        }
      }
  }
  return AUDIO_ERROR_IO;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200016f4 	.word	0x200016f4
 8001c4c:	200012ec 	.word	0x200012ec
 8001c50:	200016c8 	.word	0x200016c8
 8001c54:	200002e0 	.word	0x200002e0
 8001c58:	200012e8 	.word	0x200012e8

08001c5c <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(bool isLoop)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  
  switch(AudioState)
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	3b03      	subs	r3, #3
 8001c70:	2b0a      	cmp	r3, #10
 8001c72:	f200 80f6 	bhi.w	8001e62 <AUDIO_PLAYER_Process+0x206>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <AUDIO_PLAYER_Process+0x20>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001ca9 	.word	0x08001ca9
 8001c80:	08001e63 	.word	0x08001e63
 8001c84:	08001d6f 	.word	0x08001d6f
 8001c88:	08001dbd 	.word	0x08001dbd
 8001c8c:	08001e63 	.word	0x08001e63
 8001c90:	08001e63 	.word	0x08001e63
 8001c94:	08001d5d 	.word	0x08001d5d
 8001c98:	08001dff 	.word	0x08001dff
 8001c9c:	08001e0b 	.word	0x08001e0b
 8001ca0:	08001e17 	.word	0x08001e17
 8001ca4:	08001e3d 	.word	0x08001e3d
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001ca8:	4b73      	ldr	r3, [pc, #460]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <AUDIO_PLAYER_Process+0x220>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d305      	bcc.n	8001cc4 <AUDIO_PLAYER_Process+0x68>
    {
      AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f7fe fcaf 	bl	800061c <AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001cbe:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d11e      	bne.n	8001d0e <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, &BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd8:	4967      	ldr	r1, [pc, #412]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001cda:	4869      	ldr	r0, [pc, #420]	; (8001e80 <AUDIO_PLAYER_Process+0x224>)
 8001cdc:	f00c fa78 	bl	800e1d0 <f_read>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <AUDIO_PLAYER_Process+0x94>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7fe fc98 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0bc      	b.n	8001e6a <AUDIO_PLAYER_Process+0x20e>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001cf0:	4b61      	ldr	r3, [pc, #388]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001cfa:	4b5f      	ldr	r3, [pc, #380]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001d08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d0c:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	f040 80a5 	bne.w	8001e66 <AUDIO_PLAYER_Process+0x20a>
    {
      if(f_read(&WavFile, &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], AUDIO_OUT_BUFFER_SIZE/2, (void *)&bytesread) != FR_OK)
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d24:	4957      	ldr	r1, [pc, #348]	; (8001e84 <AUDIO_PLAYER_Process+0x228>)
 8001d26:	4856      	ldr	r0, [pc, #344]	; (8001e80 <AUDIO_PLAYER_Process+0x224>)
 8001d28:	f00c fa52 	bl	800e1d0 <f_read>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <AUDIO_PLAYER_Process+0xe0>
      { 
        AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7fe fc72 	bl	800061c <AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e096      	b.n	8001e6a <AUDIO_PLAYER_Process+0x20e>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001d46:	4b4c      	ldr	r3, [pc, #304]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a49      	ldr	r2, [pc, #292]	; (8001e78 <AUDIO_PLAYER_Process+0x21c>)
 8001d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d58:	6053      	str	r3, [r2, #4]
    }
    break;
 8001d5a:	e084      	b.n	8001e66 <AUDIO_PLAYER_Process+0x20a>
    
  case AUDIO_STATE_STOP:
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7fe fc5d 	bl	800061c <AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001d62:	4b44      	ldr	r3, [pc, #272]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8001d6c:	e07c      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	4b41      	ldr	r3, [pc, #260]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	461c      	mov	r4, r3
 8001d88:	f7ff f80a 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	429c      	cmp	r4, r3
 8001d90:	db09      	blt.n	8001da6 <AUDIO_PLAYER_Process+0x14a>
    {
    	if (isLoop)
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <AUDIO_PLAYER_Process+0x144>
    	{
    		FilePos = 0;
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	e002      	b.n	8001da6 <AUDIO_PLAYER_Process+0x14a>
    	}
    	else
    	{
    		AudioState =AUDIO_STATE_STOP;
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001da2:	2209      	movs	r2, #9
 8001da4:	701a      	strb	r2, [r3, #0]
    	}
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7fe fc38 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fef1 	bl	8001b9c <AUDIO_PLAYER_Start>
    break;    
 8001dba:	e055      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8001dbc:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001dcc:	801a      	strh	r2, [r3, #0]
 8001dce:	4b2e      	ldr	r3, [pc, #184]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	da07      	bge.n	8001de8 <AUDIO_PLAYER_Process+0x18c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1;
 8001dd8:	f7fe ffe2 	bl	8000da0 <AUDIO_GetWavObjectNumber>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001de6:	801a      	strh	r2, [r3, #0]
    }
    AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7fe fc17 	bl	800061c <AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <AUDIO_PLAYER_Process+0x22c>)
 8001df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fed0 	bl	8001b9c <AUDIO_PLAYER_Start>
    break;   
 8001dfc:	e034      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_PAUSE:
    AUDIO_OUT_Pause();
 8001dfe:	f7fe fbe1 	bl	80005c4 <AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
    break;
 8001e08:	e02e      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_RESUME:
    AUDIO_OUT_Resume();
 8001e0a:	f7fe fbf1 	bl	80005f0 <AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001e10:	2203      	movs	r2, #3
 8001e12:	701a      	strb	r2, [r3, #0]
    break;
 8001e14:	e028      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b5a      	cmp	r3, #90	; 0x5a
 8001e1c:	d804      	bhi.n	8001e28 <AUDIO_PLAYER_Process+0x1cc>
    {
      uwVolume += 10;
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	330a      	adds	r3, #10
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e26:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e28:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fc1c 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001e36:	2203      	movs	r2, #3
 8001e38:	701a      	strb	r2, [r3, #0]
    break;
 8001e3a:	e015      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d904      	bls.n	8001e4e <AUDIO_PLAYER_Process+0x1f2>
    {
      uwVolume -= 10;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b0a      	subs	r3, #10
 8001e4a:	4a10      	ldr	r2, [pc, #64]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e4c:	6013      	str	r3, [r2, #0]
    }
    AUDIO_OUT_SetVolume(uwVolume);
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <AUDIO_PLAYER_Process+0x230>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fc09 	bl	800066c <AUDIO_OUT_SetVolume>
    AudioState = AUDIO_STATE_PLAY;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <AUDIO_PLAYER_Process+0x218>)
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	701a      	strb	r2, [r3, #0]
    break;
 8001e60:	e002      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Do Nothing */
    break;
 8001e62:	bf00      	nop
 8001e64:	e000      	b.n	8001e68 <AUDIO_PLAYER_Process+0x20c>
    break;
 8001e66:	bf00      	nop
  }
  return audio_error;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200012e8 	.word	0x200012e8
 8001e78:	200002e0 	.word	0x200002e0
 8001e7c:	200016c8 	.word	0x200016c8
 8001e80:	200016f4 	.word	0x200016f4
 8001e84:	20000ae0 	.word	0x20000ae0
 8001e88:	200012ea 	.word	0x200012ea
 8001e8c:	2000003c 	.word	0x2000003c

08001e90 <AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d104      	bne.n	8001ea6 <AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
  }
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	200012e8 	.word	0x200012e8
 8001eb4:	200002e0 	.word	0x200002e0

08001eb8 <AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d104      	bne.n	8001ece <AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8001ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eca:	2201      	movs	r2, #1
 8001ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	200012e8 	.word	0x200012e8
 8001edc:	200002e0 	.word	0x200002e0

08001ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee4:	480d      	ldr	r0, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee6:	490e      	ldr	r1, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001efc:	4c0b      	ldr	r4, [pc, #44]	; (8001f2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f0a:	f7ff fe1d 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0e:	f00d fb8b 	bl	800f628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f12:	f7ff fa95 	bl	8001440 <main>
  bx  lr    
 8001f16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f20:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001f24:	0800fc78 	.word	0x0800fc78
  ldr r2, =_sbss
 8001f28:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001f2c:	200025c0 	.word	0x200025c0

08001f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f30:	e7fe      	b.n	8001f30 <ADC_IRQHandler>
	...

08001f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_Init+0x40>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_Init+0x40>)
 8001f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_Init+0x40>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_Init+0x40>)
 8001f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x40>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 f94f 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fc0e 	bl	8001788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f967 	bl	800226a <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 f92f 	bl	8002216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000038 	.word	0x20000038
 8001fd0:	20000044 	.word	0x20000044
 8001fd4:	20000040 	.word	0x20000040

08001fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_IncTick+0x24>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_IncTick+0x24>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	20000044 	.word	0x20000044
 8001ffc:	20001924 	.word	0x20001924

08002000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return uwTick;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <HAL_GetTick+0x14>)
 8002006:	681b      	ldr	r3, [r3, #0]
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20001924 	.word	0x20001924

08002018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002020:	f7ff ffee 	bl	8002000 <HAL_GetTick>
 8002024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002030:	d005      	beq.n	800203e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_Delay+0x44>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800203e:	bf00      	nop
 8002040:	f7ff ffde 	bl	8002000 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	429a      	cmp	r2, r3
 800204e:	d8f7      	bhi.n	8002040 <HAL_Delay+0x28>
  {
  }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000044 	.word	0x20000044

08002060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800207c:	4013      	ands	r3, r2
 800207e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800208c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	60d3      	str	r3, [r2, #12]
}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ac:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	f003 0307 	and.w	r3, r3, #7
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db0b      	blt.n	80020ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	f003 021f 	and.w	r2, r3, #31
 80020dc:	4907      	ldr	r1, [pc, #28]	; (80020fc <__NVIC_EnableIRQ+0x38>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	2001      	movs	r0, #1
 80020e6:	fa00 f202 	lsl.w	r2, r0, r2
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f7ff ff8e 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff29 	bl	8002060 <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002228:	f7ff ff3e 	bl	80020a8 <__NVIC_GetPriorityGrouping>
 800222c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	6978      	ldr	r0, [r7, #20]
 8002234:	f7ff ff8e 	bl	8002154 <NVIC_EncodePriority>
 8002238:	4602      	mov	r2, r0
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff5d 	bl	8002100 <__NVIC_SetPriority>
}
 8002246:	bf00      	nop
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff31 	bl	80020c4 <__NVIC_EnableIRQ>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff ffa2 	bl	80021bc <SysTick_Config>
 8002278:	4603      	mov	r3, r0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff feb6 	bl	8002000 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e099      	b.n	80023d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c0:	e00f      	b.n	80022e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c2:	f7ff fe9d 	bl	8002000 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d908      	bls.n	80022e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2203      	movs	r2, #3
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e078      	b.n	80023d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e8      	bne.n	80022c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4b38      	ldr	r3, [pc, #224]	; (80023dc <HAL_DMA_Init+0x158>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4313      	orrs	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b04      	cmp	r3, #4
 800233a:	d107      	bne.n	800234c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002344:	4313      	orrs	r3, r2
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0307 	bic.w	r3, r3, #7
 8002362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4313      	orrs	r3, r2
 800236c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b04      	cmp	r3, #4
 8002374:	d117      	bne.n	80023a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fb3d 	bl	8002a08 <DMA_CheckFifoParam>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023a2:	2301      	movs	r3, #1
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 faf4 	bl	800299c <DMA_CalcBaseAndBitshift>
 80023b4:	4603      	mov	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	223f      	movs	r2, #63	; 0x3f
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	f010803f 	.word	0xf010803f

080023e0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e050      	b.n	8002494 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
 8002400:	e048      	b.n	8002494 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2200      	movs	r2, #0
 8002420:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2221      	movs	r2, #33	; 0x21
 8002440:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 faaa 	bl	800299c <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Start_IT+0x26>
 80024be:	2302      	movs	r3, #2
 80024c0:	e040      	b.n	8002544 <HAL_DMA_Start_IT+0xa8>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d12f      	bne.n	8002536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa28 	bl	8002940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	223f      	movs	r2, #63	; 0x3f
 80024f6:	409a      	lsls	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0216 	orr.w	r2, r2, #22
 800250a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0208 	orr.w	r2, r2, #8
 8002522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	e005      	b.n	8002542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800253e:	2302      	movs	r3, #2
 8002540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002542:	7dfb      	ldrb	r3, [r7, #23]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800255a:	f7ff fd51 	bl	8002000 <HAL_GetTick>
 800255e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d008      	beq.n	800257e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e052      	b.n	8002624 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0216 	bic.w	r2, r2, #22
 800258c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d103      	bne.n	80025ae <HAL_DMA_Abort+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d007      	beq.n	80025be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0208 	bic.w	r2, r2, #8
 80025bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ce:	e013      	b.n	80025f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d0:	f7ff fd16 	bl	8002000 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d90c      	bls.n	80025f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2203      	movs	r2, #3
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e015      	b.n	8002624 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e4      	bne.n	80025d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	223f      	movs	r2, #63	; 0x3f
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002638:	4b8e      	ldr	r3, [pc, #568]	; (8002874 <HAL_DMA_IRQHandler+0x248>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a8e      	ldr	r2, [pc, #568]	; (8002878 <HAL_DMA_IRQHandler+0x24c>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a9b      	lsrs	r3, r3, #10
 8002644:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2208      	movs	r2, #8
 8002658:	409a      	lsls	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01a      	beq.n	8002698 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	2208      	movs	r2, #8
 8002686:	409a      	lsls	r2, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2201      	movs	r2, #1
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00b      	beq.n	80026ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2201      	movs	r2, #1
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2204      	movs	r2, #4
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d012      	beq.n	8002704 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00b      	beq.n	8002704 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f0:	2204      	movs	r2, #4
 80026f2:	409a      	lsls	r2, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f043 0204 	orr.w	r2, r3, #4
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	2210      	movs	r2, #16
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d043      	beq.n	800279c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d03c      	beq.n	800279c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	2210      	movs	r2, #16
 8002728:	409a      	lsls	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d018      	beq.n	800276e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
 800275a:	e01f      	b.n	800279c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01b      	beq.n	800279c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
 800276c:	e016      	b.n	800279c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0208 	bic.w	r2, r2, #8
 800278a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a0:	2220      	movs	r2, #32
 80027a2:	409a      	lsls	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 808f 	beq.w	80028cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8087 	beq.w	80028cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c2:	2220      	movs	r2, #32
 80027c4:	409a      	lsls	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b05      	cmp	r3, #5
 80027d4:	d136      	bne.n	8002844 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0216 	bic.w	r2, r2, #22
 80027e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_DMA_IRQHandler+0x1da>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002802:	2b00      	cmp	r3, #0
 8002804:	d007      	beq.n	8002816 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0208 	bic.w	r2, r2, #8
 8002814:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	223f      	movs	r2, #63	; 0x3f
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07e      	beq.n	8002938 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	4798      	blx	r3
        }
        return;
 8002842:	e079      	b.n	8002938 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01d      	beq.n	800288e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10d      	bne.n	800287c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	2b00      	cmp	r3, #0
 8002866:	d031      	beq.n	80028cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4798      	blx	r3
 8002870:	e02c      	b.n	80028cc <HAL_DMA_IRQHandler+0x2a0>
 8002872:	bf00      	nop
 8002874:	20000038 	.word	0x20000038
 8002878:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
 800288c:	e01e      	b.n	80028cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10f      	bne.n	80028bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0210 	bic.w	r2, r2, #16
 80028aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d032      	beq.n	800293a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d022      	beq.n	8002926 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2205      	movs	r2, #5
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0201 	bic.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	d307      	bcc.n	8002914 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f2      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x2cc>
 8002912:	e000      	b.n	8002916 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002914:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
 8002936:	e000      	b.n	800293a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002938:	bf00      	nop
    }
  }
}
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800295c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d108      	bne.n	8002980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800297e:	e007      	b.n	8002990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	60da      	str	r2, [r3, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3b10      	subs	r3, #16
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <DMA_CalcBaseAndBitshift+0x64>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <DMA_CalcBaseAndBitshift+0x68>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d909      	bls.n	80029de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d2:	f023 0303 	bic.w	r3, r3, #3
 80029d6:	1d1a      	adds	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	659a      	str	r2, [r3, #88]	; 0x58
 80029dc:	e007      	b.n	80029ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	aaaaaaab 	.word	0xaaaaaaab
 8002a04:	0800f80c 	.word	0x0800f80c

08002a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d11f      	bne.n	8002a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d856      	bhi.n	8002ad6 <DMA_CheckFifoParam+0xce>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <DMA_CheckFifoParam+0x28>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a53 	.word	0x08002a53
 8002a38:	08002a41 	.word	0x08002a41
 8002a3c:	08002ad7 	.word	0x08002ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d046      	beq.n	8002ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e043      	b.n	8002ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5a:	d140      	bne.n	8002ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a60:	e03d      	b.n	8002ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6a:	d121      	bne.n	8002ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d837      	bhi.n	8002ae2 <DMA_CheckFifoParam+0xda>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <DMA_CheckFifoParam+0x70>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a8f 	.word	0x08002a8f
 8002a80:	08002a89 	.word	0x08002a89
 8002a84:	08002aa1 	.word	0x08002aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a8c:	e030      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d025      	beq.n	8002ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9e:	e022      	b.n	8002ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aa8:	d11f      	bne.n	8002aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aae:	e01c      	b.n	8002aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d903      	bls.n	8002abe <DMA_CheckFifoParam+0xb6>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d003      	beq.n	8002ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002abc:	e018      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac2:	e015      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad4:	e00b      	b.n	8002aee <DMA_CheckFifoParam+0xe6>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e00a      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e008      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e006      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e004      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e002      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
    }
  } 
  
  return status; 
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	; 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
 8002b1a:	e159      	b.n	8002dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f040 8148 	bne.w	8002dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d005      	beq.n	8002b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d130      	bne.n	8002bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b88:	2201      	movs	r2, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 0201 	and.w	r2, r3, #1
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d017      	beq.n	8002bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	2203      	movs	r2, #3
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d123      	bne.n	8002c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	08da      	lsrs	r2, r3, #3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3208      	adds	r2, #8
 8002c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	220f      	movs	r2, #15
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3208      	adds	r2, #8
 8002c3e:	69b9      	ldr	r1, [r7, #24]
 8002c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	2203      	movs	r2, #3
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 0203 	and.w	r2, r3, #3
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 80a2 	beq.w	8002dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	4b57      	ldr	r3, [pc, #348]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a56      	ldr	r2, [pc, #344]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c94:	6453      	str	r3, [r2, #68]	; 0x44
 8002c96:	4b54      	ldr	r3, [pc, #336]	; (8002de8 <HAL_GPIO_Init+0x2e8>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca2:	4a52      	ldr	r2, [pc, #328]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	220f      	movs	r2, #15
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a49      	ldr	r2, [pc, #292]	; (8002df0 <HAL_GPIO_Init+0x2f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x202>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_GPIO_Init+0x2f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <HAL_GPIO_Init+0x2f8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1fa>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a46      	ldr	r2, [pc, #280]	; (8002dfc <HAL_GPIO_Init+0x2fc>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1f6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a45      	ldr	r2, [pc, #276]	; (8002e00 <HAL_GPIO_Init+0x300>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1f2>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	e008      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e006      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e004      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e002      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_GPIO_Init+0x204>
 8002d02:	2300      	movs	r3, #0
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f002 0203 	and.w	r2, r2, #3
 8002d0a:	0092      	lsls	r2, r2, #2
 8002d0c:	4093      	lsls	r3, r2
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d14:	4935      	ldr	r1, [pc, #212]	; (8002dec <HAL_GPIO_Init+0x2ec>)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	089b      	lsrs	r3, r3, #2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d70:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc4:	4a0f      	ldr	r2, [pc, #60]	; (8002e04 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	f67f aea2 	bls.w	8002b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3724      	adds	r7, #36	; 0x24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e0bb      	b.n	8002f9c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e24:	2201      	movs	r2, #1
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f040 80ab 	bne.w	8002f96 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e40:	4a5c      	ldr	r2, [pc, #368]	; (8002fb4 <HAL_GPIO_DeInit+0x1ac>)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	220f      	movs	r2, #15
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_GPIO_DeInit+0x1b0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_GPIO_DeInit+0x96>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <HAL_GPIO_DeInit+0x1b4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_GPIO_DeInit+0x92>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_GPIO_DeInit+0x1b8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d00d      	beq.n	8002e96 <HAL_GPIO_DeInit+0x8e>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	; (8002fc4 <HAL_GPIO_DeInit+0x1bc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d007      	beq.n	8002e92 <HAL_GPIO_DeInit+0x8a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a50      	ldr	r2, [pc, #320]	; (8002fc8 <HAL_GPIO_DeInit+0x1c0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d101      	bne.n	8002e8e <HAL_GPIO_DeInit+0x86>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	e008      	b.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e8e:	2307      	movs	r3, #7
 8002e90:	e006      	b.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e92:	2303      	movs	r3, #3
 8002e94:	e004      	b.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e002      	b.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_GPIO_DeInit+0x98>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	f002 0203 	and.w	r2, r2, #3
 8002ea6:	0092      	lsls	r2, r2, #2
 8002ea8:	4093      	lsls	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d132      	bne.n	8002f16 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002eb0:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	4944      	ldr	r1, [pc, #272]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4941      	ldr	r1, [pc, #260]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ecc:	4b3f      	ldr	r3, [pc, #252]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	493d      	ldr	r1, [pc, #244]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002eda:	4b3c      	ldr	r3, [pc, #240]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	493a      	ldr	r1, [pc, #232]	; (8002fcc <HAL_GPIO_DeInit+0x1c4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	; (8002fb4 <HAL_GPIO_DeInit+0x1ac>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	3302      	adds	r3, #2
 8002f00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	43da      	mvns	r2, r3
 8002f08:	482a      	ldr	r0, [pc, #168]	; (8002fb4 <HAL_GPIO_DeInit+0x1ac>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	400a      	ands	r2, r1
 8002f10:	3302      	adds	r3, #2
 8002f12:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2103      	movs	r1, #3
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	08da      	lsrs	r2, r3, #3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3208      	adds	r2, #8
 8002f34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	08d2      	lsrs	r2, r2, #3
 8002f4c:	4019      	ands	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2103      	movs	r1, #3
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	2101      	movs	r1, #1
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2103      	movs	r1, #3
 8002f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	401a      	ands	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b0f      	cmp	r3, #15
 8002fa0:	f67f af40 	bls.w	8002e24 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40020000 	.word	0x40020000
 8002fbc:	40020400 	.word	0x40020400
 8002fc0:	40020800 	.word	0x40020800
 8002fc4:	40020c00 	.word	0x40020c00
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40013c00 	.word	0x40013c00

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fec:	e003      	b.n	8002ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fee:	887b      	ldrh	r3, [r7, #2]
 8002ff0:	041a      	lsls	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	619a      	str	r2, [r3, #24]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800300e:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	88fb      	ldrh	r3, [r7, #6]
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d006      	beq.n	8003028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800301a:	4a05      	ldr	r2, [pc, #20]	; (8003030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe fb9a 	bl	800175c <HAL_GPIO_EXTI_Callback>
  }
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013c00 	.word	0x40013c00

08003034 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003036:	b08f      	sub	sp, #60	; 0x3c
 8003038:	af0a      	add	r7, sp, #40	; 0x28
 800303a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e054      	b.n	80030f0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d106      	bne.n	8003066 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f00b fefb 	bl	800ee5c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2203      	movs	r2, #3
 800306a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f004 fb05 	bl	8007694 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	687e      	ldr	r6, [r7, #4]
 8003092:	466d      	mov	r5, sp
 8003094:	f106 0410 	add.w	r4, r6, #16
 8003098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800309c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800309e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030a8:	1d33      	adds	r3, r6, #4
 80030aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030ac:	6838      	ldr	r0, [r7, #0]
 80030ae:	f004 fa7f 	bl	80075b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 fafc 	bl	80076b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	687e      	ldr	r6, [r7, #4]
 80030c6:	466d      	mov	r5, sp
 80030c8:	f106 0410 	add.w	r4, r6, #16
 80030cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80030dc:	1d33      	adds	r3, r6, #4
 80030de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f004 fc85 	bl	80079f0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030f8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af04      	add	r7, sp, #16
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	4608      	mov	r0, r1
 8003102:	4611      	mov	r1, r2
 8003104:	461a      	mov	r2, r3
 8003106:	4603      	mov	r3, r0
 8003108:	70fb      	strb	r3, [r7, #3]
 800310a:	460b      	mov	r3, r1
 800310c:	70bb      	strb	r3, [r7, #2]
 800310e:	4613      	mov	r3, r2
 8003110:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_HCD_HC_Init+0x28>
 800311c:	2302      	movs	r3, #2
 800311e:	e076      	b.n	800320e <HAL_HCD_HC_Init+0x116>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	333d      	adds	r3, #61	; 0x3d
 8003136:	2200      	movs	r2, #0
 8003138:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	787a      	ldrb	r2, [r7, #1]
 800314a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3340      	adds	r3, #64	; 0x40
 800315a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800315c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3339      	adds	r3, #57	; 0x39
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	212c      	movs	r1, #44	; 0x2c
 8003176:	fb01 f303 	mul.w	r3, r1, r3
 800317a:	4413      	add	r3, r2
 800317c:	333f      	adds	r3, #63	; 0x3f
 800317e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003182:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003184:	78fb      	ldrb	r3, [r7, #3]
 8003186:	78ba      	ldrb	r2, [r7, #2]
 8003188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800318c:	b2d0      	uxtb	r0, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	333a      	adds	r3, #58	; 0x3a
 800319a:	4602      	mov	r2, r0
 800319c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800319e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	da09      	bge.n	80031ba <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	212c      	movs	r1, #44	; 0x2c
 80031ac:	fb01 f303 	mul.w	r3, r1, r3
 80031b0:	4413      	add	r3, r2
 80031b2:	333b      	adds	r3, #59	; 0x3b
 80031b4:	2201      	movs	r2, #1
 80031b6:	701a      	strb	r2, [r3, #0]
 80031b8:	e008      	b.n	80031cc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	333b      	adds	r3, #59	; 0x3b
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	212c      	movs	r1, #44	; 0x2c
 80031d2:	fb01 f303 	mul.w	r3, r1, r3
 80031d6:	4413      	add	r3, r2
 80031d8:	333c      	adds	r3, #60	; 0x3c
 80031da:	f897 2020 	ldrb.w	r2, [r7, #32]
 80031de:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	787c      	ldrb	r4, [r7, #1]
 80031e6:	78ba      	ldrb	r2, [r7, #2]
 80031e8:	78f9      	ldrb	r1, [r7, #3]
 80031ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031ec:	9302      	str	r3, [sp, #8]
 80031ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	4623      	mov	r3, r4
 80031fc:	f004 fd7e 	bl	8007cfc <USB_HC_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800320c:	7bfb      	ldrb	r3, [r7, #15]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bd90      	pop	{r4, r7, pc}

08003216 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_HCD_HC_Halt+0x1e>
 8003230:	2302      	movs	r3, #2
 8003232:	e00f      	b.n	8003254 <HAL_HCD_HC_Halt+0x3e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	4611      	mov	r1, r2
 8003244:	4618      	mov	r0, r3
 8003246:	f004 ffce 	bl	80081e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	70fb      	strb	r3, [r7, #3]
 800326e:	460b      	mov	r3, r1
 8003270:	70bb      	strb	r3, [r7, #2]
 8003272:	4613      	mov	r3, r2
 8003274:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	333b      	adds	r3, #59	; 0x3b
 8003284:	78ba      	ldrb	r2, [r7, #2]
 8003286:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	333f      	adds	r3, #63	; 0x3f
 8003296:	787a      	ldrb	r2, [r7, #1]
 8003298:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800329a:	7c3b      	ldrb	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d112      	bne.n	80032c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	212c      	movs	r1, #44	; 0x2c
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	3342      	adds	r3, #66	; 0x42
 80032ae:	2203      	movs	r2, #3
 80032b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	212c      	movs	r1, #44	; 0x2c
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	333d      	adds	r3, #61	; 0x3d
 80032c0:	7f3a      	ldrb	r2, [r7, #28]
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e008      	b.n	80032d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	3342      	adds	r3, #66	; 0x42
 80032d4:	2202      	movs	r2, #2
 80032d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032d8:	787b      	ldrb	r3, [r7, #1]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	f200 80c6 	bhi.w	800346c <HAL_HCD_HC_SubmitRequest+0x210>
 80032e0:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80032e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e6:	bf00      	nop
 80032e8:	080032f9 	.word	0x080032f9
 80032ec:	08003459 	.word	0x08003459
 80032f0:	0800335d 	.word	0x0800335d
 80032f4:	080033db 	.word	0x080033db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80032f8:	7c3b      	ldrb	r3, [r7, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	f040 80b8 	bne.w	8003470 <HAL_HCD_HC_SubmitRequest+0x214>
 8003300:	78bb      	ldrb	r3, [r7, #2]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f040 80b4 	bne.w	8003470 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003308:	8b3b      	ldrh	r3, [r7, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3355      	adds	r3, #85	; 0x55
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3355      	adds	r3, #85	; 0x55
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3342      	adds	r3, #66	; 0x42
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003346:	e093      	b.n	8003470 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3342      	adds	r3, #66	; 0x42
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
      break;
 800335a:	e089      	b.n	8003470 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800335c:	78bb      	ldrb	r3, [r7, #2]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11d      	bne.n	800339e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3355      	adds	r3, #85	; 0x55
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d109      	bne.n	800338a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3342      	adds	r3, #66	; 0x42
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003388:	e073      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	3342      	adds	r3, #66	; 0x42
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]
      break;
 800339c:	e069      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3354      	adds	r3, #84	; 0x54
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	212c      	movs	r1, #44	; 0x2c
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	4413      	add	r3, r2
 80033be:	3342      	adds	r3, #66	; 0x42
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
      break;
 80033c4:	e055      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3342      	adds	r3, #66	; 0x42
 80033d4:	2202      	movs	r2, #2
 80033d6:	701a      	strb	r2, [r3, #0]
      break;
 80033d8:	e04b      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80033da:	78bb      	ldrb	r3, [r7, #2]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d11d      	bne.n	800341c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	3355      	adds	r3, #85	; 0x55
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	212c      	movs	r1, #44	; 0x2c
 80033fa:	fb01 f303 	mul.w	r3, r1, r3
 80033fe:	4413      	add	r3, r2
 8003400:	3342      	adds	r3, #66	; 0x42
 8003402:	2200      	movs	r2, #0
 8003404:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003406:	e034      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3342      	adds	r3, #66	; 0x42
 8003416:	2202      	movs	r2, #2
 8003418:	701a      	strb	r2, [r3, #0]
      break;
 800341a:	e02a      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800341c:	78fb      	ldrb	r3, [r7, #3]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	3354      	adds	r3, #84	; 0x54
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d109      	bne.n	8003444 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3342      	adds	r3, #66	; 0x42
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
      break;
 8003442:	e016      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3342      	adds	r3, #66	; 0x42
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
      break;
 8003456:	e00c      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3342      	adds	r3, #66	; 0x42
 8003466:	2200      	movs	r2, #0
 8003468:	701a      	strb	r2, [r3, #0]
      break;
 800346a:	e002      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003470:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3344      	adds	r3, #68	; 0x44
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	8b3a      	ldrh	r2, [r7, #24]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	202c      	movs	r0, #44	; 0x2c
 800348c:	fb00 f303 	mul.w	r3, r0, r3
 8003490:	440b      	add	r3, r1
 8003492:	334c      	adds	r3, #76	; 0x4c
 8003494:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003496:	78fb      	ldrb	r3, [r7, #3]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	4413      	add	r3, r2
 80034a2:	3360      	adds	r3, #96	; 0x60
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034a8:	78fb      	ldrb	r3, [r7, #3]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3350      	adds	r3, #80	; 0x50
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3339      	adds	r3, #57	; 0x39
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3361      	adds	r3, #97	; 0x61
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	222c      	movs	r2, #44	; 0x2c
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	3338      	adds	r3, #56	; 0x38
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	18d1      	adds	r1, r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	f004 fd22 	bl	8007f40 <USB_HC_StartXfer>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop

08003508 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fa23 	bl	800796a <USB_GetMode>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	f040 80f6 	bne.w	8003718 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fa07 	bl	8007944 <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80ec 	beq.w	8003716 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f004 f9fe 	bl	8007944 <USB_ReadInterrupts>
 8003548:	4603      	mov	r3, r0
 800354a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800354e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003552:	d104      	bne.n	800355e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800355c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f004 f9ee 	bl	8007944 <USB_ReadInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003572:	d104      	bne.n	800357e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800357c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f004 f9de 	bl	8007944 <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800358e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003592:	d104      	bne.n	800359e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800359c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f004 f9ce 	bl	8007944 <USB_ReadInterrupts>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d103      	bne.n	80035ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2202      	movs	r2, #2
 80035b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 f9c0 	bl	8007944 <USB_ReadInterrupts>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ce:	d11c      	bne.n	800360a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80035d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80035ea:	2110      	movs	r1, #16
 80035ec:	6938      	ldr	r0, [r7, #16]
 80035ee:	f004 f8af 	bl	8007750 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80035f2:	6938      	ldr	r0, [r7, #16]
 80035f4:	f004 f8e0 	bl	80077b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fab6 	bl	8007b70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f00b fca7 	bl	800ef58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f998 	bl	8007944 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361e:	d102      	bne.n	8003626 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 f89e 	bl	8004762 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f004 f98a 	bl	8007944 <USB_ReadInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b08      	cmp	r3, #8
 8003638:	d106      	bne.n	8003648 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f00b fc70 	bl	800ef20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f004 f979 	bl	8007944 <USB_ReadInterrupts>
 8003652:	4603      	mov	r3, r0
 8003654:	f003 0310 	and.w	r3, r3, #16
 8003658:	2b10      	cmp	r3, #16
 800365a:	d101      	bne.n	8003660 <HAL_HCD_IRQHandler+0x158>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_HCD_IRQHandler+0x15a>
 8003660:	2300      	movs	r3, #0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0210 	bic.w	r2, r2, #16
 8003674:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 ffa1 	bl	80045be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0210 	orr.w	r2, r2, #16
 800368a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 f957 	bl	8007944 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a0:	d13a      	bne.n	8003718 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fd8c 	bl	80081c4 <USB_HC_ReadInterrupt>
 80036ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e025      	b.n	8003700 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d018      	beq.n	80036fa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036de:	d106      	bne.n	80036ee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4619      	mov	r1, r3
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8ab 	bl	8003842 <HCD_HC_IN_IRQHandler>
 80036ec:	e005      	b.n	80036fa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fbf9 	bl	8003eec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	3301      	adds	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	429a      	cmp	r2, r3
 8003708:	d3d4      	bcc.n	80036b4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003712:	615a      	str	r2, [r3, #20]
 8003714:	e000      	b.n	8003718 <HAL_HCD_IRQHandler+0x210>
      return;
 8003716:	bf00      	nop
    }
  }
}
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_HCD_Start+0x16>
 8003730:	2302      	movs	r3, #2
 8003732:	e013      	b.n	800375c <HAL_HCD_Start+0x3e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fa78 	bl	8007c38 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 ff90 	bl	8007672 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_HCD_Stop+0x16>
 8003776:	2302      	movs	r3, #2
 8003778:	e00d      	b.n	8003796 <HAL_HCD_Stop+0x32>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f004 fe66 	bl	8008458 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f004 fa1a 	bl	8007be4 <USB_ResetPort>
 80037b0:	4603      	mov	r3, r0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	781b      	ldrb	r3, [r3, #0]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	3350      	adds	r3, #80	; 0x50
 80037fc:	681b      	ldr	r3, [r3, #0]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f004 fa5e 	bl	8007cd8 <USB_GetCurrentFrame>
 800381c:	4603      	mov	r3, r0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fa39 	bl	8007caa <USB_GetHostSpeed>
 8003838:	4603      	mov	r3, r0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b086      	sub	sp, #24
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d11a      	bne.n	80038a8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	2304      	movs	r3, #4
 8003882:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3361      	adds	r3, #97	; 0x61
 8003892:	2206      	movs	r2, #6
 8003894:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 fca0 	bl	80081e6 <USB_HC_Halt>
 80038a6:	e0af      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	d11b      	bne.n	80038f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	461a      	mov	r2, r3
 80038ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	2207      	movs	r2, #7
 80038e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 fc78 	bl	80081e6 <USB_HC_Halt>
 80038f6:	e087      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d109      	bne.n	8003922 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2320      	movs	r3, #32
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	e072      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b08      	cmp	r3, #8
 8003936:	d11a      	bne.n	800396e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	461a      	mov	r2, r3
 8003946:	2308      	movs	r3, #8
 8003948:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3361      	adds	r3, #97	; 0x61
 8003958:	2205      	movs	r2, #5
 800395a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f004 fc3d 	bl	80081e6 <USB_HC_Halt>
 800396c:	e04c      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003984:	d11b      	bne.n	80039be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003992:	461a      	mov	r2, r3
 8003994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003998:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3361      	adds	r3, #97	; 0x61
 80039a8:	2208      	movs	r2, #8
 80039aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	4611      	mov	r1, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f004 fc15 	bl	80081e6 <USB_HC_Halt>
 80039bc:	e024      	b.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b80      	cmp	r3, #128	; 0x80
 80039d2:	d119      	bne.n	8003a08 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e0:	461a      	mov	r2, r3
 80039e2:	2380      	movs	r3, #128	; 0x80
 80039e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3361      	adds	r3, #97	; 0x61
 80039f4:	2206      	movs	r2, #6
 80039f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f004 fbef 	bl	80081e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d112      	bne.n	8003a46 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f004 fbdb 	bl	80081e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a42:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003a44:	e24e      	b.n	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 80df 	bne.w	8003c1c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d019      	beq.n	8003a9a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	212c      	movs	r1, #44	; 0x2c
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3348      	adds	r3, #72	; 0x48
 8003a74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	0159      	lsls	r1, r3, #5
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	440b      	add	r3, r1
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	202c      	movs	r0, #44	; 0x2c
 8003a90:	fb00 f303 	mul.w	r3, r0, r3
 8003a94:	440b      	add	r3, r1
 8003a96:	3350      	adds	r3, #80	; 0x50
 8003a98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	212c      	movs	r1, #44	; 0x2c
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3361      	adds	r3, #97	; 0x61
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	212c      	movs	r1, #44	; 0x2c
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	335c      	adds	r3, #92	; 0x5c
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aca:	461a      	mov	r2, r3
 8003acc:	2301      	movs	r3, #1
 8003ace:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	333f      	adds	r3, #63	; 0x3f
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	212c      	movs	r1, #44	; 0x2c
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	4413      	add	r3, r2
 8003af0:	333f      	adds	r3, #63	; 0x3f
 8003af2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d111      	bne.n	8003b1c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fb6f 	bl	80081e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
 8003b1a:	e03a      	b.n	8003b92 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	333f      	adds	r3, #63	; 0x3f
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b03      	cmp	r3, #3
 8003b2e:	d009      	beq.n	8003b44 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	333f      	adds	r3, #63	; 0x3f
 8003b3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d126      	bne.n	8003b92 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b62:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	b2d9      	uxtb	r1, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	202c      	movs	r0, #44	; 0x2c
 8003b80:	fb00 f303 	mul.w	r3, r0, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f00b f9f1 	bl	800ef74 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d12b      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3348      	adds	r3, #72	; 0x48
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	202c      	movs	r0, #44	; 0x2c
 8003bb0:	fb00 f202 	mul.w	r2, r0, r2
 8003bb4:	440a      	add	r2, r1
 8003bb6:	3240      	adds	r2, #64	; 0x40
 8003bb8:	8812      	ldrh	r2, [r2, #0]
 8003bba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 818e 	beq.w	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3354      	adds	r3, #84	; 0x54
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	f083 0301 	eor.w	r3, r3, #1
 8003bdc:	b2d8      	uxtb	r0, r3
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	3354      	adds	r3, #84	; 0x54
 8003bec:	4602      	mov	r2, r0
 8003bee:	701a      	strb	r2, [r3, #0]
}
 8003bf0:	e178      	b.n	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	212c      	movs	r1, #44	; 0x2c
 8003bf8:	fb01 f303 	mul.w	r3, r1, r3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3354      	adds	r3, #84	; 0x54
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	212c      	movs	r1, #44	; 0x2c
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	4413      	add	r3, r2
 8003c14:	3354      	adds	r3, #84	; 0x54
 8003c16:	4602      	mov	r2, r0
 8003c18:	701a      	strb	r2, [r3, #0]
}
 8003c1a:	e163      	b.n	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	f040 80f6 	bne.w	8003e20 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3361      	adds	r3, #97	; 0x61
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d109      	bne.n	8003c5c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	212c      	movs	r1, #44	; 0x2c
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	4413      	add	r3, r2
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e0c9      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	212c      	movs	r1, #44	; 0x2c
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	3361      	adds	r3, #97	; 0x61
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d109      	bne.n	8003c84 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	212c      	movs	r1, #44	; 0x2c
 8003c76:	fb01 f303 	mul.w	r3, r1, r3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3360      	adds	r3, #96	; 0x60
 8003c7e:	2205      	movs	r2, #5
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	e0b5      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	212c      	movs	r1, #44	; 0x2c
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	4413      	add	r3, r2
 8003c90:	3361      	adds	r3, #97	; 0x61
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b06      	cmp	r3, #6
 8003c96:	d009      	beq.n	8003cac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3361      	adds	r3, #97	; 0x61
 8003ca6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d150      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	335c      	adds	r3, #92	; 0x5c
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	202c      	movs	r0, #44	; 0x2c
 8003cc4:	fb00 f303 	mul.w	r3, r0, r3
 8003cc8:	440b      	add	r3, r1
 8003cca:	335c      	adds	r3, #92	; 0x5c
 8003ccc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	212c      	movs	r1, #44	; 0x2c
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	335c      	adds	r3, #92	; 0x5c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d912      	bls.n	8003d08 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	335c      	adds	r3, #92	; 0x5c
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	3360      	adds	r3, #96	; 0x60
 8003d02:	2204      	movs	r2, #4
 8003d04:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d06:	e073      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	212c      	movs	r1, #44	; 0x2c
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4413      	add	r3, r2
 8003d14:	3360      	adds	r3, #96	; 0x60
 8003d16:	2202      	movs	r2, #2
 8003d18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d30:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d38:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d4c:	e050      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	3361      	adds	r3, #97	; 0x61
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d122      	bne.n	8003da8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3360      	adds	r3, #96	; 0x60
 8003d70:	2202      	movs	r2, #2
 8003d72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e023      	b.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3361      	adds	r3, #97	; 0x61
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b07      	cmp	r3, #7
 8003dba:	d119      	bne.n	8003df0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	335c      	adds	r3, #92	; 0x5c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	202c      	movs	r0, #44	; 0x2c
 8003dd4:	fb00 f303 	mul.w	r3, r0, r3
 8003dd8:	440b      	add	r3, r1
 8003dda:	335c      	adds	r3, #92	; 0x5c
 8003ddc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	212c      	movs	r1, #44	; 0x2c
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	3360      	adds	r3, #96	; 0x60
 8003dec:	2204      	movs	r2, #4
 8003dee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2302      	movs	r3, #2
 8003e00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	b2d9      	uxtb	r1, r3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	202c      	movs	r0, #44	; 0x2c
 8003e0c:	fb00 f303 	mul.w	r3, r0, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3360      	adds	r3, #96	; 0x60
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f00b f8ab 	bl	800ef74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003e1e:	e061      	b.n	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d156      	bne.n	8003ee4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	212c      	movs	r1, #44	; 0x2c
 8003e3c:	fb01 f303 	mul.w	r3, r1, r3
 8003e40:	4413      	add	r3, r2
 8003e42:	333f      	adds	r3, #63	; 0x3f
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d111      	bne.n	8003e6e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	212c      	movs	r1, #44	; 0x2c
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	4413      	add	r3, r2
 8003e56:	335c      	adds	r3, #92	; 0x5c
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f004 f9bd 	bl	80081e6 <USB_HC_Halt>
 8003e6c:	e031      	b.n	8003ed2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	333f      	adds	r3, #63	; 0x3f
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d009      	beq.n	8003e96 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	333f      	adds	r3, #63	; 0x3f
 8003e90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d11d      	bne.n	8003ed2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	335c      	adds	r3, #92	; 0x5c
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d110      	bne.n	8003ed2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	212c      	movs	r1, #44	; 0x2c
 8003eb6:	fb01 f303 	mul.w	r3, r1, r3
 8003eba:	4413      	add	r3, r2
 8003ebc:	3361      	adds	r3, #97	; 0x61
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f004 f98a 	bl	80081e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	6093      	str	r3, [r2, #8]
}
 8003ee4:	bf00      	nop
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003f02:	78fb      	ldrb	r3, [r7, #3]
 8003f04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d11a      	bne.n	8003f52 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2304      	movs	r3, #4
 8003f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3361      	adds	r3, #97	; 0x61
 8003f3c:	2206      	movs	r2, #6
 8003f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f004 f94b 	bl	80081e6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003f50:	e331      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d12e      	bne.n	8003fc6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	461a      	mov	r2, r3
 8003f76:	2320      	movs	r3, #32
 8003f78:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	212c      	movs	r1, #44	; 0x2c
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	333d      	adds	r3, #61	; 0x3d
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	f040 8313 	bne.w	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	3360      	adds	r3, #96	; 0x60
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f004 f911 	bl	80081e6 <USB_HC_Halt>
}
 8003fc4:	e2f7      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d112      	bne.n	8004004 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	015a      	lsls	r2, r3, #5
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fea:	461a      	mov	r2, r3
 8003fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 f8f2 	bl	80081e6 <USB_HC_Halt>
}
 8004002:	e2d8      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b01      	cmp	r3, #1
 8004018:	d140      	bne.n	800409c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	335c      	adds	r3, #92	; 0x5c
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403e:	2b40      	cmp	r3, #64	; 0x40
 8004040:	d111      	bne.n	8004066 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	333d      	adds	r3, #61	; 0x3d
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004060:	461a      	mov	r2, r3
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	461a      	mov	r2, r3
 8004074:	2301      	movs	r3, #1
 8004076:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3361      	adds	r3, #97	; 0x61
 8004086:	2201      	movs	r2, #1
 8004088:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	4611      	mov	r1, r2
 8004094:	4618      	mov	r0, r3
 8004096:	f004 f8a6 	bl	80081e6 <USB_HC_Halt>
}
 800409a:	e28c      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ae:	2b40      	cmp	r3, #64	; 0x40
 80040b0:	d12c      	bne.n	800410c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	212c      	movs	r1, #44	; 0x2c
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	4413      	add	r3, r2
 80040be:	3361      	adds	r3, #97	; 0x61
 80040c0:	2204      	movs	r2, #4
 80040c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	333d      	adds	r3, #61	; 0x3d
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	335c      	adds	r3, #92	; 0x5c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 f877 	bl	80081e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	461a      	mov	r2, r3
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	6093      	str	r3, [r2, #8]
}
 800410a:	e254      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b08      	cmp	r3, #8
 8004120:	d11a      	bne.n	8004158 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4413      	add	r3, r2
 800412a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412e:	461a      	mov	r2, r3
 8004130:	2308      	movs	r3, #8
 8004132:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	212c      	movs	r1, #44	; 0x2c
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	4413      	add	r3, r2
 8004140:	3361      	adds	r3, #97	; 0x61
 8004142:	2205      	movs	r2, #5
 8004144:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f004 f848 	bl	80081e6 <USB_HC_Halt>
}
 8004156:	e22e      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b10      	cmp	r3, #16
 800416c:	d140      	bne.n	80041f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	335c      	adds	r3, #92	; 0x5c
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	212c      	movs	r1, #44	; 0x2c
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	4413      	add	r3, r2
 800418c:	3361      	adds	r3, #97	; 0x61
 800418e:	2203      	movs	r2, #3
 8004190:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	212c      	movs	r1, #44	; 0x2c
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	333d      	adds	r3, #61	; 0x3d
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d112      	bne.n	80041cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	212c      	movs	r1, #44	; 0x2c
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	4413      	add	r3, r2
 80041b2:	333c      	adds	r3, #60	; 0x3c
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d108      	bne.n	80041cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	212c      	movs	r1, #44	; 0x2c
 80041c0:	fb01 f303 	mul.w	r3, r1, r3
 80041c4:	4413      	add	r3, r2
 80041c6:	333d      	adds	r3, #61	; 0x3d
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f004 f805 	bl	80081e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	461a      	mov	r2, r3
 80041ea:	2310      	movs	r3, #16
 80041ec:	6093      	str	r3, [r2, #8]
}
 80041ee:	e1e2      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004202:	2b80      	cmp	r3, #128	; 0x80
 8004204:	d164      	bne.n	80042d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d111      	bne.n	8004232 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	3361      	adds	r3, #97	; 0x61
 800421c:	2206      	movs	r2, #6
 800421e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f003 ffdb 	bl	80081e6 <USB_HC_Halt>
 8004230:	e044      	b.n	80042bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	202c      	movs	r0, #44	; 0x2c
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	440b      	add	r3, r1
 8004250:	335c      	adds	r3, #92	; 0x5c
 8004252:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	335c      	adds	r3, #92	; 0x5c
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d920      	bls.n	80042aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	335c      	adds	r3, #92	; 0x5c
 8004276:	2200      	movs	r2, #0
 8004278:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	212c      	movs	r1, #44	; 0x2c
 8004280:	fb01 f303 	mul.w	r3, r1, r3
 8004284:	4413      	add	r3, r2
 8004286:	3360      	adds	r3, #96	; 0x60
 8004288:	2204      	movs	r2, #4
 800428a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	b2d9      	uxtb	r1, r3
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	202c      	movs	r0, #44	; 0x2c
 8004296:	fb00 f303 	mul.w	r3, r0, r3
 800429a:	4413      	add	r3, r2
 800429c:	3360      	adds	r3, #96	; 0x60
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f00a fe66 	bl	800ef74 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042a8:	e008      	b.n	80042bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	212c      	movs	r1, #44	; 0x2c
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	4413      	add	r3, r2
 80042b6:	3360      	adds	r3, #96	; 0x60
 80042b8:	2202      	movs	r2, #2
 80042ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c8:	461a      	mov	r2, r3
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	6093      	str	r3, [r2, #8]
}
 80042ce:	e172      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d11b      	bne.n	8004320 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	212c      	movs	r1, #44	; 0x2c
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	4413      	add	r3, r2
 80042f4:	3361      	adds	r3, #97	; 0x61
 80042f6:	2208      	movs	r2, #8
 80042f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f003 ff6e 	bl	80081e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800431c:	6093      	str	r3, [r2, #8]
}
 800431e:	e14a      	b.n	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b02      	cmp	r3, #2
 8004334:	f040 813f 	bne.w	80045b6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	212c      	movs	r1, #44	; 0x2c
 800433e:	fb01 f303 	mul.w	r3, r1, r3
 8004342:	4413      	add	r3, r2
 8004344:	3361      	adds	r3, #97	; 0x61
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d17d      	bne.n	8004448 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	212c      	movs	r1, #44	; 0x2c
 8004352:	fb01 f303 	mul.w	r3, r1, r3
 8004356:	4413      	add	r3, r2
 8004358:	3360      	adds	r3, #96	; 0x60
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	333f      	adds	r3, #63	; 0x3f
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d00a      	beq.n	8004388 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	333f      	adds	r3, #63	; 0x3f
 8004380:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004382:	2b03      	cmp	r3, #3
 8004384:	f040 8100 	bne.w	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d113      	bne.n	80043b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	3355      	adds	r3, #85	; 0x55
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2d8      	uxtb	r0, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	212c      	movs	r1, #44	; 0x2c
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	3355      	adds	r3, #85	; 0x55
 80043b4:	4602      	mov	r2, r0
 80043b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	f040 80e3 	bne.w	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	334c      	adds	r3, #76	; 0x4c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80d8 	beq.w	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	334c      	adds	r3, #76	; 0x4c
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	202c      	movs	r0, #44	; 0x2c
 80043ee:	fb00 f202 	mul.w	r2, r0, r2
 80043f2:	440a      	add	r2, r1
 80043f4:	3240      	adds	r2, #64	; 0x40
 80043f6:	8812      	ldrh	r2, [r2, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	202c      	movs	r0, #44	; 0x2c
 8004402:	fb00 f202 	mul.w	r2, r0, r2
 8004406:	440a      	add	r2, r1
 8004408:	3240      	adds	r2, #64	; 0x40
 800440a:	8812      	ldrh	r2, [r2, #0]
 800440c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80b5 	beq.w	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	3355      	adds	r3, #85	; 0x55
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	f083 0301 	eor.w	r3, r3, #1
 8004432:	b2d8      	uxtb	r0, r3
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	212c      	movs	r1, #44	; 0x2c
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3355      	adds	r3, #85	; 0x55
 8004442:	4602      	mov	r2, r0
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e09f      	b.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	212c      	movs	r1, #44	; 0x2c
 800444e:	fb01 f303 	mul.w	r3, r1, r3
 8004452:	4413      	add	r3, r2
 8004454:	3361      	adds	r3, #97	; 0x61
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b03      	cmp	r3, #3
 800445a:	d109      	bne.n	8004470 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3360      	adds	r3, #96	; 0x60
 800446a:	2202      	movs	r2, #2
 800446c:	701a      	strb	r2, [r3, #0]
 800446e:	e08b      	b.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	212c      	movs	r1, #44	; 0x2c
 8004476:	fb01 f303 	mul.w	r3, r1, r3
 800447a:	4413      	add	r3, r2
 800447c:	3361      	adds	r3, #97	; 0x61
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b04      	cmp	r3, #4
 8004482:	d109      	bne.n	8004498 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3360      	adds	r3, #96	; 0x60
 8004492:	2202      	movs	r2, #2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e077      	b.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	3361      	adds	r3, #97	; 0x61
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d109      	bne.n	80044c0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	212c      	movs	r1, #44	; 0x2c
 80044b2:	fb01 f303 	mul.w	r3, r1, r3
 80044b6:	4413      	add	r3, r2
 80044b8:	3360      	adds	r3, #96	; 0x60
 80044ba:	2205      	movs	r2, #5
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	e063      	b.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	212c      	movs	r1, #44	; 0x2c
 80044c6:	fb01 f303 	mul.w	r3, r1, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	3361      	adds	r3, #97	; 0x61
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d009      	beq.n	80044e8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3361      	adds	r3, #97	; 0x61
 80044e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d14f      	bne.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	335c      	adds	r3, #92	; 0x5c
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	202c      	movs	r0, #44	; 0x2c
 8004500:	fb00 f303 	mul.w	r3, r0, r3
 8004504:	440b      	add	r3, r1
 8004506:	335c      	adds	r3, #92	; 0x5c
 8004508:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	335c      	adds	r3, #92	; 0x5c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d912      	bls.n	8004544 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	335c      	adds	r3, #92	; 0x5c
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	212c      	movs	r1, #44	; 0x2c
 8004536:	fb01 f303 	mul.w	r3, r1, r3
 800453a:	4413      	add	r3, r2
 800453c:	3360      	adds	r3, #96	; 0x60
 800453e:	2204      	movs	r2, #4
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e021      	b.n	8004588 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	3360      	adds	r3, #96	; 0x60
 8004552:	2202      	movs	r2, #2
 8004554:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4413      	add	r3, r2
 800455e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800456c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004574:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004582:	461a      	mov	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	461a      	mov	r2, r3
 8004596:	2302      	movs	r3, #2
 8004598:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	b2d9      	uxtb	r1, r3
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	202c      	movs	r0, #44	; 0x2c
 80045a4:	fb00 f303 	mul.w	r3, r0, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	3360      	adds	r3, #96	; 0x60
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f00a fcdf 	bl	800ef74 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80045b6:	bf00      	nop
 80045b8:	3720      	adds	r7, #32
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b08a      	sub	sp, #40	; 0x28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	0c5b      	lsrs	r3, r3, #17
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d004      	beq.n	8004604 <HCD_RXQLVL_IRQHandler+0x46>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b05      	cmp	r3, #5
 80045fe:	f000 80a9 	beq.w	8004754 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004602:	e0aa      	b.n	800475a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a6 	beq.w	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	212c      	movs	r1, #44	; 0x2c
 8004612:	fb01 f303 	mul.w	r3, r1, r3
 8004616:	4413      	add	r3, r2
 8004618:	3344      	adds	r3, #68	; 0x44
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 809b 	beq.w	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	212c      	movs	r1, #44	; 0x2c
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	4413      	add	r3, r2
 800462e:	3350      	adds	r3, #80	; 0x50
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	441a      	add	r2, r3
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	202c      	movs	r0, #44	; 0x2c
 800463c:	fb00 f303 	mul.w	r3, r0, r3
 8004640:	440b      	add	r3, r1
 8004642:	334c      	adds	r3, #76	; 0x4c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d87a      	bhi.n	8004740 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	212c      	movs	r1, #44	; 0x2c
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	4413      	add	r3, r2
 800465a:	3344      	adds	r3, #68	; 0x44
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	b292      	uxth	r2, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f003 f916 	bl	8007894 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3344      	adds	r3, #68	; 0x44
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	441a      	add	r2, r3
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	202c      	movs	r0, #44	; 0x2c
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	440b      	add	r3, r1
 8004688:	3344      	adds	r3, #68	; 0x44
 800468a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3350      	adds	r3, #80	; 0x50
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	441a      	add	r2, r3
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	202c      	movs	r0, #44	; 0x2c
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	440b      	add	r3, r1
 80046ac:	3350      	adds	r3, #80	; 0x50
 80046ae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	0cdb      	lsrs	r3, r3, #19
 80046c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	3340      	adds	r3, #64	; 0x40
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4293      	cmp	r3, r2
 80046dc:	d13c      	bne.n	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d039      	beq.n	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004702:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	461a      	mov	r2, r3
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	212c      	movs	r1, #44	; 0x2c
 800471c:	fb01 f303 	mul.w	r3, r1, r3
 8004720:	4413      	add	r3, r2
 8004722:	3354      	adds	r3, #84	; 0x54
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f083 0301 	eor.w	r3, r3, #1
 800472a:	b2d8      	uxtb	r0, r3
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3354      	adds	r3, #84	; 0x54
 800473a:	4602      	mov	r2, r0
 800473c:	701a      	strb	r2, [r3, #0]
      break;
 800473e:	e00b      	b.n	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	212c      	movs	r1, #44	; 0x2c
 8004746:	fb01 f303 	mul.w	r3, r1, r3
 800474a:	4413      	add	r3, r2
 800474c:	3360      	adds	r3, #96	; 0x60
 800474e:	2204      	movs	r2, #4
 8004750:	701a      	strb	r2, [r3, #0]
      break;
 8004752:	e001      	b.n	8004758 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004758:	bf00      	nop
  }
}
 800475a:	bf00      	nop
 800475c:	3728      	adds	r7, #40	; 0x28
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b086      	sub	sp, #24
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800478e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d10b      	bne.n	80047b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f00a fbc9 	bl	800ef3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d132      	bne.n	8004822 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f043 0308 	orr.w	r3, r3, #8
 80047c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d126      	bne.n	800481c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d113      	bne.n	80047fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80047dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047e0:	d106      	bne.n	80047f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f003 f9c1 	bl	8007b70 <USB_InitFSLSPClkSel>
 80047ee:	e011      	b.n	8004814 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	4618      	mov	r0, r3
 80047f8:	f003 f9ba 	bl	8007b70 <USB_InitFSLSPClkSel>
 80047fc:	e00a      	b.n	8004814 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480c:	461a      	mov	r2, r3
 800480e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004812:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f00a fbbb 	bl	800ef90 <HAL_HCD_PortEnabled_Callback>
 800481a:	e002      	b.n	8004822 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f00a fbc5 	bl	800efac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d103      	bne.n	8004834 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e12b      	b.n	8004ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc ffb2 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2224      	movs	r2, #36	; 0x24
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048ac:	f002 fcda 	bl	8007264 <HAL_RCC_GetPCLK1Freq>
 80048b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4a81      	ldr	r2, [pc, #516]	; (8004abc <HAL_I2C_Init+0x274>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d807      	bhi.n	80048cc <HAL_I2C_Init+0x84>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4a80      	ldr	r2, [pc, #512]	; (8004ac0 <HAL_I2C_Init+0x278>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf94      	ite	ls
 80048c4:	2301      	movls	r3, #1
 80048c6:	2300      	movhi	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e006      	b.n	80048da <HAL_I2C_Init+0x92>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_I2C_Init+0x27c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bf94      	ite	ls
 80048d4:	2301      	movls	r3, #1
 80048d6:	2300      	movhi	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0e7      	b.n	8004ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a78      	ldr	r2, [pc, #480]	; (8004ac8 <HAL_I2C_Init+0x280>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	0c9b      	lsrs	r3, r3, #18
 80048ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <HAL_I2C_Init+0x274>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d802      	bhi.n	800491c <HAL_I2C_Init+0xd4>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	3301      	adds	r3, #1
 800491a:	e009      	b.n	8004930 <HAL_I2C_Init+0xe8>
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	4a69      	ldr	r2, [pc, #420]	; (8004acc <HAL_I2C_Init+0x284>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	3301      	adds	r3, #1
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	430b      	orrs	r3, r1
 8004936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004942:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	495c      	ldr	r1, [pc, #368]	; (8004abc <HAL_I2C_Init+0x274>)
 800494c:	428b      	cmp	r3, r1
 800494e:	d819      	bhi.n	8004984 <HAL_I2C_Init+0x13c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1e59      	subs	r1, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	fbb1 f3f3 	udiv	r3, r1, r3
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004964:	400b      	ands	r3, r1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_I2C_Init+0x138>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e59      	subs	r1, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fbb1 f3f3 	udiv	r3, r1, r3
 8004978:	3301      	adds	r3, #1
 800497a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800497e:	e051      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004980:	2304      	movs	r3, #4
 8004982:	e04f      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d111      	bne.n	80049b0 <HAL_I2C_Init+0x168>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1e58      	subs	r0, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e012      	b.n	80049d6 <HAL_I2C_Init+0x18e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bf0c      	ite	eq
 80049d0:	2301      	moveq	r3, #1
 80049d2:	2300      	movne	r3, #0
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Init+0x196>
 80049da:	2301      	movs	r3, #1
 80049dc:	e022      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10e      	bne.n	8004a04 <HAL_I2C_Init+0x1bc>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1e58      	subs	r0, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	440b      	add	r3, r1
 80049f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a02:	e00f      	b.n	8004a24 <HAL_I2C_Init+0x1dc>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	0099      	lsls	r1, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	6809      	ldr	r1, [r1, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6911      	ldr	r1, [r2, #16]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	000186a0 	.word	0x000186a0
 8004ac0:	001e847f 	.word	0x001e847f
 8004ac4:	003d08ff 	.word	0x003d08ff
 8004ac8:	431bde83 	.word	0x431bde83
 8004acc:	10624dd3 	.word	0x10624dd3

08004ad0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e021      	b.n	8004b26 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2224      	movs	r2, #36	; 0x24
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc feb4 	bl	8001868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
	...

08004b30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	4608      	mov	r0, r1
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	817b      	strh	r3, [r7, #10]
 8004b42:	460b      	mov	r3, r1
 8004b44:	813b      	strh	r3, [r7, #8]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b4a:	f7fd fa59 	bl	8002000 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	f040 80d9 	bne.w	8004d10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2319      	movs	r3, #25
 8004b64:	2201      	movs	r2, #1
 8004b66:	496d      	ldr	r1, [pc, #436]	; (8004d1c <HAL_I2C_Mem_Write+0x1ec>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fc8d 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b74:	2302      	movs	r3, #2
 8004b76:	e0cc      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d101      	bne.n	8004b86 <HAL_I2C_Mem_Write+0x56>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e0c5      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d007      	beq.n	8004bac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0201 	orr.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2221      	movs	r2, #33	; 0x21
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2240      	movs	r2, #64	; 0x40
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6a3a      	ldr	r2, [r7, #32]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004bdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4a4d      	ldr	r2, [pc, #308]	; (8004d20 <HAL_I2C_Mem_Write+0x1f0>)
 8004bec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bee:	88f8      	ldrh	r0, [r7, #6]
 8004bf0:	893a      	ldrh	r2, [r7, #8]
 8004bf2:	8979      	ldrh	r1, [r7, #10]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fac4 	bl	800518c <I2C_RequestMemoryWrite>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d052      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e081      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 fd0e 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d107      	bne.n	8004c36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e06b      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	781a      	ldrb	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d11b      	bne.n	8004cb0 <HAL_I2C_Mem_Write+0x180>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	781a      	ldrb	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1aa      	bne.n	8004c0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 fcfa 	bl	80056b6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00d      	beq.n	8004ce4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d107      	bne.n	8004ce0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e016      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e000      	b.n	8004d12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
  }
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	00100002 	.word	0x00100002
 8004d20:	ffff0000 	.word	0xffff0000

08004d24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b08c      	sub	sp, #48	; 0x30
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	461a      	mov	r2, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	817b      	strh	r3, [r7, #10]
 8004d36:	460b      	mov	r3, r1
 8004d38:	813b      	strh	r3, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d3e:	f7fd f95f 	bl	8002000 <HAL_GetTick>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	f040 8208 	bne.w	8005162 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	2319      	movs	r3, #25
 8004d58:	2201      	movs	r2, #1
 8004d5a:	497b      	ldr	r1, [pc, #492]	; (8004f48 <HAL_I2C_Mem_Read+0x224>)
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 fb93 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e1fb      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Mem_Read+0x56>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e1f4      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d007      	beq.n	8004da0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f042 0201 	orr.w	r2, r2, #1
 8004d9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2222      	movs	r2, #34	; 0x22
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2240      	movs	r2, #64	; 0x40
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a5b      	ldr	r2, [pc, #364]	; (8004f4c <HAL_I2C_Mem_Read+0x228>)
 8004de0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004de2:	88f8      	ldrh	r0, [r7, #6]
 8004de4:	893a      	ldrh	r2, [r7, #8]
 8004de6:	8979      	ldrh	r1, [r7, #10]
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa60 	bl	80052b8 <I2C_RequestMemoryRead>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e1b0      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	e184      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d11b      	bne.n	8004e72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e164      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d11b      	bne.n	8004eb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	61bb      	str	r3, [r7, #24]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	61bb      	str	r3, [r7, #24]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	e144      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ec8:	e138      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	f200 80f1 	bhi.w	80050b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d123      	bne.n	8004f24 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fc29 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e139      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f22:	e10b      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d14e      	bne.n	8004fca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	2200      	movs	r2, #0
 8004f34:	4906      	ldr	r1, [pc, #24]	; (8004f50 <HAL_I2C_Mem_Read+0x22c>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 faa6 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e10e      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
 8004f46:	bf00      	nop
 8004f48:	00100002 	.word	0x00100002
 8004f4c:	ffff0000 	.word	0xffff0000
 8004f50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fc8:	e0b8      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4966      	ldr	r1, [pc, #408]	; (800516c <HAL_I2C_Mem_Read+0x448>)
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fa57 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0bf      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	3b01      	subs	r3, #1
 8005020:	b29a      	uxth	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2200      	movs	r2, #0
 800502e:	494f      	ldr	r1, [pc, #316]	; (800516c <HAL_I2C_Mem_Read+0x448>)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fa29 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e091      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800504e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	b2d2      	uxtb	r2, r2
 800505c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29a      	uxth	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050b4:	e042      	b.n	800513c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fb3c 	bl	8005738 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e04c      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d118      	bne.n	800513c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	1c5a      	adds	r2, r3, #1
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	f47f aec2 	bne.w	8004eca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	e000      	b.n	8005164 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	00010004 	.word	0x00010004

08005170 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4603      	mov	r3, r0
 800519c:	817b      	strh	r3, [r7, #10]
 800519e:	460b      	mov	r3, r1
 80051a0:	813b      	strh	r3, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2200      	movs	r2, #0
 80051be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f960 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051dc:	d103      	bne.n	80051e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e05f      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	6a3a      	ldr	r2, [r7, #32]
 80051fe:	492d      	ldr	r1, [pc, #180]	; (80052b4 <I2C_RequestMemoryWrite+0x128>)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f998 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e04c      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005228:	6a39      	ldr	r1, [r7, #32]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fa02 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00d      	beq.n	8005252 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b04      	cmp	r3, #4
 800523c:	d107      	bne.n	800524e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e02b      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d105      	bne.n	8005264 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	e021      	b.n	80052a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	0a1b      	lsrs	r3, r3, #8
 8005268:	b29b      	uxth	r3, r3
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	6a39      	ldr	r1, [r7, #32]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f9dc 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b04      	cmp	r3, #4
 8005288:	d107      	bne.n	800529a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e005      	b.n	80052aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800529e:	893b      	ldrh	r3, [r7, #8]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	00010002 	.word	0x00010002

080052b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	4608      	mov	r0, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	461a      	mov	r2, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	817b      	strh	r3, [r7, #10]
 80052ca:	460b      	mov	r3, r1
 80052cc:	813b      	strh	r3, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f8c2 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d103      	bne.n	8005322 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0aa      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005326:	897b      	ldrh	r3, [r7, #10]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	6a3a      	ldr	r2, [r7, #32]
 800533a:	4952      	ldr	r1, [pc, #328]	; (8005484 <I2C_RequestMemoryRead+0x1cc>)
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f8fa 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e097      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	6a39      	ldr	r1, [r7, #32]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f964 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00d      	beq.n	800538e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b04      	cmp	r3, #4
 8005378:	d107      	bne.n	800538a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e076      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005394:	893b      	ldrh	r3, [r7, #8]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	611a      	str	r2, [r3, #16]
 800539e:	e021      	b.n	80053e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b0:	6a39      	ldr	r1, [r7, #32]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f93e 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00d      	beq.n	80053da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d107      	bne.n	80053d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e050      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	6a39      	ldr	r1, [r7, #32]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 f923 	bl	8005634 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d107      	bne.n	800540c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e035      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800541e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2200      	movs	r2, #0
 8005428:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f82b 	bl	8005488 <I2C_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00d      	beq.n	8005454 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005446:	d103      	bne.n	8005450 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800544e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e013      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005454:	897b      	ldrh	r3, [r7, #10]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	6a3a      	ldr	r2, [r7, #32]
 8005468:	4906      	ldr	r1, [pc, #24]	; (8005484 <I2C_RequestMemoryRead+0x1cc>)
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f863 	bl	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	00010002 	.word	0x00010002

08005488 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005498:	e025      	b.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d021      	beq.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a2:	f7fc fdad 	bl	8002000 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d302      	bcc.n	80054b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d116      	bne.n	80054e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e023      	b.n	800552e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d10d      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	e00c      	b.n	8005526 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	43da      	mvns	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	429a      	cmp	r2, r3
 800552a:	d0b6      	beq.n	800549a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005544:	e051      	b.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	d123      	bne.n	800559e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800556e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e046      	b.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d021      	beq.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fc fd2b 	bl	8002000 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e020      	b.n	800562c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	0c1b      	lsrs	r3, r3, #16
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d10c      	bne.n	800560e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	e00b      	b.n	8005626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	43da      	mvns	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d18d      	bne.n	8005546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005640:	e02d      	b.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f8ce 	bl	80057e4 <I2C_IsAcknowledgeFailed>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e02d      	b.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d021      	beq.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fc fcd1 	bl	8002000 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d116      	bne.n	800569e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f043 0220 	orr.w	r2, r3, #32
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e007      	b.n	80056ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d1ca      	bne.n	8005642 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056c2:	e02d      	b.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f88d 	bl	80057e4 <I2C_IsAcknowledgeFailed>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e02d      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d021      	beq.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056dc:	f7fc fc90 	bl	8002000 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f043 0220 	orr.w	r2, r3, #32
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e007      	b.n	8005730 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d1ca      	bne.n	80056c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005744:	e042      	b.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b10      	cmp	r3, #16
 8005752:	d119      	bne.n	8005788 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f06f 0210 	mvn.w	r2, #16
 800575c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e029      	b.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fc fc3a 	bl	8002000 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68ba      	ldr	r2, [r7, #8]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d116      	bne.n	80057cc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e007      	b.n	80057dc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b40      	cmp	r3, #64	; 0x40
 80057d8:	d1b5      	bne.n	8005746 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fa:	d11b      	bne.n	8005834 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005804:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e128      	b.n	8005aa8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d109      	bne.n	8005876 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a90      	ldr	r2, [pc, #576]	; (8005ab0 <HAL_I2S_Init+0x26c>)
 800586e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fc f81b 	bl	80018ac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800588c:	f023 030f 	bic.w	r3, r3, #15
 8005890:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2202      	movs	r2, #2
 8005898:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d060      	beq.n	8005964 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80058aa:	2310      	movs	r3, #16
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e001      	b.n	80058b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80058b0:	2320      	movs	r3, #32
 80058b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	d802      	bhi.n	80058c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058c2:	2001      	movs	r0, #1
 80058c4:	f001 fe14 	bl	80074f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80058c8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d2:	d125      	bne.n	8005920 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d010      	beq.n	80058fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	3305      	adds	r3, #5
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	e01f      	b.n	800593e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	00db      	lsls	r3, r3, #3
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	fbb2 f2f3 	udiv	r2, r2, r3
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	3305      	adds	r3, #5
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	e00e      	b.n	800593e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	fbb2 f2f3 	udiv	r2, r2, r3
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	461a      	mov	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	3305      	adds	r3, #5
 800593c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4a5c      	ldr	r2, [pc, #368]	; (8005ab4 <HAL_I2S_Init+0x270>)
 8005942:	fba2 2303 	umull	r2, r3, r2, r3
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e003      	b.n	800596c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005964:	2302      	movs	r3, #2
 8005966:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	2b01      	cmp	r3, #1
 8005970:	d902      	bls.n	8005978 <HAL_I2S_Init+0x134>
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	2bff      	cmp	r3, #255	; 0xff
 8005976:	d907      	bls.n	8005988 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597c:	f043 0210 	orr.w	r2, r3, #16
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e08f      	b.n	8005aa8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	ea42 0103 	orr.w	r1, r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	430a      	orrs	r2, r1
 800599a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059a6:	f023 030f 	bic.w	r3, r3, #15
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6851      	ldr	r1, [r2, #4]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	4311      	orrs	r1, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	68d2      	ldr	r2, [r2, #12]
 80059b8:	4311      	orrs	r1, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6992      	ldr	r2, [r2, #24]
 80059be:	430a      	orrs	r2, r1
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d161      	bne.n	8005a98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a38      	ldr	r2, [pc, #224]	; (8005ab8 <HAL_I2S_Init+0x274>)
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a37      	ldr	r2, [pc, #220]	; (8005abc <HAL_I2S_Init+0x278>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_I2S_Init+0x1a4>
 80059e4:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <HAL_I2S_Init+0x27c>)
 80059e6:	e001      	b.n	80059ec <HAL_I2S_Init+0x1a8>
 80059e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	4932      	ldr	r1, [pc, #200]	; (8005abc <HAL_I2S_Init+0x278>)
 80059f4:	428a      	cmp	r2, r1
 80059f6:	d101      	bne.n	80059fc <HAL_I2S_Init+0x1b8>
 80059f8:	4a31      	ldr	r2, [pc, #196]	; (8005ac0 <HAL_I2S_Init+0x27c>)
 80059fa:	e001      	b.n	8005a00 <HAL_I2S_Init+0x1bc>
 80059fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005a00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005a04:	f023 030f 	bic.w	r3, r3, #15
 8005a08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a2b      	ldr	r2, [pc, #172]	; (8005abc <HAL_I2S_Init+0x278>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d101      	bne.n	8005a18 <HAL_I2S_Init+0x1d4>
 8005a14:	4b2a      	ldr	r3, [pc, #168]	; (8005ac0 <HAL_I2S_Init+0x27c>)
 8005a16:	e001      	b.n	8005a1c <HAL_I2S_Init+0x1d8>
 8005a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a25      	ldr	r2, [pc, #148]	; (8005abc <HAL_I2S_Init+0x278>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_I2S_Init+0x1ea>
 8005a2a:	4b25      	ldr	r3, [pc, #148]	; (8005ac0 <HAL_I2S_Init+0x27c>)
 8005a2c:	e001      	b.n	8005a32 <HAL_I2S_Init+0x1ee>
 8005a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3e:	d003      	beq.n	8005a48 <HAL_I2S_Init+0x204>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	e001      	b.n	8005a54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a50:	2300      	movs	r3, #0
 8005a52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a72:	4313      	orrs	r3, r2
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	897b      	ldrh	r3, [r7, #10]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a0d      	ldr	r2, [pc, #52]	; (8005abc <HAL_I2S_Init+0x278>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d101      	bne.n	8005a90 <HAL_I2S_Init+0x24c>
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <HAL_I2S_Init+0x27c>)
 8005a8e:	e001      	b.n	8005a94 <HAL_I2S_Init+0x250>
 8005a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a94:	897a      	ldrh	r2, [r7, #10]
 8005a96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08006349 	.word	0x08006349
 8005ab4:	cccccccd 	.word	0xcccccccd
 8005ab8:	080064d1 	.word	0x080064d1
 8005abc:	40003800 	.word	0x40003800
 8005ac0:	40003400 	.word	0x40003400

08005ac4 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <HAL_I2S_Transmit_DMA+0x1a>
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e08e      	b.n	8005c00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_I2S_Transmit_DMA+0x2e>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e086      	b.n	8005c00 <HAL_I2S_Transmit_DMA+0x13c>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d005      	beq.n	8005b12 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e076      	b.n	8005c00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	69db      	ldr	r3, [r3, #28]
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d002      	beq.n	8005b3e <HAL_I2S_Transmit_DMA+0x7a>
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b05      	cmp	r3, #5
 8005b3c:	d10a      	bne.n	8005b54 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005b3e:	88fb      	ldrh	r3, [r7, #6]
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b52:	e005      	b.n	8005b60 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	88fa      	ldrh	r2, [r7, #6]
 8005b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	4a28      	ldr	r2, [pc, #160]	; (8005c08 <HAL_I2S_Transmit_DMA+0x144>)
 8005b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_I2S_Transmit_DMA+0x148>)
 8005b6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	4a26      	ldr	r2, [pc, #152]	; (8005c10 <HAL_I2S_Transmit_DMA+0x14c>)
 8005b76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b80:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b88:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005b90:	f7fc fc84 	bl	800249c <HAL_DMA_Start_IT>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00f      	beq.n	8005bba <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e022      	b.n	8005c00 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bd6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0202 	orr.w	r2, r2, #2
 8005bf4:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	08006227 	.word	0x08006227
 8005c0c:	080061e5 	.word	0x080061e5
 8005c10:	08006243 	.word	0x08006243

08005c14 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_I2S_DMAPause+0x18>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e04a      	b.n	8005cc2 <HAL_I2S_DMAPause+0xae>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d108      	bne.n	8005c52 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0202 	bic.w	r2, r2, #2
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	e032      	b.n	8005cb8 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d108      	bne.n	8005c70 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	605a      	str	r2, [r3, #4]
 8005c6e:	e023      	b.n	8005cb8 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	d11d      	bne.n	8005cb8 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0203 	bic.w	r2, r2, #3
 8005c8a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a0f      	ldr	r2, [pc, #60]	; (8005cd0 <HAL_I2S_DMAPause+0xbc>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_I2S_DMAPause+0x86>
 8005c96:	4b0f      	ldr	r3, [pc, #60]	; (8005cd4 <HAL_I2S_DMAPause+0xc0>)
 8005c98:	e001      	b.n	8005c9e <HAL_I2S_DMAPause+0x8a>
 8005c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	490a      	ldr	r1, [pc, #40]	; (8005cd0 <HAL_I2S_DMAPause+0xbc>)
 8005ca6:	428b      	cmp	r3, r1
 8005ca8:	d101      	bne.n	8005cae <HAL_I2S_DMAPause+0x9a>
 8005caa:	4b0a      	ldr	r3, [pc, #40]	; (8005cd4 <HAL_I2S_DMAPause+0xc0>)
 8005cac:	e001      	b.n	8005cb2 <HAL_I2S_DMAPause+0x9e>
 8005cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cb2:	f022 0203 	bic.w	r2, r2, #3
 8005cb6:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	40003800 	.word	0x40003800
 8005cd4:	40003400 	.word	0x40003400

08005cd8 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_I2S_DMAResume+0x18>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e07d      	b.n	8005dec <HAL_I2S_DMAResume+0x114>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d108      	bne.n	8005d16 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0202 	orr.w	r2, r2, #2
 8005d12:	605a      	str	r2, [r3, #4]
 8005d14:	e056      	b.n	8005dc4 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d108      	bne.n	8005d34 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0201 	orr.w	r2, r2, #1
 8005d30:	605a      	str	r2, [r3, #4]
 8005d32:	e047      	b.n	8005dc4 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d141      	bne.n	8005dc4 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0203 	orr.w	r2, r2, #3
 8005d4e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a28      	ldr	r2, [pc, #160]	; (8005df8 <HAL_I2S_DMAResume+0x120>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_I2S_DMAResume+0x86>
 8005d5a:	4b28      	ldr	r3, [pc, #160]	; (8005dfc <HAL_I2S_DMAResume+0x124>)
 8005d5c:	e001      	b.n	8005d62 <HAL_I2S_DMAResume+0x8a>
 8005d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4923      	ldr	r1, [pc, #140]	; (8005df8 <HAL_I2S_DMAResume+0x120>)
 8005d6a:	428b      	cmp	r3, r1
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2S_DMAResume+0x9a>
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <HAL_I2S_DMAResume+0x124>)
 8005d70:	e001      	b.n	8005d76 <HAL_I2S_DMAResume+0x9e>
 8005d72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d76:	f042 0203 	orr.w	r2, r2, #3
 8005d7a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1d      	ldr	r2, [pc, #116]	; (8005df8 <HAL_I2S_DMAResume+0x120>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d101      	bne.n	8005d8a <HAL_I2S_DMAResume+0xb2>
 8005d86:	4b1d      	ldr	r3, [pc, #116]	; (8005dfc <HAL_I2S_DMAResume+0x124>)
 8005d88:	e001      	b.n	8005d8e <HAL_I2S_DMAResume+0xb6>
 8005d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_I2S_DMAResume+0x120>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d101      	bne.n	8005da6 <HAL_I2S_DMAResume+0xce>
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <HAL_I2S_DMAResume+0x124>)
 8005da4:	e001      	b.n	8005daa <HAL_I2S_DMAResume+0xd2>
 8005da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4911      	ldr	r1, [pc, #68]	; (8005df8 <HAL_I2S_DMAResume+0x120>)
 8005db2:	428b      	cmp	r3, r1
 8005db4:	d101      	bne.n	8005dba <HAL_I2S_DMAResume+0xe2>
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <HAL_I2S_DMAResume+0x124>)
 8005db8:	e001      	b.n	8005dbe <HAL_I2S_DMAResume+0xe6>
 8005dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc2:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d107      	bne.n	8005de2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69da      	ldr	r2, [r3, #28]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005de0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40003800 	.word	0x40003800
 8005dfc:	40003400 	.word	0x40003400

08005e00 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e14:	d004      	beq.n	8005e20 <HAL_I2S_DMAStop+0x20>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 80d1 	bne.w	8005fc2 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00f      	beq.n	8005e48 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fc fb8d 	bl	800254c <HAL_DMA_Abort>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f043 0208 	orr.w	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005e48:	2364      	movs	r3, #100	; 0x64
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb04 	bl	800645c <I2S_WaitFlagStateUntilTimeout>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	f043 0201 	orr.w	r2, r3, #1
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005e72:	2364      	movs	r3, #100	; 0x64
 8005e74:	2200      	movs	r2, #0
 8005e76:	2180      	movs	r1, #128	; 0x80
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 faef 	bl	800645c <I2S_WaitFlagStateUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e88:	f043 0201 	orr.w	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eaa:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0202 	bic.w	r2, r2, #2
 8005ec8:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	f040 8165 	bne.w	80061a2 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00f      	beq.n	8005f00 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fc fb31 	bl	800254c <HAL_DMA_Abort>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d007      	beq.n	8005f00 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef4:	f043 0208 	orr.w	r2, r3, #8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a8a      	ldr	r2, [pc, #552]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_I2S_DMAStop+0x10e>
 8005f0a:	4b8a      	ldr	r3, [pc, #552]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f0c:	e001      	b.n	8005f12 <HAL_I2S_DMAStop+0x112>
 8005f0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4985      	ldr	r1, [pc, #532]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f1a:	428b      	cmp	r3, r1
 8005f1c:	d101      	bne.n	8005f22 <HAL_I2S_DMAStop+0x122>
 8005f1e:	4b85      	ldr	r3, [pc, #532]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f20:	e001      	b.n	8005f26 <HAL_I2S_DMAStop+0x126>
 8005f22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a7e      	ldr	r2, [pc, #504]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d101      	bne.n	8005f3e <HAL_I2S_DMAStop+0x13e>
 8005f3a:	4b7e      	ldr	r3, [pc, #504]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f3c:	e001      	b.n	8005f42 <HAL_I2S_DMAStop+0x142>
 8005f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a79      	ldr	r2, [pc, #484]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d101      	bne.n	8005f54 <HAL_I2S_DMAStop+0x154>
 8005f50:	4b78      	ldr	r3, [pc, #480]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f52:	e001      	b.n	8005f58 <HAL_I2S_DMAStop+0x158>
 8005f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	613b      	str	r3, [r7, #16]
 8005f5c:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a73      	ldr	r2, [pc, #460]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d101      	bne.n	8005f6c <HAL_I2S_DMAStop+0x16c>
 8005f68:	4b72      	ldr	r3, [pc, #456]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f6a:	e001      	b.n	8005f70 <HAL_I2S_DMAStop+0x170>
 8005f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	496e      	ldr	r1, [pc, #440]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	d101      	bne.n	8005f80 <HAL_I2S_DMAStop+0x180>
 8005f7c:	4b6d      	ldr	r3, [pc, #436]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005f7e:	e001      	b.n	8005f84 <HAL_I2S_DMAStop+0x184>
 8005f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f84:	f022 0201 	bic.w	r2, r2, #1
 8005f88:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10c      	bne.n	8005fac <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005faa:	e0fa      	b.n	80061a2 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a5f      	ldr	r2, [pc, #380]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d101      	bne.n	8005fba <HAL_I2S_DMAStop+0x1ba>
 8005fb6:	4b5f      	ldr	r3, [pc, #380]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8005fb8:	e001      	b.n	8005fbe <HAL_I2S_DMAStop+0x1be>
 8005fba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fbe:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005fc0:	e0ef      	b.n	80061a2 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fca:	d005      	beq.n	8005fd8 <HAL_I2S_DMAStop+0x1d8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd4:	f040 80e5 	bne.w	80061a2 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d00f      	beq.n	8006000 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fc fab1 	bl	800254c <HAL_DMA_Abort>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	f043 0208 	orr.w	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b05      	cmp	r3, #5
 800600a:	f040 809a 	bne.w	8006142 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00f      	beq.n	8006036 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	4618      	mov	r0, r3
 800601c:	f7fc fa96 	bl	800254c <HAL_DMA_Abort>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0208 	orr.w	r2, r3, #8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 8006036:	f7fb ffe3 	bl	8002000 <HAL_GetTick>
 800603a:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800603c:	e012      	b.n	8006064 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800603e:	f7fb ffdf 	bl	8002000 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b64      	cmp	r3, #100	; 0x64
 800604a:	d90b      	bls.n	8006064 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006050:	f043 0201 	orr.w	r2, r3, #1
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a31      	ldr	r2, [pc, #196]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_I2S_DMAStop+0x272>
 800606e:	4b31      	ldr	r3, [pc, #196]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8006070:	e001      	b.n	8006076 <HAL_I2S_DMAStop+0x276>
 8006072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d1de      	bne.n	800603e <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006080:	e012      	b.n	80060a8 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006082:	f7fb ffbd 	bl	8002000 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b64      	cmp	r3, #100	; 0x64
 800608e:	d90b      	bls.n	80060a8 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006094:	f043 0201 	orr.w	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a20      	ldr	r2, [pc, #128]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <HAL_I2S_DMAStop+0x2b6>
 80060b2:	4b20      	ldr	r3, [pc, #128]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 80060b4:	e001      	b.n	80060ba <HAL_I2S_DMAStop+0x2ba>
 80060b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d0de      	beq.n	8006082 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d101      	bne.n	80060d2 <HAL_I2S_DMAStop+0x2d2>
 80060ce:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 80060d0:	e001      	b.n	80060d6 <HAL_I2S_DMAStop+0x2d6>
 80060d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4914      	ldr	r1, [pc, #80]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 80060de:	428b      	cmp	r3, r1
 80060e0:	d101      	bne.n	80060e6 <HAL_I2S_DMAStop+0x2e6>
 80060e2:	4b14      	ldr	r3, [pc, #80]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 80060e4:	e001      	b.n	80060ea <HAL_I2S_DMAStop+0x2ea>
 80060e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a0d      	ldr	r2, [pc, #52]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_I2S_DMAStop+0x302>
 80060fe:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8006100:	e001      	b.n	8006106 <HAL_I2S_DMAStop+0x306>
 8006102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a07      	ldr	r2, [pc, #28]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d101      	bne.n	800611a <HAL_I2S_DMAStop+0x31a>
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 8006118:	e001      	b.n	800611e <HAL_I2S_DMAStop+0x31e>
 800611a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4902      	ldr	r1, [pc, #8]	; (8006130 <HAL_I2S_DMAStop+0x330>)
 8006126:	428b      	cmp	r3, r1
 8006128:	d106      	bne.n	8006138 <HAL_I2S_DMAStop+0x338>
 800612a:	4b02      	ldr	r3, [pc, #8]	; (8006134 <HAL_I2S_DMAStop+0x334>)
 800612c:	e006      	b.n	800613c <HAL_I2S_DMAStop+0x33c>
 800612e:	bf00      	nop
 8006130:	40003800 	.word	0x40003800
 8006134:	40003400 	.word	0x40003400
 8006138:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800613c:	f022 0202 	bic.w	r2, r2, #2
 8006140:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006150:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006152:	2300      	movs	r3, #0
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	60bb      	str	r3, [r7, #8]
 8006166:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006180:	d10c      	bne.n	800619c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e002      	b.n	80061a2 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061d6:	b2db      	uxtb	r3, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10e      	bne.n	8006218 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0202 	bic.w	r2, r2, #2
 8006208:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f7fa fa3f 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800621e:	bf00      	nop
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7fa fa43 	bl	80006c0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0203 	bic.w	r2, r2, #3
 800625e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006278:	f043 0208 	orr.w	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7fa fb8d 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	881a      	ldrh	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	1c9a      	adds	r2, r3, #2
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10e      	bne.n	80062e2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fa f9dd 	bl	800069c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80062e2:	bf00      	nop
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b082      	sub	sp, #8
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fc:	b292      	uxth	r2, r2
 80062fe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	1c9a      	adds	r2, r3, #2
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10e      	bne.n	8006340 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006330:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff ff3a 	bl	80061b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b04      	cmp	r3, #4
 8006362:	d13a      	bne.n	80063da <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b01      	cmp	r3, #1
 800636c:	d109      	bne.n	8006382 <I2S_IRQHandler+0x3a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006378:	2b40      	cmp	r3, #64	; 0x40
 800637a:	d102      	bne.n	8006382 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ffb4 	bl	80062ea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d126      	bne.n	80063da <I2S_IRQHandler+0x92>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b20      	cmp	r3, #32
 8006398:	d11f      	bne.n	80063da <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063a8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	f043 0202 	orr.w	r2, r3, #2
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fa fae3 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d136      	bne.n	8006454 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d109      	bne.n	8006404 <I2S_IRQHandler+0xbc>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fa:	2b80      	cmp	r3, #128	; 0x80
 80063fc:	d102      	bne.n	8006404 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7ff ff45 	bl	800628e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b08      	cmp	r3, #8
 800640c:	d122      	bne.n	8006454 <I2S_IRQHandler+0x10c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b20      	cmp	r3, #32
 800641a:	d11b      	bne.n	8006454 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800642a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006446:	f043 0204 	orr.w	r2, r3, #4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fa faa6 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006454:	bf00      	nop
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800646c:	f7fb fdc8 	bl	8002000 <HAL_GetTick>
 8006470:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006472:	e018      	b.n	80064a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d014      	beq.n	80064a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800647c:	f7fb fdc0 	bl	8002000 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d902      	bls.n	8006492 <I2S_WaitFlagStateUntilTimeout+0x36>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e00f      	b.n	80064c6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	bf0c      	ite	eq
 80064b6:	2301      	moveq	r3, #1
 80064b8:	2300      	movne	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	79fb      	ldrb	r3, [r7, #7]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d1d7      	bne.n	8006474 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a92      	ldr	r2, [pc, #584]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80064ea:	4b92      	ldr	r3, [pc, #584]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064ec:	e001      	b.n	80064f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80064ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a8b      	ldr	r2, [pc, #556]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d101      	bne.n	800650c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006508:	4b8a      	ldr	r3, [pc, #552]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800650a:	e001      	b.n	8006510 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800650c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800651c:	d004      	beq.n	8006528 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f040 8099 	bne.w	800665a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d107      	bne.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006538:	2b00      	cmp	r3, #0
 800653a:	d002      	beq.n	8006542 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f925 	bl	800678c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b01      	cmp	r3, #1
 800654a:	d107      	bne.n	800655c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f9c8 	bl	80068ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d13a      	bne.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d035      	beq.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a6e      	ldr	r2, [pc, #440]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800657a:	4b6e      	ldr	r3, [pc, #440]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800657c:	e001      	b.n	8006582 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800657e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4969      	ldr	r1, [pc, #420]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800658a:	428b      	cmp	r3, r1
 800658c:	d101      	bne.n	8006592 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800658e:	4b69      	ldr	r3, [pc, #420]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006590:	e001      	b.n	8006596 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800659a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065aa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	60fb      	str	r3, [r7, #12]
 80065c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f043 0202 	orr.w	r2, r3, #2
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fa f9e2 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	f040 80c3 	bne.w	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80bd 	beq.w	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006602:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a49      	ldr	r2, [pc, #292]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d101      	bne.n	8006612 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800660e:	4b49      	ldr	r3, [pc, #292]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006610:	e001      	b.n	8006616 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4944      	ldr	r1, [pc, #272]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800661e:	428b      	cmp	r3, r1
 8006620:	d101      	bne.n	8006626 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006622:	4b44      	ldr	r3, [pc, #272]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006624:	e001      	b.n	800662a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800662e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006630:	2300      	movs	r3, #0
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]
 800663c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fa f9a4 	bl	80009a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006658:	e089      	b.n	800676e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b02      	cmp	r3, #2
 8006662:	d107      	bne.n	8006674 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8be 	bl	80067f0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d107      	bne.n	800668e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f8fd 	bl	8006888 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d12f      	bne.n	80066f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d02a      	beq.n	80066f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066b0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1e      	ldr	r2, [pc, #120]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d101      	bne.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80066bc:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066be:	e001      	b.n	80066c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80066c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4919      	ldr	r1, [pc, #100]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80066cc:	428b      	cmp	r3, r1
 80066ce:	d101      	bne.n	80066d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80066d0:	4b18      	ldr	r3, [pc, #96]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066d2:	e001      	b.n	80066d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80066d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ea:	f043 0202 	orr.w	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fa f954 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b08      	cmp	r3, #8
 8006700:	d136      	bne.n	8006770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d031      	beq.n	8006770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a07      	ldr	r2, [pc, #28]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d101      	bne.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006716:	4b07      	ldr	r3, [pc, #28]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006718:	e001      	b.n	800671e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800671a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4902      	ldr	r1, [pc, #8]	; (8006730 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006726:	428b      	cmp	r3, r1
 8006728:	d106      	bne.n	8006738 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800672a:	4b02      	ldr	r3, [pc, #8]	; (8006734 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800672c:	e006      	b.n	800673c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800672e:	bf00      	nop
 8006730:	40003800 	.word	0x40003800
 8006734:	40003400 	.word	0x40003400
 8006738:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800673c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006740:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006750:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675e:	f043 0204 	orr.w	r2, r3, #4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fa f91a 	bl	80009a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800676c:	e000      	b.n	8006770 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800676e:	bf00      	nop
}
 8006770:	bf00      	nop
 8006772:	3720      	adds	r7, #32
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	1c99      	adds	r1, r3, #2
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6251      	str	r1, [r2, #36]	; 0x24
 800679e:	881a      	ldrh	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d113      	bne.n	80067e6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff ffc9 	bl	8006778 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	1c99      	adds	r1, r3, #2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6251      	str	r1, [r2, #36]	; 0x24
 8006802:	8819      	ldrh	r1, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a1d      	ldr	r2, [pc, #116]	; (8006880 <I2SEx_TxISR_I2SExt+0x90>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d101      	bne.n	8006812 <I2SEx_TxISR_I2SExt+0x22>
 800680e:	4b1d      	ldr	r3, [pc, #116]	; (8006884 <I2SEx_TxISR_I2SExt+0x94>)
 8006810:	e001      	b.n	8006816 <I2SEx_TxISR_I2SExt+0x26>
 8006812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006816:	460a      	mov	r2, r1
 8006818:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	3b01      	subs	r3, #1
 8006822:	b29a      	uxth	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d121      	bne.n	8006876 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a12      	ldr	r2, [pc, #72]	; (8006880 <I2SEx_TxISR_I2SExt+0x90>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <I2SEx_TxISR_I2SExt+0x50>
 800683c:	4b11      	ldr	r3, [pc, #68]	; (8006884 <I2SEx_TxISR_I2SExt+0x94>)
 800683e:	e001      	b.n	8006844 <I2SEx_TxISR_I2SExt+0x54>
 8006840:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	490d      	ldr	r1, [pc, #52]	; (8006880 <I2SEx_TxISR_I2SExt+0x90>)
 800684c:	428b      	cmp	r3, r1
 800684e:	d101      	bne.n	8006854 <I2SEx_TxISR_I2SExt+0x64>
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <I2SEx_TxISR_I2SExt+0x94>)
 8006852:	e001      	b.n	8006858 <I2SEx_TxISR_I2SExt+0x68>
 8006854:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006858:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800685c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d106      	bne.n	8006876 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7ff ff81 	bl	8006778 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006876:	bf00      	nop
 8006878:	3708      	adds	r7, #8
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40003800 	.word	0x40003800
 8006884:	40003400 	.word	0x40003400

08006888 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68d8      	ldr	r0, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800689a:	1c99      	adds	r1, r3, #2
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80068a0:	b282      	uxth	r2, r0
 80068a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d113      	bne.n	80068e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7ff ff4a 	bl	8006778 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a20      	ldr	r2, [pc, #128]	; (800697c <I2SEx_RxISR_I2SExt+0x90>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d101      	bne.n	8006902 <I2SEx_RxISR_I2SExt+0x16>
 80068fe:	4b20      	ldr	r3, [pc, #128]	; (8006980 <I2SEx_RxISR_I2SExt+0x94>)
 8006900:	e001      	b.n	8006906 <I2SEx_RxISR_I2SExt+0x1a>
 8006902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006906:	68d8      	ldr	r0, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	1c99      	adds	r1, r3, #2
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006912:	b282      	uxth	r2, r0
 8006914:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800691a:	b29b      	uxth	r3, r3
 800691c:	3b01      	subs	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d121      	bne.n	8006972 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a12      	ldr	r2, [pc, #72]	; (800697c <I2SEx_RxISR_I2SExt+0x90>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d101      	bne.n	800693c <I2SEx_RxISR_I2SExt+0x50>
 8006938:	4b11      	ldr	r3, [pc, #68]	; (8006980 <I2SEx_RxISR_I2SExt+0x94>)
 800693a:	e001      	b.n	8006940 <I2SEx_RxISR_I2SExt+0x54>
 800693c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	490d      	ldr	r1, [pc, #52]	; (800697c <I2SEx_RxISR_I2SExt+0x90>)
 8006948:	428b      	cmp	r3, r1
 800694a:	d101      	bne.n	8006950 <I2SEx_RxISR_I2SExt+0x64>
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <I2SEx_RxISR_I2SExt+0x94>)
 800694e:	e001      	b.n	8006954 <I2SEx_RxISR_I2SExt+0x68>
 8006950:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006954:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006958:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d106      	bne.n	8006972 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff03 	bl	8006778 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	40003800 	.word	0x40003800
 8006980:	40003400 	.word	0x40003400

08006984 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e267      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d075      	beq.n	8006a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069a2:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 030c 	and.w	r3, r3, #12
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d00c      	beq.n	80069c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ae:	4b85      	ldr	r3, [pc, #532]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d112      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069ba:	4b82      	ldr	r3, [pc, #520]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c6:	d10b      	bne.n	80069e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	4b7e      	ldr	r3, [pc, #504]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d05b      	beq.n	8006a8c <HAL_RCC_OscConfig+0x108>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d157      	bne.n	8006a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e242      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	d106      	bne.n	80069f8 <HAL_RCC_OscConfig+0x74>
 80069ea:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a75      	ldr	r2, [pc, #468]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 80069f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e01d      	b.n	8006a34 <HAL_RCC_OscConfig+0xb0>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x98>
 8006a02:	4b70      	ldr	r3, [pc, #448]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a6f      	ldr	r2, [pc, #444]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b6d      	ldr	r3, [pc, #436]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a6c      	ldr	r2, [pc, #432]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e00b      	b.n	8006a34 <HAL_RCC_OscConfig+0xb0>
 8006a1c:	4b69      	ldr	r3, [pc, #420]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a68      	ldr	r2, [pc, #416]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a26:	6013      	str	r3, [r2, #0]
 8006a28:	4b66      	ldr	r3, [pc, #408]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a65      	ldr	r2, [pc, #404]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d013      	beq.n	8006a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3c:	f7fb fae0 	bl	8002000 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a44:	f7fb fadc 	bl	8002000 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	; 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e207      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a56:	4b5b      	ldr	r3, [pc, #364]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f0      	beq.n	8006a44 <HAL_RCC_OscConfig+0xc0>
 8006a62:	e014      	b.n	8006a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a64:	f7fb facc 	bl	8002000 <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a6c:	f7fb fac8 	bl	8002000 <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b64      	cmp	r3, #100	; 0x64
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e1f3      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a7e:	4b51      	ldr	r3, [pc, #324]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f0      	bne.n	8006a6c <HAL_RCC_OscConfig+0xe8>
 8006a8a:	e000      	b.n	8006a8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d063      	beq.n	8006b62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00b      	beq.n	8006abe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aa6:	4b47      	ldr	r3, [pc, #284]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d11c      	bne.n	8006aec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab2:	4b44      	ldr	r3, [pc, #272]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d116      	bne.n	8006aec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006abe:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d005      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x152>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e1c7      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ad6:	4b3b      	ldr	r3, [pc, #236]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4937      	ldr	r1, [pc, #220]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	e03a      	b.n	8006b62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d020      	beq.n	8006b36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af4:	4b34      	ldr	r3, [pc, #208]	; (8006bc8 <HAL_RCC_OscConfig+0x244>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afa:	f7fb fa81 	bl	8002000 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b02:	f7fb fa7d 	bl	8002000 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e1a8      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	4925      	ldr	r1, [pc, #148]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
 8006b34:	e015      	b.n	8006b62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b36:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <HAL_RCC_OscConfig+0x244>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fb fa60 	bl	8002000 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b44:	f7fb fa5c 	bl	8002000 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e187      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b56:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d036      	beq.n	8006bdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d016      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <HAL_RCC_OscConfig+0x248>)
 8006b78:	2201      	movs	r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b7c:	f7fb fa40 	bl	8002000 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b84:	f7fb fa3c 	bl	8002000 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e167      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b96:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <HAL_RCC_OscConfig+0x240>)
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x200>
 8006ba2:	e01b      	b.n	8006bdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ba4:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <HAL_RCC_OscConfig+0x248>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006baa:	f7fb fa29 	bl	8002000 <HAL_GetTick>
 8006bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bb0:	e00e      	b.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb2:	f7fb fa25 	bl	8002000 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d907      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e150      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	42470000 	.word	0x42470000
 8006bcc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd0:	4b88      	ldr	r3, [pc, #544]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8097 	beq.w	8006d18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bea:	2300      	movs	r3, #0
 8006bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bee:	4b81      	ldr	r3, [pc, #516]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d10f      	bne.n	8006c1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]
 8006bfe:	4b7d      	ldr	r3, [pc, #500]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a7c      	ldr	r2, [pc, #496]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
 8006c0a:	4b7a      	ldr	r3, [pc, #488]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c12:	60bb      	str	r3, [r7, #8]
 8006c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	4b77      	ldr	r3, [pc, #476]	; (8006df8 <HAL_RCC_OscConfig+0x474>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d118      	bne.n	8006c58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c26:	4b74      	ldr	r3, [pc, #464]	; (8006df8 <HAL_RCC_OscConfig+0x474>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a73      	ldr	r2, [pc, #460]	; (8006df8 <HAL_RCC_OscConfig+0x474>)
 8006c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c32:	f7fb f9e5 	bl	8002000 <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c3a:	f7fb f9e1 	bl	8002000 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e10c      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c4c:	4b6a      	ldr	r3, [pc, #424]	; (8006df8 <HAL_RCC_OscConfig+0x474>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d106      	bne.n	8006c6e <HAL_RCC_OscConfig+0x2ea>
 8006c60:	4b64      	ldr	r3, [pc, #400]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c64:	4a63      	ldr	r2, [pc, #396]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6c:	e01c      	b.n	8006ca8 <HAL_RCC_OscConfig+0x324>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	d10c      	bne.n	8006c90 <HAL_RCC_OscConfig+0x30c>
 8006c76:	4b5f      	ldr	r3, [pc, #380]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7a:	4a5e      	ldr	r2, [pc, #376]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c7c:	f043 0304 	orr.w	r3, r3, #4
 8006c80:	6713      	str	r3, [r2, #112]	; 0x70
 8006c82:	4b5c      	ldr	r3, [pc, #368]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c86:	4a5b      	ldr	r2, [pc, #364]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c8e:	e00b      	b.n	8006ca8 <HAL_RCC_OscConfig+0x324>
 8006c90:	4b58      	ldr	r3, [pc, #352]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c94:	4a57      	ldr	r2, [pc, #348]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c9c:	4b55      	ldr	r3, [pc, #340]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	4a54      	ldr	r2, [pc, #336]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d015      	beq.n	8006cdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb0:	f7fb f9a6 	bl	8002000 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb6:	e00a      	b.n	8006cce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cb8:	f7fb f9a2 	bl	8002000 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e0cb      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cce:	4b49      	ldr	r3, [pc, #292]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	f003 0302 	and.w	r3, r3, #2
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0ee      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x334>
 8006cda:	e014      	b.n	8006d06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cdc:	f7fb f990 	bl	8002000 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fb f98c 	bl	8002000 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0b5      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006cfa:	4b3e      	ldr	r3, [pc, #248]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1ee      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d06:	7dfb      	ldrb	r3, [r7, #23]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d105      	bne.n	8006d18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d0c:	4b39      	ldr	r3, [pc, #228]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	4a38      	ldr	r2, [pc, #224]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80a1 	beq.w	8006e64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d22:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b08      	cmp	r3, #8
 8006d2c:	d05c      	beq.n	8006de8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d141      	bne.n	8006dba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d36:	4b31      	ldr	r3, [pc, #196]	; (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d3c:	f7fb f960 	bl	8002000 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d44:	f7fb f95c 	bl	8002000 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e087      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d56:	4b27      	ldr	r3, [pc, #156]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f0      	bne.n	8006d44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d70:	019b      	lsls	r3, r3, #6
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	041b      	lsls	r3, r3, #16
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	061b      	lsls	r3, r3, #24
 8006d86:	491b      	ldr	r1, [pc, #108]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006d8e:	2201      	movs	r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d92:	f7fb f935 	bl	8002000 <HAL_GetTick>
 8006d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d98:	e008      	b.n	8006dac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d9a:	f7fb f931 	bl	8002000 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e05c      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dac:	4b11      	ldr	r3, [pc, #68]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d0f0      	beq.n	8006d9a <HAL_RCC_OscConfig+0x416>
 8006db8:	e054      	b.n	8006e64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <HAL_RCC_OscConfig+0x478>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc0:	f7fb f91e 	bl	8002000 <HAL_GetTick>
 8006dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dc6:	e008      	b.n	8006dda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc8:	f7fb f91a 	bl	8002000 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e045      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <HAL_RCC_OscConfig+0x470>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f0      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x444>
 8006de6:	e03d      	b.n	8006e64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e038      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
 8006df4:	40023800 	.word	0x40023800
 8006df8:	40007000 	.word	0x40007000
 8006dfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e00:	4b1b      	ldr	r3, [pc, #108]	; (8006e70 <HAL_RCC_OscConfig+0x4ec>)
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d028      	beq.n	8006e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d121      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d11a      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e30:	4013      	ands	r3, r2
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d111      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d107      	bne.n	8006e60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d001      	beq.n	8006e64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e000      	b.n	8006e66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40023800 	.word	0x40023800

08006e74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0cc      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e88:	4b68      	ldr	r3, [pc, #416]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d90c      	bls.n	8006eb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e96:	4b65      	ldr	r3, [pc, #404]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9e:	4b63      	ldr	r3, [pc, #396]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0307 	and.w	r3, r3, #7
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d001      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0b8      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ec8:	4b59      	ldr	r3, [pc, #356]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a58      	ldr	r2, [pc, #352]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ed2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ee0:	4b53      	ldr	r3, [pc, #332]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a52      	ldr	r2, [pc, #328]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006eea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eec:	4b50      	ldr	r3, [pc, #320]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	494d      	ldr	r1, [pc, #308]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d044      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d107      	bne.n	8006f22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f12:	4b47      	ldr	r3, [pc, #284]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d119      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e07f      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d003      	beq.n	8006f32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f32:	4b3f      	ldr	r3, [pc, #252]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e06f      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f42:	4b3b      	ldr	r3, [pc, #236]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e067      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f52:	4b37      	ldr	r3, [pc, #220]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f023 0203 	bic.w	r2, r3, #3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4934      	ldr	r1, [pc, #208]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f64:	f7fb f84c 	bl	8002000 <HAL_GetTick>
 8006f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f6a:	e00a      	b.n	8006f82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f6c:	f7fb f848 	bl	8002000 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d901      	bls.n	8006f82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	e04f      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f82:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 020c 	and.w	r2, r3, #12
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d1eb      	bne.n	8006f6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d20c      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa2:	4b22      	ldr	r3, [pc, #136]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006faa:	4b20      	ldr	r3, [pc, #128]	; (800702c <HAL_RCC_ClockConfig+0x1b8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e032      	b.n	8007022 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d008      	beq.n	8006fda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	4916      	ldr	r1, [pc, #88]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d009      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	490e      	ldr	r1, [pc, #56]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ffa:	f000 f821 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	091b      	lsrs	r3, r3, #4
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	490a      	ldr	r1, [pc, #40]	; (8007034 <HAL_RCC_ClockConfig+0x1c0>)
 800700c:	5ccb      	ldrb	r3, [r1, r3]
 800700e:	fa22 f303 	lsr.w	r3, r2, r3
 8007012:	4a09      	ldr	r2, [pc, #36]	; (8007038 <HAL_RCC_ClockConfig+0x1c4>)
 8007014:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007016:	4b09      	ldr	r3, [pc, #36]	; (800703c <HAL_RCC_ClockConfig+0x1c8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f7fa ffac 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40023c00 	.word	0x40023c00
 8007030:	40023800 	.word	0x40023800
 8007034:	0800f7f4 	.word	0x0800f7f4
 8007038:	20000038 	.word	0x20000038
 800703c:	20000040 	.word	0x20000040

08007040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007044:	b094      	sub	sp, #80	; 0x50
 8007046:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	647b      	str	r3, [r7, #68]	; 0x44
 800704c:	2300      	movs	r3, #0
 800704e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007050:	2300      	movs	r3, #0
 8007052:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007058:	4b79      	ldr	r3, [pc, #484]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 030c 	and.w	r3, r3, #12
 8007060:	2b08      	cmp	r3, #8
 8007062:	d00d      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0x40>
 8007064:	2b08      	cmp	r3, #8
 8007066:	f200 80e1 	bhi.w	800722c <HAL_RCC_GetSysClockFreq+0x1ec>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_RCC_GetSysClockFreq+0x34>
 800706e:	2b04      	cmp	r3, #4
 8007070:	d003      	beq.n	800707a <HAL_RCC_GetSysClockFreq+0x3a>
 8007072:	e0db      	b.n	800722c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007074:	4b73      	ldr	r3, [pc, #460]	; (8007244 <HAL_RCC_GetSysClockFreq+0x204>)
 8007076:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007078:	e0db      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800707a:	4b73      	ldr	r3, [pc, #460]	; (8007248 <HAL_RCC_GetSysClockFreq+0x208>)
 800707c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800707e:	e0d8      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007080:	4b6f      	ldr	r3, [pc, #444]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800708a:	4b6d      	ldr	r3, [pc, #436]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d063      	beq.n	800715e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007096:	4b6a      	ldr	r3, [pc, #424]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	099b      	lsrs	r3, r3, #6
 800709c:	2200      	movs	r2, #0
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a8:	633b      	str	r3, [r7, #48]	; 0x30
 80070aa:	2300      	movs	r3, #0
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
 80070ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070b2:	4622      	mov	r2, r4
 80070b4:	462b      	mov	r3, r5
 80070b6:	f04f 0000 	mov.w	r0, #0
 80070ba:	f04f 0100 	mov.w	r1, #0
 80070be:	0159      	lsls	r1, r3, #5
 80070c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070c4:	0150      	lsls	r0, r2, #5
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4621      	mov	r1, r4
 80070cc:	1a51      	subs	r1, r2, r1
 80070ce:	6139      	str	r1, [r7, #16]
 80070d0:	4629      	mov	r1, r5
 80070d2:	eb63 0301 	sbc.w	r3, r3, r1
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070e4:	4659      	mov	r1, fp
 80070e6:	018b      	lsls	r3, r1, #6
 80070e8:	4651      	mov	r1, sl
 80070ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80070ee:	4651      	mov	r1, sl
 80070f0:	018a      	lsls	r2, r1, #6
 80070f2:	4651      	mov	r1, sl
 80070f4:	ebb2 0801 	subs.w	r8, r2, r1
 80070f8:	4659      	mov	r1, fp
 80070fa:	eb63 0901 	sbc.w	r9, r3, r1
 80070fe:	f04f 0200 	mov.w	r2, #0
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800710a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800710e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007112:	4690      	mov	r8, r2
 8007114:	4699      	mov	r9, r3
 8007116:	4623      	mov	r3, r4
 8007118:	eb18 0303 	adds.w	r3, r8, r3
 800711c:	60bb      	str	r3, [r7, #8]
 800711e:	462b      	mov	r3, r5
 8007120:	eb49 0303 	adc.w	r3, r9, r3
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007132:	4629      	mov	r1, r5
 8007134:	024b      	lsls	r3, r1, #9
 8007136:	4621      	mov	r1, r4
 8007138:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800713c:	4621      	mov	r1, r4
 800713e:	024a      	lsls	r2, r1, #9
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007146:	2200      	movs	r2, #0
 8007148:	62bb      	str	r3, [r7, #40]	; 0x28
 800714a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800714c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007150:	f7f9 f842 	bl	80001d8 <__aeabi_uldivmod>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	4613      	mov	r3, r2
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800715c:	e058      	b.n	8007210 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715e:	4b38      	ldr	r3, [pc, #224]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	099b      	lsrs	r3, r3, #6
 8007164:	2200      	movs	r2, #0
 8007166:	4618      	mov	r0, r3
 8007168:	4611      	mov	r1, r2
 800716a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	2300      	movs	r3, #0
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
 8007174:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	f04f 0000 	mov.w	r0, #0
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	0159      	lsls	r1, r3, #5
 8007186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800718a:	0150      	lsls	r0, r2, #5
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	4641      	mov	r1, r8
 8007192:	ebb2 0a01 	subs.w	sl, r2, r1
 8007196:	4649      	mov	r1, r9
 8007198:	eb63 0b01 	sbc.w	fp, r3, r1
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	f04f 0300 	mov.w	r3, #0
 80071a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071b0:	ebb2 040a 	subs.w	r4, r2, sl
 80071b4:	eb63 050b 	sbc.w	r5, r3, fp
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	00eb      	lsls	r3, r5, #3
 80071c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071c6:	00e2      	lsls	r2, r4, #3
 80071c8:	4614      	mov	r4, r2
 80071ca:	461d      	mov	r5, r3
 80071cc:	4643      	mov	r3, r8
 80071ce:	18e3      	adds	r3, r4, r3
 80071d0:	603b      	str	r3, [r7, #0]
 80071d2:	464b      	mov	r3, r9
 80071d4:	eb45 0303 	adc.w	r3, r5, r3
 80071d8:	607b      	str	r3, [r7, #4]
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071e6:	4629      	mov	r1, r5
 80071e8:	028b      	lsls	r3, r1, #10
 80071ea:	4621      	mov	r1, r4
 80071ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071f0:	4621      	mov	r1, r4
 80071f2:	028a      	lsls	r2, r1, #10
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071fa:	2200      	movs	r2, #0
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	61fa      	str	r2, [r7, #28]
 8007200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007204:	f7f8 ffe8 	bl	80001d8 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4613      	mov	r3, r2
 800720e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <HAL_RCC_GetSysClockFreq+0x200>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	3301      	adds	r3, #1
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007224:	fbb2 f3f3 	udiv	r3, r2, r3
 8007228:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800722a:	e002      	b.n	8007232 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <HAL_RCC_GetSysClockFreq+0x204>)
 800722e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007234:	4618      	mov	r0, r3
 8007236:	3750      	adds	r7, #80	; 0x50
 8007238:	46bd      	mov	sp, r7
 800723a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723e:	bf00      	nop
 8007240:	40023800 	.word	0x40023800
 8007244:	00f42400 	.word	0x00f42400
 8007248:	007a1200 	.word	0x007a1200

0800724c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007250:	4b03      	ldr	r3, [pc, #12]	; (8007260 <HAL_RCC_GetHCLKFreq+0x14>)
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20000038 	.word	0x20000038

08007264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007268:	f7ff fff0 	bl	800724c <HAL_RCC_GetHCLKFreq>
 800726c:	4602      	mov	r2, r0
 800726e:	4b05      	ldr	r3, [pc, #20]	; (8007284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	0a9b      	lsrs	r3, r3, #10
 8007274:	f003 0307 	and.w	r3, r3, #7
 8007278:	4903      	ldr	r1, [pc, #12]	; (8007288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800727a:	5ccb      	ldrb	r3, [r1, r3]
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007280:	4618      	mov	r0, r3
 8007282:	bd80      	pop	{r7, pc}
 8007284:	40023800 	.word	0x40023800
 8007288:	0800f804 	.word	0x0800f804

0800728c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b086      	sub	sp, #24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d105      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d038      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072b4:	4b68      	ldr	r3, [pc, #416]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ba:	f7fa fea1 	bl	8002000 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072c0:	e008      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072c2:	f7fa fe9d 	bl	8002000 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e0bd      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072d4:	4b61      	ldr	r3, [pc, #388]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f0      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685a      	ldr	r2, [r3, #4]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	019b      	lsls	r3, r3, #6
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	071b      	lsls	r3, r3, #28
 80072f2:	495a      	ldr	r1, [pc, #360]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072fa:	4b57      	ldr	r3, [pc, #348]	; (8007458 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007300:	f7fa fe7e 	bl	8002000 <HAL_GetTick>
 8007304:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007308:	f7fa fe7a 	bl	8002000 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e09a      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800731a:	4b50      	ldr	r3, [pc, #320]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 8083 	beq.w	800743a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	4b48      	ldr	r3, [pc, #288]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	4a47      	ldr	r2, [pc, #284]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007342:	6413      	str	r3, [r2, #64]	; 0x40
 8007344:	4b45      	ldr	r3, [pc, #276]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007350:	4b43      	ldr	r3, [pc, #268]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a42      	ldr	r2, [pc, #264]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800735a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800735c:	f7fa fe50 	bl	8002000 <HAL_GetTick>
 8007360:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007362:	e008      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007364:	f7fa fe4c 	bl	8002000 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	2b02      	cmp	r3, #2
 8007370:	d901      	bls.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e06c      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007376:	4b3a      	ldr	r3, [pc, #232]	; (8007460 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0f0      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007382:	4b36      	ldr	r3, [pc, #216]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02f      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	429a      	cmp	r2, r3
 800739e:	d028      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073a0:	4b2e      	ldr	r3, [pc, #184]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073aa:	4b2e      	ldr	r3, [pc, #184]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073b0:	4b2c      	ldr	r3, [pc, #176]	; (8007464 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80073b6:	4a29      	ldr	r2, [pc, #164]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073bc:	4b27      	ldr	r3, [pc, #156]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d114      	bne.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80073c8:	f7fa fe1a 	bl	8002000 <HAL_GetTick>
 80073cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ce:	e00a      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d0:	f7fa fe16 	bl	8002000 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	f241 3288 	movw	r2, #5000	; 0x1388
 80073de:	4293      	cmp	r3, r2
 80073e0:	d901      	bls.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e034      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e6:	4b1d      	ldr	r3, [pc, #116]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ee      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073fe:	d10d      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007400:	4b16      	ldr	r3, [pc, #88]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007414:	4911      	ldr	r1, [pc, #68]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007416:	4313      	orrs	r3, r2
 8007418:	608b      	str	r3, [r1, #8]
 800741a:	e005      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4a0e      	ldr	r2, [pc, #56]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007422:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007426:	6093      	str	r3, [r2, #8]
 8007428:	4b0c      	ldr	r3, [pc, #48]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007434:	4909      	ldr	r1, [pc, #36]	; (800745c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007436:	4313      	orrs	r3, r2
 8007438:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	7d1a      	ldrb	r2, [r3, #20]
 800744a:	4b07      	ldr	r3, [pc, #28]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800744c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	42470068 	.word	0x42470068
 800745c:	40023800 	.word	0x40023800
 8007460:	40007000 	.word	0x40007000
 8007464:	42470e40 	.word	0x42470e40
 8007468:	424711e0 	.word	0x424711e0

0800746c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2203      	movs	r2, #3
 8007478:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007480:	099b      	lsrs	r3, r3, #6
 8007482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800748c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007490:	0f1b      	lsrs	r3, r3, #28
 8007492:	f003 0207 	and.w	r2, r3, #7
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 800749c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80074a8:	4b10      	ldr	r3, [pc, #64]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80074b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80074c2:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80074c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	751a      	strb	r2, [r3, #20]
}
 80074de:	bf00      	nop
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800

080074f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b01      	cmp	r3, #1
 800750c:	d140      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800750e:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d131      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007526:	617b      	str	r3, [r7, #20]
          break;
 8007528:	e031      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800752a:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007536:	d109      	bne.n	800754c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007538:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800753a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800753e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007542:	4a19      	ldr	r2, [pc, #100]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	613b      	str	r3, [r7, #16]
 800754a:	e008      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800754c:	4b14      	ldr	r3, [pc, #80]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800754e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007552:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007564:	099b      	lsrs	r3, r3, #6
 8007566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007578:	0f1b      	lsrs	r3, r3, #28
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	617b      	str	r3, [r7, #20]
          break;
 8007586:	e002      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
          break;
 800758c:	bf00      	nop
        }
      }
      break;
 800758e:	bf00      	nop
    }
  }
  return frequency;
 8007590:	697b      	ldr	r3, [r7, #20]
}
 8007592:	4618      	mov	r0, r3
 8007594:	371c      	adds	r7, #28
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40023800 	.word	0x40023800
 80075a4:	00bb8000 	.word	0x00bb8000
 80075a8:	007a1200 	.word	0x007a1200
 80075ac:	00f42400 	.word	0x00f42400

080075b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075b0:	b084      	sub	sp, #16
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	f107 001c 	add.w	r0, r7, #28
 80075be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d122      	bne.n	800760e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d105      	bne.n	8007602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f9c0 	bl	8007988 <USB_CoreReset>
 8007608:	4603      	mov	r3, r0
 800760a:	73fb      	strb	r3, [r7, #15]
 800760c:	e01a      	b.n	8007644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9b4 	bl	8007988 <USB_CoreReset>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	639a      	str	r2, [r3, #56]	; 0x38
 8007636:	e005      	b.n	8007644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007646:	2b01      	cmp	r3, #1
 8007648:	d10b      	bne.n	8007662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f043 0206 	orr.w	r2, r3, #6
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f043 0220 	orr.w	r2, r3, #32
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800766e:	b004      	add	sp, #16
 8007670:	4770      	bx	lr

08007672 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f023 0201 	bic.w	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d115      	bne.n	8007704 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076e4:	2001      	movs	r0, #1
 80076e6:	f7fa fc97 	bl	8002018 <HAL_Delay>
      ms++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	3301      	adds	r3, #1
 80076ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f93a 	bl	800796a <USB_GetMode>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d01e      	beq.n	800773a <USB_SetCurrentMode+0x84>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b31      	cmp	r3, #49	; 0x31
 8007700:	d9f0      	bls.n	80076e4 <USB_SetCurrentMode+0x2e>
 8007702:	e01a      	b.n	800773a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d115      	bne.n	8007736 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007716:	2001      	movs	r0, #1
 8007718:	f7fa fc7e 	bl	8002018 <HAL_Delay>
      ms++;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3301      	adds	r3, #1
 8007720:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f921 	bl	800796a <USB_GetMode>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d005      	beq.n	800773a <USB_SetCurrentMode+0x84>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b31      	cmp	r3, #49	; 0x31
 8007732:	d9f0      	bls.n	8007716 <USB_SetCurrentMode+0x60>
 8007734:	e001      	b.n	800773a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e005      	b.n	8007746 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2b32      	cmp	r3, #50	; 0x32
 800773e:	d101      	bne.n	8007744 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e000      	b.n	8007746 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3301      	adds	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <USB_FlushTxFifo+0x64>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d901      	bls.n	8007770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e01b      	b.n	80077a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	daf2      	bge.n	800775e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	019b      	lsls	r3, r3, #6
 8007780:	f043 0220 	orr.w	r2, r3, #32
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <USB_FlushTxFifo+0x64>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e006      	b.n	80077a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d0f0      	beq.n	8007788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	00030d40 	.word	0x00030d40

080077b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a11      	ldr	r2, [pc, #68]	; (8007814 <USB_FlushRxFifo+0x5c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e018      	b.n	8007808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	daf2      	bge.n	80077c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2210      	movs	r2, #16
 80077e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3301      	adds	r3, #1
 80077ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4a08      	ldr	r2, [pc, #32]	; (8007814 <USB_FlushRxFifo+0x5c>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d901      	bls.n	80077fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e006      	b.n	8007808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0310 	and.w	r3, r3, #16
 8007802:	2b10      	cmp	r3, #16
 8007804:	d0f0      	beq.n	80077e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	00030d40 	.word	0x00030d40

08007818 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007818:	b480      	push	{r7}
 800781a:	b089      	sub	sp, #36	; 0x24
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4611      	mov	r1, r2
 8007824:	461a      	mov	r2, r3
 8007826:	460b      	mov	r3, r1
 8007828:	71fb      	strb	r3, [r7, #7]
 800782a:	4613      	mov	r3, r2
 800782c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007836:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	d123      	bne.n	8007886 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800783e:	88bb      	ldrh	r3, [r7, #4]
 8007840:	3303      	adds	r3, #3
 8007842:	089b      	lsrs	r3, r3, #2
 8007844:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007846:	2300      	movs	r3, #0
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	e018      	b.n	800787e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800784c:	79fb      	ldrb	r3, [r7, #7]
 800784e:	031a      	lsls	r2, r3, #12
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	4413      	add	r3, r2
 8007854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007858:	461a      	mov	r2, r3
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	3301      	adds	r3, #1
 8007864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	3301      	adds	r3, #1
 800786a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	3301      	adds	r3, #1
 8007870:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	3301      	adds	r3, #1
 800787c:	61bb      	str	r3, [r7, #24]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	429a      	cmp	r2, r3
 8007884:	d3e2      	bcc.n	800784c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3724      	adds	r7, #36	; 0x24
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007894:	b480      	push	{r7}
 8007896:	b08b      	sub	sp, #44	; 0x2c
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	4613      	mov	r3, r2
 80078a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	089b      	lsrs	r3, r3, #2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078ba:	2300      	movs	r3, #0
 80078bc:	623b      	str	r3, [r7, #32]
 80078be:	e014      	b.n	80078ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	3301      	adds	r3, #1
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	3301      	adds	r3, #1
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	3301      	adds	r3, #1
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e0:	3301      	adds	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	3301      	adds	r3, #1
 80078e8:	623b      	str	r3, [r7, #32]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3e6      	bcc.n	80078c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078f2:	8bfb      	ldrh	r3, [r7, #30]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01e      	beq.n	8007936 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	461a      	mov	r2, r3
 8007904:	f107 0310 	add.w	r3, r7, #16
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
 8007918:	b2da      	uxtb	r2, r3
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	701a      	strb	r2, [r3, #0]
      i++;
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	3301      	adds	r3, #1
 8007922:	623b      	str	r3, [r7, #32]
      pDest++;
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	3301      	adds	r3, #1
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800792a:	8bfb      	ldrh	r3, [r7, #30]
 800792c:	3b01      	subs	r3, #1
 800792e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007930:	8bfb      	ldrh	r3, [r7, #30]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1ea      	bne.n	800790c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007938:	4618      	mov	r0, r3
 800793a:	372c      	adds	r7, #44	; 0x2c
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4013      	ands	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800795c:	68fb      	ldr	r3, [r7, #12]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800796a:	b480      	push	{r7}
 800796c:	b083      	sub	sp, #12
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f003 0301 	and.w	r3, r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a13      	ldr	r2, [pc, #76]	; (80079ec <USB_CoreReset+0x64>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d901      	bls.n	80079a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e01b      	b.n	80079de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	daf2      	bge.n	8007994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	f043 0201 	orr.w	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3301      	adds	r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4a09      	ldr	r2, [pc, #36]	; (80079ec <USB_CoreReset+0x64>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d901      	bls.n	80079d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e006      	b.n	80079de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d0f0      	beq.n	80079be <USB_CoreReset+0x36>

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3714      	adds	r7, #20
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	00030d40 	.word	0x00030d40

080079f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079f0:	b084      	sub	sp, #16
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b086      	sub	sp, #24
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80079fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a10:	461a      	mov	r2, r3
 8007a12:	2300      	movs	r3, #0
 8007a14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d018      	beq.n	8007a78 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d10a      	bne.n	8007a62 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a5a:	f043 0304 	orr.w	r3, r3, #4
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	e014      	b.n	8007a8c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a70:	f023 0304 	bic.w	r3, r3, #4
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e009      	b.n	8007a8c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a86:	f023 0304 	bic.w	r3, r3, #4
 8007a8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a8c:	2110      	movs	r1, #16
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fe5e 	bl	8007750 <USB_FlushTxFifo>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff fe8a 	bl	80077b8 <USB_FlushRxFifo>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d001      	beq.n	8007aae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	e015      	b.n	8007ae0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	3301      	adds	r3, #1
 8007ade:	613b      	str	r3, [r7, #16]
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d3e5      	bcc.n	8007ab4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f04f 32ff 	mov.w	r2, #4294967295
 8007af4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a13      	ldr	r2, [pc, #76]	; (8007b5c <USB_HostInit+0x16c>)
 8007b0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a13      	ldr	r2, [pc, #76]	; (8007b60 <USB_HostInit+0x170>)
 8007b14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007b18:	e009      	b.n	8007b2e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2280      	movs	r2, #128	; 0x80
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a10      	ldr	r2, [pc, #64]	; (8007b64 <USB_HostInit+0x174>)
 8007b24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a0f      	ldr	r2, [pc, #60]	; (8007b68 <USB_HostInit+0x178>)
 8007b2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d105      	bne.n	8007b40 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	f043 0210 	orr.w	r2, r3, #16
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	699a      	ldr	r2, [r3, #24]
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <USB_HostInit+0x17c>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b58:	b004      	add	sp, #16
 8007b5a:	4770      	bx	lr
 8007b5c:	01000200 	.word	0x01000200
 8007b60:	00e00300 	.word	0x00e00300
 8007b64:	00600080 	.word	0x00600080
 8007b68:	004000e0 	.word	0x004000e0
 8007b6c:	a3200008 	.word	0xa3200008

08007b70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	68f9      	ldr	r1, [r7, #12]
 8007ba4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bac:	78fb      	ldrb	r3, [r7, #3]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d107      	bne.n	8007bc2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007bbe:	6053      	str	r3, [r2, #4]
 8007bc0:	e009      	b.n	8007bd6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d106      	bne.n	8007bd6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8007bd4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c12:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c14:	2064      	movs	r0, #100	; 0x64
 8007c16:	f7fa f9ff 	bl	8002018 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c26:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c28:	200a      	movs	r0, #10
 8007c2a:	f7fa f9f5 	bl	8002018 <HAL_Delay>

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007c5c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d109      	bne.n	8007c7c <USB_DriveVbus+0x44>
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d106      	bne.n	8007c7c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c7a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c86:	d109      	bne.n	8007c9c <USB_DriveVbus+0x64>
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c9a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	0c5b      	lsrs	r3, r3, #17
 8007cc8:	f003 0303 	and.w	r3, r3, #3
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3714      	adds	r7, #20
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	b29b      	uxth	r3, r3
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	70fb      	strb	r3, [r7, #3]
 8007d0e:	460b      	mov	r3, r1
 8007d10:	70bb      	strb	r3, [r7, #2]
 8007d12:	4613      	mov	r3, r2
 8007d14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d87e      	bhi.n	8007e38 <USB_HC_Init+0x13c>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USB_HC_Init+0x44>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007dfb 	.word	0x08007dfb
 8007d48:	08007d51 	.word	0x08007d51
 8007d4c:	08007dbd 	.word	0x08007dbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007d62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	da10      	bge.n	8007d8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	693a      	ldr	r2, [r7, #16]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d8a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007d8c:	e057      	b.n	8007e3e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d051      	beq.n	8007e3e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007db4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007db8:	60d3      	str	r3, [r2, #12]
      break;
 8007dba:	e040      	b.n	8007e3e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dbc:	78fb      	ldrb	r3, [r7, #3]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f240 639d 	movw	r3, #1693	; 0x69d
 8007dce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007dd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	da34      	bge.n	8007e42 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de4:	68db      	ldr	r3, [r3, #12]
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007df6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007df8:	e023      	b.n	8007e42 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	015a      	lsls	r2, r3, #5
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	4413      	add	r3, r2
 8007e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e06:	461a      	mov	r2, r3
 8007e08:	f240 2325 	movw	r3, #549	; 0x225
 8007e0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	da17      	bge.n	8007e46 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e16:	78fb      	ldrb	r3, [r7, #3]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	78fa      	ldrb	r2, [r7, #3]
 8007e26:	0151      	lsls	r1, r2, #5
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	440a      	add	r2, r1
 8007e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e30:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007e34:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e36:	e006      	b.n	8007e46 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	77fb      	strb	r3, [r7, #31]
      break;
 8007e3c:	e004      	b.n	8007e48 <USB_HC_Init+0x14c>
      break;
 8007e3e:	bf00      	nop
 8007e40:	e002      	b.n	8007e48 <USB_HC_Init+0x14c>
      break;
 8007e42:	bf00      	nop
 8007e44:	e000      	b.n	8007e48 <USB_HC_Init+0x14c>
      break;
 8007e46:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	78fa      	ldrb	r2, [r7, #3]
 8007e58:	0151      	lsls	r1, r2, #5
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e62:	f043 0302 	orr.w	r3, r3, #2
 8007e66:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	2101      	movs	r1, #1
 8007e78:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e82:	4313      	orrs	r3, r2
 8007e84:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007e92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da03      	bge.n	8007ea2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	e001      	b.n	8007ea6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7ff feff 	bl	8007caa <USB_GetHostSpeed>
 8007eac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007eae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d106      	bne.n	8007ec4 <USB_HC_Init+0x1c8>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d003      	beq.n	8007ec4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e001      	b.n	8007ec8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ec8:	787b      	ldrb	r3, [r7, #1]
 8007eca:	059b      	lsls	r3, r3, #22
 8007ecc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ed0:	78bb      	ldrb	r3, [r7, #2]
 8007ed2:	02db      	lsls	r3, r3, #11
 8007ed4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ed8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007eda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007ede:	049b      	lsls	r3, r3, #18
 8007ee0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ee4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007ee6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007eec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ef2:	78fb      	ldrb	r3, [r7, #3]
 8007ef4:	0159      	lsls	r1, r3, #5
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	440b      	add	r3, r1
 8007efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007efe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f04:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d003      	beq.n	8007f16 <USB_HC_Init+0x21a>
 8007f0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d10f      	bne.n	8007f36 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	78fa      	ldrb	r2, [r7, #3]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f34:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08c      	sub	sp, #48	; 0x30
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	4613      	mov	r3, r2
 8007f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	785b      	ldrb	r3, [r3, #1]
 8007f56:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d02d      	beq.n	8007fc6 <USB_HC_StartXfer+0x86>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	791b      	ldrb	r3, [r3, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d129      	bne.n	8007fc6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d117      	bne.n	8007fa8 <USB_HC_StartXfer+0x68>
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	79db      	ldrb	r3, [r3, #7]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <USB_HC_StartXfer+0x48>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	79db      	ldrb	r3, [r3, #7]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d10f      	bne.n	8007fa8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	6a3a      	ldr	r2, [r7, #32]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fa6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007fa8:	79fb      	ldrb	r3, [r7, #7]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <USB_HC_StartXfer+0x86>
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	795b      	ldrb	r3, [r3, #5]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d107      	bne.n	8007fc6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	785b      	ldrb	r3, [r3, #1]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fa0f 	bl	80083e0 <USB_DoPing>
      return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e0f8      	b.n	80081b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d018      	beq.n	8008000 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	8912      	ldrh	r2, [r2, #8]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	8912      	ldrh	r2, [r2, #8]
 8007fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007fe4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007fe6:	8b7b      	ldrh	r3, [r7, #26]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d90b      	bls.n	8008004 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007fec:	8b7b      	ldrh	r3, [r7, #26]
 8007fee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	8912      	ldrh	r2, [r2, #8]
 8007ff6:	fb03 f202 	mul.w	r2, r3, r2
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	611a      	str	r2, [r3, #16]
 8007ffe:	e001      	b.n	8008004 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008000:	2301      	movs	r3, #1
 8008002:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	78db      	ldrb	r3, [r3, #3]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800800c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	8912      	ldrh	r2, [r2, #8]
 8008012:	fb03 f202 	mul.w	r2, r3, r2
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	611a      	str	r2, [r3, #16]
 800801a:	e003      	b.n	8008024 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	695a      	ldr	r2, [r3, #20]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800802c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	4b63      	ldr	r3, [pc, #396]	; (80081c0 <USB_HC_StartXfer+0x280>)
 8008032:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008034:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	7a9b      	ldrb	r3, [r3, #10]
 800803a:	075b      	lsls	r3, r3, #29
 800803c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008040:	69f9      	ldr	r1, [r7, #28]
 8008042:	0148      	lsls	r0, r1, #5
 8008044:	6a39      	ldr	r1, [r7, #32]
 8008046:	4401      	add	r1, r0
 8008048:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800804c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800804e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	68d9      	ldr	r1, [r3, #12]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008066:	460a      	mov	r2, r1
 8008068:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf0c      	ite	eq
 800807a:	2301      	moveq	r3, #1
 800807c:	2300      	movne	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	440a      	add	r2, r1
 8008098:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800809c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	7e7b      	ldrb	r3, [r7, #25]
 80080b2:	075b      	lsls	r3, r3, #29
 80080b4:	69f9      	ldr	r1, [r7, #28]
 80080b6:	0148      	lsls	r0, r1, #5
 80080b8:	6a39      	ldr	r1, [r7, #32]
 80080ba:	4401      	add	r1, r0
 80080bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80080c0:	4313      	orrs	r3, r2
 80080c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80080da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	78db      	ldrb	r3, [r3, #3]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ea:	613b      	str	r3, [r7, #16]
 80080ec:	e003      	b.n	80080f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	461a      	mov	r2, r3
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e04e      	b.n	80081b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	78db      	ldrb	r3, [r3, #3]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d149      	bne.n	80081b6 <USB_HC_StartXfer+0x276>
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d045      	beq.n	80081b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	79db      	ldrb	r3, [r3, #7]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d830      	bhi.n	8008194 <USB_HC_StartXfer+0x254>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <USB_HC_StartXfer+0x1f8>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	08008149 	.word	0x08008149
 800813c:	0800816d 	.word	0x0800816d
 8008140:	08008149 	.word	0x08008149
 8008144:	0800816d 	.word	0x0800816d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	3303      	adds	r3, #3
 800814e:	089b      	lsrs	r3, r3, #2
 8008150:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008152:	8afa      	ldrh	r2, [r7, #22]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	b29b      	uxth	r3, r3
 800815a:	429a      	cmp	r2, r3
 800815c:	d91c      	bls.n	8008198 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	f043 0220 	orr.w	r2, r3, #32
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	619a      	str	r2, [r3, #24]
        }
        break;
 800816a:	e015      	b.n	8008198 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	3303      	adds	r3, #3
 8008172:	089b      	lsrs	r3, r3, #2
 8008174:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008176:	8afa      	ldrh	r2, [r7, #22]
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800817e:	691b      	ldr	r3, [r3, #16]
 8008180:	b29b      	uxth	r3, r3
 8008182:	429a      	cmp	r2, r3
 8008184:	d90a      	bls.n	800819c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	619a      	str	r2, [r3, #24]
        }
        break;
 8008192:	e003      	b.n	800819c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <USB_HC_StartXfer+0x25e>
        break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <USB_HC_StartXfer+0x25e>
        break;
 800819c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	68d9      	ldr	r1, [r3, #12]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	785a      	ldrb	r2, [r3, #1]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2000      	movs	r0, #0
 80081ae:	9000      	str	r0, [sp, #0]
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f7ff fb31 	bl	8007818 <USB_WritePacket>
  }

  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3728      	adds	r7, #40	; 0x28
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	1ff80000 	.word	0x1ff80000

080081c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	b29b      	uxth	r3, r3
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b089      	sub	sp, #36	; 0x24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	0c9b      	lsrs	r3, r3, #18
 800820e:	f003 0303 	and.w	r3, r3, #3
 8008212:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	0fdb      	lsrs	r3, r3, #31
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b20      	cmp	r3, #32
 8008234:	d104      	bne.n	8008240 <USB_HC_Halt+0x5a>
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d101      	bne.n	8008240 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	e0c8      	b.n	80083d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d002      	beq.n	800824c <USB_HC_Halt+0x66>
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d163      	bne.n	8008314 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	4413      	add	r3, r2
 8008254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	440a      	add	r2, r1
 8008262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008266:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800826a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b00      	cmp	r3, #0
 8008276:	f040 80ab 	bne.w	80083d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d133      	bne.n	80082ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	440a      	add	r2, r1
 800829c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	69fa      	ldr	r2, [r7, #28]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d2:	d81d      	bhi.n	8008310 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ea:	d0ec      	beq.n	80082c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80082ec:	e070      	b.n	80083d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	015a      	lsls	r2, r3, #5
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	4413      	add	r3, r2
 80082f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	0151      	lsls	r1, r2, #5
 8008300:	69fa      	ldr	r2, [r7, #28]
 8008302:	440a      	add	r2, r1
 8008304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800830c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800830e:	e05f      	b.n	80083d0 <USB_HC_Halt+0x1ea>
            break;
 8008310:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008312:	e05d      	b.n	80083d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	4413      	add	r3, r2
 800831c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	0151      	lsls	r1, r2, #5
 8008326:	69fa      	ldr	r2, [r7, #28]
 8008328:	440a      	add	r2, r1
 800832a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800832e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008332:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d133      	bne.n	80083ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	015a      	lsls	r2, r3, #5
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	4413      	add	r3, r2
 800834c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69ba      	ldr	r2, [r7, #24]
 8008354:	0151      	lsls	r1, r2, #5
 8008356:	69fa      	ldr	r2, [r7, #28]
 8008358:	440a      	add	r2, r1
 800835a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800835e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008362:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	69ba      	ldr	r2, [r7, #24]
 8008374:	0151      	lsls	r1, r2, #5
 8008376:	69fa      	ldr	r2, [r7, #28]
 8008378:	440a      	add	r2, r1
 800837a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800837e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008382:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3301      	adds	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008390:	d81d      	bhi.n	80083ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	015a      	lsls	r2, r3, #5
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	4413      	add	r3, r2
 800839a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a8:	d0ec      	beq.n	8008384 <USB_HC_Halt+0x19e>
 80083aa:	e011      	b.n	80083d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	e000      	b.n	80083d0 <USB_HC_Halt+0x1ea>
          break;
 80083ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3724      	adds	r7, #36	; 0x24
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
	...

080083e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	460b      	mov	r3, r1
 80083ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80083f4:	2301      	movs	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	04da      	lsls	r2, r3, #19
 80083fc:	4b15      	ldr	r3, [pc, #84]	; (8008454 <USB_DoPing+0x74>)
 80083fe:	4013      	ands	r3, r2
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	0151      	lsls	r1, r2, #5
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	440a      	add	r2, r1
 8008408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800840c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008410:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008428:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008430:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	4413      	add	r3, r2
 800843a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843e:	461a      	mov	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	1ff80000 	.word	0x1ff80000

08008458 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b088      	sub	sp, #32
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff f911 	bl	8007694 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008472:	2110      	movs	r1, #16
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff f96b 	bl	8007750 <USB_FlushTxFifo>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff f997 	bl	80077b8 <USB_FlushRxFifo>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
 8008498:	e01f      	b.n	80084da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80084c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084ce:	461a      	mov	r2, r3
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	3301      	adds	r3, #1
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b0f      	cmp	r3, #15
 80084de:	d9dc      	bls.n	800849a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	e034      	b.n	8008550 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008504:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800850c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4413      	add	r3, r2
 8008516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851a:	461a      	mov	r2, r3
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	3301      	adds	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800852c:	d80c      	bhi.n	8008548 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008544:	d0ec      	beq.n	8008520 <USB_StopHost+0xc8>
 8008546:	e000      	b.n	800854a <USB_StopHost+0xf2>
        break;
 8008548:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	3301      	adds	r3, #1
 800854e:	61bb      	str	r3, [r7, #24]
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	2b0f      	cmp	r3, #15
 8008554:	d9c7      	bls.n	80084e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800855c:	461a      	mov	r2, r3
 800855e:	f04f 33ff 	mov.w	r3, #4294967295
 8008562:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f7ff f880 	bl	8007672 <USB_EnableGlobalInt>

  return ret;
 8008572:	7ffb      	ldrb	r3, [r7, #31]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8008580:	4904      	ldr	r1, [pc, #16]	; (8008594 <MX_FATFS_Init+0x18>)
 8008582:	4805      	ldr	r0, [pc, #20]	; (8008598 <MX_FATFS_Init+0x1c>)
 8008584:	f006 fb36 	bl	800ebf4 <FATFS_LinkDriver>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	4b03      	ldr	r3, [pc, #12]	; (800859c <MX_FATFS_Init+0x20>)
 800858e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008590:	bf00      	nop
 8008592:	bd80      	pop	{r7, pc}
 8008594:	2000192c 	.word	0x2000192c
 8008598:	0800f814 	.word	0x0800f814
 800859c:	20001928 	.word	0x20001928

080085a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80085a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	4619      	mov	r1, r3
 80085da:	4808      	ldr	r0, [pc, #32]	; (80085fc <USBH_status+0x34>)
 80085dc:	f000 fe32 	bl	8009244 <USBH_MSC_UnitIsReady>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d002      	beq.n	80085ec <USBH_status+0x24>
  {
    res = RES_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]
 80085ea:	e001      	b.n	80085f0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20001d98 	.word	0x20001d98

08008600 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b094      	sub	sp, #80	; 0x50
 8008604:	af02      	add	r7, sp, #8
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008616:	7bf9      	ldrb	r1, [r7, #15]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	4813      	ldr	r0, [pc, #76]	; (8008670 <USBH_read+0x70>)
 8008622:	f000 fe59 	bl	80092d8 <USBH_MSC_Read>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <USBH_read+0x34>
  {
    res = RES_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008632:	e017      	b.n	8008664 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008634:	f107 0210 	add.w	r2, r7, #16
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	4619      	mov	r1, r3
 800863c:	480c      	ldr	r0, [pc, #48]	; (8008670 <USBH_read+0x70>)
 800863e:	f000 fe27 	bl	8009290 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008642:	7f7b      	ldrb	r3, [r7, #29]
 8008644:	2b3a      	cmp	r3, #58	; 0x3a
 8008646:	d005      	beq.n	8008654 <USBH_read+0x54>
 8008648:	2b3a      	cmp	r3, #58	; 0x3a
 800864a:	dc07      	bgt.n	800865c <USBH_read+0x5c>
 800864c:	2b04      	cmp	r3, #4
 800864e:	d001      	beq.n	8008654 <USBH_read+0x54>
 8008650:	2b28      	cmp	r3, #40	; 0x28
 8008652:	d103      	bne.n	800865c <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008654:	2303      	movs	r3, #3
 8008656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800865a:	e003      	b.n	8008664 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008662:	bf00      	nop
    }
  }

  return res;
 8008664:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008668:	4618      	mov	r0, r3
 800866a:	3748      	adds	r7, #72	; 0x48
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20001d98 	.word	0x20001d98

08008674 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b094      	sub	sp, #80	; 0x50
 8008678:	af02      	add	r7, sp, #8
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800868a:	7bf9      	ldrb	r1, [r7, #15]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	9300      	str	r3, [sp, #0]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	4817      	ldr	r0, [pc, #92]	; (80086f4 <USBH_write+0x80>)
 8008696:	f000 fe88 	bl	80093aa <USBH_MSC_Write>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d103      	bne.n	80086a8 <USBH_write+0x34>
  {
    res = RES_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80086a6:	e01f      	b.n	80086e8 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80086a8:	f107 0210 	add.w	r2, r7, #16
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4619      	mov	r1, r3
 80086b0:	4810      	ldr	r0, [pc, #64]	; (80086f4 <USBH_write+0x80>)
 80086b2:	f000 fded 	bl	8009290 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80086b6:	7f7b      	ldrb	r3, [r7, #29]
 80086b8:	2b3a      	cmp	r3, #58	; 0x3a
 80086ba:	d00d      	beq.n	80086d8 <USBH_write+0x64>
 80086bc:	2b3a      	cmp	r3, #58	; 0x3a
 80086be:	dc0f      	bgt.n	80086e0 <USBH_write+0x6c>
 80086c0:	2b28      	cmp	r3, #40	; 0x28
 80086c2:	d009      	beq.n	80086d8 <USBH_write+0x64>
 80086c4:	2b28      	cmp	r3, #40	; 0x28
 80086c6:	dc0b      	bgt.n	80086e0 <USBH_write+0x6c>
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d005      	beq.n	80086d8 <USBH_write+0x64>
 80086cc:	2b27      	cmp	r3, #39	; 0x27
 80086ce:	d107      	bne.n	80086e0 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80086d0:	2302      	movs	r3, #2
 80086d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086d6:	e007      	b.n	80086e8 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80086d8:	2303      	movs	r3, #3
 80086da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086de:	e003      	b.n	80086e8 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80086e6:	bf00      	nop
    }
  }

  return res;
 80086e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3748      	adds	r7, #72	; 0x48
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20001d98 	.word	0x20001d98

080086f8 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b090      	sub	sp, #64	; 0x40
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	603a      	str	r2, [r7, #0]
 8008702:	71fb      	strb	r3, [r7, #7]
 8008704:	460b      	mov	r3, r1
 8008706:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800870e:	79bb      	ldrb	r3, [r7, #6]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d852      	bhi.n	80087ba <USBH_ioctl+0xc2>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBH_ioctl+0x24>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008735 	.word	0x08008735
 8008724:	0800875f 	.word	0x0800875f
 8008728:	0800878b 	.word	0x0800878b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008732:	e045      	b.n	80087c0 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008734:	f107 0208 	add.w	r2, r7, #8
 8008738:	79fb      	ldrb	r3, [r7, #7]
 800873a:	4619      	mov	r1, r3
 800873c:	4823      	ldr	r0, [pc, #140]	; (80087cc <USBH_ioctl+0xd4>)
 800873e:	f000 fda7 	bl	8009290 <USBH_MSC_GetLUNInfo>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d106      	bne.n	8008756 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008754:	e034      	b.n	80087c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800875c:	e030      	b.n	80087c0 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800875e:	f107 0208 	add.w	r2, r7, #8
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	4619      	mov	r1, r3
 8008766:	4819      	ldr	r0, [pc, #100]	; (80087cc <USBH_ioctl+0xd4>)
 8008768:	f000 fd92 	bl	8009290 <USBH_MSC_GetLUNInfo>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d107      	bne.n	8008782 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008772:	8a3b      	ldrh	r3, [r7, #16]
 8008774:	461a      	mov	r2, r3
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008780:	e01e      	b.n	80087c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008788:	e01a      	b.n	80087c0 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800878a:	f107 0208 	add.w	r2, r7, #8
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	4619      	mov	r1, r3
 8008792:	480e      	ldr	r0, [pc, #56]	; (80087cc <USBH_ioctl+0xd4>)
 8008794:	f000 fd7c 	bl	8009290 <USBH_MSC_GetLUNInfo>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d109      	bne.n	80087b2 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800879e:	8a3b      	ldrh	r3, [r7, #16]
 80087a0:	0a5b      	lsrs	r3, r3, #9
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80087b0:	e006      	b.n	80087c0 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80087b8:	e002      	b.n	80087c0 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80087ba:	2304      	movs	r3, #4
 80087bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 80087c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3740      	adds	r7, #64	; 0x40
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20001d98 	.word	0x20001d98

080087d0 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af04      	add	r7, sp, #16
 80087d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087de:	7919      	ldrb	r1, [r3, #4]
 80087e0:	2350      	movs	r3, #80	; 0x50
 80087e2:	2206      	movs	r2, #6
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f001 fc6b 	bl	800a0c0 <USBH_FindInterface>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	2bff      	cmp	r3, #255	; 0xff
 80087f2:	d002      	beq.n	80087fa <USBH_MSC_InterfaceInit+0x2a>
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d901      	bls.n	80087fe <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80087fa:	2302      	movs	r3, #2
 80087fc:	e106      	b.n	8008a0c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f001 fc40 	bl	800a088 <USBH_SelectInterface>
 8008808:	4603      	mov	r3, r0
 800880a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800880c:	7bbb      	ldrb	r3, [r7, #14]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008812:	2302      	movs	r3, #2
 8008814:	e0fa      	b.n	8008a0c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800881c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008820:	f006 fdfe 	bl	800f420 <malloc>
 8008824:	4603      	mov	r3, r0
 8008826:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008838:	2302      	movs	r3, #2
 800883a:	e0e7      	b.n	8008a0c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800883c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008840:	2100      	movs	r1, #0
 8008842:	68b8      	ldr	r0, [r7, #8]
 8008844:	f006 fea8 	bl	800f598 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	211a      	movs	r1, #26
 800884e:	fb01 f303 	mul.w	r3, r1, r3
 8008852:	4413      	add	r3, r2
 8008854:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	b25b      	sxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	da16      	bge.n	800888e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008860:	7bfb      	ldrb	r3, [r7, #15]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	211a      	movs	r1, #26
 8008866:	fb01 f303 	mul.w	r3, r1, r3
 800886a:	4413      	add	r3, r2
 800886c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	211a      	movs	r1, #26
 800887c:	fb01 f303 	mul.w	r3, r1, r3
 8008880:	4413      	add	r3, r2
 8008882:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008886:	881a      	ldrh	r2, [r3, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	815a      	strh	r2, [r3, #10]
 800888c:	e015      	b.n	80088ba <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	211a      	movs	r1, #26
 8008894:	fb01 f303 	mul.w	r3, r1, r3
 8008898:	4413      	add	r3, r2
 800889a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	211a      	movs	r1, #26
 80088aa:	fb01 f303 	mul.w	r3, r1, r3
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80088b4:	881a      	ldrh	r2, [r3, #0]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	211a      	movs	r1, #26
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	b25b      	sxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	da16      	bge.n	8008900 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	211a      	movs	r1, #26
 80088d8:	fb01 f303 	mul.w	r3, r1, r3
 80088dc:	4413      	add	r3, r2
 80088de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	211a      	movs	r1, #26
 80088ee:	fb01 f303 	mul.w	r3, r1, r3
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80088f8:	881a      	ldrh	r2, [r3, #0]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	815a      	strh	r2, [r3, #10]
 80088fe:	e015      	b.n	800892c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	211a      	movs	r1, #26
 8008906:	fb01 f303 	mul.w	r3, r1, r3
 800890a:	4413      	add	r3, r2
 800890c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008910:	781a      	ldrb	r2, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	211a      	movs	r1, #26
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	4413      	add	r3, r2
 8008922:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008926:	881a      	ldrh	r2, [r3, #0]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2200      	movs	r2, #0
 8008936:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2200      	movs	r2, #0
 800893c:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	799b      	ldrb	r3, [r3, #6]
 8008942:	4619      	mov	r1, r3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f002 fed8 	bl	800b6fa <USBH_AllocPipe>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	79db      	ldrb	r3, [r3, #7]
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f002 fece 	bl	800b6fa <USBH_AllocPipe>
 800895e:	4603      	mov	r3, r0
 8008960:	461a      	mov	r2, r3
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fdc4 	bl	80094f4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	799b      	ldrb	r3, [r3, #6]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d01e      	beq.n	80089b2 <USBH_MSC_InterfaceInit+0x1e2>
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	891b      	ldrh	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01a      	beq.n	80089b2 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	7959      	ldrb	r1, [r3, #5]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	7998      	ldrb	r0, [r3, #6]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	8912      	ldrh	r2, [r2, #8]
 8008994:	9202      	str	r2, [sp, #8]
 8008996:	2202      	movs	r2, #2
 8008998:	9201      	str	r2, [sp, #4]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	4623      	mov	r3, r4
 800899e:	4602      	mov	r2, r0
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f002 fe7b 	bl	800b69c <USBH_OpenPipe>
 80089a6:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	79db      	ldrb	r3, [r3, #7]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02c      	beq.n	8008a0a <USBH_MSC_InterfaceInit+0x23a>
 80089b0:	e001      	b.n	80089b6 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e02a      	b.n	8008a0c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	895b      	ldrh	r3, [r3, #10]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d025      	beq.n	8008a0a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	7919      	ldrb	r1, [r3, #4]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	79d8      	ldrb	r0, [r3, #7]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	8952      	ldrh	r2, [r2, #10]
 80089d6:	9202      	str	r2, [sp, #8]
 80089d8:	2202      	movs	r2, #2
 80089da:	9201      	str	r2, [sp, #4]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	4623      	mov	r3, r4
 80089e0:	4602      	mov	r2, r0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 fe5a 	bl	800b69c <USBH_OpenPipe>
 80089e8:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f006 fc60 	bl	800f2b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	795b      	ldrb	r3, [r3, #5]
 80089fc:	2200      	movs	r2, #0
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f006 fc59 	bl	800f2b8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e000      	b.n	8008a0c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8008a0a:	2303      	movs	r3, #3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd90      	pop	{r4, r7, pc}

08008a14 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	795b      	ldrb	r3, [r3, #5]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00e      	beq.n	8008a4c <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	795b      	ldrb	r3, [r3, #5]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f002 fe50 	bl	800b6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	795b      	ldrb	r3, [r3, #5]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f002 fe7b 	bl	800b73c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	791b      	ldrb	r3, [r3, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00e      	beq.n	8008a72 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	791b      	ldrb	r3, [r3, #4]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f002 fe3d 	bl	800b6da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	791b      	ldrb	r3, [r3, #4]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f002 fe68 	bl	800b73c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a78:	69db      	ldr	r3, [r3, #28]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f006 fcd2 	bl	800f430 <free>
    phost->pActiveClass->pData = 0U;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a92:	2200      	movs	r2, #0
 8008a94:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	7b9b      	ldrb	r3, [r3, #14]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d041      	beq.n	8008b42 <USBH_MSC_ClassRequest+0xa2>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	dc4b      	bgt.n	8008b5a <USBH_MSC_ClassRequest+0xba>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <USBH_MSC_ClassRequest+0x2a>
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d147      	bne.n	8008b5a <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fcf1 	bl	80094b6 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d104      	bne.n	8008ae8 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d137      	bne.n	8008b5e <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d804      	bhi.n	8008b00 <USBH_MSC_ClassRequest+0x60>
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	3301      	adds	r3, #1
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	e000      	b.n	8008b02 <USBH_MSC_ClassRequest+0x62>
 8008b00:	2202      	movs	r2, #2
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b06:	2300      	movs	r3, #0
 8008b08:	73bb      	strb	r3, [r7, #14]
 8008b0a:	e014      	b.n	8008b36 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008b0c:	7bbb      	ldrb	r3, [r7, #14]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	2134      	movs	r1, #52	; 0x34
 8008b12:	fb01 f303 	mul.w	r3, r1, r3
 8008b16:	4413      	add	r3, r2
 8008b18:	3392      	adds	r3, #146	; 0x92
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008b1e:	7bbb      	ldrb	r3, [r7, #14]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	2134      	movs	r1, #52	; 0x34
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	33c1      	adds	r3, #193	; 0xc1
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008b30:	7bbb      	ldrb	r3, [r7, #14]
 8008b32:	3301      	adds	r3, #1
 8008b34:	73bb      	strb	r3, [r7, #14]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	7bba      	ldrb	r2, [r7, #14]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d3e5      	bcc.n	8008b0c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008b40:	e00d      	b.n	8008b5e <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008b42:	2100      	movs	r1, #0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f002 f888 	bl	800ac5a <USBH_ClrFeature>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	7bda      	ldrb	r2, [r3, #15]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008b58:	e003      	b.n	8008b62 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e002      	b.n	8008b64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e000      	b.n	8008b64 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008b62:	bf00      	nop
  }

  return status;
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008b86:	2301      	movs	r3, #1
 8008b88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	7b1b      	ldrb	r3, [r3, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <USBH_MSC_Process+0x2e>
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	f000 8271 	beq.w	800907e <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008b9c:	e272      	b.n	8009084 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	429a      	cmp	r2, r3
 8008bac:	f080 824f 	bcs.w	800904e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	2334      	movs	r3, #52	; 0x34
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	4413      	add	r3, r2
 8008bc2:	3391      	adds	r3, #145	; 0x91
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bce:	4619      	mov	r1, r3
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	2334      	movs	r3, #52	; 0x34
 8008bd4:	fb01 f303 	mul.w	r3, r1, r3
 8008bd8:	4413      	add	r3, r2
 8008bda:	3390      	adds	r3, #144	; 0x90
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b08      	cmp	r3, #8
 8008be0:	f200 8243 	bhi.w	800906a <USBH_MSC_Process+0x4fa>
 8008be4:	a201      	add	r2, pc, #4	; (adr r2, 8008bec <USBH_MSC_Process+0x7c>)
 8008be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bea:	bf00      	nop
 8008bec:	08008c11 	.word	0x08008c11
 8008bf0:	0800906b 	.word	0x0800906b
 8008bf4:	08008cd9 	.word	0x08008cd9
 8008bf8:	08008e5d 	.word	0x08008e5d
 8008bfc:	08008c37 	.word	0x08008c37
 8008c00:	08008f29 	.word	0x08008f29
 8008c04:	0800906b 	.word	0x0800906b
 8008c08:	0800906b 	.word	0x0800906b
 8008c0c:	0800903d 	.word	0x0800903d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c16:	4619      	mov	r1, r3
 8008c18:	693a      	ldr	r2, [r7, #16]
 8008c1a:	2334      	movs	r3, #52	; 0x34
 8008c1c:	fb01 f303 	mul.w	r3, r1, r3
 8008c20:	4413      	add	r3, r2
 8008c22:	3390      	adds	r3, #144	; 0x90
 8008c24:	2204      	movs	r2, #4
 8008c26:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008c34:	e222      	b.n	800907c <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c3c:	b2d9      	uxtb	r1, r3
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c44:	461a      	mov	r2, r3
 8008c46:	2334      	movs	r3, #52	; 0x34
 8008c48:	fb02 f303 	mul.w	r3, r2, r3
 8008c4c:	3398      	adds	r3, #152	; 0x98
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4413      	add	r3, r2
 8008c52:	3307      	adds	r3, #7
 8008c54:	461a      	mov	r2, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 ff6a 	bl	8009b30 <USBH_MSC_SCSI_Inquiry>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	2334      	movs	r3, #52	; 0x34
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3390      	adds	r3, #144	; 0x90
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d10c      	bne.n	8008c9e <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	2334      	movs	r3, #52	; 0x34
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	4413      	add	r3, r2
 8008c96:	3390      	adds	r3, #144	; 0x90
 8008c98:	2205      	movs	r2, #5
 8008c9a:	701a      	strb	r2, [r3, #0]
            break;
 8008c9c:	e1e7      	b.n	800906e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	f040 81e4 	bne.w	800906e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cac:	4619      	mov	r1, r3
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	2334      	movs	r3, #52	; 0x34
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3390      	adds	r3, #144	; 0x90
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	2334      	movs	r3, #52	; 0x34
 8008cca:	fb01 f303 	mul.w	r3, r1, r3
 8008cce:	4413      	add	r3, r2
 8008cd0:	3391      	adds	r3, #145	; 0x91
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]
            break;
 8008cd6:	e1ca      	b.n	800906e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fe66 	bl	80099b4 <USBH_MSC_SCSI_TestUnitReady>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d149      	bne.n	8008d86 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	2334      	movs	r3, #52	; 0x34
 8008cfe:	fb01 f303 	mul.w	r3, r1, r3
 8008d02:	4413      	add	r3, r2
 8008d04:	3392      	adds	r3, #146	; 0x92
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00c      	beq.n	8008d26 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d12:	4619      	mov	r1, r3
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	2334      	movs	r3, #52	; 0x34
 8008d18:	fb01 f303 	mul.w	r3, r1, r3
 8008d1c:	4413      	add	r3, r2
 8008d1e:	33c1      	adds	r3, #193	; 0xc1
 8008d20:	2201      	movs	r2, #1
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	e00b      	b.n	8008d3e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	2334      	movs	r3, #52	; 0x34
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	33c1      	adds	r3, #193	; 0xc1
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d44:	4619      	mov	r1, r3
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	2334      	movs	r3, #52	; 0x34
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3390      	adds	r3, #144	; 0x90
 8008d52:	2203      	movs	r2, #3
 8008d54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	2334      	movs	r3, #52	; 0x34
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	4413      	add	r3, r2
 8008d68:	3391      	adds	r3, #145	; 0x91
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d74:	4619      	mov	r1, r3
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	2334      	movs	r3, #52	; 0x34
 8008d7a:	fb01 f303 	mul.w	r3, r1, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	3392      	adds	r3, #146	; 0x92
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d14a      	bne.n	8008e22 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d92:	4619      	mov	r1, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	2334      	movs	r3, #52	; 0x34
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3392      	adds	r3, #146	; 0x92
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d00c      	beq.n	8008dc0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dac:	4619      	mov	r1, r3
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	2334      	movs	r3, #52	; 0x34
 8008db2:	fb01 f303 	mul.w	r3, r1, r3
 8008db6:	4413      	add	r3, r2
 8008db8:	33c1      	adds	r3, #193	; 0xc1
 8008dba:	2201      	movs	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e00b      	b.n	8008dd8 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	2334      	movs	r3, #52	; 0x34
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	33c1      	adds	r3, #193	; 0xc1
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008dde:	4619      	mov	r1, r3
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	2334      	movs	r3, #52	; 0x34
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	4413      	add	r3, r2
 8008dea:	3390      	adds	r3, #144	; 0x90
 8008dec:	2205      	movs	r2, #5
 8008dee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008df6:	4619      	mov	r1, r3
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	2334      	movs	r3, #52	; 0x34
 8008dfc:	fb01 f303 	mul.w	r3, r1, r3
 8008e00:	4413      	add	r3, r2
 8008e02:	3391      	adds	r3, #145	; 0x91
 8008e04:	2201      	movs	r2, #1
 8008e06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e0e:	4619      	mov	r1, r3
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	2334      	movs	r3, #52	; 0x34
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	4413      	add	r3, r2
 8008e1a:	3392      	adds	r3, #146	; 0x92
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	701a      	strb	r2, [r3, #0]
            break;
 8008e20:	e127      	b.n	8009072 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	f040 8124 	bne.w	8009072 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e30:	4619      	mov	r1, r3
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	2334      	movs	r3, #52	; 0x34
 8008e36:	fb01 f303 	mul.w	r3, r1, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3390      	adds	r3, #144	; 0x90
 8008e3e:	2201      	movs	r2, #1
 8008e40:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e48:	4619      	mov	r1, r3
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	2334      	movs	r3, #52	; 0x34
 8008e4e:	fb01 f303 	mul.w	r3, r1, r3
 8008e52:	4413      	add	r3, r2
 8008e54:	3391      	adds	r3, #145	; 0x91
 8008e56:	2202      	movs	r2, #2
 8008e58:	701a      	strb	r2, [r3, #0]
            break;
 8008e5a:	e10a      	b.n	8009072 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e62:	b2d9      	uxtb	r1, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	2334      	movs	r3, #52	; 0x34
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	3390      	adds	r3, #144	; 0x90
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	4413      	add	r3, r2
 8008e78:	3304      	adds	r3, #4
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fddc 	bl	8009a3a <USBH_MSC_SCSI_ReadCapacity>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e86:	7bfb      	ldrb	r3, [r7, #15]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d120      	bne.n	8008ece <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008e92:	4619      	mov	r1, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	2334      	movs	r3, #52	; 0x34
 8008e98:	fb01 f303 	mul.w	r3, r1, r3
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3390      	adds	r3, #144	; 0x90
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eaa:	4619      	mov	r1, r3
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	2334      	movs	r3, #52	; 0x34
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	3391      	adds	r3, #145	; 0x91
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008ecc:	e0d3      	b.n	8009076 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d10c      	bne.n	8008eee <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008eda:	4619      	mov	r1, r3
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	2334      	movs	r3, #52	; 0x34
 8008ee0:	fb01 f303 	mul.w	r3, r1, r3
 8008ee4:	4413      	add	r3, r2
 8008ee6:	3390      	adds	r3, #144	; 0x90
 8008ee8:	2205      	movs	r2, #5
 8008eea:	701a      	strb	r2, [r3, #0]
            break;
 8008eec:	e0c3      	b.n	8009076 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	f040 80c0 	bne.w	8009076 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008efc:	4619      	mov	r1, r3
 8008efe:	693a      	ldr	r2, [r7, #16]
 8008f00:	2334      	movs	r3, #52	; 0x34
 8008f02:	fb01 f303 	mul.w	r3, r1, r3
 8008f06:	4413      	add	r3, r2
 8008f08:	3390      	adds	r3, #144	; 0x90
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f14:	4619      	mov	r1, r3
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	2334      	movs	r3, #52	; 0x34
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	4413      	add	r3, r2
 8008f20:	3391      	adds	r3, #145	; 0x91
 8008f22:	2202      	movs	r2, #2
 8008f24:	701a      	strb	r2, [r3, #0]
            break;
 8008f26:	e0a6      	b.n	8009076 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f2e:	b2d9      	uxtb	r1, r3
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f36:	461a      	mov	r2, r3
 8008f38:	2334      	movs	r3, #52	; 0x34
 8008f3a:	fb02 f303 	mul.w	r3, r2, r3
 8008f3e:	3398      	adds	r3, #152	; 0x98
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4413      	add	r3, r2
 8008f44:	3304      	adds	r3, #4
 8008f46:	461a      	mov	r2, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fe96 	bl	8009c7a <USBH_MSC_SCSI_RequestSense>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d145      	bne.n	8008fe4 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f5e:	4619      	mov	r1, r3
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	2334      	movs	r3, #52	; 0x34
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	339c      	adds	r3, #156	; 0x9c
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b06      	cmp	r3, #6
 8008f70:	d00c      	beq.n	8008f8c <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f78:	4619      	mov	r1, r3
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	2334      	movs	r3, #52	; 0x34
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	339c      	adds	r3, #156	; 0x9c
 8008f86:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d117      	bne.n	8008fbc <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008f98:	1ad3      	subs	r3, r2, r3
 8008f9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d80c      	bhi.n	8008fbc <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa8:	4619      	mov	r1, r3
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	2334      	movs	r3, #52	; 0x34
 8008fae:	fb01 f303 	mul.w	r3, r1, r3
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3390      	adds	r3, #144	; 0x90
 8008fb6:	2202      	movs	r2, #2
 8008fb8:	701a      	strb	r2, [r3, #0]
                  break;
 8008fba:	e05f      	b.n	800907c <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	2334      	movs	r3, #52	; 0x34
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	4413      	add	r3, r2
 8008fce:	3390      	adds	r3, #144	; 0x90
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fda:	3301      	adds	r3, #1
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d10c      	bne.n	8009004 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	2334      	movs	r3, #52	; 0x34
 8008ff6:	fb01 f303 	mul.w	r3, r1, r3
 8008ffa:	4413      	add	r3, r2
 8008ffc:	3390      	adds	r3, #144	; 0x90
 8008ffe:	2208      	movs	r2, #8
 8009000:	701a      	strb	r2, [r3, #0]
            break;
 8009002:	e03a      	b.n	800907a <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	2b04      	cmp	r3, #4
 8009008:	d137      	bne.n	800907a <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009010:	4619      	mov	r1, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	2334      	movs	r3, #52	; 0x34
 8009016:	fb01 f303 	mul.w	r3, r1, r3
 800901a:	4413      	add	r3, r2
 800901c:	3390      	adds	r3, #144	; 0x90
 800901e:	2201      	movs	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009028:	4619      	mov	r1, r3
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	2334      	movs	r3, #52	; 0x34
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	3391      	adds	r3, #145	; 0x91
 8009036:	2202      	movs	r2, #2
 8009038:	701a      	strb	r2, [r3, #0]
            break;
 800903a:	e01e      	b.n	800907a <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009042:	3301      	adds	r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800904c:	e016      	b.n	800907c <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2200      	movs	r2, #0
 8009052:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2201      	movs	r2, #1
 800905a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009062:	2102      	movs	r1, #2
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	4798      	blx	r3
      break;
 8009068:	e00c      	b.n	8009084 <USBH_MSC_Process+0x514>
            break;
 800906a:	bf00      	nop
 800906c:	e00a      	b.n	8009084 <USBH_MSC_Process+0x514>
            break;
 800906e:	bf00      	nop
 8009070:	e008      	b.n	8009084 <USBH_MSC_Process+0x514>
            break;
 8009072:	bf00      	nop
 8009074:	e006      	b.n	8009084 <USBH_MSC_Process+0x514>
            break;
 8009076:	bf00      	nop
 8009078:	e004      	b.n	8009084 <USBH_MSC_Process+0x514>
            break;
 800907a:	bf00      	nop
      break;
 800907c:	e002      	b.n	8009084 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
      break;
 8009082:	bf00      	nop
  }
  return error;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop

08009090 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b088      	sub	sp, #32
 80090aa:	af02      	add	r7, sp, #8
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	460b      	mov	r3, r1
 80090b0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80090bc:	2301      	movs	r3, #1
 80090be:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80090c0:	2301      	movs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2134      	movs	r1, #52	; 0x34
 80090ca:	fb01 f303 	mul.w	r3, r1, r3
 80090ce:	4413      	add	r3, r2
 80090d0:	3390      	adds	r3, #144	; 0x90
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	2b07      	cmp	r3, #7
 80090d6:	d03c      	beq.n	8009152 <USBH_MSC_RdWrProcess+0xac>
 80090d8:	2b07      	cmp	r3, #7
 80090da:	f300 80a7 	bgt.w	800922c <USBH_MSC_RdWrProcess+0x186>
 80090de:	2b05      	cmp	r3, #5
 80090e0:	d06c      	beq.n	80091bc <USBH_MSC_RdWrProcess+0x116>
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	f040 80a2 	bne.w	800922c <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80090e8:	78f9      	ldrb	r1, [r7, #3]
 80090ea:	2300      	movs	r3, #0
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	2300      	movs	r3, #0
 80090f0:	2200      	movs	r2, #0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fea5 	bl	8009e42 <USBH_MSC_SCSI_Read>
 80090f8:	4603      	mov	r3, r0
 80090fa:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	2134      	movs	r1, #52	; 0x34
 8009108:	fb01 f303 	mul.w	r3, r1, r3
 800910c:	4413      	add	r3, r2
 800910e:	3390      	adds	r3, #144	; 0x90
 8009110:	2201      	movs	r2, #1
 8009112:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009118:	e08a      	b.n	8009230 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d109      	bne.n	8009134 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009120:	78fb      	ldrb	r3, [r7, #3]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	2134      	movs	r1, #52	; 0x34
 8009126:	fb01 f303 	mul.w	r3, r1, r3
 800912a:	4413      	add	r3, r2
 800912c:	3390      	adds	r3, #144	; 0x90
 800912e:	2205      	movs	r2, #5
 8009130:	701a      	strb	r2, [r3, #0]
      break;
 8009132:	e07d      	b.n	8009230 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b04      	cmp	r3, #4
 8009138:	d17a      	bne.n	8009230 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	2134      	movs	r1, #52	; 0x34
 8009140:	fb01 f303 	mul.w	r3, r1, r3
 8009144:	4413      	add	r3, r2
 8009146:	3390      	adds	r3, #144	; 0x90
 8009148:	2208      	movs	r2, #8
 800914a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800914c:	2302      	movs	r3, #2
 800914e:	75fb      	strb	r3, [r7, #23]
      break;
 8009150:	e06e      	b.n	8009230 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009152:	78f9      	ldrb	r1, [r7, #3]
 8009154:	2300      	movs	r3, #0
 8009156:	9300      	str	r3, [sp, #0]
 8009158:	2300      	movs	r3, #0
 800915a:	2200      	movs	r2, #0
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fe05 	bl	8009d6c <USBH_MSC_SCSI_Write>
 8009162:	4603      	mov	r3, r0
 8009164:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8009166:	7bfb      	ldrb	r3, [r7, #15]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	2134      	movs	r1, #52	; 0x34
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	3390      	adds	r3, #144	; 0x90
 800917a:	2201      	movs	r2, #1
 800917c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009182:	e057      	b.n	8009234 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d109      	bne.n	800919e <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800918a:	78fb      	ldrb	r3, [r7, #3]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	2134      	movs	r1, #52	; 0x34
 8009190:	fb01 f303 	mul.w	r3, r1, r3
 8009194:	4413      	add	r3, r2
 8009196:	3390      	adds	r3, #144	; 0x90
 8009198:	2205      	movs	r2, #5
 800919a:	701a      	strb	r2, [r3, #0]
      break;
 800919c:	e04a      	b.n	8009234 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	d147      	bne.n	8009234 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	2134      	movs	r1, #52	; 0x34
 80091aa:	fb01 f303 	mul.w	r3, r1, r3
 80091ae:	4413      	add	r3, r2
 80091b0:	3390      	adds	r3, #144	; 0x90
 80091b2:	2208      	movs	r2, #8
 80091b4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	75fb      	strb	r3, [r7, #23]
      break;
 80091ba:	e03b      	b.n	8009234 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	2234      	movs	r2, #52	; 0x34
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	3398      	adds	r3, #152	; 0x98
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4413      	add	r3, r2
 80091ca:	1d1a      	adds	r2, r3, #4
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fd52 	bl	8009c7a <USBH_MSC_SCSI_RequestSense>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d113      	bne.n	8009208 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	2134      	movs	r1, #52	; 0x34
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	4413      	add	r3, r2
 80091ec:	3390      	adds	r3, #144	; 0x90
 80091ee:	2201      	movs	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	2134      	movs	r1, #52	; 0x34
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	4413      	add	r3, r2
 80091fe:	3391      	adds	r3, #145	; 0x91
 8009200:	2202      	movs	r2, #2
 8009202:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d014      	beq.n	8009238 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b04      	cmp	r3, #4
 8009212:	d111      	bne.n	8009238 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009214:	78fb      	ldrb	r3, [r7, #3]
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	2134      	movs	r1, #52	; 0x34
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	3390      	adds	r3, #144	; 0x90
 8009222:	2208      	movs	r2, #8
 8009224:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009226:	2302      	movs	r3, #2
 8009228:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800922a:	e005      	b.n	8009238 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800922c:	bf00      	nop
 800922e:	e004      	b.n	800923a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009230:	bf00      	nop
 8009232:	e002      	b.n	800923a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009234:	bf00      	nop
 8009236:	e000      	b.n	800923a <USBH_MSC_RdWrProcess+0x194>
      break;
 8009238:	bf00      	nop

  }
  return error;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b0b      	cmp	r3, #11
 8009262:	d10c      	bne.n	800927e <USBH_MSC_UnitIsReady+0x3a>
 8009264:	78fb      	ldrb	r3, [r7, #3]
 8009266:	68ba      	ldr	r2, [r7, #8]
 8009268:	2134      	movs	r1, #52	; 0x34
 800926a:	fb01 f303 	mul.w	r3, r1, r3
 800926e:	4413      	add	r3, r2
 8009270:	3391      	adds	r3, #145	; 0x91
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
 800927c:	e001      	b.n	8009282 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3714      	adds	r7, #20
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	460b      	mov	r3, r1
 800929a:	607a      	str	r2, [r7, #4]
 800929c:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b0b      	cmp	r3, #11
 80092b0:	d10d      	bne.n	80092ce <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	2234      	movs	r2, #52	; 0x34
 80092b6:	fb02 f303 	mul.w	r3, r2, r3
 80092ba:	3390      	adds	r3, #144	; 0x90
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	2234      	movs	r2, #52	; 0x34
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f006 f9d5 	bl	800f674 <memcpy>
    return USBH_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	e000      	b.n	80092d0 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80092ce:	2302      	movs	r3, #2
  }
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	607a      	str	r2, [r7, #4]
 80092e2:	603b      	str	r3, [r7, #0]
 80092e4:	460b      	mov	r3, r1
 80092e6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00e      	beq.n	800931c <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009304:	2b0b      	cmp	r3, #11
 8009306:	d109      	bne.n	800931c <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	2134      	movs	r1, #52	; 0x34
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3390      	adds	r3, #144	; 0x90
 8009316:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009318:	2b01      	cmp	r3, #1
 800931a:	d001      	beq.n	8009320 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800931c:	2302      	movs	r3, #2
 800931e:	e040      	b.n	80093a2 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2206      	movs	r2, #6
 8009324:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	2134      	movs	r1, #52	; 0x34
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	4413      	add	r3, r2
 8009332:	3390      	adds	r3, #144	; 0x90
 8009334:	2206      	movs	r2, #6
 8009336:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	b29a      	uxth	r2, r3
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009342:	7af9      	ldrb	r1, [r7, #11]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fd78 	bl	8009e42 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009358:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800935a:	e016      	b.n	800938a <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad2      	subs	r2, r2, r3
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	f242 7110 	movw	r1, #10000	; 0x2710
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	429a      	cmp	r2, r3
 8009372:	d805      	bhi.n	8009380 <USBH_MSC_Read+0xa8>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800937a:	b2db      	uxtb	r3, r3
 800937c:	2b00      	cmp	r3, #0
 800937e:	d104      	bne.n	800938a <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2201      	movs	r2, #1
 8009384:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009386:	2302      	movs	r3, #2
 8009388:	e00b      	b.n	80093a2 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	4619      	mov	r1, r3
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7ff fe89 	bl	80090a6 <USBH_MSC_RdWrProcess>
 8009394:	4603      	mov	r3, r0
 8009396:	2b01      	cmp	r3, #1
 8009398:	d0e0      	beq.n	800935c <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2201      	movs	r2, #1
 800939e:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af02      	add	r7, sp, #8
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	460b      	mov	r3, r1
 80093b8:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00e      	beq.n	80093ee <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80093d6:	2b0b      	cmp	r3, #11
 80093d8:	d109      	bne.n	80093ee <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80093da:	7afb      	ldrb	r3, [r7, #11]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	2134      	movs	r1, #52	; 0x34
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
 80093e6:	3390      	adds	r3, #144	; 0x90
 80093e8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d001      	beq.n	80093f2 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80093ee:	2302      	movs	r3, #2
 80093f0:	e040      	b.n	8009474 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	2207      	movs	r2, #7
 80093f6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	2134      	movs	r1, #52	; 0x34
 80093fe:	fb01 f303 	mul.w	r3, r1, r3
 8009402:	4413      	add	r3, r2
 8009404:	3390      	adds	r3, #144	; 0x90
 8009406:	2207      	movs	r2, #7
 8009408:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	b29a      	uxth	r2, r3
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009414:	7af9      	ldrb	r1, [r7, #11]
 8009416:	6a3b      	ldr	r3, [r7, #32]
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f000 fca4 	bl	8009d6c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800942a:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800942c:	e016      	b.n	800945c <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	1ad2      	subs	r2, r2, r3
 8009438:	6a3b      	ldr	r3, [r7, #32]
 800943a:	f242 7110 	movw	r1, #10000	; 0x2710
 800943e:	fb01 f303 	mul.w	r3, r1, r3
 8009442:	429a      	cmp	r2, r3
 8009444:	d805      	bhi.n	8009452 <USBH_MSC_Write+0xa8>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d104      	bne.n	800945c <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	2201      	movs	r2, #1
 8009456:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009458:	2302      	movs	r3, #2
 800945a:	e00b      	b.n	8009474 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800945c:	7afb      	ldrb	r3, [r7, #11]
 800945e:	4619      	mov	r1, r3
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fe20 	bl	80090a6 <USBH_MSC_RdWrProcess>
 8009466:	4603      	mov	r3, r0
 8009468:	2b01      	cmp	r3, #1
 800946a:	d0e0      	beq.n	800942e <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2201      	movs	r2, #1
 8009470:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009472:	2300      	movs	r3, #0
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2221      	movs	r2, #33	; 0x21
 8009488:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	22ff      	movs	r2, #255	; 0xff
 800948e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80094a2:	2200      	movs	r2, #0
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fea6 	bl	800b1f8 <USBH_CtlReq>
 80094ac:	4603      	mov	r3, r0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	22a1      	movs	r2, #161	; 0xa1
 80094c4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	22fe      	movs	r2, #254	; 0xfe
 80094ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80094de:	2201      	movs	r2, #1
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fe88 	bl	800b1f8 <USBH_CtlReq>
 80094e8:	4603      	mov	r3, r0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	4a09      	ldr	r2, [pc, #36]	; (8009530 <USBH_MSC_BOT_Init+0x3c>)
 800950a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	4a09      	ldr	r2, [pc, #36]	; (8009534 <USBH_MSC_BOT_Init+0x40>)
 8009510:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	43425355 	.word	0x43425355
 8009534:	20304050 	.word	0x20304050

08009538 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af02      	add	r7, sp, #8
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009544:	2301      	movs	r3, #1
 8009546:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009548:	2301      	movs	r3, #1
 800954a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800954c:	2301      	movs	r3, #1
 800954e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009550:	2300      	movs	r3, #0
 8009552:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009568:	3b01      	subs	r3, #1
 800956a:	2b0a      	cmp	r3, #10
 800956c:	f200 819e 	bhi.w	80098ac <USBH_MSC_BOT_Process+0x374>
 8009570:	a201      	add	r2, pc, #4	; (adr r2, 8009578 <USBH_MSC_BOT_Process+0x40>)
 8009572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009576:	bf00      	nop
 8009578:	080095a5 	.word	0x080095a5
 800957c:	080095cd 	.word	0x080095cd
 8009580:	08009637 	.word	0x08009637
 8009584:	08009655 	.word	0x08009655
 8009588:	080096d9 	.word	0x080096d9
 800958c:	080096fb 	.word	0x080096fb
 8009590:	08009793 	.word	0x08009793
 8009594:	080097af 	.word	0x080097af
 8009598:	08009801 	.word	0x08009801
 800959c:	08009831 	.word	0x08009831
 80095a0:	08009893 	.word	0x08009893
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	795b      	ldrb	r3, [r3, #5]
 80095be:	2201      	movs	r2, #1
 80095c0:	9200      	str	r2, [sp, #0]
 80095c2:	221f      	movs	r2, #31
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f002 f826 	bl	800b616 <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80095ca:	e17e      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	795b      	ldrb	r3, [r3, #5]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f005 fe3e 	bl	800f254 <USBH_LL_GetURBState>
 80095d8:	4603      	mov	r3, r0
 80095da:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80095dc:	7d3b      	ldrb	r3, [r7, #20]
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d118      	bne.n	8009614 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00f      	beq.n	800960a <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80095f0:	b25b      	sxtb	r3, r3
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	da04      	bge.n	8009600 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	2203      	movs	r2, #3
 80095fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095fe:	e157      	b.n	80098b0 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	2205      	movs	r2, #5
 8009604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009608:	e152      	b.n	80098b0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2207      	movs	r2, #7
 800960e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009612:	e14d      	b.n	80098b0 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009614:	7d3b      	ldrb	r3, [r7, #20]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d104      	bne.n	8009624 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009622:	e145      	b.n	80098b0 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8009624:	7d3b      	ldrb	r3, [r7, #20]
 8009626:	2b05      	cmp	r3, #5
 8009628:	f040 8142 	bne.w	80098b0 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	220a      	movs	r2, #10
 8009630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009634:	e13c      	b.n	80098b0 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	895a      	ldrh	r2, [r3, #10]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	791b      	ldrb	r3, [r3, #4]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f002 f80b 	bl	800b660 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2204      	movs	r2, #4
 800964e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009652:	e13a      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	791b      	ldrb	r3, [r3, #4]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f005 fdfa 	bl	800f254 <USBH_LL_GetURBState>
 8009660:	4603      	mov	r3, r0
 8009662:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009664:	7d3b      	ldrb	r3, [r7, #20]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d12d      	bne.n	80096c6 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	8952      	ldrh	r2, [r2, #10]
 8009672:	4293      	cmp	r3, r2
 8009674:	d910      	bls.n	8009698 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	8952      	ldrh	r2, [r2, #10]
 8009680:	441a      	add	r2, r3
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968c:	693a      	ldr	r2, [r7, #16]
 800968e:	8952      	ldrh	r2, [r2, #10]
 8009690:	1a9a      	subs	r2, r3, r2
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	65da      	str	r2, [r3, #92]	; 0x5c
 8009696:	e002      	b.n	800969e <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2200      	movs	r2, #0
 800969c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	895a      	ldrh	r2, [r3, #10]
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	791b      	ldrb	r3, [r3, #4]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f001 ffd3 	bl	800b660 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80096ba:	e0fb      	b.n	80098b4 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2207      	movs	r2, #7
 80096c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096c4:	e0f6      	b.n	80098b4 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80096c6:	7d3b      	ldrb	r3, [r7, #20]
 80096c8:	2b05      	cmp	r3, #5
 80096ca:	f040 80f3 	bne.w	80098b4 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2209      	movs	r2, #9
 80096d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096d6:	e0ed      	b.n	80098b4 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	891a      	ldrh	r2, [r3, #8]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	795b      	ldrb	r3, [r3, #5]
 80096e6:	2001      	movs	r0, #1
 80096e8:	9000      	str	r0, [sp, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 ff93 	bl	800b616 <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	2206      	movs	r2, #6
 80096f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80096f8:	e0e7      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	795b      	ldrb	r3, [r3, #5]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f005 fda7 	bl	800f254 <USBH_LL_GetURBState>
 8009706:	4603      	mov	r3, r0
 8009708:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800970a:	7d3b      	ldrb	r3, [r7, #20]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d12f      	bne.n	8009770 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	8912      	ldrh	r2, [r2, #8]
 8009718:	4293      	cmp	r3, r2
 800971a:	d910      	bls.n	800973e <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009722:	693a      	ldr	r2, [r7, #16]
 8009724:	8912      	ldrh	r2, [r2, #8]
 8009726:	441a      	add	r2, r3
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	8912      	ldrh	r2, [r2, #8]
 8009736:	1a9a      	subs	r2, r3, r2
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	65da      	str	r2, [r3, #92]	; 0x5c
 800973c:	e002      	b.n	8009744 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2200      	movs	r2, #0
 8009742:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00c      	beq.n	8009766 <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	891a      	ldrh	r2, [r3, #8]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	795b      	ldrb	r3, [r3, #5]
 800975a:	2001      	movs	r0, #1
 800975c:	9000      	str	r0, [sp, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f001 ff59 	bl	800b616 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009764:	e0a8      	b.n	80098b8 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2207      	movs	r2, #7
 800976a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800976e:	e0a3      	b.n	80098b8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009770:	7d3b      	ldrb	r3, [r7, #20]
 8009772:	2b02      	cmp	r3, #2
 8009774:	d104      	bne.n	8009780 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2205      	movs	r2, #5
 800977a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800977e:	e09b      	b.n	80098b8 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009780:	7d3b      	ldrb	r3, [r7, #20]
 8009782:	2b05      	cmp	r3, #5
 8009784:	f040 8098 	bne.w	80098b8 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	220a      	movs	r2, #10
 800978c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009790:	e092      	b.n	80098b8 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	220d      	movs	r2, #13
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f001 ff5e 	bl	800b660 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2208      	movs	r2, #8
 80097a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097ac:	e08d      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f005 fd4d 	bl	800f254 <USBH_LL_GetURBState>
 80097ba:	4603      	mov	r3, r0
 80097bc:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80097be:	7d3b      	ldrb	r3, [r7, #20]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d115      	bne.n	80097f0 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f8a9 	bl	800992c <USBH_MSC_DecodeCSW>
 80097da:	4603      	mov	r3, r0
 80097dc:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 80097de:	7d7b      	ldrb	r3, [r7, #21]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d102      	bne.n	80097ea <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 80097e4:	2300      	movs	r3, #0
 80097e6:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 80097e8:	e068      	b.n	80098bc <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 80097ea:	2302      	movs	r3, #2
 80097ec:	75fb      	strb	r3, [r7, #23]
      break;
 80097ee:	e065      	b.n	80098bc <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 80097f0:	7d3b      	ldrb	r3, [r7, #20]
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	d162      	bne.n	80098bc <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2209      	movs	r2, #9
 80097fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80097fe:	e05d      	b.n	80098bc <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009800:	78fb      	ldrb	r3, [r7, #3]
 8009802:	2200      	movs	r2, #0
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f864 	bl	80098d4 <USBH_MSC_BOT_Abort>
 800980c:	4603      	mov	r3, r0
 800980e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009810:	7dbb      	ldrb	r3, [r7, #22]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2207      	movs	r2, #7
 800981a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800981e:	e04f      	b.n	80098c0 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009820:	7dbb      	ldrb	r3, [r7, #22]
 8009822:	2b04      	cmp	r3, #4
 8009824:	d14c      	bne.n	80098c0 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	220b      	movs	r2, #11
 800982a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800982e:	e047      	b.n	80098c0 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	2201      	movs	r2, #1
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f84c 	bl	80098d4 <USBH_MSC_BOT_Abort>
 800983c:	4603      	mov	r3, r0
 800983e:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009840:	7dbb      	ldrb	r3, [r7, #22]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d11d      	bne.n	8009882 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	795b      	ldrb	r3, [r3, #5]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f005 fd63 	bl	800f318 <USBH_LL_GetToggle>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	7959      	ldrb	r1, [r3, #5]
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	f1c3 0301 	rsb	r3, r3, #1
 8009860:	b2db      	uxtb	r3, r3
 8009862:	461a      	mov	r2, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f005 fd27 	bl	800f2b8 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	791b      	ldrb	r3, [r3, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f005 fd20 	bl	800f2b8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2209      	movs	r2, #9
 800987c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009880:	e020      	b.n	80098c4 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8009882:	7dbb      	ldrb	r3, [r7, #22]
 8009884:	2b04      	cmp	r3, #4
 8009886:	d11d      	bne.n	80098c4 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	220b      	movs	r2, #11
 800988c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009890:	e018      	b.n	80098c4 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fdf2 	bl	800947c <USBH_MSC_BOT_REQ_Reset>
 8009898:	4603      	mov	r3, r0
 800989a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d112      	bne.n	80098c8 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80098aa:	e00d      	b.n	80098c8 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80098ac:	bf00      	nop
 80098ae:	e00c      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098b0:	bf00      	nop
 80098b2:	e00a      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098b4:	bf00      	nop
 80098b6:	e008      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098b8:	bf00      	nop
 80098ba:	e006      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098bc:	bf00      	nop
 80098be:	e004      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098c0:	bf00      	nop
 80098c2:	e002      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098c4:	bf00      	nop
 80098c6:	e000      	b.n	80098ca <USBH_MSC_BOT_Process+0x392>
      break;
 80098c8:	bf00      	nop
  }
  return status;
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
 80098e0:	4613      	mov	r3, r2
 80098e2:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80098e4:	2302      	movs	r3, #2
 80098e6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80098f2:	78bb      	ldrb	r3, [r7, #2]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <USBH_MSC_BOT_Abort+0x2a>
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d009      	beq.n	8009910 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80098fc:	e011      	b.n	8009922 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	79db      	ldrb	r3, [r3, #7]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 f9a8 	bl	800ac5a <USBH_ClrFeature>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]
      break;
 800990e:	e008      	b.n	8009922 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	799b      	ldrb	r3, [r3, #6]
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f99f 	bl	800ac5a <USBH_ClrFeature>
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]
      break;
 8009920:	bf00      	nop
  }
  return status;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800993e:	2301      	movs	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	791b      	ldrb	r3, [r3, #4]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f005 fbf1 	bl	800f130 <USBH_LL_GetLastXferSize>
 800994e:	4603      	mov	r3, r0
 8009950:	2b0d      	cmp	r3, #13
 8009952:	d002      	beq.n	800995a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009954:	2302      	movs	r3, #2
 8009956:	73fb      	strb	r3, [r7, #15]
 8009958:	e024      	b.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800995e:	4a14      	ldr	r2, [pc, #80]	; (80099b0 <USBH_MSC_DecodeCSW+0x84>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d11d      	bne.n	80099a0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800996c:	429a      	cmp	r2, r3
 800996e:	d119      	bne.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
 800997e:	e011      	b.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d102      	bne.n	8009990 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800998a:	2301      	movs	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
 800998e:	e009      	b.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009996:	2b02      	cmp	r3, #2
 8009998:	d104      	bne.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800999a:	2302      	movs	r3, #2
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	e001      	b.n	80099a4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80099a0:	2302      	movs	r3, #2
 80099a2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80099a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	53425355 	.word	0x53425355

080099b4 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099c0:	2302      	movs	r3, #2
 80099c2:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d002      	beq.n	80099de <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d021      	beq.n	8009a20 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80099dc:	e028      	b.n	8009a30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2200      	movs	r2, #0
 80099e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	220a      	movs	r2, #10
 80099f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	3363      	adds	r3, #99	; 0x63
 80099f8:	2210      	movs	r2, #16
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f005 fdcb 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	2202      	movs	r2, #2
 8009a16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a1e:	e007      	b.n	8009a30 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff fd87 	bl	8009538 <USBH_MSC_BOT_Process>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2e:	bf00      	nop
  }

  return error;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b086      	sub	sp, #24
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	460b      	mov	r3, r1
 8009a44:	607a      	str	r2, [r7, #4]
 8009a46:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d002      	beq.n	8009a66 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d027      	beq.n	8009ab4 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009a64:	e05f      	b.n	8009b26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2280      	movs	r2, #128	; 0x80
 8009a70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	220a      	movs	r2, #10
 8009a78:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	3363      	adds	r3, #99	; 0x63
 8009a80:	2210      	movs	r2, #16
 8009a82:	2100      	movs	r1, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f005 fd87 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2225      	movs	r2, #37	; 0x25
 8009a8e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	f103 0210 	add.w	r2, r3, #16
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab2:	e038      	b.n	8009b26 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009ab4:	7afb      	ldrb	r3, [r7, #11]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f7ff fd3d 	bl	8009538 <USBH_MSC_BOT_Process>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ac2:	7dfb      	ldrb	r3, [r7, #23]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d12d      	bne.n	8009b24 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ace:	3303      	adds	r3, #3
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ada:	3302      	adds	r3, #2
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ae8:	3301      	adds	r3, #1
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009aee:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	061b      	lsls	r3, r3, #24
 8009afa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b06:	3307      	adds	r3, #7
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b12:	3306      	adds	r3, #6
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	809a      	strh	r2, [r3, #4]
      break;
 8009b24:	bf00      	nop
  }

  return error;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	460b      	mov	r3, r1
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b48:	69db      	ldr	r3, [r3, #28]
 8009b4a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d002      	beq.n	8009b5c <USBH_MSC_SCSI_Inquiry+0x2c>
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d03d      	beq.n	8009bd6 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009b5a:	e089      	b.n	8009c70 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	2224      	movs	r2, #36	; 0x24
 8009b60:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	2280      	movs	r2, #128	; 0x80
 8009b66:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	220a      	movs	r2, #10
 8009b6e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	3363      	adds	r3, #99	; 0x63
 8009b76:	220a      	movs	r2, #10
 8009b78:	2100      	movs	r1, #0
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f005 fd0c 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	2212      	movs	r2, #18
 8009b84:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	015b      	lsls	r3, r3, #5
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	2224      	movs	r2, #36	; 0x24
 8009ba8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	f103 0210 	add.w	r2, r3, #16
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd4:	e04c      	b.n	8009c70 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	4619      	mov	r1, r3
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f7ff fcac 	bl	8009538 <USBH_MSC_BOT_Process>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009be4:	7dfb      	ldrb	r3, [r7, #23]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d141      	bne.n	8009c6e <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009bea:	2222      	movs	r2, #34	; 0x22
 8009bec:	2100      	movs	r1, #0
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f005 fcd2 	bl	800f598 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	b2da      	uxtb	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	095b      	lsrs	r3, r3, #5
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b25b      	sxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	da03      	bge.n	8009c2e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	709a      	strb	r2, [r3, #2]
 8009c2c:	e002      	b.n	8009c34 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	1cd8      	adds	r0, r3, #3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c3e:	3308      	adds	r3, #8
 8009c40:	2208      	movs	r2, #8
 8009c42:	4619      	mov	r1, r3
 8009c44:	f005 fd16 	bl	800f674 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f103 000c 	add.w	r0, r3, #12
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c54:	3310      	adds	r3, #16
 8009c56:	2210      	movs	r2, #16
 8009c58:	4619      	mov	r1, r3
 8009c5a:	f005 fd0b 	bl	800f674 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	331d      	adds	r3, #29
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009c68:	3220      	adds	r2, #32
 8009c6a:	6812      	ldr	r2, [r2, #0]
 8009c6c:	601a      	str	r2, [r3, #0]
      break;
 8009c6e:	bf00      	nop
  }

  return error;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	60f8      	str	r0, [r7, #12]
 8009c82:	460b      	mov	r3, r1
 8009c84:	607a      	str	r2, [r7, #4]
 8009c86:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d002      	beq.n	8009ca6 <USBH_MSC_SCSI_RequestSense+0x2c>
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d03d      	beq.n	8009d20 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009ca4:	e05d      	b.n	8009d62 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	220e      	movs	r2, #14
 8009caa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	2280      	movs	r2, #128	; 0x80
 8009cb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	3363      	adds	r3, #99	; 0x63
 8009cc0:	2210      	movs	r2, #16
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f005 fc67 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	2203      	movs	r2, #3
 8009cce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	015b      	lsls	r3, r3, #5
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	220e      	movs	r2, #14
 8009cf2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f103 0210 	add.w	r2, r3, #16
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1e:	e020      	b.n	8009d62 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d20:	7afb      	ldrb	r3, [r7, #11]
 8009d22:	4619      	mov	r1, r3
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f7ff fc07 	bl	8009538 <USBH_MSC_BOT_Process>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d115      	bne.n	8009d60 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 030f 	and.w	r3, r3, #15
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d4e:	7b1a      	ldrb	r2, [r3, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d5a:	7b5a      	ldrb	r2, [r3, #13]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	709a      	strb	r2, [r3, #2]
      break;
 8009d60:	bf00      	nop
  }

  return error;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3718      	adds	r7, #24
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	603b      	str	r3, [r7, #0]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d002      	beq.n	8009d9a <USBH_MSC_SCSI_Write+0x2e>
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d047      	beq.n	8009e28 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009d98:	e04e      	b.n	8009e38 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009da0:	461a      	mov	r2, r3
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	fb03 f202 	mul.w	r2, r3, r2
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	220a      	movs	r2, #10
 8009db8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	3363      	adds	r3, #99	; 0x63
 8009dc0:	2210      	movs	r2, #16
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f005 fbe7 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	222a      	movs	r2, #42	; 0x2a
 8009dce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009dd2:	79fa      	ldrb	r2, [r7, #7]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009dda:	79ba      	ldrb	r2, [r7, #6]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009de2:	797a      	ldrb	r2, [r7, #5]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009dea:	1d3b      	adds	r3, r7, #4
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009df4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009dfe:	f107 0320 	add.w	r3, r7, #32
 8009e02:	781a      	ldrb	r2, [r3, #0]
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2202      	movs	r2, #2
 8009e16:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009e22:	2301      	movs	r3, #1
 8009e24:	75fb      	strb	r3, [r7, #23]
      break;
 8009e26:	e007      	b.n	8009e38 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e28:	7afb      	ldrb	r3, [r7, #11]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7ff fb83 	bl	8009538 <USBH_MSC_BOT_Process>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]
      break;
 8009e36:	bf00      	nop
  }

  return error;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b086      	sub	sp, #24
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009e52:	2302      	movs	r3, #2
 8009e54:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d002      	beq.n	8009e70 <USBH_MSC_SCSI_Read+0x2e>
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d047      	beq.n	8009efe <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e6e:	e04e      	b.n	8009f0e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009e76:	461a      	mov	r2, r3
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	fb03 f202 	mul.w	r2, r3, r2
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2280      	movs	r2, #128	; 0x80
 8009e86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	220a      	movs	r2, #10
 8009e8e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	3363      	adds	r3, #99	; 0x63
 8009e96:	2210      	movs	r2, #16
 8009e98:	2100      	movs	r1, #0
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f005 fb7c 	bl	800f598 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	2228      	movs	r2, #40	; 0x28
 8009ea4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009ea8:	79fa      	ldrb	r2, [r7, #7]
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009eb0:	79ba      	ldrb	r2, [r7, #6]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009eb8:	797a      	ldrb	r2, [r7, #5]
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009ec0:	1d3b      	adds	r3, r7, #4
 8009ec2:	781a      	ldrb	r2, [r3, #0]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009eca:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009ed4:	f107 0320 	add.w	r3, r7, #32
 8009ed8:	781a      	ldrb	r2, [r3, #0]
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
      break;
 8009efc:	e007      	b.n	8009f0e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009efe:	7afb      	ldrb	r3, [r7, #11]
 8009f00:	4619      	mov	r1, r3
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fb18 	bl	8009538 <USBH_MSC_BOT_Process>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0c:	bf00      	nop
  }

  return error;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3718      	adds	r7, #24
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	4613      	mov	r3, r2
 8009f24:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e029      	b.n	8009f84 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	79fa      	ldrb	r2, [r7, #7]
 8009f34:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 f81f 	bl	8009f8c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d003      	beq.n	8009f7c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f005 f823 	bl	800efc8 <USBH_LL_Init>

  return USBH_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	e009      	b.n	8009fb2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	33e0      	adds	r3, #224	; 0xe0
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	2200      	movs	r2, #0
 8009faa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2b0f      	cmp	r3, #15
 8009fb6:	d9f2      	bls.n	8009f9e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fb8:	2300      	movs	r3, #0
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	e009      	b.n	8009fd2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd8:	d3f1      	bcc.n	8009fbe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2240      	movs	r2, #64	; 0x40
 8009ffe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d016      	beq.n	800a076 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10e      	bne.n	800a070 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a058:	1c59      	adds	r1, r3, #1
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	33de      	adds	r3, #222	; 0xde
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
 800a06e:	e004      	b.n	800a07a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a070:	2302      	movs	r3, #2
 800a072:	73fb      	strb	r3, [r7, #15]
 800a074:	e001      	b.n	800a07a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a076:	2302      	movs	r3, #2
 800a078:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3714      	adds	r7, #20
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	460b      	mov	r3, r1
 800a092:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a09e:	78fa      	ldrb	r2, [r7, #3]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d204      	bcs.n	800a0ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a0ac:	e001      	b.n	800a0b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a0b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	4608      	mov	r0, r1
 800a0ca:	4611      	mov	r1, r2
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	70fb      	strb	r3, [r7, #3]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70bb      	strb	r3, [r7, #2]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a0e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a0ea:	e025      	b.n	800a138 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
 800a0ee:	221a      	movs	r2, #26
 800a0f0:	fb02 f303 	mul.w	r3, r2, r3
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	78fa      	ldrb	r2, [r7, #3]
 800a104:	429a      	cmp	r2, r3
 800a106:	d002      	beq.n	800a10e <USBH_FindInterface+0x4e>
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	2bff      	cmp	r3, #255	; 0xff
 800a10c:	d111      	bne.n	800a132 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a112:	78ba      	ldrb	r2, [r7, #2]
 800a114:	429a      	cmp	r2, r3
 800a116:	d002      	beq.n	800a11e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a118:	78bb      	ldrb	r3, [r7, #2]
 800a11a:	2bff      	cmp	r3, #255	; 0xff
 800a11c:	d109      	bne.n	800a132 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a122:	787a      	ldrb	r2, [r7, #1]
 800a124:	429a      	cmp	r2, r3
 800a126:	d002      	beq.n	800a12e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a128:	787b      	ldrb	r3, [r7, #1]
 800a12a:	2bff      	cmp	r3, #255	; 0xff
 800a12c:	d101      	bne.n	800a132 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a12e:	7dfb      	ldrb	r3, [r7, #23]
 800a130:	e006      	b.n	800a140 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a132:	7dfb      	ldrb	r3, [r7, #23]
 800a134:	3301      	adds	r3, #1
 800a136:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a138:	7dfb      	ldrb	r3, [r7, #23]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d9d6      	bls.n	800a0ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a13e:	23ff      	movs	r3, #255	; 0xff
}
 800a140:	4618      	mov	r0, r3
 800a142:	371c      	adds	r7, #28
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f004 ff73 	bl	800f040 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a15a:	2101      	movs	r1, #1
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f005 f88d 	bl	800f27c <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af04      	add	r7, sp, #16
 800a172:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a174:	2302      	movs	r3, #2
 800a176:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	d102      	bne.n	800a18e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2203      	movs	r2, #3
 800a18c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b0b      	cmp	r3, #11
 800a196:	f200 81be 	bhi.w	800a516 <USBH_Process+0x3aa>
 800a19a:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <USBH_Process+0x34>)
 800a19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a0:	0800a1d1 	.word	0x0800a1d1
 800a1a4:	0800a203 	.word	0x0800a203
 800a1a8:	0800a26b 	.word	0x0800a26b
 800a1ac:	0800a4b1 	.word	0x0800a4b1
 800a1b0:	0800a517 	.word	0x0800a517
 800a1b4:	0800a30f 	.word	0x0800a30f
 800a1b8:	0800a457 	.word	0x0800a457
 800a1bc:	0800a345 	.word	0x0800a345
 800a1c0:	0800a365 	.word	0x0800a365
 800a1c4:	0800a385 	.word	0x0800a385
 800a1c8:	0800a3c9 	.word	0x0800a3c9
 800a1cc:	0800a499 	.word	0x0800a499
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f000 819e 	beq.w	800a51a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a1e4:	20c8      	movs	r0, #200	; 0xc8
 800a1e6:	f005 f8c7 	bl	800f378 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f004 ff85 	bl	800f0fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a200:	e18b      	b.n	800a51a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d107      	bne.n	800a21c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a21a:	e18d      	b.n	800a538 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a226:	d914      	bls.n	800a252 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a22e:	3301      	adds	r3, #1
 800a230:	b2da      	uxtb	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d903      	bls.n	800a24a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220d      	movs	r2, #13
 800a246:	701a      	strb	r2, [r3, #0]
      break;
 800a248:	e176      	b.n	800a538 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
      break;
 800a250:	e172      	b.n	800a538 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a258:	f103 020a 	add.w	r2, r3, #10
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a262:	200a      	movs	r0, #10
 800a264:	f005 f888 	bl	800f378 <USBH_Delay>
      break;
 800a268:	e166      	b.n	800a538 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a270:	2b00      	cmp	r3, #0
 800a272:	d005      	beq.n	800a280 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a27a:	2104      	movs	r1, #4
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a280:	2064      	movs	r0, #100	; 0x64
 800a282:	f005 f879 	bl	800f378 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f004 ff10 	bl	800f0ac <USBH_LL_GetSpeed>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2205      	movs	r2, #5
 800a29a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a29c:	2100      	movs	r1, #0
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fa2b 	bl	800b6fa <USBH_AllocPipe>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a2ac:	2180      	movs	r1, #128	; 0x80
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f001 fa23 	bl	800b6fa <USBH_AllocPipe>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7919      	ldrb	r1, [r3, #4]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a2d0:	b292      	uxth	r2, r2
 800a2d2:	9202      	str	r2, [sp, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	9201      	str	r2, [sp, #4]
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2280      	movs	r2, #128	; 0x80
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 f9dc 	bl	800b69c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	7959      	ldrb	r1, [r3, #5]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	9202      	str	r2, [sp, #8]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	9201      	str	r2, [sp, #4]
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	4603      	mov	r3, r0
 800a304:	2200      	movs	r2, #0
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 f9c8 	bl	800b69c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a30c:	e114      	b.n	800a538 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f918 	bl	800a544 <USBH_HandleEnum>
 800a314:	4603      	mov	r3, r0
 800a316:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	f040 80fe 	bne.w	800a51e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a330:	2b01      	cmp	r3, #1
 800a332:	d103      	bne.n	800a33c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2208      	movs	r2, #8
 800a338:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a33a:	e0f0      	b.n	800a51e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2207      	movs	r2, #7
 800a340:	701a      	strb	r2, [r3, #0]
      break;
 800a342:	e0ec      	b.n	800a51e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80e9 	beq.w	800a522 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a356:	2101      	movs	r1, #1
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2208      	movs	r2, #8
 800a360:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a362:	e0de      	b.n	800a522 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 fc2c 	bl	800abcc <USBH_SetCfg>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	f040 80d5 	bne.w	800a526 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2209      	movs	r2, #9
 800a380:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a382:	e0d0      	b.n	800a526 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a38a:	f003 0320 	and.w	r3, r3, #32
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d016      	beq.n	800a3c0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a392:	2101      	movs	r1, #1
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fc3c 	bl	800ac12 <USBH_SetFeature>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d103      	bne.n	800a3ae <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	220a      	movs	r2, #10
 800a3aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3ac:	e0bd      	b.n	800a52a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	f040 80b9 	bne.w	800a52a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	220a      	movs	r2, #10
 800a3bc:	701a      	strb	r2, [r3, #0]
      break;
 800a3be:	e0b4      	b.n	800a52a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	220a      	movs	r2, #10
 800a3c4:	701a      	strb	r2, [r3, #0]
      break;
 800a3c6:	e0b0      	b.n	800a52a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f000 80ad 	beq.w	800a52e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73fb      	strb	r3, [r7, #15]
 800a3e0:	e016      	b.n	800a410 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a3e2:	7bfa      	ldrb	r2, [r7, #15]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	32de      	adds	r2, #222	; 0xde
 800a3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ec:	791a      	ldrb	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d108      	bne.n	800a40a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a3f8:	7bfa      	ldrb	r2, [r7, #15]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	32de      	adds	r2, #222	; 0xde
 800a3fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a408:	e005      	b.n	800a416 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	3301      	adds	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0e5      	beq.n	800a3e2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d016      	beq.n	800a44e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a426:	689b      	ldr	r3, [r3, #8]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	4798      	blx	r3
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2206      	movs	r2, #6
 800a436:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a43e:	2103      	movs	r1, #3
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a444:	e073      	b.n	800a52e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	220d      	movs	r2, #13
 800a44a:	701a      	strb	r2, [r3, #0]
      break;
 800a44c:	e06f      	b.n	800a52e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	220d      	movs	r2, #13
 800a452:	701a      	strb	r2, [r3, #0]
      break;
 800a454:	e06b      	b.n	800a52e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d017      	beq.n	800a490 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	4798      	blx	r3
 800a46c:	4603      	mov	r3, r0
 800a46e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d103      	bne.n	800a480 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	220b      	movs	r2, #11
 800a47c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a47e:	e058      	b.n	800a532 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b02      	cmp	r3, #2
 800a486:	d154      	bne.n	800a532 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	220d      	movs	r2, #13
 800a48c:	701a      	strb	r2, [r3, #0]
      break;
 800a48e:	e050      	b.n	800a532 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	220d      	movs	r2, #13
 800a494:	701a      	strb	r2, [r3, #0]
      break;
 800a496:	e04c      	b.n	800a532 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d049      	beq.n	800a536 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
      }
      break;
 800a4ae:	e042      	b.n	800a536 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f7ff fd67 	bl	8009f8c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d005      	beq.n	800a4f2 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a4ec:	2105      	movs	r1, #5
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d107      	bne.n	800a50e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff fe20 	bl	800a14c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a50c:	e014      	b.n	800a538 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f004 fd96 	bl	800f040 <USBH_LL_Start>
      break;
 800a514:	e010      	b.n	800a538 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800a516:	bf00      	nop
 800a518:	e00e      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a51a:	bf00      	nop
 800a51c:	e00c      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a51e:	bf00      	nop
 800a520:	e00a      	b.n	800a538 <USBH_Process+0x3cc>
    break;
 800a522:	bf00      	nop
 800a524:	e008      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a526:	bf00      	nop
 800a528:	e006      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a52a:	bf00      	nop
 800a52c:	e004      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a52e:	bf00      	nop
 800a530:	e002      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a532:	bf00      	nop
 800a534:	e000      	b.n	800a538 <USBH_Process+0x3cc>
      break;
 800a536:	bf00      	nop
  }
  return USBH_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop

0800a544 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af04      	add	r7, sp, #16
 800a54a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a550:	2301      	movs	r3, #1
 800a552:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b07      	cmp	r3, #7
 800a55a:	f200 81c1 	bhi.w	800a8e0 <USBH_HandleEnum+0x39c>
 800a55e:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <USBH_HandleEnum+0x20>)
 800a560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a643 	.word	0x0800a643
 800a56c:	0800a6ad 	.word	0x0800a6ad
 800a570:	0800a73b 	.word	0x0800a73b
 800a574:	0800a7a5 	.word	0x0800a7a5
 800a578:	0800a815 	.word	0x0800a815
 800a57c:	0800a85b 	.word	0x0800a85b
 800a580:	0800a8a1 	.word	0x0800a8a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a584:	2108      	movs	r1, #8
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fa50 	bl	800aa2c <USBH_Get_DevDesc>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d130      	bne.n	800a5f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7919      	ldrb	r1, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a5ba:	b292      	uxth	r2, r2
 800a5bc:	9202      	str	r2, [sp, #8]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	9201      	str	r2, [sp, #4]
 800a5c2:	9300      	str	r3, [sp, #0]
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2280      	movs	r2, #128	; 0x80
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f867 	bl	800b69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7959      	ldrb	r1, [r3, #5]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5e2:	b292      	uxth	r2, r2
 800a5e4:	9202      	str	r2, [sp, #8]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	9201      	str	r2, [sp, #4]
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 f853 	bl	800b69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a5f6:	e175      	b.n	800a8e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	f040 8172 	bne.w	800a8e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a606:	3301      	adds	r3, #1
 800a608:	b2da      	uxtb	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a616:	2b03      	cmp	r3, #3
 800a618:	d903      	bls.n	800a622 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	220d      	movs	r2, #13
 800a61e:	701a      	strb	r2, [r3, #0]
      break;
 800a620:	e160      	b.n	800a8e4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	795b      	ldrb	r3, [r3, #5]
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f887 	bl	800b73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	791b      	ldrb	r3, [r3, #4]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f001 f881 	bl	800b73c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	701a      	strb	r2, [r3, #0]
      break;
 800a640:	e150      	b.n	800a8e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a642:	2112      	movs	r1, #18
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f9f1 	bl	800aa2c <USBH_Get_DevDesc>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a64e:	7bbb      	ldrb	r3, [r7, #14]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d103      	bne.n	800a65c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a65a:	e145      	b.n	800a8e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	2b03      	cmp	r3, #3
 800a660:	f040 8142 	bne.w	800a8e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a66a:	3301      	adds	r3, #1
 800a66c:	b2da      	uxtb	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d903      	bls.n	800a686 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	220d      	movs	r2, #13
 800a682:	701a      	strb	r2, [r3, #0]
      break;
 800a684:	e130      	b.n	800a8e8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	795b      	ldrb	r3, [r3, #5]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f001 f855 	bl	800b73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	791b      	ldrb	r3, [r3, #4]
 800a696:	4619      	mov	r1, r3
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f001 f84f 	bl	800b73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	701a      	strb	r2, [r3, #0]
      break;
 800a6aa:	e11d      	b.n	800a8e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a6ac:	2101      	movs	r1, #1
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa68 	bl	800ab84 <USBH_SetAddress>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a6b8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d132      	bne.n	800a724 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a6be:	2002      	movs	r0, #2
 800a6c0:	f004 fe5a 	bl	800f378 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7919      	ldrb	r1, [r3, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	9202      	str	r2, [sp, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	9201      	str	r2, [sp, #4]
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2280      	movs	r2, #128	; 0x80
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 ffd1 	bl	800b69c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	7959      	ldrb	r1, [r3, #5]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a70e:	b292      	uxth	r2, r2
 800a710:	9202      	str	r2, [sp, #8]
 800a712:	2200      	movs	r2, #0
 800a714:	9201      	str	r2, [sp, #4]
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4603      	mov	r3, r0
 800a71a:	2200      	movs	r2, #0
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 ffbd 	bl	800b69c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a722:	e0e3      	b.n	800a8ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b03      	cmp	r3, #3
 800a728:	f040 80e0 	bne.w	800a8ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	220d      	movs	r2, #13
 800a730:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	705a      	strb	r2, [r3, #1]
      break;
 800a738:	e0d8      	b.n	800a8ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a73a:	2109      	movs	r1, #9
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f99d 	bl	800aa7c <USBH_Get_CfgDesc>
 800a742:	4603      	mov	r3, r0
 800a744:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2204      	movs	r2, #4
 800a750:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a752:	e0cd      	b.n	800a8f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b03      	cmp	r3, #3
 800a758:	f040 80ca 	bne.w	800a8f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a762:	3301      	adds	r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a772:	2b03      	cmp	r3, #3
 800a774:	d903      	bls.n	800a77e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	220d      	movs	r2, #13
 800a77a:	701a      	strb	r2, [r3, #0]
      break;
 800a77c:	e0b8      	b.n	800a8f0 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	795b      	ldrb	r3, [r3, #5]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 ffd9 	bl	800b73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	4619      	mov	r1, r3
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 ffd3 	bl	800b73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	701a      	strb	r2, [r3, #0]
      break;
 800a7a2:	e0a5      	b.n	800a8f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f965 	bl	800aa7c <USBH_Get_CfgDesc>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7b6:	7bbb      	ldrb	r3, [r7, #14]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2205      	movs	r2, #5
 800a7c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a7c2:	e097      	b.n	800a8f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	f040 8094 	bne.w	800a8f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d903      	bls.n	800a7ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	220d      	movs	r2, #13
 800a7ea:	701a      	strb	r2, [r3, #0]
      break;
 800a7ec:	e082      	b.n	800a8f4 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	795b      	ldrb	r3, [r3, #5]
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 ffa1 	bl	800b73c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	791b      	ldrb	r3, [r3, #4]
 800a7fe:	4619      	mov	r1, r3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 ff9b 	bl	800b73c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
      break;
 800a812:	e06f      	b.n	800a8f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d019      	beq.n	800a852 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a82a:	23ff      	movs	r3, #255	; 0xff
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f949 	bl	800aac4 <USBH_Get_StringDesc>
 800a832:	4603      	mov	r3, r0
 800a834:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d103      	bne.n	800a844 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2206      	movs	r2, #6
 800a840:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a842:	e059      	b.n	800a8f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	2b03      	cmp	r3, #3
 800a848:	d156      	bne.n	800a8f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2206      	movs	r2, #6
 800a84e:	705a      	strb	r2, [r3, #1]
      break;
 800a850:	e052      	b.n	800a8f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2206      	movs	r2, #6
 800a856:	705a      	strb	r2, [r3, #1]
      break;
 800a858:	e04e      	b.n	800a8f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a860:	2b00      	cmp	r3, #0
 800a862:	d019      	beq.n	800a898 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a870:	23ff      	movs	r3, #255	; 0xff
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 f926 	bl	800aac4 <USBH_Get_StringDesc>
 800a878:	4603      	mov	r3, r0
 800a87a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d103      	bne.n	800a88a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2207      	movs	r2, #7
 800a886:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a888:	e038      	b.n	800a8fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	2b03      	cmp	r3, #3
 800a88e:	d135      	bne.n	800a8fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2207      	movs	r2, #7
 800a894:	705a      	strb	r2, [r3, #1]
      break;
 800a896:	e031      	b.n	800a8fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2207      	movs	r2, #7
 800a89c:	705a      	strb	r2, [r3, #1]
      break;
 800a89e:	e02d      	b.n	800a8fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d017      	beq.n	800a8da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a8b6:	23ff      	movs	r3, #255	; 0xff
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f903 	bl	800aac4 <USBH_Get_StringDesc>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d102      	bne.n	800a8ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a8cc:	e018      	b.n	800a900 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	2b03      	cmp	r3, #3
 800a8d2:	d115      	bne.n	800a900 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8d8:	e012      	b.n	800a900 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8de:	e00f      	b.n	800a900 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a8e0:	bf00      	nop
 800a8e2:	e00e      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8e4:	bf00      	nop
 800a8e6:	e00c      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8e8:	bf00      	nop
 800a8ea:	e00a      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8ec:	bf00      	nop
 800a8ee:	e008      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8f0:	bf00      	nop
 800a8f2:	e006      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8f4:	bf00      	nop
 800a8f6:	e004      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8f8:	bf00      	nop
 800a8fa:	e002      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a8fc:	bf00      	nop
 800a8fe:	e000      	b.n	800a902 <USBH_HandleEnum+0x3be>
      break;
 800a900:	bf00      	nop
  }
  return Status;
 800a902:	7bfb      	ldrb	r3, [r7, #15]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f804 	bl	800a94e <USBH_HandleSof>
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b082      	sub	sp, #8
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	2b0b      	cmp	r3, #11
 800a95e:	d10a      	bne.n	800a976 <USBH_HandleSof+0x28>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a966:	2b00      	cmp	r3, #0
 800a968:	d005      	beq.n	800a976 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	4798      	blx	r3
  }
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a98e:	bf00      	nop
}
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b083      	sub	sp, #12
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a9aa:	bf00      	nop
}
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a9d6:	2300      	movs	r3, #0
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f004 fb36 	bl	800f076 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	791b      	ldrb	r3, [r3, #4]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fe93 	bl	800b73c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	795b      	ldrb	r3, [r3, #5]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fe8d 	bl	800b73c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af02      	add	r7, sp, #8
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	460b      	mov	r3, r1
 800aa36:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	4613      	mov	r3, r2
 800aa46:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa4a:	2100      	movs	r1, #0
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f864 	bl	800ab1a <USBH_GetDescriptor>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10a      	bne.n	800aa72 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800aa68:	78fa      	ldrb	r2, [r7, #3]
 800aa6a:	b292      	uxth	r2, r2
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	f000 f919 	bl	800aca4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	331c      	adds	r3, #28
 800aa8c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aa8e:	887b      	ldrh	r3, [r7, #2]
 800aa90:	9300      	str	r3, [sp, #0]
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f83d 	bl	800ab1a <USBH_GetDescriptor>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d107      	bne.n	800aaba <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800aaaa:	887b      	ldrh	r3, [r7, #2]
 800aaac:	461a      	mov	r2, r3
 800aaae:	68b9      	ldr	r1, [r7, #8]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f989 	bl	800adc8 <USBH_ParseCfgDesc>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	607a      	str	r2, [r7, #4]
 800aace:	461a      	mov	r2, r3
 800aad0:	460b      	mov	r3, r1
 800aad2:	72fb      	strb	r3, [r7, #11]
 800aad4:	4613      	mov	r3, r2
 800aad6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800aad8:	7afb      	ldrb	r3, [r7, #11]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aae0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800aae8:	893b      	ldrh	r3, [r7, #8]
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	460b      	mov	r3, r1
 800aaee:	2100      	movs	r1, #0
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f000 f812 	bl	800ab1a <USBH_GetDescriptor>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aafa:	7dfb      	ldrb	r3, [r7, #23]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d107      	bne.n	800ab10 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ab06:	893a      	ldrh	r2, [r7, #8]
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fb26 	bl	800b15c <USBH_ParseStringDesc>
  }

  return status;
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	60f8      	str	r0, [r7, #12]
 800ab22:	607b      	str	r3, [r7, #4]
 800ab24:	460b      	mov	r3, r1
 800ab26:	72fb      	strb	r3, [r7, #11]
 800ab28:	4613      	mov	r3, r2
 800ab2a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	789b      	ldrb	r3, [r3, #2]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d11c      	bne.n	800ab6e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ab34:	7afb      	ldrb	r3, [r7, #11]
 800ab36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2206      	movs	r2, #6
 800ab44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	893a      	ldrh	r2, [r7, #8]
 800ab4a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ab4c:	893b      	ldrh	r3, [r7, #8]
 800ab4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab56:	d104      	bne.n	800ab62 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f240 4209 	movw	r2, #1033	; 0x409
 800ab5e:	829a      	strh	r2, [r3, #20]
 800ab60:	e002      	b.n	800ab68 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2200      	movs	r2, #0
 800ab66:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8b3a      	ldrh	r2, [r7, #24]
 800ab6c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ab6e:	8b3b      	ldrh	r3, [r7, #24]
 800ab70:	461a      	mov	r2, r3
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 fb3f 	bl	800b1f8 <USBH_CtlReq>
 800ab7a:	4603      	mov	r3, r0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	789b      	ldrb	r3, [r3, #2]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d10f      	bne.n	800abb8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2205      	movs	r2, #5
 800aba2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fb1b 	bl	800b1f8 <USBH_CtlReq>
 800abc2:	4603      	mov	r3, r0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	789b      	ldrb	r3, [r3, #2]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d10e      	bne.n	800abfe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2209      	movs	r2, #9
 800abea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	887a      	ldrh	r2, [r7, #2]
 800abf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800abfe:	2200      	movs	r2, #0
 800ac00:	2100      	movs	r1, #0
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 faf8 	bl	800b1f8 <USBH_CtlReq>
 800ac08:	4603      	mov	r3, r0
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	789b      	ldrb	r3, [r3, #2]
 800ac22:	2b01      	cmp	r3, #1
 800ac24:	d10f      	bne.n	800ac46 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2203      	movs	r2, #3
 800ac30:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ac46:	2200      	movs	r2, #0
 800ac48:	2100      	movs	r1, #0
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fad4 	bl	800b1f8 <USBH_CtlReq>
 800ac50:	4603      	mov	r3, r0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	789b      	ldrb	r3, [r3, #2]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d10f      	bne.n	800ac8e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800ac8e:	2200      	movs	r2, #0
 800ac90:	2100      	movs	r1, #0
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fab0 	bl	800b1f8 <USBH_CtlReq>
 800ac98:	4603      	mov	r3, r0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	781a      	ldrb	r2, [r3, #0]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	785a      	ldrb	r2, [r3, #1]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	3302      	adds	r3, #2
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b29a      	uxth	r2, r3
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	3303      	adds	r3, #3
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	021b      	lsls	r3, r3, #8
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	4313      	orrs	r3, r2
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	791a      	ldrb	r2, [r3, #4]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	795a      	ldrb	r2, [r3, #5]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	799a      	ldrb	r2, [r3, #6]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	79da      	ldrb	r2, [r3, #7]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	79db      	ldrb	r3, [r3, #7]
 800ad02:	2b20      	cmp	r3, #32
 800ad04:	dc0f      	bgt.n	800ad26 <USBH_ParseDevDesc+0x82>
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	db14      	blt.n	800ad34 <USBH_ParseDevDesc+0x90>
 800ad0a:	3b08      	subs	r3, #8
 800ad0c:	4a2d      	ldr	r2, [pc, #180]	; (800adc4 <USBH_ParseDevDesc+0x120>)
 800ad0e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf14      	ite	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	2300      	moveq	r3, #0
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d102      	bne.n	800ad2a <USBH_ParseDevDesc+0x86>
 800ad24:	e006      	b.n	800ad34 <USBH_ParseDevDesc+0x90>
 800ad26:	2b40      	cmp	r3, #64	; 0x40
 800ad28:	d104      	bne.n	800ad34 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	79da      	ldrb	r2, [r3, #7]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	71da      	strb	r2, [r3, #7]
      break;
 800ad32:	e003      	b.n	800ad3c <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2240      	movs	r2, #64	; 0x40
 800ad38:	71da      	strb	r2, [r3, #7]
      break;
 800ad3a:	bf00      	nop
  }

  if (length > 8U)
 800ad3c:	88fb      	ldrh	r3, [r7, #6]
 800ad3e:	2b08      	cmp	r3, #8
 800ad40:	d939      	bls.n	800adb6 <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3308      	adds	r3, #8
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	3309      	adds	r3, #9
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	4313      	orrs	r3, r2
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	330a      	adds	r3, #10
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	330b      	adds	r3, #11
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	021b      	lsls	r3, r3, #8
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	4313      	orrs	r3, r2
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	330d      	adds	r3, #13
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	7b9a      	ldrb	r2, [r3, #14]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	7bda      	ldrb	r2, [r3, #15]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	7c1a      	ldrb	r2, [r3, #16]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	7c5a      	ldrb	r2, [r3, #17]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	745a      	strb	r2, [r3, #17]
  }
}
 800adb6:	bf00      	nop
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr
 800adc2:	bf00      	nop
 800adc4:	01000101 	.word	0x01000101

0800adc8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b08c      	sub	sp, #48	; 0x30
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800addc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	781a      	ldrb	r2, [r3, #0]
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	785a      	ldrb	r2, [r3, #1]
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	3302      	adds	r3, #2
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	3303      	adds	r3, #3
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	021b      	lsls	r3, r3, #8
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae24:	bf28      	it	cs
 800ae26:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	791a      	ldrb	r2, [r3, #4]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	795a      	ldrb	r2, [r3, #5]
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	799a      	ldrb	r2, [r3, #6]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	79da      	ldrb	r2, [r3, #7]
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	7a1a      	ldrb	r2, [r3, #8]
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d002      	beq.n	800ae66 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	2209      	movs	r2, #9
 800ae64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ae66:	88fb      	ldrh	r3, [r7, #6]
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	f240 809d 	bls.w	800afa8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800ae6e:	2309      	movs	r3, #9
 800ae70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ae76:	e081      	b.n	800af7c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae78:	f107 0316 	add.w	r3, r7, #22
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae80:	f000 f99f 	bl	800b1c2 <USBH_GetNextDesc>
 800ae84:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ae86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae88:	785b      	ldrb	r3, [r3, #1]
 800ae8a:	2b04      	cmp	r3, #4
 800ae8c:	d176      	bne.n	800af7c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	2b09      	cmp	r3, #9
 800ae94:	d002      	beq.n	800ae9c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	2209      	movs	r2, #9
 800ae9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ae9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aea0:	221a      	movs	r2, #26
 800aea2:	fb02 f303 	mul.w	r3, r2, r3
 800aea6:	3308      	adds	r3, #8
 800aea8:	6a3a      	ldr	r2, [r7, #32]
 800aeaa:	4413      	add	r3, r2
 800aeac:	3302      	adds	r3, #2
 800aeae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aeb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aeb2:	69f8      	ldr	r0, [r7, #28]
 800aeb4:	f000 f87e 	bl	800afb4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aec2:	e043      	b.n	800af4c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aec4:	f107 0316 	add.w	r3, r7, #22
 800aec8:	4619      	mov	r1, r3
 800aeca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aecc:	f000 f979 	bl	800b1c2 <USBH_GetNextDesc>
 800aed0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed4:	785b      	ldrb	r3, [r3, #1]
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d138      	bne.n	800af4c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	795b      	ldrb	r3, [r3, #5]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d10f      	bne.n	800af02 <USBH_ParseCfgDesc+0x13a>
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	799b      	ldrb	r3, [r3, #6]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d10b      	bne.n	800af02 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	79db      	ldrb	r3, [r3, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10f      	bne.n	800af12 <USBH_ParseCfgDesc+0x14a>
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	2b09      	cmp	r3, #9
 800aef8:	d00b      	beq.n	800af12 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	2209      	movs	r2, #9
 800aefe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af00:	e007      	b.n	800af12 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800af02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b07      	cmp	r3, #7
 800af08:	d004      	beq.n	800af14 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	2207      	movs	r2, #7
 800af0e:	701a      	strb	r2, [r3, #0]
 800af10:	e000      	b.n	800af14 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800af12:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800af14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af18:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af1c:	3201      	adds	r2, #1
 800af1e:	00d2      	lsls	r2, r2, #3
 800af20:	211a      	movs	r1, #26
 800af22:	fb01 f303 	mul.w	r3, r1, r3
 800af26:	4413      	add	r3, r2
 800af28:	3308      	adds	r3, #8
 800af2a:	6a3a      	ldr	r2, [r7, #32]
 800af2c:	4413      	add	r3, r2
 800af2e:	3304      	adds	r3, #4
 800af30:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800af32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af34:	69b9      	ldr	r1, [r7, #24]
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f000 f86b 	bl	800b012 <USBH_ParseEPDesc>
 800af3c:	4603      	mov	r3, r0
 800af3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800af42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af46:	3301      	adds	r3, #1
 800af48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	791b      	ldrb	r3, [r3, #4]
 800af50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af54:	429a      	cmp	r2, r3
 800af56:	d204      	bcs.n	800af62 <USBH_ParseCfgDesc+0x19a>
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	885a      	ldrh	r2, [r3, #2]
 800af5c:	8afb      	ldrh	r3, [r7, #22]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d8b0      	bhi.n	800aec4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	791b      	ldrb	r3, [r3, #4]
 800af66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d201      	bcs.n	800af72 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800af6e:	2303      	movs	r3, #3
 800af70:	e01c      	b.n	800afac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800af72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af76:	3301      	adds	r3, #1
 800af78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800af7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af80:	2b01      	cmp	r3, #1
 800af82:	d805      	bhi.n	800af90 <USBH_ParseCfgDesc+0x1c8>
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	885a      	ldrh	r2, [r3, #2]
 800af88:	8afb      	ldrh	r3, [r7, #22]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	f63f af74 	bhi.w	800ae78 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	791b      	ldrb	r3, [r3, #4]
 800af94:	2b02      	cmp	r3, #2
 800af96:	bf28      	it	cs
 800af98:	2302      	movcs	r3, #2
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d201      	bcs.n	800afa8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e001      	b.n	800afac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800afa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800afac:	4618      	mov	r0, r3
 800afae:	3730      	adds	r7, #48	; 0x30
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	785a      	ldrb	r2, [r3, #1]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	789a      	ldrb	r2, [r3, #2]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	78da      	ldrb	r2, [r3, #3]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	791a      	ldrb	r2, [r3, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	795a      	ldrb	r2, [r3, #5]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	799a      	ldrb	r2, [r3, #6]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	79da      	ldrb	r2, [r3, #7]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	7a1a      	ldrb	r2, [r3, #8]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	721a      	strb	r2, [r3, #8]
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b012:	b480      	push	{r7}
 800b014:	b087      	sub	sp, #28
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	781a      	ldrb	r2, [r3, #0]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	785a      	ldrb	r2, [r3, #1]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	789a      	ldrb	r2, [r3, #2]
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	78da      	ldrb	r2, [r3, #3]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3304      	adds	r3, #4
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b29a      	uxth	r2, r3
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3305      	adds	r3, #5
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	b29b      	uxth	r3, r3
 800b052:	021b      	lsls	r3, r3, #8
 800b054:	b29b      	uxth	r3, r3
 800b056:	4313      	orrs	r3, r2
 800b058:	b29a      	uxth	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	799a      	ldrb	r2, [r3, #6]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	889b      	ldrh	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b06e:	2303      	movs	r3, #3
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e033      	b.n	800b0dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	889b      	ldrh	r3, [r3, #4]
 800b078:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b07c:	f023 0307 	bic.w	r3, r3, #7
 800b080:	b29a      	uxth	r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	889b      	ldrh	r3, [r3, #4]
 800b08a:	b21a      	sxth	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3304      	adds	r3, #4
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b299      	uxth	r1, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3305      	adds	r3, #5
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	430b      	orrs	r3, r1
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d110      	bne.n	800b0ce <USBH_ParseEPDesc+0xbc>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	b299      	uxth	r1, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3305      	adds	r3, #5
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	021b      	lsls	r3, r3, #8
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	b21b      	sxth	r3, r3
 800b0c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b0ca:	b21b      	sxth	r3, r3
 800b0cc:	e001      	b.n	800b0d2 <USBH_ParseEPDesc+0xc0>
 800b0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	b21b      	sxth	r3, r3
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d116      	bne.n	800b114 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	78db      	ldrb	r3, [r3, #3]
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d005      	beq.n	800b0fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	78db      	ldrb	r3, [r3, #3]
 800b0f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d127      	bne.n	800b14e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	799b      	ldrb	r3, [r3, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <USBH_ParseEPDesc+0xfc>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	799b      	ldrb	r3, [r3, #6]
 800b10a:	2b10      	cmp	r3, #16
 800b10c:	d91f      	bls.n	800b14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b10e:	2303      	movs	r3, #3
 800b110:	75fb      	strb	r3, [r7, #23]
 800b112:	e01c      	b.n	800b14e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	78db      	ldrb	r3, [r3, #3]
 800b118:	f003 0303 	and.w	r3, r3, #3
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d10a      	bne.n	800b136 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	799b      	ldrb	r3, [r3, #6]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d003      	beq.n	800b130 <USBH_ParseEPDesc+0x11e>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	799b      	ldrb	r3, [r3, #6]
 800b12c:	2b10      	cmp	r3, #16
 800b12e:	d90e      	bls.n	800b14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b130:	2303      	movs	r3, #3
 800b132:	75fb      	strb	r3, [r7, #23]
 800b134:	e00b      	b.n	800b14e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	78db      	ldrb	r3, [r3, #3]
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d105      	bne.n	800b14e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	799b      	ldrb	r3, [r3, #6]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b14a:	2303      	movs	r3, #3
 800b14c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b150:	4618      	mov	r0, r3
 800b152:	371c      	adds	r7, #28
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	4613      	mov	r3, r2
 800b168:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	2b03      	cmp	r3, #3
 800b172:	d120      	bne.n	800b1b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	1e9a      	subs	r2, r3, #2
 800b17a:	88fb      	ldrh	r3, [r7, #6]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	bf28      	it	cs
 800b180:	4613      	movcs	r3, r2
 800b182:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3302      	adds	r3, #2
 800b188:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b18a:	2300      	movs	r3, #0
 800b18c:	82fb      	strh	r3, [r7, #22]
 800b18e:	e00b      	b.n	800b1a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b190:	8afb      	ldrh	r3, [r7, #22]
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4413      	add	r3, r2
 800b196:	781a      	ldrb	r2, [r3, #0]
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b1a2:	8afb      	ldrh	r3, [r7, #22]
 800b1a4:	3302      	adds	r3, #2
 800b1a6:	82fb      	strh	r3, [r7, #22]
 800b1a8:	8afa      	ldrh	r2, [r7, #22]
 800b1aa:	8abb      	ldrh	r3, [r7, #20]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d3ef      	bcc.n	800b190 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	371c      	adds	r7, #28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b085      	sub	sp, #20
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	881a      	ldrh	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	4413      	add	r3, r2
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	4613      	mov	r3, r2
 800b204:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	789b      	ldrb	r3, [r3, #2]
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d002      	beq.n	800b218 <USBH_CtlReq+0x20>
 800b212:	2b02      	cmp	r3, #2
 800b214:	d00f      	beq.n	800b236 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b216:	e027      	b.n	800b268 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	88fa      	ldrh	r2, [r7, #6]
 800b222:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2202      	movs	r2, #2
 800b22e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
      break;
 800b234:	e018      	b.n	800b268 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 f81c 	bl	800b274 <USBH_HandleControl>
 800b23c:	4603      	mov	r3, r0
 800b23e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b240:	7dfb      	ldrb	r3, [r7, #23]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d002      	beq.n	800b24c <USBH_CtlReq+0x54>
 800b246:	7dfb      	ldrb	r3, [r7, #23]
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d106      	bne.n	800b25a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2201      	movs	r2, #1
 800b250:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	761a      	strb	r2, [r3, #24]
      break;
 800b258:	e005      	b.n	800b266 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	2b02      	cmp	r3, #2
 800b25e:	d102      	bne.n	800b266 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2201      	movs	r2, #1
 800b264:	709a      	strb	r2, [r3, #2]
      break;
 800b266:	bf00      	nop
  }
  return status;
 800b268:	7dfb      	ldrb	r3, [r7, #23]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af02      	add	r7, sp, #8
 800b27a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b27c:	2301      	movs	r3, #1
 800b27e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b280:	2300      	movs	r3, #0
 800b282:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7e1b      	ldrb	r3, [r3, #24]
 800b288:	3b01      	subs	r3, #1
 800b28a:	2b0a      	cmp	r3, #10
 800b28c:	f200 8156 	bhi.w	800b53c <USBH_HandleControl+0x2c8>
 800b290:	a201      	add	r2, pc, #4	; (adr r2, 800b298 <USBH_HandleControl+0x24>)
 800b292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b296:	bf00      	nop
 800b298:	0800b2c5 	.word	0x0800b2c5
 800b29c:	0800b2df 	.word	0x0800b2df
 800b2a0:	0800b349 	.word	0x0800b349
 800b2a4:	0800b36f 	.word	0x0800b36f
 800b2a8:	0800b3a7 	.word	0x0800b3a7
 800b2ac:	0800b3d1 	.word	0x0800b3d1
 800b2b0:	0800b423 	.word	0x0800b423
 800b2b4:	0800b445 	.word	0x0800b445
 800b2b8:	0800b481 	.word	0x0800b481
 800b2bc:	0800b4a7 	.word	0x0800b4a7
 800b2c0:	0800b4e5 	.word	0x0800b4e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f103 0110 	add.w	r1, r3, #16
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	795b      	ldrb	r3, [r3, #5]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f943 	bl	800b55c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	761a      	strb	r2, [r3, #24]
      break;
 800b2dc:	e139      	b.n	800b552 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	795b      	ldrb	r3, [r3, #5]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f003 ffb5 	bl	800f254 <USBH_LL_GetURBState>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2ee:	7bbb      	ldrb	r3, [r7, #14]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d11e      	bne.n	800b332 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7c1b      	ldrb	r3, [r3, #16]
 800b2f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	8adb      	ldrh	r3, [r3, #22]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00a      	beq.n	800b31c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b306:	7b7b      	ldrb	r3, [r7, #13]
 800b308:	2b80      	cmp	r3, #128	; 0x80
 800b30a:	d103      	bne.n	800b314 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2203      	movs	r2, #3
 800b310:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b312:	e115      	b.n	800b540 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2205      	movs	r2, #5
 800b318:	761a      	strb	r2, [r3, #24]
      break;
 800b31a:	e111      	b.n	800b540 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b31c:	7b7b      	ldrb	r3, [r7, #13]
 800b31e:	2b80      	cmp	r3, #128	; 0x80
 800b320:	d103      	bne.n	800b32a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2209      	movs	r2, #9
 800b326:	761a      	strb	r2, [r3, #24]
      break;
 800b328:	e10a      	b.n	800b540 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2207      	movs	r2, #7
 800b32e:	761a      	strb	r2, [r3, #24]
      break;
 800b330:	e106      	b.n	800b540 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b332:	7bbb      	ldrb	r3, [r7, #14]
 800b334:	2b04      	cmp	r3, #4
 800b336:	d003      	beq.n	800b340 <USBH_HandleControl+0xcc>
 800b338:	7bbb      	ldrb	r3, [r7, #14]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	f040 8100 	bne.w	800b540 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	220b      	movs	r2, #11
 800b344:	761a      	strb	r2, [r3, #24]
      break;
 800b346:	e0fb      	b.n	800b540 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6899      	ldr	r1, [r3, #8]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	899a      	ldrh	r2, [r3, #12]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	791b      	ldrb	r3, [r3, #4]
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 f93a 	bl	800b5da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2204      	movs	r2, #4
 800b36a:	761a      	strb	r2, [r3, #24]
      break;
 800b36c:	e0f1      	b.n	800b552 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	791b      	ldrb	r3, [r3, #4]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f003 ff6d 	bl	800f254 <USBH_LL_GetURBState>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d102      	bne.n	800b38a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2209      	movs	r2, #9
 800b388:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	2b05      	cmp	r3, #5
 800b38e:	d102      	bne.n	800b396 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b390:	2303      	movs	r3, #3
 800b392:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b394:	e0d6      	b.n	800b544 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	f040 80d3 	bne.w	800b544 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	220b      	movs	r2, #11
 800b3a2:	761a      	strb	r2, [r3, #24]
      break;
 800b3a4:	e0ce      	b.n	800b544 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6899      	ldr	r1, [r3, #8]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	899a      	ldrh	r2, [r3, #12]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	795b      	ldrb	r3, [r3, #5]
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	9000      	str	r0, [sp, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 f8ea 	bl	800b590 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2206      	movs	r2, #6
 800b3cc:	761a      	strb	r2, [r3, #24]
      break;
 800b3ce:	e0c0      	b.n	800b552 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	795b      	ldrb	r3, [r3, #5]
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f003 ff3c 	bl	800f254 <USBH_LL_GetURBState>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3e0:	7bbb      	ldrb	r3, [r7, #14]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d103      	bne.n	800b3ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2207      	movs	r2, #7
 800b3ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3ec:	e0ac      	b.n	800b548 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	d105      	bne.n	800b400 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	220c      	movs	r2, #12
 800b3f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b3fa:	2303      	movs	r3, #3
 800b3fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b3fe:	e0a3      	b.n	800b548 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b400:	7bbb      	ldrb	r3, [r7, #14]
 800b402:	2b02      	cmp	r3, #2
 800b404:	d103      	bne.n	800b40e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2205      	movs	r2, #5
 800b40a:	761a      	strb	r2, [r3, #24]
      break;
 800b40c:	e09c      	b.n	800b548 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b40e:	7bbb      	ldrb	r3, [r7, #14]
 800b410:	2b04      	cmp	r3, #4
 800b412:	f040 8099 	bne.w	800b548 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	220b      	movs	r2, #11
 800b41a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b41c:	2302      	movs	r3, #2
 800b41e:	73fb      	strb	r3, [r7, #15]
      break;
 800b420:	e092      	b.n	800b548 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	791b      	ldrb	r3, [r3, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	2100      	movs	r1, #0
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f8d5 	bl	800b5da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b436:	b29a      	uxth	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2208      	movs	r2, #8
 800b440:	761a      	strb	r2, [r3, #24]

      break;
 800b442:	e086      	b.n	800b552 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	791b      	ldrb	r3, [r3, #4]
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f003 ff02 	bl	800f254 <USBH_LL_GetURBState>
 800b450:	4603      	mov	r3, r0
 800b452:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d105      	bne.n	800b466 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	220d      	movs	r2, #13
 800b45e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b464:	e072      	b.n	800b54c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b466:	7bbb      	ldrb	r3, [r7, #14]
 800b468:	2b04      	cmp	r3, #4
 800b46a:	d103      	bne.n	800b474 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	220b      	movs	r2, #11
 800b470:	761a      	strb	r2, [r3, #24]
      break;
 800b472:	e06b      	b.n	800b54c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b474:	7bbb      	ldrb	r3, [r7, #14]
 800b476:	2b05      	cmp	r3, #5
 800b478:	d168      	bne.n	800b54c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b47a:	2303      	movs	r3, #3
 800b47c:	73fb      	strb	r3, [r7, #15]
      break;
 800b47e:	e065      	b.n	800b54c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	795b      	ldrb	r3, [r3, #5]
 800b484:	2201      	movs	r2, #1
 800b486:	9200      	str	r2, [sp, #0]
 800b488:	2200      	movs	r2, #0
 800b48a:	2100      	movs	r1, #0
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f87f 	bl	800b590 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b498:	b29a      	uxth	r2, r3
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	761a      	strb	r2, [r3, #24]
      break;
 800b4a4:	e055      	b.n	800b552 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	795b      	ldrb	r3, [r3, #5]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f003 fed1 	bl	800f254 <USBH_LL_GetURBState>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b4b6:	7bbb      	ldrb	r3, [r7, #14]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d105      	bne.n	800b4c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	220d      	movs	r2, #13
 800b4c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b4c6:	e043      	b.n	800b550 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b4c8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d103      	bne.n	800b4d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2209      	movs	r2, #9
 800b4d2:	761a      	strb	r2, [r3, #24]
      break;
 800b4d4:	e03c      	b.n	800b550 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	2b04      	cmp	r3, #4
 800b4da:	d139      	bne.n	800b550 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	220b      	movs	r2, #11
 800b4e0:	761a      	strb	r2, [r3, #24]
      break;
 800b4e2:	e035      	b.n	800b550 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	7e5b      	ldrb	r3, [r3, #25]
 800b4e8:	3301      	adds	r3, #1
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	765a      	strb	r2, [r3, #25]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	7e5b      	ldrb	r3, [r3, #25]
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d806      	bhi.n	800b506 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b504:	e025      	b.n	800b552 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b50c:	2106      	movs	r1, #6
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	795b      	ldrb	r3, [r3, #5]
 800b51c:	4619      	mov	r1, r3
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f90c 	bl	800b73c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	791b      	ldrb	r3, [r3, #4]
 800b528:	4619      	mov	r1, r3
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f906 	bl	800b73c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b536:	2302      	movs	r3, #2
 800b538:	73fb      	strb	r3, [r7, #15]
      break;
 800b53a:	e00a      	b.n	800b552 <USBH_HandleControl+0x2de>

    default:
      break;
 800b53c:	bf00      	nop
 800b53e:	e008      	b.n	800b552 <USBH_HandleControl+0x2de>
      break;
 800b540:	bf00      	nop
 800b542:	e006      	b.n	800b552 <USBH_HandleControl+0x2de>
      break;
 800b544:	bf00      	nop
 800b546:	e004      	b.n	800b552 <USBH_HandleControl+0x2de>
      break;
 800b548:	bf00      	nop
 800b54a:	e002      	b.n	800b552 <USBH_HandleControl+0x2de>
      break;
 800b54c:	bf00      	nop
 800b54e:	e000      	b.n	800b552 <USBH_HandleControl+0x2de>
      break;
 800b550:	bf00      	nop
  }

  return status;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b088      	sub	sp, #32
 800b560:	af04      	add	r7, sp, #16
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b56a:	79f9      	ldrb	r1, [r7, #7]
 800b56c:	2300      	movs	r3, #0
 800b56e:	9303      	str	r3, [sp, #12]
 800b570:	2308      	movs	r3, #8
 800b572:	9302      	str	r3, [sp, #8]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	2300      	movs	r3, #0
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	2300      	movs	r3, #0
 800b57e:	2200      	movs	r2, #0
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f003 fe36 	bl	800f1f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3710      	adds	r7, #16
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af04      	add	r7, sp, #16
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	4611      	mov	r1, r2
 800b59c:	461a      	mov	r2, r3
 800b59e:	460b      	mov	r3, r1
 800b5a0:	80fb      	strh	r3, [r7, #6]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5b4:	7979      	ldrb	r1, [r7, #5]
 800b5b6:	7e3b      	ldrb	r3, [r7, #24]
 800b5b8:	9303      	str	r3, [sp, #12]
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	9302      	str	r3, [sp, #8]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	9300      	str	r3, [sp, #0]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f003 fe11 	bl	800f1f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b088      	sub	sp, #32
 800b5de:	af04      	add	r7, sp, #16
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	80fb      	strh	r3, [r7, #6]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5f0:	7979      	ldrb	r1, [r7, #5]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	88fb      	ldrh	r3, [r7, #6]
 800b5f8:	9302      	str	r3, [sp, #8]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	9301      	str	r3, [sp, #4]
 800b5fe:	2301      	movs	r3, #1
 800b600:	9300      	str	r3, [sp, #0]
 800b602:	2300      	movs	r3, #0
 800b604:	2201      	movs	r2, #1
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f003 fdf3 	bl	800f1f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b60c:	2300      	movs	r3, #0

}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b088      	sub	sp, #32
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	4611      	mov	r1, r2
 800b622:	461a      	mov	r2, r3
 800b624:	460b      	mov	r3, r1
 800b626:	80fb      	strh	r3, [r7, #6]
 800b628:	4613      	mov	r3, r2
 800b62a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b63a:	7979      	ldrb	r1, [r7, #5]
 800b63c:	7e3b      	ldrb	r3, [r7, #24]
 800b63e:	9303      	str	r3, [sp, #12]
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	9302      	str	r3, [sp, #8]
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	2301      	movs	r3, #1
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	2302      	movs	r3, #2
 800b64e:	2200      	movs	r2, #0
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f003 fdce 	bl	800f1f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af04      	add	r7, sp, #16
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4611      	mov	r1, r2
 800b66c:	461a      	mov	r2, r3
 800b66e:	460b      	mov	r3, r1
 800b670:	80fb      	strh	r3, [r7, #6]
 800b672:	4613      	mov	r3, r2
 800b674:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b676:	7979      	ldrb	r1, [r7, #5]
 800b678:	2300      	movs	r3, #0
 800b67a:	9303      	str	r3, [sp, #12]
 800b67c:	88fb      	ldrh	r3, [r7, #6]
 800b67e:	9302      	str	r3, [sp, #8]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	2301      	movs	r3, #1
 800b686:	9300      	str	r3, [sp, #0]
 800b688:	2302      	movs	r3, #2
 800b68a:	2201      	movs	r2, #1
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f003 fdb0 	bl	800f1f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af04      	add	r7, sp, #16
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	4608      	mov	r0, r1
 800b6a6:	4611      	mov	r1, r2
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	70fb      	strb	r3, [r7, #3]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70bb      	strb	r3, [r7, #2]
 800b6b2:	4613      	mov	r3, r2
 800b6b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b6b6:	7878      	ldrb	r0, [r7, #1]
 800b6b8:	78ba      	ldrb	r2, [r7, #2]
 800b6ba:	78f9      	ldrb	r1, [r7, #3]
 800b6bc:	8b3b      	ldrh	r3, [r7, #24]
 800b6be:	9302      	str	r3, [sp, #8]
 800b6c0:	7d3b      	ldrb	r3, [r7, #20]
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	7c3b      	ldrb	r3, [r7, #16]
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f003 fd43 	bl	800f156 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b6e6:	78fb      	ldrb	r3, [r7, #3]
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f003 fd62 	bl	800f1b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f836 	bl	800b778 <USBH_GetFreePipe>
 800b70c:	4603      	mov	r3, r0
 800b70e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b710:	89fb      	ldrh	r3, [r7, #14]
 800b712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b716:	4293      	cmp	r3, r2
 800b718:	d00a      	beq.n	800b730 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b71a:	78fa      	ldrb	r2, [r7, #3]
 800b71c:	89fb      	ldrh	r3, [r7, #14]
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b726:	6879      	ldr	r1, [r7, #4]
 800b728:	33e0      	adds	r3, #224	; 0xe0
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	440b      	add	r3, r1
 800b72e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	b2db      	uxtb	r3, r3
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	460b      	mov	r3, r1
 800b746:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	2b0f      	cmp	r3, #15
 800b74c:	d80d      	bhi.n	800b76a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	33e0      	adds	r3, #224	; 0xe0
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	78fb      	ldrb	r3, [r7, #3]
 800b75c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	33e0      	adds	r3, #224	; 0xe0
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	440b      	add	r3, r1
 800b768:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b784:	2300      	movs	r3, #0
 800b786:	73fb      	strb	r3, [r7, #15]
 800b788:	e00f      	b.n	800b7aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	33e0      	adds	r3, #224	; 0xe0
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	4413      	add	r3, r2
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d102      	bne.n	800b7a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b79e:	7bfb      	ldrb	r3, [r7, #15]
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	e007      	b.n	800b7b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	73fb      	strb	r3, [r7, #15]
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
 800b7ac:	2b0f      	cmp	r3, #15
 800b7ae:	d9ec      	bls.n	800b78a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b7b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b7ca:	79fb      	ldrb	r3, [r7, #7]
 800b7cc:	4a08      	ldr	r2, [pc, #32]	; (800b7f0 <disk_status+0x30>)
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	79fa      	ldrb	r2, [r7, #7]
 800b7d8:	4905      	ldr	r1, [pc, #20]	; (800b7f0 <disk_status+0x30>)
 800b7da:	440a      	add	r2, r1
 800b7dc:	7a12      	ldrb	r2, [r2, #8]
 800b7de:	4610      	mov	r0, r2
 800b7e0:	4798      	blx	r3
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20001d8c 	.word	0x20001d8c

0800b7f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b802:	79fb      	ldrb	r3, [r7, #7]
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <disk_initialize+0x48>)
 800b806:	5cd3      	ldrb	r3, [r2, r3]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d111      	bne.n	800b830 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	4a0b      	ldr	r2, [pc, #44]	; (800b83c <disk_initialize+0x48>)
 800b810:	2101      	movs	r1, #1
 800b812:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b814:	79fb      	ldrb	r3, [r7, #7]
 800b816:	4a09      	ldr	r2, [pc, #36]	; (800b83c <disk_initialize+0x48>)
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	79fa      	ldrb	r2, [r7, #7]
 800b822:	4906      	ldr	r1, [pc, #24]	; (800b83c <disk_initialize+0x48>)
 800b824:	440a      	add	r2, r1
 800b826:	7a12      	ldrb	r2, [r2, #8]
 800b828:	4610      	mov	r0, r2
 800b82a:	4798      	blx	r3
 800b82c:	4603      	mov	r3, r0
 800b82e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b830:	7bfb      	ldrb	r3, [r7, #15]
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20001d8c 	.word	0x20001d8c

0800b840 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b840:	b590      	push	{r4, r7, lr}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60b9      	str	r1, [r7, #8]
 800b848:	607a      	str	r2, [r7, #4]
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	4603      	mov	r3, r0
 800b84e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	4a0a      	ldr	r2, [pc, #40]	; (800b87c <disk_read+0x3c>)
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	689c      	ldr	r4, [r3, #8]
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	4a07      	ldr	r2, [pc, #28]	; (800b87c <disk_read+0x3c>)
 800b860:	4413      	add	r3, r2
 800b862:	7a18      	ldrb	r0, [r3, #8]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	68b9      	ldr	r1, [r7, #8]
 800b86a:	47a0      	blx	r4
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b870:	7dfb      	ldrb	r3, [r7, #23]
}
 800b872:	4618      	mov	r0, r3
 800b874:	371c      	adds	r7, #28
 800b876:	46bd      	mov	sp, r7
 800b878:	bd90      	pop	{r4, r7, pc}
 800b87a:	bf00      	nop
 800b87c:	20001d8c 	.word	0x20001d8c

0800b880 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
 800b886:	60b9      	str	r1, [r7, #8]
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	4603      	mov	r3, r0
 800b88e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <disk_write+0x3c>)
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4413      	add	r3, r2
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	68dc      	ldr	r4, [r3, #12]
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	4a07      	ldr	r2, [pc, #28]	; (800b8bc <disk_write+0x3c>)
 800b8a0:	4413      	add	r3, r2
 800b8a2:	7a18      	ldrb	r0, [r3, #8]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	68b9      	ldr	r1, [r7, #8]
 800b8aa:	47a0      	blx	r4
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	371c      	adds	r7, #28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd90      	pop	{r4, r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20001d8c 	.word	0x20001d8c

0800b8c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	603a      	str	r2, [r7, #0]
 800b8ca:	71fb      	strb	r3, [r7, #7]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b8d0:	79fb      	ldrb	r3, [r7, #7]
 800b8d2:	4a09      	ldr	r2, [pc, #36]	; (800b8f8 <disk_ioctl+0x38>)
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4413      	add	r3, r2
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	79fa      	ldrb	r2, [r7, #7]
 800b8de:	4906      	ldr	r1, [pc, #24]	; (800b8f8 <disk_ioctl+0x38>)
 800b8e0:	440a      	add	r2, r1
 800b8e2:	7a10      	ldrb	r0, [r2, #8]
 800b8e4:	79b9      	ldrb	r1, [r7, #6]
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	4798      	blx	r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3710      	adds	r7, #16
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20001d8c 	.word	0x20001d8c

0800b8fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3301      	adds	r3, #1
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b90c:	89fb      	ldrh	r3, [r7, #14]
 800b90e:	021b      	lsls	r3, r3, #8
 800b910:	b21a      	sxth	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	b21b      	sxth	r3, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	b21b      	sxth	r3, r3
 800b91c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b91e:	89fb      	ldrh	r3, [r7, #14]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3714      	adds	r7, #20
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3303      	adds	r3, #3
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	021b      	lsls	r3, r3, #8
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	3202      	adds	r2, #2
 800b944:	7812      	ldrb	r2, [r2, #0]
 800b946:	4313      	orrs	r3, r2
 800b948:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	021b      	lsls	r3, r3, #8
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	3201      	adds	r2, #1
 800b952:	7812      	ldrb	r2, [r2, #0]
 800b954:	4313      	orrs	r3, r2
 800b956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	021b      	lsls	r3, r3, #8
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	7812      	ldrb	r2, [r2, #0]
 800b960:	4313      	orrs	r3, r2
 800b962:	60fb      	str	r3, [r7, #12]
	return rv;
 800b964:	68fb      	ldr	r3, [r7, #12]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr

0800b972 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b972:	b480      	push	{r7}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	460b      	mov	r3, r1
 800b97c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	1c5a      	adds	r2, r3, #1
 800b982:	607a      	str	r2, [r7, #4]
 800b984:	887a      	ldrh	r2, [r7, #2]
 800b986:	b2d2      	uxtb	r2, r2
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	887b      	ldrh	r3, [r7, #2]
 800b98c:	0a1b      	lsrs	r3, r3, #8
 800b98e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	1c5a      	adds	r2, r3, #1
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	887a      	ldrh	r2, [r7, #2]
 800b998:	b2d2      	uxtb	r2, r2
 800b99a:	701a      	strb	r2, [r3, #0]
}
 800b99c:	bf00      	nop
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	1c5a      	adds	r2, r3, #1
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	b2d2      	uxtb	r2, r2
 800b9bc:	701a      	strb	r2, [r3, #0]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	0a1b      	lsrs	r3, r3, #8
 800b9c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	607a      	str	r2, [r7, #4]
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	b2d2      	uxtb	r2, r2
 800b9ce:	701a      	strb	r2, [r3, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	1c5a      	adds	r2, r3, #1
 800b9da:	607a      	str	r2, [r7, #4]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	b2d2      	uxtb	r2, r2
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	0a1b      	lsrs	r3, r3, #8
 800b9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	607a      	str	r2, [r7, #4]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	b2d2      	uxtb	r2, r2
 800b9f2:	701a      	strb	r2, [r3, #0]
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba00:	b480      	push	{r7}
 800ba02:	b087      	sub	sp, #28
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00d      	beq.n	800ba36 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	1c53      	adds	r3, r2, #1
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	1c59      	adds	r1, r3, #1
 800ba24:	6179      	str	r1, [r7, #20]
 800ba26:	7812      	ldrb	r2, [r2, #0]
 800ba28:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	607b      	str	r3, [r7, #4]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1f1      	bne.n	800ba1a <mem_cpy+0x1a>
	}
}
 800ba36:	bf00      	nop
 800ba38:	371c      	adds	r7, #28
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba42:	b480      	push	{r7}
 800ba44:	b087      	sub	sp, #28
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	617a      	str	r2, [r7, #20]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	b2d2      	uxtb	r2, r2
 800ba5c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	607b      	str	r3, [r7, #4]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f3      	bne.n	800ba52 <mem_set+0x10>
}
 800ba6a:	bf00      	nop
 800ba6c:	bf00      	nop
 800ba6e:	371c      	adds	r7, #28
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba78:	b480      	push	{r7}
 800ba7a:	b089      	sub	sp, #36	; 0x24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	61fb      	str	r3, [r7, #28]
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	61fa      	str	r2, [r7, #28]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	61ba      	str	r2, [r7, #24]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	1acb      	subs	r3, r1, r3
 800baa4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	607b      	str	r3, [r7, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <mem_cmp+0x40>
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d0eb      	beq.n	800ba90 <mem_cmp+0x18>

	return r;
 800bab8:	697b      	ldr	r3, [r7, #20]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3724      	adds	r7, #36	; 0x24
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bad0:	e002      	b.n	800bad8 <chk_chr+0x12>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	3301      	adds	r3, #1
 800bad6:	607b      	str	r3, [r7, #4]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d005      	beq.n	800baec <chk_chr+0x26>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	461a      	mov	r2, r3
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	4293      	cmp	r3, r2
 800baea:	d1f2      	bne.n	800bad2 <chk_chr+0xc>
	return *str;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	781b      	ldrb	r3, [r3, #0]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb06:	2300      	movs	r3, #0
 800bb08:	60bb      	str	r3, [r7, #8]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	e029      	b.n	800bb64 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb10:	4a27      	ldr	r2, [pc, #156]	; (800bbb0 <chk_lock+0xb4>)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	011b      	lsls	r3, r3, #4
 800bb16:	4413      	add	r3, r2
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d01d      	beq.n	800bb5a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb1e:	4a24      	ldr	r2, [pc, #144]	; (800bbb0 <chk_lock+0xb4>)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4413      	add	r3, r2
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d116      	bne.n	800bb5e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb30:	4a1f      	ldr	r2, [pc, #124]	; (800bbb0 <chk_lock+0xb4>)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	4413      	add	r3, r2
 800bb38:	3304      	adds	r3, #4
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d10c      	bne.n	800bb5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb44:	4a1a      	ldr	r2, [pc, #104]	; (800bbb0 <chk_lock+0xb4>)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	4413      	add	r3, r2
 800bb4c:	3308      	adds	r3, #8
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d102      	bne.n	800bb5e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb58:	e007      	b.n	800bb6a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3301      	adds	r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d9d2      	bls.n	800bb10 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d109      	bne.n	800bb84 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d102      	bne.n	800bb7c <chk_lock+0x80>
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d101      	bne.n	800bb80 <chk_lock+0x84>
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	e010      	b.n	800bba2 <chk_lock+0xa6>
 800bb80:	2312      	movs	r3, #18
 800bb82:	e00e      	b.n	800bba2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d108      	bne.n	800bb9c <chk_lock+0xa0>
 800bb8a:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <chk_lock+0xb4>)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	011b      	lsls	r3, r3, #4
 800bb90:	4413      	add	r3, r2
 800bb92:	330c      	adds	r3, #12
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb9a:	d101      	bne.n	800bba0 <chk_lock+0xa4>
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	e000      	b.n	800bba2 <chk_lock+0xa6>
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	20001b6c 	.word	0x20001b6c

0800bbb4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
 800bbbe:	e002      	b.n	800bbc6 <enq_lock+0x12>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	607b      	str	r3, [r7, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d806      	bhi.n	800bbda <enq_lock+0x26>
 800bbcc:	4a09      	ldr	r2, [pc, #36]	; (800bbf4 <enq_lock+0x40>)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	011b      	lsls	r3, r3, #4
 800bbd2:	4413      	add	r3, r2
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1f2      	bne.n	800bbc0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	bf14      	ite	ne
 800bbe0:	2301      	movne	r3, #1
 800bbe2:	2300      	moveq	r3, #0
 800bbe4:	b2db      	uxtb	r3, r3
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20001b6c 	.word	0x20001b6c

0800bbf8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e01f      	b.n	800bc48 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc08:	4a41      	ldr	r2, [pc, #260]	; (800bd10 <inc_lock+0x118>)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	4413      	add	r3, r2
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d113      	bne.n	800bc42 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc1a:	4a3d      	ldr	r2, [pc, #244]	; (800bd10 <inc_lock+0x118>)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	4413      	add	r3, r2
 800bc22:	3304      	adds	r3, #4
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d109      	bne.n	800bc42 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc2e:	4a38      	ldr	r2, [pc, #224]	; (800bd10 <inc_lock+0x118>)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	011b      	lsls	r3, r3, #4
 800bc34:	4413      	add	r3, r2
 800bc36:	3308      	adds	r3, #8
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d006      	beq.n	800bc50 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d9dc      	bls.n	800bc08 <inc_lock+0x10>
 800bc4e:	e000      	b.n	800bc52 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc50:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d132      	bne.n	800bcbe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	e002      	b.n	800bc64 <inc_lock+0x6c>
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3301      	adds	r3, #1
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d806      	bhi.n	800bc78 <inc_lock+0x80>
 800bc6a:	4a29      	ldr	r2, [pc, #164]	; (800bd10 <inc_lock+0x118>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	011b      	lsls	r3, r3, #4
 800bc70:	4413      	add	r3, r2
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f2      	bne.n	800bc5e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d101      	bne.n	800bc82 <inc_lock+0x8a>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e040      	b.n	800bd04 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	4922      	ldr	r1, [pc, #136]	; (800bd10 <inc_lock+0x118>)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	011b      	lsls	r3, r3, #4
 800bc8c:	440b      	add	r3, r1
 800bc8e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	689a      	ldr	r2, [r3, #8]
 800bc94:	491e      	ldr	r1, [pc, #120]	; (800bd10 <inc_lock+0x118>)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	440b      	add	r3, r1
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	695a      	ldr	r2, [r3, #20]
 800bca4:	491a      	ldr	r1, [pc, #104]	; (800bd10 <inc_lock+0x118>)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	440b      	add	r3, r1
 800bcac:	3308      	adds	r3, #8
 800bcae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bcb0:	4a17      	ldr	r2, [pc, #92]	; (800bd10 <inc_lock+0x118>)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	4413      	add	r3, r2
 800bcb8:	330c      	adds	r3, #12
 800bcba:	2200      	movs	r2, #0
 800bcbc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d009      	beq.n	800bcd8 <inc_lock+0xe0>
 800bcc4:	4a12      	ldr	r2, [pc, #72]	; (800bd10 <inc_lock+0x118>)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	4413      	add	r3, r2
 800bccc:	330c      	adds	r3, #12
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d001      	beq.n	800bcd8 <inc_lock+0xe0>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	e015      	b.n	800bd04 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d108      	bne.n	800bcf0 <inc_lock+0xf8>
 800bcde:	4a0c      	ldr	r2, [pc, #48]	; (800bd10 <inc_lock+0x118>)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	011b      	lsls	r3, r3, #4
 800bce4:	4413      	add	r3, r2
 800bce6:	330c      	adds	r3, #12
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	3301      	adds	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	e001      	b.n	800bcf4 <inc_lock+0xfc>
 800bcf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcf4:	4906      	ldr	r1, [pc, #24]	; (800bd10 <inc_lock+0x118>)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	011b      	lsls	r3, r3, #4
 800bcfa:	440b      	add	r3, r1
 800bcfc:	330c      	adds	r3, #12
 800bcfe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	3301      	adds	r3, #1
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0e:	4770      	bx	lr
 800bd10:	20001b6c 	.word	0x20001b6c

0800bd14 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	607b      	str	r3, [r7, #4]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d825      	bhi.n	800bd74 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd28:	4a17      	ldr	r2, [pc, #92]	; (800bd88 <dec_lock+0x74>)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	011b      	lsls	r3, r3, #4
 800bd2e:	4413      	add	r3, r2
 800bd30:	330c      	adds	r3, #12
 800bd32:	881b      	ldrh	r3, [r3, #0]
 800bd34:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd36:	89fb      	ldrh	r3, [r7, #14]
 800bd38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd3c:	d101      	bne.n	800bd42 <dec_lock+0x2e>
 800bd3e:	2300      	movs	r3, #0
 800bd40:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd42:	89fb      	ldrh	r3, [r7, #14]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <dec_lock+0x3a>
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd4e:	4a0e      	ldr	r2, [pc, #56]	; (800bd88 <dec_lock+0x74>)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	330c      	adds	r3, #12
 800bd58:	89fa      	ldrh	r2, [r7, #14]
 800bd5a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd5c:	89fb      	ldrh	r3, [r7, #14]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d105      	bne.n	800bd6e <dec_lock+0x5a>
 800bd62:	4a09      	ldr	r2, [pc, #36]	; (800bd88 <dec_lock+0x74>)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	4413      	add	r3, r2
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	737b      	strb	r3, [r7, #13]
 800bd72:	e001      	b.n	800bd78 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd74:	2302      	movs	r3, #2
 800bd76:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd78:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	20001b6c 	.word	0x20001b6c

0800bd8c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bd94:	2300      	movs	r3, #0
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e010      	b.n	800bdbc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd9a:	4a0d      	ldr	r2, [pc, #52]	; (800bdd0 <clear_lock+0x44>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	4413      	add	r3, r2
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d105      	bne.n	800bdb6 <clear_lock+0x2a>
 800bdaa:	4a09      	ldr	r2, [pc, #36]	; (800bdd0 <clear_lock+0x44>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	60fb      	str	r3, [r7, #12]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d9eb      	bls.n	800bd9a <clear_lock+0xe>
	}
}
 800bdc2:	bf00      	nop
 800bdc4:	bf00      	nop
 800bdc6:	3714      	adds	r7, #20
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr
 800bdd0:	20001b6c 	.word	0x20001b6c

0800bdd4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	78db      	ldrb	r3, [r3, #3]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d034      	beq.n	800be52 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7858      	ldrb	r0, [r3, #1]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	f7ff fd40 	bl	800b880 <disk_write>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <sync_window+0x38>
			res = FR_DISK_ERR;
 800be06:	2301      	movs	r3, #1
 800be08:	73fb      	strb	r3, [r7, #15]
 800be0a:	e022      	b.n	800be52 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2200      	movs	r2, #0
 800be10:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	1ad2      	subs	r2, r2, r3
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d217      	bcs.n	800be52 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	789b      	ldrb	r3, [r3, #2]
 800be26:	613b      	str	r3, [r7, #16]
 800be28:	e010      	b.n	800be4c <sync_window+0x78>
					wsect += fs->fsize;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	4413      	add	r3, r2
 800be32:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7858      	ldrb	r0, [r3, #1]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be3e:	2301      	movs	r3, #1
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	f7ff fd1d 	bl	800b880 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	3b01      	subs	r3, #1
 800be4a:	613b      	str	r3, [r7, #16]
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d8eb      	bhi.n	800be2a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}

0800be5c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be6e:	683a      	ldr	r2, [r7, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d01b      	beq.n	800beac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7ff ffad 	bl	800bdd4 <sync_window>
 800be7a:	4603      	mov	r3, r0
 800be7c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be7e:	7bfb      	ldrb	r3, [r7, #15]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d113      	bne.n	800beac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	7858      	ldrb	r0, [r3, #1]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be8e:	2301      	movs	r3, #1
 800be90:	683a      	ldr	r2, [r7, #0]
 800be92:	f7ff fcd5 	bl	800b840 <disk_read>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d004      	beq.n	800bea6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800be9c:	f04f 33ff 	mov.w	r3, #4294967295
 800bea0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7ff ff87 	bl	800bdd4 <sync_window>
 800bec6:	4603      	mov	r3, r0
 800bec8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800beca:	7bfb      	ldrb	r3, [r7, #15]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d158      	bne.n	800bf82 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d148      	bne.n	800bf6a <sync_fs+0xb2>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	791b      	ldrb	r3, [r3, #4]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d144      	bne.n	800bf6a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	3334      	adds	r3, #52	; 0x34
 800bee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bee8:	2100      	movs	r1, #0
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fda9 	bl	800ba42 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	3334      	adds	r3, #52	; 0x34
 800bef4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bef8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800befc:	4618      	mov	r0, r3
 800befe:	f7ff fd38 	bl	800b972 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3334      	adds	r3, #52	; 0x34
 800bf06:	4921      	ldr	r1, [pc, #132]	; (800bf8c <sync_fs+0xd4>)
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7ff fd4d 	bl	800b9a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3334      	adds	r3, #52	; 0x34
 800bf12:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf16:	491e      	ldr	r1, [pc, #120]	; (800bf90 <sync_fs+0xd8>)
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fd45 	bl	800b9a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3334      	adds	r3, #52	; 0x34
 800bf22:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	f7ff fd3b 	bl	800b9a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3334      	adds	r3, #52	; 0x34
 800bf36:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	4610      	mov	r0, r2
 800bf42:	f7ff fd31 	bl	800b9a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6a1b      	ldr	r3, [r3, #32]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	7858      	ldrb	r0, [r3, #1]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf5e:	2301      	movs	r3, #1
 800bf60:	f7ff fc8e 	bl	800b880 <disk_write>
			fs->fsi_flag = 0;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2100      	movs	r1, #0
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7ff fca4 	bl	800b8c0 <disk_ioctl>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d001      	beq.n	800bf82 <sync_fs+0xca>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	41615252 	.word	0x41615252
 800bf90:	61417272 	.word	0x61417272

0800bf94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	3b02      	subs	r3, #2
 800bfa2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	3b02      	subs	r3, #2
 800bfaa:	683a      	ldr	r2, [r7, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d301      	bcc.n	800bfb4 <clust2sect+0x20>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e008      	b.n	800bfc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	895b      	ldrh	r3, [r3, #10]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	fb03 f202 	mul.w	r2, r3, r2
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	4413      	add	r3, r2
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d904      	bls.n	800bff2 <get_fat+0x20>
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	683a      	ldr	r2, [r7, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d302      	bcc.n	800bff8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bff2:	2301      	movs	r3, #1
 800bff4:	617b      	str	r3, [r7, #20]
 800bff6:	e08f      	b.n	800c118 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bff8:	f04f 33ff 	mov.w	r3, #4294967295
 800bffc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	2b03      	cmp	r3, #3
 800c004:	d062      	beq.n	800c0cc <get_fat+0xfa>
 800c006:	2b03      	cmp	r3, #3
 800c008:	dc7c      	bgt.n	800c104 <get_fat+0x132>
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d002      	beq.n	800c014 <get_fat+0x42>
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d042      	beq.n	800c098 <get_fat+0xc6>
 800c012:	e077      	b.n	800c104 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	0a5b      	lsrs	r3, r3, #9
 800c02a:	4413      	add	r3, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	6938      	ldr	r0, [r7, #16]
 800c030:	f7ff ff14 	bl	800be5c <move_window>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d167      	bne.n	800c10a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	1c5a      	adds	r2, r3, #1
 800c03e:	60fa      	str	r2, [r7, #12]
 800c040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4413      	add	r3, r2
 800c048:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c04c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	0a5b      	lsrs	r3, r3, #9
 800c056:	4413      	add	r3, r2
 800c058:	4619      	mov	r1, r3
 800c05a:	6938      	ldr	r0, [r7, #16]
 800c05c:	f7ff fefe 	bl	800be5c <move_window>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d153      	bne.n	800c10e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c06c:	693a      	ldr	r2, [r7, #16]
 800c06e:	4413      	add	r3, r2
 800c070:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c074:	021b      	lsls	r3, r3, #8
 800c076:	461a      	mov	r2, r3
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <get_fat+0xbc>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	091b      	lsrs	r3, r3, #4
 800c08c:	e002      	b.n	800c094 <get_fat+0xc2>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c094:	617b      	str	r3, [r7, #20]
			break;
 800c096:	e03f      	b.n	800c118 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	0a1b      	lsrs	r3, r3, #8
 800c0a0:	4413      	add	r3, r2
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6938      	ldr	r0, [r7, #16]
 800c0a6:	f7ff fed9 	bl	800be5c <move_window>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d130      	bne.n	800c112 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c0be:	4413      	add	r3, r2
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f7ff fc1b 	bl	800b8fc <ld_word>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	617b      	str	r3, [r7, #20]
			break;
 800c0ca:	e025      	b.n	800c118 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	09db      	lsrs	r3, r3, #7
 800c0d4:	4413      	add	r3, r2
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6938      	ldr	r0, [r7, #16]
 800c0da:	f7ff febf 	bl	800be5c <move_window>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d118      	bne.n	800c116 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c0f2:	4413      	add	r3, r2
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff fc19 	bl	800b92c <ld_dword>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c100:	617b      	str	r3, [r7, #20]
			break;
 800c102:	e009      	b.n	800c118 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c104:	2301      	movs	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
 800c108:	e006      	b.n	800c118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c10a:	bf00      	nop
 800c10c:	e004      	b.n	800c118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c10e:	bf00      	nop
 800c110:	e002      	b.n	800c118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c112:	bf00      	nop
 800c114:	e000      	b.n	800c118 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c116:	bf00      	nop
		}
	}

	return val;
 800c118:	697b      	ldr	r3, [r7, #20]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3718      	adds	r7, #24
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}

0800c122 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c122:	b590      	push	{r4, r7, lr}
 800c124:	b089      	sub	sp, #36	; 0x24
 800c126:	af00      	add	r7, sp, #0
 800c128:	60f8      	str	r0, [r7, #12]
 800c12a:	60b9      	str	r1, [r7, #8]
 800c12c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c12e:	2302      	movs	r3, #2
 800c130:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b01      	cmp	r3, #1
 800c136:	f240 80d9 	bls.w	800c2ec <put_fat+0x1ca>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	68ba      	ldr	r2, [r7, #8]
 800c140:	429a      	cmp	r2, r3
 800c142:	f080 80d3 	bcs.w	800c2ec <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	f000 8096 	beq.w	800c27c <put_fat+0x15a>
 800c150:	2b03      	cmp	r3, #3
 800c152:	f300 80cb 	bgt.w	800c2ec <put_fat+0x1ca>
 800c156:	2b01      	cmp	r3, #1
 800c158:	d002      	beq.n	800c160 <put_fat+0x3e>
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d06e      	beq.n	800c23c <put_fat+0x11a>
 800c15e:	e0c5      	b.n	800c2ec <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	61bb      	str	r3, [r7, #24]
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	085b      	lsrs	r3, r3, #1
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	4413      	add	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	0a5b      	lsrs	r3, r3, #9
 800c176:	4413      	add	r3, r2
 800c178:	4619      	mov	r1, r3
 800c17a:	68f8      	ldr	r0, [r7, #12]
 800c17c:	f7ff fe6e 	bl	800be5c <move_window>
 800c180:	4603      	mov	r3, r0
 800c182:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c184:	7ffb      	ldrb	r3, [r7, #31]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f040 80a9 	bne.w	800c2de <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	1c59      	adds	r1, r3, #1
 800c196:	61b9      	str	r1, [r7, #24]
 800c198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c19c:	4413      	add	r3, r2
 800c19e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00d      	beq.n	800c1c6 <put_fat+0xa4>
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f003 030f 	and.w	r3, r3, #15
 800c1b4:	b25a      	sxtb	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	011b      	lsls	r3, r3, #4
 800c1bc:	b25b      	sxtb	r3, r3
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	b25b      	sxtb	r3, r3
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	e001      	b.n	800c1ca <put_fat+0xa8>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	0a5b      	lsrs	r3, r3, #9
 800c1dc:	4413      	add	r3, r2
 800c1de:	4619      	mov	r1, r3
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f7ff fe3b 	bl	800be5c <move_window>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1ea:	7ffb      	ldrb	r3, [r7, #31]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d178      	bne.n	800c2e2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1f6:	69bb      	ldr	r3, [r7, #24]
 800c1f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1fc:	4413      	add	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f003 0301 	and.w	r3, r3, #1
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <put_fat+0xf0>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	091b      	lsrs	r3, r3, #4
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	e00e      	b.n	800c230 <put_fat+0x10e>
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b25b      	sxtb	r3, r3
 800c218:	f023 030f 	bic.w	r3, r3, #15
 800c21c:	b25a      	sxtb	r2, r3
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	b25b      	sxtb	r3, r3
 800c224:	f003 030f 	and.w	r3, r3, #15
 800c228:	b25b      	sxtb	r3, r3
 800c22a:	4313      	orrs	r3, r2
 800c22c:	b25b      	sxtb	r3, r3
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2201      	movs	r2, #1
 800c238:	70da      	strb	r2, [r3, #3]
			break;
 800c23a:	e057      	b.n	800c2ec <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	0a1b      	lsrs	r3, r3, #8
 800c244:	4413      	add	r3, r2
 800c246:	4619      	mov	r1, r3
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f7ff fe07 	bl	800be5c <move_window>
 800c24e:	4603      	mov	r3, r0
 800c250:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c252:	7ffb      	ldrb	r3, [r7, #31]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d146      	bne.n	800c2e6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	005b      	lsls	r3, r3, #1
 800c262:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c266:	4413      	add	r3, r2
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	b292      	uxth	r2, r2
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fb7f 	bl	800b972 <st_word>
			fs->wflag = 1;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2201      	movs	r2, #1
 800c278:	70da      	strb	r2, [r3, #3]
			break;
 800c27a:	e037      	b.n	800c2ec <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	09db      	lsrs	r3, r3, #7
 800c284:	4413      	add	r3, r2
 800c286:	4619      	mov	r1, r3
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff fde7 	bl	800be5c <move_window>
 800c28e:	4603      	mov	r3, r0
 800c290:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c292:	7ffb      	ldrb	r3, [r7, #31]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d128      	bne.n	800c2ea <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2ac:	4413      	add	r3, r2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff fb3c 	bl	800b92c <ld_dword>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c2ba:	4323      	orrs	r3, r4
 800c2bc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c2cc:	4413      	add	r3, r2
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7ff fb69 	bl	800b9a8 <st_dword>
			fs->wflag = 1;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	2201      	movs	r2, #1
 800c2da:	70da      	strb	r2, [r3, #3]
			break;
 800c2dc:	e006      	b.n	800c2ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2de:	bf00      	nop
 800c2e0:	e004      	b.n	800c2ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2e2:	bf00      	nop
 800c2e4:	e002      	b.n	800c2ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2e6:	bf00      	nop
 800c2e8:	e000      	b.n	800c2ec <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c2ea:	bf00      	nop
		}
	}
	return res;
 800c2ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3724      	adds	r7, #36	; 0x24
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd90      	pop	{r4, r7, pc}

0800c2f6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b088      	sub	sp, #32
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	60f8      	str	r0, [r7, #12]
 800c2fe:	60b9      	str	r1, [r7, #8]
 800c300:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d904      	bls.n	800c31c <remove_chain+0x26>
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	699b      	ldr	r3, [r3, #24]
 800c316:	68ba      	ldr	r2, [r7, #8]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d301      	bcc.n	800c320 <remove_chain+0x2a>
 800c31c:	2302      	movs	r3, #2
 800c31e:	e04b      	b.n	800c3b8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00c      	beq.n	800c340 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	69b8      	ldr	r0, [r7, #24]
 800c32e:	f7ff fef8 	bl	800c122 <put_fat>
 800c332:	4603      	mov	r3, r0
 800c334:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c336:	7ffb      	ldrb	r3, [r7, #31]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <remove_chain+0x4a>
 800c33c:	7ffb      	ldrb	r3, [r7, #31]
 800c33e:	e03b      	b.n	800c3b8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c340:	68b9      	ldr	r1, [r7, #8]
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fe45 	bl	800bfd2 <get_fat>
 800c348:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d031      	beq.n	800c3b4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d101      	bne.n	800c35a <remove_chain+0x64>
 800c356:	2302      	movs	r3, #2
 800c358:	e02e      	b.n	800c3b8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c360:	d101      	bne.n	800c366 <remove_chain+0x70>
 800c362:	2301      	movs	r3, #1
 800c364:	e028      	b.n	800c3b8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c366:	2200      	movs	r2, #0
 800c368:	68b9      	ldr	r1, [r7, #8]
 800c36a:	69b8      	ldr	r0, [r7, #24]
 800c36c:	f7ff fed9 	bl	800c122 <put_fat>
 800c370:	4603      	mov	r3, r0
 800c372:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c374:	7ffb      	ldrb	r3, [r7, #31]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <remove_chain+0x88>
 800c37a:	7ffb      	ldrb	r3, [r7, #31]
 800c37c:	e01c      	b.n	800c3b8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	695a      	ldr	r2, [r3, #20]
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	3b02      	subs	r3, #2
 800c388:	429a      	cmp	r2, r3
 800c38a:	d20b      	bcs.n	800c3a4 <remove_chain+0xae>
			fs->free_clst++;
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	791b      	ldrb	r3, [r3, #4]
 800c39a:	f043 0301 	orr.w	r3, r3, #1
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d3c6      	bcc.n	800c340 <remove_chain+0x4a>
 800c3b2:	e000      	b.n	800c3b6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c3b4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3720      	adds	r7, #32
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d10d      	bne.n	800c3f2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <create_chain+0x2c>
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d31b      	bcc.n	800c424 <create_chain+0x64>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	61bb      	str	r3, [r7, #24]
 800c3f0:	e018      	b.n	800c424 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff fdec 	bl	800bfd2 <get_fat>
 800c3fa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	d801      	bhi.n	800c406 <create_chain+0x46>
 800c402:	2301      	movs	r3, #1
 800c404:	e070      	b.n	800c4e8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d101      	bne.n	800c412 <create_chain+0x52>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	e06a      	b.n	800c4e8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d201      	bcs.n	800c420 <create_chain+0x60>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	e063      	b.n	800c4e8 <create_chain+0x128>
		scl = clst;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	3301      	adds	r3, #1
 800c42c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	69fa      	ldr	r2, [r7, #28]
 800c434:	429a      	cmp	r2, r3
 800c436:	d307      	bcc.n	800c448 <create_chain+0x88>
				ncl = 2;
 800c438:	2302      	movs	r3, #2
 800c43a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c43c:	69fa      	ldr	r2, [r7, #28]
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	429a      	cmp	r2, r3
 800c442:	d901      	bls.n	800c448 <create_chain+0x88>
 800c444:	2300      	movs	r3, #0
 800c446:	e04f      	b.n	800c4e8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c448:	69f9      	ldr	r1, [r7, #28]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f7ff fdc1 	bl	800bfd2 <get_fat>
 800c450:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00e      	beq.n	800c476 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d003      	beq.n	800c466 <create_chain+0xa6>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c464:	d101      	bne.n	800c46a <create_chain+0xaa>
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	e03e      	b.n	800c4e8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	429a      	cmp	r2, r3
 800c470:	d1da      	bne.n	800c428 <create_chain+0x68>
 800c472:	2300      	movs	r3, #0
 800c474:	e038      	b.n	800c4e8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c476:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c478:	f04f 32ff 	mov.w	r2, #4294967295
 800c47c:	69f9      	ldr	r1, [r7, #28]
 800c47e:	6938      	ldr	r0, [r7, #16]
 800c480:	f7ff fe4f 	bl	800c122 <put_fat>
 800c484:	4603      	mov	r3, r0
 800c486:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d109      	bne.n	800c4a2 <create_chain+0xe2>
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d006      	beq.n	800c4a2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c494:	69fa      	ldr	r2, [r7, #28]
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6938      	ldr	r0, [r7, #16]
 800c49a:	f7ff fe42 	bl	800c122 <put_fat>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d116      	bne.n	800c4d6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	69fa      	ldr	r2, [r7, #28]
 800c4ac:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	695a      	ldr	r2, [r3, #20]
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	699b      	ldr	r3, [r3, #24]
 800c4b6:	3b02      	subs	r3, #2
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d804      	bhi.n	800c4c6 <create_chain+0x106>
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	1e5a      	subs	r2, r3, #1
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	791b      	ldrb	r3, [r3, #4]
 800c4ca:	f043 0301 	orr.w	r3, r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	711a      	strb	r2, [r3, #4]
 800c4d4:	e007      	b.n	800c4e6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c4d6:	7dfb      	ldrb	r3, [r7, #23]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d102      	bne.n	800c4e2 <create_chain+0x122>
 800c4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c4e0:	e000      	b.n	800c4e4 <create_chain+0x124>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c4e6:	69fb      	ldr	r3, [r7, #28]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3720      	adds	r7, #32
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b087      	sub	sp, #28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c504:	3304      	adds	r3, #4
 800c506:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	0a5b      	lsrs	r3, r3, #9
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	8952      	ldrh	r2, [r2, #10]
 800c510:	fbb3 f3f2 	udiv	r3, r3, r2
 800c514:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	1d1a      	adds	r2, r3, #4
 800c51a:	613a      	str	r2, [r7, #16]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d101      	bne.n	800c52a <clmt_clust+0x3a>
 800c526:	2300      	movs	r3, #0
 800c528:	e010      	b.n	800c54c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c52a:	697a      	ldr	r2, [r7, #20]
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d307      	bcc.n	800c542 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	617b      	str	r3, [r7, #20]
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	3304      	adds	r3, #4
 800c53e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c540:	e7e9      	b.n	800c516 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c542:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	4413      	add	r3, r2
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	371c      	adds	r7, #28
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b086      	sub	sp, #24
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
 800c560:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c56e:	d204      	bcs.n	800c57a <dir_sdi+0x22>
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	f003 031f 	and.w	r3, r3, #31
 800c576:	2b00      	cmp	r3, #0
 800c578:	d001      	beq.n	800c57e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c57a:	2302      	movs	r3, #2
 800c57c:	e063      	b.n	800c646 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d106      	bne.n	800c59e <dir_sdi+0x46>
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d902      	bls.n	800c59e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10c      	bne.n	800c5be <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	095b      	lsrs	r3, r3, #5
 800c5a8:	693a      	ldr	r2, [r7, #16]
 800c5aa:	8912      	ldrh	r2, [r2, #8]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d301      	bcc.n	800c5b4 <dir_sdi+0x5c>
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	e048      	b.n	800c646 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	61da      	str	r2, [r3, #28]
 800c5bc:	e029      	b.n	800c612 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	895b      	ldrh	r3, [r3, #10]
 800c5c2:	025b      	lsls	r3, r3, #9
 800c5c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5c6:	e019      	b.n	800c5fc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6979      	ldr	r1, [r7, #20]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7ff fd00 	bl	800bfd2 <get_fat>
 800c5d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d101      	bne.n	800c5e0 <dir_sdi+0x88>
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e032      	b.n	800c646 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d904      	bls.n	800c5f0 <dir_sdi+0x98>
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	699b      	ldr	r3, [r3, #24]
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d301      	bcc.n	800c5f4 <dir_sdi+0x9c>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e028      	b.n	800c646 <dir_sdi+0xee>
			ofs -= csz;
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	429a      	cmp	r2, r3
 800c602:	d2e1      	bcs.n	800c5c8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c604:	6979      	ldr	r1, [r7, #20]
 800c606:	6938      	ldr	r0, [r7, #16]
 800c608:	f7ff fcc4 	bl	800bf94 <clust2sect>
 800c60c:	4602      	mov	r2, r0
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <dir_sdi+0xcc>
 800c620:	2302      	movs	r3, #2
 800c622:	e010      	b.n	800c646 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	69da      	ldr	r2, [r3, #28]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	0a5b      	lsrs	r3, r3, #9
 800c62c:	441a      	add	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c63e:	441a      	add	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3718      	adds	r7, #24
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b086      	sub	sp, #24
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	3320      	adds	r3, #32
 800c664:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	69db      	ldr	r3, [r3, #28]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d003      	beq.n	800c676 <dir_next+0x28>
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c674:	d301      	bcc.n	800c67a <dir_next+0x2c>
 800c676:	2304      	movs	r3, #4
 800c678:	e0aa      	b.n	800c7d0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c680:	2b00      	cmp	r3, #0
 800c682:	f040 8098 	bne.w	800c7b6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	69db      	ldr	r3, [r3, #28]
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10b      	bne.n	800c6b0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	8912      	ldrh	r2, [r2, #8]
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	f0c0 8088 	bcc.w	800c7b6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	61da      	str	r2, [r3, #28]
 800c6ac:	2304      	movs	r3, #4
 800c6ae:	e08f      	b.n	800c7d0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	0a5b      	lsrs	r3, r3, #9
 800c6b4:	68fa      	ldr	r2, [r7, #12]
 800c6b6:	8952      	ldrh	r2, [r2, #10]
 800c6b8:	3a01      	subs	r2, #1
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d17a      	bne.n	800c7b6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	f7ff fc82 	bl	800bfd2 <get_fat>
 800c6ce:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d801      	bhi.n	800c6da <dir_next+0x8c>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e07a      	b.n	800c7d0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e0:	d101      	bne.n	800c6e6 <dir_next+0x98>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e074      	b.n	800c7d0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d358      	bcc.n	800c7a2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d104      	bne.n	800c700 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	61da      	str	r2, [r3, #28]
 800c6fc:	2304      	movs	r3, #4
 800c6fe:	e067      	b.n	800c7d0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	4619      	mov	r1, r3
 800c708:	4610      	mov	r0, r2
 800c70a:	f7ff fe59 	bl	800c3c0 <create_chain>
 800c70e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <dir_next+0xcc>
 800c716:	2307      	movs	r3, #7
 800c718:	e05a      	b.n	800c7d0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d101      	bne.n	800c724 <dir_next+0xd6>
 800c720:	2302      	movs	r3, #2
 800c722:	e055      	b.n	800c7d0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c72a:	d101      	bne.n	800c730 <dir_next+0xe2>
 800c72c:	2301      	movs	r3, #1
 800c72e:	e04f      	b.n	800c7d0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c730:	68f8      	ldr	r0, [r7, #12]
 800c732:	f7ff fb4f 	bl	800bdd4 <sync_window>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <dir_next+0xf2>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e047      	b.n	800c7d0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	3334      	adds	r3, #52	; 0x34
 800c744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c748:	2100      	movs	r1, #0
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7ff f979 	bl	800ba42 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c750:	2300      	movs	r3, #0
 800c752:	613b      	str	r3, [r7, #16]
 800c754:	6979      	ldr	r1, [r7, #20]
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fc1c 	bl	800bf94 <clust2sect>
 800c75c:	4602      	mov	r2, r0
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	631a      	str	r2, [r3, #48]	; 0x30
 800c762:	e012      	b.n	800c78a <dir_next+0x13c>
						fs->wflag = 1;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2201      	movs	r2, #1
 800c768:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f7ff fb32 	bl	800bdd4 <sync_window>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <dir_next+0x12c>
 800c776:	2301      	movs	r3, #1
 800c778:	e02a      	b.n	800c7d0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	3301      	adds	r3, #1
 800c77e:	613b      	str	r3, [r7, #16]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	631a      	str	r2, [r3, #48]	; 0x30
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	895b      	ldrh	r3, [r3, #10]
 800c78e:	461a      	mov	r2, r3
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	4293      	cmp	r3, r2
 800c794:	d3e6      	bcc.n	800c764 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	1ad2      	subs	r2, r2, r3
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c7a8:	6979      	ldr	r1, [r7, #20]
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fbf2 	bl	800bf94 <clust2sect>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68ba      	ldr	r2, [r7, #8]
 800c7ba:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c8:	441a      	add	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3718      	adds	r7, #24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff feb4 	bl	800c558 <dir_sdi>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d12b      	bne.n	800c852 <dir_alloc+0x7a>
		n = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	4619      	mov	r1, r3
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff fb29 	bl	800be5c <move_window>
 800c80a:	4603      	mov	r3, r0
 800c80c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c80e:	7dfb      	ldrb	r3, [r7, #23]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11d      	bne.n	800c850 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1b      	ldr	r3, [r3, #32]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2be5      	cmp	r3, #229	; 0xe5
 800c81c:	d004      	beq.n	800c828 <dir_alloc+0x50>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d107      	bne.n	800c838 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	3301      	adds	r3, #1
 800c82c:	613b      	str	r3, [r7, #16]
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	429a      	cmp	r2, r3
 800c834:	d102      	bne.n	800c83c <dir_alloc+0x64>
 800c836:	e00c      	b.n	800c852 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c838:	2300      	movs	r3, #0
 800c83a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c83c:	2101      	movs	r1, #1
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff ff05 	bl	800c64e <dir_next>
 800c844:	4603      	mov	r3, r0
 800c846:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d0d7      	beq.n	800c7fe <dir_alloc+0x26>
 800c84e:	e000      	b.n	800c852 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c850:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c852:	7dfb      	ldrb	r3, [r7, #23]
 800c854:	2b04      	cmp	r3, #4
 800c856:	d101      	bne.n	800c85c <dir_alloc+0x84>
 800c858:	2307      	movs	r3, #7
 800c85a:	75fb      	strb	r3, [r7, #23]
	return res;
 800c85c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3718      	adds	r7, #24
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	331a      	adds	r3, #26
 800c874:	4618      	mov	r0, r3
 800c876:	f7ff f841 	bl	800b8fc <ld_word>
 800c87a:	4603      	mov	r3, r0
 800c87c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	2b03      	cmp	r3, #3
 800c884:	d109      	bne.n	800c89a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	3314      	adds	r3, #20
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff f836 	bl	800b8fc <ld_word>
 800c890:	4603      	mov	r3, r0
 800c892:	041b      	lsls	r3, r3, #16
 800c894:	68fa      	ldr	r2, [r7, #12]
 800c896:	4313      	orrs	r3, r2
 800c898:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c89a:	68fb      	ldr	r3, [r7, #12]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	331a      	adds	r3, #26
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	b292      	uxth	r2, r2
 800c8b8:	4611      	mov	r1, r2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff f859 	bl	800b972 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	2b03      	cmp	r3, #3
 800c8c6:	d109      	bne.n	800c8dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	f103 0214 	add.w	r2, r3, #20
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	0c1b      	lsrs	r3, r3, #16
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7ff f84b 	bl	800b972 <st_word>
	}
}
 800c8dc:	bf00      	nop
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c8e4:	b590      	push	{r4, r7, lr}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	331a      	adds	r3, #26
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7ff f802 	bl	800b8fc <ld_word>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <cmp_lfn+0x1e>
 800c8fe:	2300      	movs	r3, #0
 800c900:	e059      	b.n	800c9b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c90a:	1e5a      	subs	r2, r3, #1
 800c90c:	4613      	mov	r3, r2
 800c90e:	005b      	lsls	r3, r3, #1
 800c910:	4413      	add	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c918:	2301      	movs	r3, #1
 800c91a:	81fb      	strh	r3, [r7, #14]
 800c91c:	2300      	movs	r3, #0
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	e033      	b.n	800c98a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c922:	4a27      	ldr	r2, [pc, #156]	; (800c9c0 <cmp_lfn+0xdc>)
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	4413      	add	r3, r2
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	4413      	add	r3, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f7fe ffe3 	bl	800b8fc <ld_word>
 800c936:	4603      	mov	r3, r0
 800c938:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d01a      	beq.n	800c976 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	2bfe      	cmp	r3, #254	; 0xfe
 800c944:	d812      	bhi.n	800c96c <cmp_lfn+0x88>
 800c946:	89bb      	ldrh	r3, [r7, #12]
 800c948:	4618      	mov	r0, r3
 800c94a:	f002 f99f 	bl	800ec8c <ff_wtoupper>
 800c94e:	4603      	mov	r3, r0
 800c950:	461c      	mov	r4, r3
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	1c5a      	adds	r2, r3, #1
 800c956:	617a      	str	r2, [r7, #20]
 800c958:	005b      	lsls	r3, r3, #1
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4413      	add	r3, r2
 800c95e:	881b      	ldrh	r3, [r3, #0]
 800c960:	4618      	mov	r0, r3
 800c962:	f002 f993 	bl	800ec8c <ff_wtoupper>
 800c966:	4603      	mov	r3, r0
 800c968:	429c      	cmp	r4, r3
 800c96a:	d001      	beq.n	800c970 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c96c:	2300      	movs	r3, #0
 800c96e:	e022      	b.n	800c9b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c970:	89bb      	ldrh	r3, [r7, #12]
 800c972:	81fb      	strh	r3, [r7, #14]
 800c974:	e006      	b.n	800c984 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c976:	89bb      	ldrh	r3, [r7, #12]
 800c978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d001      	beq.n	800c984 <cmp_lfn+0xa0>
 800c980:	2300      	movs	r3, #0
 800c982:	e018      	b.n	800c9b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	3301      	adds	r3, #1
 800c988:	613b      	str	r3, [r7, #16]
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b0c      	cmp	r3, #12
 800c98e:	d9c8      	bls.n	800c922 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <cmp_lfn+0xd0>
 800c99c:	89fb      	ldrh	r3, [r7, #14]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d008      	beq.n	800c9b4 <cmp_lfn+0xd0>
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	881b      	ldrh	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d001      	beq.n	800c9b4 <cmp_lfn+0xd0>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e000      	b.n	800c9b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c9b4:	2301      	movs	r3, #1
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd90      	pop	{r4, r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	0800f8a8 	.word	0x0800f8a8

0800c9c4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	331a      	adds	r3, #26
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7fe ff92 	bl	800b8fc <ld_word>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <pick_lfn+0x1e>
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e04d      	b.n	800ca7e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ea:	1e5a      	subs	r2, r3, #1
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4413      	add	r3, r2
 800c9f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	81fb      	strh	r3, [r7, #14]
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	e028      	b.n	800ca54 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ca02:	4a21      	ldr	r2, [pc, #132]	; (800ca88 <pick_lfn+0xc4>)
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	4413      	add	r3, r2
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	4413      	add	r3, r2
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fe ff73 	bl	800b8fc <ld_word>
 800ca16:	4603      	mov	r3, r0
 800ca18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ca1a:	89fb      	ldrh	r3, [r7, #14]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00f      	beq.n	800ca40 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	2bfe      	cmp	r3, #254	; 0xfe
 800ca24:	d901      	bls.n	800ca2a <pick_lfn+0x66>
 800ca26:	2300      	movs	r3, #0
 800ca28:	e029      	b.n	800ca7e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ca2a:	89bb      	ldrh	r3, [r7, #12]
 800ca2c:	81fb      	strh	r3, [r7, #14]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	617a      	str	r2, [r7, #20]
 800ca34:	005b      	lsls	r3, r3, #1
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	4413      	add	r3, r2
 800ca3a:	89fa      	ldrh	r2, [r7, #14]
 800ca3c:	801a      	strh	r2, [r3, #0]
 800ca3e:	e006      	b.n	800ca4e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ca40:	89bb      	ldrh	r3, [r7, #12]
 800ca42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d001      	beq.n	800ca4e <pick_lfn+0x8a>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	e017      	b.n	800ca7e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	3301      	adds	r3, #1
 800ca52:	613b      	str	r3, [r7, #16]
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	2b0c      	cmp	r3, #12
 800ca58:	d9d3      	bls.n	800ca02 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2bfe      	cmp	r3, #254	; 0xfe
 800ca6a:	d901      	bls.n	800ca70 <pick_lfn+0xac>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e006      	b.n	800ca7e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	005b      	lsls	r3, r3, #1
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	4413      	add	r3, r2
 800ca78:	2200      	movs	r2, #0
 800ca7a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ca7c:	2301      	movs	r3, #1
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
 800ca86:	bf00      	nop
 800ca88:	0800f8a8 	.word	0x0800f8a8

0800ca8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b088      	sub	sp, #32
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	4611      	mov	r1, r2
 800ca98:	461a      	mov	r2, r3
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	71fb      	strb	r3, [r7, #7]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	330d      	adds	r3, #13
 800caa6:	79ba      	ldrb	r2, [r7, #6]
 800caa8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	330b      	adds	r3, #11
 800caae:	220f      	movs	r2, #15
 800cab0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	330c      	adds	r3, #12
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	331a      	adds	r3, #26
 800cabe:	2100      	movs	r1, #0
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe ff56 	bl	800b972 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800cac6:	79fb      	ldrb	r3, [r7, #7]
 800cac8:	1e5a      	subs	r2, r3, #1
 800caca:	4613      	mov	r3, r2
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	4413      	add	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	82fb      	strh	r3, [r7, #22]
 800cada:	2300      	movs	r3, #0
 800cadc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800cade:	8afb      	ldrh	r3, [r7, #22]
 800cae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d007      	beq.n	800caf8 <put_lfn+0x6c>
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	1c5a      	adds	r2, r3, #1
 800caec:	61fa      	str	r2, [r7, #28]
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	4413      	add	r3, r2
 800caf4:	881b      	ldrh	r3, [r3, #0]
 800caf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800caf8:	4a17      	ldr	r2, [pc, #92]	; (800cb58 <put_lfn+0xcc>)
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	4413      	add	r3, r2
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	461a      	mov	r2, r3
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	4413      	add	r3, r2
 800cb06:	8afa      	ldrh	r2, [r7, #22]
 800cb08:	4611      	mov	r1, r2
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe ff31 	bl	800b972 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800cb10:	8afb      	ldrh	r3, [r7, #22]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d102      	bne.n	800cb1c <put_lfn+0x90>
 800cb16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	61bb      	str	r3, [r7, #24]
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b0c      	cmp	r3, #12
 800cb26:	d9da      	bls.n	800cade <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800cb28:	8afb      	ldrh	r3, [r7, #22]
 800cb2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d006      	beq.n	800cb40 <put_lfn+0xb4>
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4413      	add	r3, r2
 800cb3a:	881b      	ldrh	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d103      	bne.n	800cb48 <put_lfn+0xbc>
 800cb40:	79fb      	ldrb	r3, [r7, #7]
 800cb42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	79fa      	ldrb	r2, [r7, #7]
 800cb4c:	701a      	strb	r2, [r3, #0]
}
 800cb4e:	bf00      	nop
 800cb50:	3720      	adds	r7, #32
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	0800f8a8 	.word	0x0800f8a8

0800cb5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08c      	sub	sp, #48	; 0x30
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800cb6a:	220b      	movs	r2, #11
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7fe ff46 	bl	800ba00 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	2b05      	cmp	r3, #5
 800cb78:	d92b      	bls.n	800cbd2 <gen_numname+0x76>
		sr = seq;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cb7e:	e022      	b.n	800cbc6 <gen_numname+0x6a>
			wc = *lfn++;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	1c9a      	adds	r2, r3, #2
 800cb84:	607a      	str	r2, [r7, #4]
 800cb86:	881b      	ldrh	r3, [r3, #0]
 800cb88:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb8e:	e017      	b.n	800cbc0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	005a      	lsls	r2, r3, #1
 800cb94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	4413      	add	r3, r2
 800cb9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cb9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cba0:	085b      	lsrs	r3, r3, #1
 800cba2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d005      	beq.n	800cbba <gen_numname+0x5e>
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800cbb4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800cbb8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	2b0f      	cmp	r3, #15
 800cbc4:	d9e4      	bls.n	800cb90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1d8      	bne.n	800cb80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cbd2:	2307      	movs	r3, #7
 800cbd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 030f 	and.w	r3, r3, #15
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	3330      	adds	r3, #48	; 0x30
 800cbe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cbe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbea:	2b39      	cmp	r3, #57	; 0x39
 800cbec:	d904      	bls.n	800cbf8 <gen_numname+0x9c>
 800cbee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbf2:	3307      	adds	r3, #7
 800cbf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbfa:	1e5a      	subs	r2, r3, #1
 800cbfc:	62ba      	str	r2, [r7, #40]	; 0x28
 800cbfe:	3330      	adds	r3, #48	; 0x30
 800cc00:	443b      	add	r3, r7
 800cc02:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cc06:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	091b      	lsrs	r3, r3, #4
 800cc0e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1df      	bne.n	800cbd6 <gen_numname+0x7a>
	ns[i] = '~';
 800cc16:	f107 0214 	add.w	r2, r7, #20
 800cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1c:	4413      	add	r3, r2
 800cc1e:	227e      	movs	r2, #126	; 0x7e
 800cc20:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cc22:	2300      	movs	r3, #0
 800cc24:	627b      	str	r3, [r7, #36]	; 0x24
 800cc26:	e002      	b.n	800cc2e <gen_numname+0xd2>
 800cc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d205      	bcs.n	800cc42 <gen_numname+0xe6>
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	4413      	add	r3, r2
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	2b20      	cmp	r3, #32
 800cc40:	d1f2      	bne.n	800cc28 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc44:	2b07      	cmp	r3, #7
 800cc46:	d807      	bhi.n	800cc58 <gen_numname+0xfc>
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	62ba      	str	r2, [r7, #40]	; 0x28
 800cc4e:	3330      	adds	r3, #48	; 0x30
 800cc50:	443b      	add	r3, r7
 800cc52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cc56:	e000      	b.n	800cc5a <gen_numname+0xfe>
 800cc58:	2120      	movs	r1, #32
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	1c5a      	adds	r2, r3, #1
 800cc5e:	627a      	str	r2, [r7, #36]	; 0x24
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4413      	add	r3, r2
 800cc64:	460a      	mov	r2, r1
 800cc66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	2b07      	cmp	r3, #7
 800cc6c:	d9e9      	bls.n	800cc42 <gen_numname+0xe6>
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	3730      	adds	r7, #48	; 0x30
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cc84:	230b      	movs	r3, #11
 800cc86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	b2da      	uxtb	r2, r3
 800cc8c:	0852      	lsrs	r2, r2, #1
 800cc8e:	01db      	lsls	r3, r3, #7
 800cc90:	4313      	orrs	r3, r2
 800cc92:	b2da      	uxtb	r2, r3
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	1c59      	adds	r1, r3, #1
 800cc98:	6079      	str	r1, [r7, #4]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	3b01      	subs	r3, #1
 800cca4:	60bb      	str	r3, [r7, #8]
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d1ed      	bne.n	800cc88 <sum_sfn+0x10>
	return sum;
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr

0800ccba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b086      	sub	sp, #24
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
 800ccc2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ccce:	23ff      	movs	r3, #255	; 0xff
 800ccd0:	757b      	strb	r3, [r7, #21]
 800ccd2:	23ff      	movs	r3, #255	; 0xff
 800ccd4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ccd6:	e081      	b.n	800cddc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	69db      	ldr	r3, [r3, #28]
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6938      	ldr	r0, [r7, #16]
 800cce0:	f7ff f8bc 	bl	800be5c <move_window>
 800cce4:	4603      	mov	r3, r0
 800cce6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cce8:	7dfb      	ldrb	r3, [r7, #23]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d17c      	bne.n	800cde8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800ccf6:	7dbb      	ldrb	r3, [r7, #22]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d102      	bne.n	800cd02 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	75fb      	strb	r3, [r7, #23]
 800cd00:	e077      	b.n	800cdf2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6a1b      	ldr	r3, [r3, #32]
 800cd06:	330b      	adds	r3, #11
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd0e:	73fb      	strb	r3, [r7, #15]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	7bfa      	ldrb	r2, [r7, #15]
 800cd14:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800cd16:	7dbb      	ldrb	r3, [r7, #22]
 800cd18:	2be5      	cmp	r3, #229	; 0xe5
 800cd1a:	d00e      	beq.n	800cd3a <dir_read+0x80>
 800cd1c:	7dbb      	ldrb	r3, [r7, #22]
 800cd1e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd20:	d00b      	beq.n	800cd3a <dir_read+0x80>
 800cd22:	7bfb      	ldrb	r3, [r7, #15]
 800cd24:	f023 0320 	bic.w	r3, r3, #32
 800cd28:	2b08      	cmp	r3, #8
 800cd2a:	bf0c      	ite	eq
 800cd2c:	2301      	moveq	r3, #1
 800cd2e:	2300      	movne	r3, #0
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	461a      	mov	r2, r3
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d002      	beq.n	800cd40 <dir_read+0x86>
				ord = 0xFF;
 800cd3a:	23ff      	movs	r3, #255	; 0xff
 800cd3c:	757b      	strb	r3, [r7, #21]
 800cd3e:	e044      	b.n	800cdca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	2b0f      	cmp	r3, #15
 800cd44:	d12f      	bne.n	800cda6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800cd46:	7dbb      	ldrb	r3, [r7, #22]
 800cd48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00d      	beq.n	800cd6c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	7b5b      	ldrb	r3, [r3, #13]
 800cd56:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800cd58:	7dbb      	ldrb	r3, [r7, #22]
 800cd5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd5e:	75bb      	strb	r3, [r7, #22]
 800cd60:	7dbb      	ldrb	r3, [r7, #22]
 800cd62:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	695a      	ldr	r2, [r3, #20]
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cd6c:	7dba      	ldrb	r2, [r7, #22]
 800cd6e:	7d7b      	ldrb	r3, [r7, #21]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d115      	bne.n	800cda0 <dir_read+0xe6>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	330d      	adds	r3, #13
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	7d3a      	ldrb	r2, [r7, #20]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d10e      	bne.n	800cda0 <dir_read+0xe6>
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	68da      	ldr	r2, [r3, #12]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a1b      	ldr	r3, [r3, #32]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	f7ff fe19 	bl	800c9c4 <pick_lfn>
 800cd92:	4603      	mov	r3, r0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d003      	beq.n	800cda0 <dir_read+0xe6>
 800cd98:	7d7b      	ldrb	r3, [r7, #21]
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	e000      	b.n	800cda2 <dir_read+0xe8>
 800cda0:	23ff      	movs	r3, #255	; 0xff
 800cda2:	757b      	strb	r3, [r7, #21]
 800cda4:	e011      	b.n	800cdca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800cda6:	7d7b      	ldrb	r3, [r7, #21]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d109      	bne.n	800cdc0 <dir_read+0x106>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff ff61 	bl	800cc78 <sum_sfn>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	461a      	mov	r2, r3
 800cdba:	7d3b      	ldrb	r3, [r7, #20]
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d015      	beq.n	800cdec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800cdc8:	e010      	b.n	800cdec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cdca:	2100      	movs	r1, #0
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fc3e 	bl	800c64e <dir_next>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d109      	bne.n	800cdf0 <dir_read+0x136>
	while (dp->sect) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f47f af79 	bne.w	800ccd8 <dir_read+0x1e>
 800cde6:	e004      	b.n	800cdf2 <dir_read+0x138>
		if (res != FR_OK) break;
 800cde8:	bf00      	nop
 800cdea:	e002      	b.n	800cdf2 <dir_read+0x138>
					break;
 800cdec:	bf00      	nop
 800cdee:	e000      	b.n	800cdf2 <dir_read+0x138>
		if (res != FR_OK) break;
 800cdf0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <dir_read+0x144>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	61da      	str	r2, [r3, #28]
	return res;
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce00:	4618      	mov	r0, r3
 800ce02:	3718      	adds	r7, #24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce16:	2100      	movs	r1, #0
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f7ff fb9d 	bl	800c558 <dir_sdi>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <dir_find+0x24>
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	e0a9      	b.n	800cf80 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce2c:	23ff      	movs	r3, #255	; 0xff
 800ce2e:	753b      	strb	r3, [r7, #20]
 800ce30:	7d3b      	ldrb	r3, [r7, #20]
 800ce32:	757b      	strb	r3, [r7, #21]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f04f 32ff 	mov.w	r2, #4294967295
 800ce3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	69db      	ldr	r3, [r3, #28]
 800ce40:	4619      	mov	r1, r3
 800ce42:	6938      	ldr	r0, [r7, #16]
 800ce44:	f7ff f80a 	bl	800be5c <move_window>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f040 8090 	bne.w	800cf74 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6a1b      	ldr	r3, [r3, #32]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce5c:	7dbb      	ldrb	r3, [r7, #22]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d102      	bne.n	800ce68 <dir_find+0x60>
 800ce62:	2304      	movs	r3, #4
 800ce64:	75fb      	strb	r3, [r7, #23]
 800ce66:	e08a      	b.n	800cf7e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	6a1b      	ldr	r3, [r3, #32]
 800ce6c:	330b      	adds	r3, #11
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce74:	73fb      	strb	r3, [r7, #15]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	7bfa      	ldrb	r2, [r7, #15]
 800ce7a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ce7c:	7dbb      	ldrb	r3, [r7, #22]
 800ce7e:	2be5      	cmp	r3, #229	; 0xe5
 800ce80:	d007      	beq.n	800ce92 <dir_find+0x8a>
 800ce82:	7bfb      	ldrb	r3, [r7, #15]
 800ce84:	f003 0308 	and.w	r3, r3, #8
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <dir_find+0x98>
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
 800ce8e:	2b0f      	cmp	r3, #15
 800ce90:	d006      	beq.n	800cea0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ce92:	23ff      	movs	r3, #255	; 0xff
 800ce94:	757b      	strb	r3, [r7, #21]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f04f 32ff 	mov.w	r2, #4294967295
 800ce9c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce9e:	e05e      	b.n	800cf5e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
 800cea2:	2b0f      	cmp	r3, #15
 800cea4:	d136      	bne.n	800cf14 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ceac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d154      	bne.n	800cf5e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ceb4:	7dbb      	ldrb	r3, [r7, #22]
 800ceb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00d      	beq.n	800ceda <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6a1b      	ldr	r3, [r3, #32]
 800cec2:	7b5b      	ldrb	r3, [r3, #13]
 800cec4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cec6:	7dbb      	ldrb	r3, [r7, #22]
 800cec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cecc:	75bb      	strb	r3, [r7, #22]
 800cece:	7dbb      	ldrb	r3, [r7, #22]
 800ced0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	695a      	ldr	r2, [r3, #20]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ceda:	7dba      	ldrb	r2, [r7, #22]
 800cedc:	7d7b      	ldrb	r3, [r7, #21]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d115      	bne.n	800cf0e <dir_find+0x106>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	330d      	adds	r3, #13
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	7d3a      	ldrb	r2, [r7, #20]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d10e      	bne.n	800cf0e <dir_find+0x106>
 800cef0:	693b      	ldr	r3, [r7, #16]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a1b      	ldr	r3, [r3, #32]
 800cef8:	4619      	mov	r1, r3
 800cefa:	4610      	mov	r0, r2
 800cefc:	f7ff fcf2 	bl	800c8e4 <cmp_lfn>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d003      	beq.n	800cf0e <dir_find+0x106>
 800cf06:	7d7b      	ldrb	r3, [r7, #21]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	e000      	b.n	800cf10 <dir_find+0x108>
 800cf0e:	23ff      	movs	r3, #255	; 0xff
 800cf10:	757b      	strb	r3, [r7, #21]
 800cf12:	e024      	b.n	800cf5e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf14:	7d7b      	ldrb	r3, [r7, #21]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d109      	bne.n	800cf2e <dir_find+0x126>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff feaa 	bl	800cc78 <sum_sfn>
 800cf24:	4603      	mov	r3, r0
 800cf26:	461a      	mov	r2, r3
 800cf28:	7d3b      	ldrb	r3, [r7, #20]
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d024      	beq.n	800cf78 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10a      	bne.n	800cf52 <dir_find+0x14a>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a18      	ldr	r0, [r3, #32]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3324      	adds	r3, #36	; 0x24
 800cf44:	220b      	movs	r2, #11
 800cf46:	4619      	mov	r1, r3
 800cf48:	f7fe fd96 	bl	800ba78 <mem_cmp>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d014      	beq.n	800cf7c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cf52:	23ff      	movs	r3, #255	; 0xff
 800cf54:	757b      	strb	r3, [r7, #21]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cf5e:	2100      	movs	r1, #0
 800cf60:	6878      	ldr	r0, [r7, #4]
 800cf62:	f7ff fb74 	bl	800c64e <dir_next>
 800cf66:	4603      	mov	r3, r0
 800cf68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cf6a:	7dfb      	ldrb	r3, [r7, #23]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	f43f af65 	beq.w	800ce3c <dir_find+0x34>
 800cf72:	e004      	b.n	800cf7e <dir_find+0x176>
		if (res != FR_OK) break;
 800cf74:	bf00      	nop
 800cf76:	e002      	b.n	800cf7e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cf78:	bf00      	nop
 800cf7a:	e000      	b.n	800cf7e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cf7c:	bf00      	nop

	return res;
 800cf7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08c      	sub	sp, #48	; 0x30
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf9c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d001      	beq.n	800cfa8 <dir_register+0x20>
 800cfa4:	2306      	movs	r3, #6
 800cfa6:	e0e0      	b.n	800d16a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24
 800cfac:	e002      	b.n	800cfb4 <dir_register+0x2c>
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	68da      	ldr	r2, [r3, #12]
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	4413      	add	r3, r2
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d1f4      	bne.n	800cfae <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800cfca:	f107 030c 	add.w	r3, r7, #12
 800cfce:	220c      	movs	r2, #12
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe fd15 	bl	800ba00 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	f003 0301 	and.w	r3, r3, #1
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d032      	beq.n	800d046 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2240      	movs	r2, #64	; 0x40
 800cfe4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cfe8:	2301      	movs	r3, #1
 800cfea:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfec:	e016      	b.n	800d01c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	68da      	ldr	r2, [r3, #12]
 800cff8:	f107 010c 	add.w	r1, r7, #12
 800cffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cffe:	f7ff fdad 	bl	800cb5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f7ff ff00 	bl	800ce08 <dir_find>
 800d008:	4603      	mov	r3, r0
 800d00a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d00e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d012:	2b00      	cmp	r3, #0
 800d014:	d106      	bne.n	800d024 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	3301      	adds	r3, #1
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	2b63      	cmp	r3, #99	; 0x63
 800d020:	d9e5      	bls.n	800cfee <dir_register+0x66>
 800d022:	e000      	b.n	800d026 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d024:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d028:	2b64      	cmp	r3, #100	; 0x64
 800d02a:	d101      	bne.n	800d030 <dir_register+0xa8>
 800d02c:	2307      	movs	r3, #7
 800d02e:	e09c      	b.n	800d16a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d030:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d034:	2b04      	cmp	r3, #4
 800d036:	d002      	beq.n	800d03e <dir_register+0xb6>
 800d038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d03c:	e095      	b.n	800d16a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d03e:	7dfa      	ldrb	r2, [r7, #23]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d046:	7dfb      	ldrb	r3, [r7, #23]
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d007      	beq.n	800d060 <dir_register+0xd8>
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	330c      	adds	r3, #12
 800d054:	4a47      	ldr	r2, [pc, #284]	; (800d174 <dir_register+0x1ec>)
 800d056:	fba2 2303 	umull	r2, r3, r2, r3
 800d05a:	089b      	lsrs	r3, r3, #2
 800d05c:	3301      	adds	r3, #1
 800d05e:	e000      	b.n	800d062 <dir_register+0xda>
 800d060:	2301      	movs	r3, #1
 800d062:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d064:	6a39      	ldr	r1, [r7, #32]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f7ff fbb6 	bl	800c7d8 <dir_alloc>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d076:	2b00      	cmp	r3, #0
 800d078:	d148      	bne.n	800d10c <dir_register+0x184>
 800d07a:	6a3b      	ldr	r3, [r7, #32]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	623b      	str	r3, [r7, #32]
 800d080:	6a3b      	ldr	r3, [r7, #32]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d042      	beq.n	800d10c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	695a      	ldr	r2, [r3, #20]
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	015b      	lsls	r3, r3, #5
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7ff fa60 	bl	800c558 <dir_sdi>
 800d098:	4603      	mov	r3, r0
 800d09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d09e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d132      	bne.n	800d10c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3324      	adds	r3, #36	; 0x24
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff fde4 	bl	800cc78 <sum_sfn>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	69db      	ldr	r3, [r3, #28]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	69f8      	ldr	r0, [r7, #28]
 800d0bc:	f7fe fece 	bl	800be5c <move_window>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d11d      	bne.n	800d10a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	68d8      	ldr	r0, [r3, #12]
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a19      	ldr	r1, [r3, #32]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	b2da      	uxtb	r2, r3
 800d0da:	7efb      	ldrb	r3, [r7, #27]
 800d0dc:	f7ff fcd6 	bl	800ca8c <put_lfn>
				fs->wflag = 1;
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7ff fab0 	bl	800c64e <dir_next>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d0f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d107      	bne.n	800d10c <dir_register+0x184>
 800d0fc:	6a3b      	ldr	r3, [r7, #32]
 800d0fe:	3b01      	subs	r3, #1
 800d100:	623b      	str	r3, [r7, #32]
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1d5      	bne.n	800d0b4 <dir_register+0x12c>
 800d108:	e000      	b.n	800d10c <dir_register+0x184>
				if (res != FR_OK) break;
 800d10a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d10c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d110:	2b00      	cmp	r3, #0
 800d112:	d128      	bne.n	800d166 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	69db      	ldr	r3, [r3, #28]
 800d118:	4619      	mov	r1, r3
 800d11a:	69f8      	ldr	r0, [r7, #28]
 800d11c:	f7fe fe9e 	bl	800be5c <move_window>
 800d120:	4603      	mov	r3, r0
 800d122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d11b      	bne.n	800d166 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a1b      	ldr	r3, [r3, #32]
 800d132:	2220      	movs	r2, #32
 800d134:	2100      	movs	r1, #0
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe fc83 	bl	800ba42 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a18      	ldr	r0, [r3, #32]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3324      	adds	r3, #36	; 0x24
 800d144:	220b      	movs	r2, #11
 800d146:	4619      	mov	r1, r3
 800d148:	f7fe fc5a 	bl	800ba00 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	330c      	adds	r3, #12
 800d158:	f002 0218 	and.w	r2, r2, #24
 800d15c:	b2d2      	uxtb	r2, r2
 800d15e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	2201      	movs	r2, #1
 800d164:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3730      	adds	r7, #48	; 0x30
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	4ec4ec4f 	.word	0x4ec4ec4f

0800d178 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b088      	sub	sp, #32
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f000 80c9 	beq.w	800d32a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a0:	d032      	beq.n	800d208 <get_fileinfo+0x90>
			i = j = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d1aa:	e01b      	b.n	800d1e4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d1ac:	89fb      	ldrh	r3, [r7, #14]
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f001 fd2f 	bl	800ec14 <ff_convert>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800d1ba:	89fb      	ldrh	r3, [r7, #14]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <get_fileinfo+0x4e>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	61fb      	str	r3, [r7, #28]
 800d1c4:	e01a      	b.n	800d1fc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	2bfe      	cmp	r3, #254	; 0xfe
 800d1ca:	d902      	bls.n	800d1d2 <get_fileinfo+0x5a>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	61fb      	str	r3, [r7, #28]
 800d1d0:	e014      	b.n	800d1fc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	61fa      	str	r2, [r7, #28]
 800d1d8:	89fa      	ldrh	r2, [r7, #14]
 800d1da:	b2d1      	uxtb	r1, r2
 800d1dc:	683a      	ldr	r2, [r7, #0]
 800d1de:	4413      	add	r3, r2
 800d1e0:	460a      	mov	r2, r1
 800d1e2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	68da      	ldr	r2, [r3, #12]
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	1c59      	adds	r1, r3, #1
 800d1ec:	61b9      	str	r1, [r7, #24]
 800d1ee:	005b      	lsls	r3, r3, #1
 800d1f0:	4413      	add	r3, r2
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	81fb      	strh	r3, [r7, #14]
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1d7      	bne.n	800d1ac <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	4413      	add	r3, r2
 800d202:	3316      	adds	r3, #22
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	61bb      	str	r3, [r7, #24]
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	4413      	add	r3, r2
 800d216:	3316      	adds	r3, #22
 800d218:	781b      	ldrb	r3, [r3, #0]
 800d21a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800d21c:	e04c      	b.n	800d2b8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a1a      	ldr	r2, [r3, #32]
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	1c59      	adds	r1, r3, #1
 800d226:	61f9      	str	r1, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
 800d230:	2b20      	cmp	r3, #32
 800d232:	d100      	bne.n	800d236 <get_fileinfo+0xbe>
 800d234:	e040      	b.n	800d2b8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d236:	7dfb      	ldrb	r3, [r7, #23]
 800d238:	2b05      	cmp	r3, #5
 800d23a:	d101      	bne.n	800d240 <get_fileinfo+0xc8>
 800d23c:	23e5      	movs	r3, #229	; 0xe5
 800d23e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b09      	cmp	r3, #9
 800d244:	d10f      	bne.n	800d266 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800d246:	89bb      	ldrh	r3, [r7, #12]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d105      	bne.n	800d258 <get_fileinfo+0xe0>
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	4413      	add	r3, r2
 800d252:	3316      	adds	r3, #22
 800d254:	222e      	movs	r2, #46	; 0x2e
 800d256:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	61ba      	str	r2, [r7, #24]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	4413      	add	r3, r2
 800d262:	222e      	movs	r2, #46	; 0x2e
 800d264:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800d266:	683a      	ldr	r2, [r7, #0]
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	4413      	add	r3, r2
 800d26c:	3309      	adds	r3, #9
 800d26e:	7dfa      	ldrb	r2, [r7, #23]
 800d270:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800d272:	89bb      	ldrh	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d11c      	bne.n	800d2b2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	2b40      	cmp	r3, #64	; 0x40
 800d27c:	d913      	bls.n	800d2a6 <get_fileinfo+0x12e>
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
 800d280:	2b5a      	cmp	r3, #90	; 0x5a
 800d282:	d810      	bhi.n	800d2a6 <get_fileinfo+0x12e>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6a1b      	ldr	r3, [r3, #32]
 800d288:	330c      	adds	r3, #12
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	2b08      	cmp	r3, #8
 800d292:	d901      	bls.n	800d298 <get_fileinfo+0x120>
 800d294:	2310      	movs	r3, #16
 800d296:	e000      	b.n	800d29a <get_fileinfo+0x122>
 800d298:	2308      	movs	r3, #8
 800d29a:	4013      	ands	r3, r2
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d002      	beq.n	800d2a6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	3320      	adds	r3, #32
 800d2a4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	3316      	adds	r3, #22
 800d2ae:	7dfa      	ldrb	r2, [r7, #23]
 800d2b0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	2b0a      	cmp	r3, #10
 800d2bc:	d9af      	bls.n	800d21e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800d2be:	89bb      	ldrh	r3, [r7, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10d      	bne.n	800d2e0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	4413      	add	r3, r2
 800d2ca:	3316      	adds	r3, #22
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	330c      	adds	r3, #12
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d101      	bne.n	800d2e0 <get_fileinfo+0x168>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d2e0:	683a      	ldr	r2, [r7, #0]
 800d2e2:	69bb      	ldr	r3, [r7, #24]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	3309      	adds	r3, #9
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6a1b      	ldr	r3, [r3, #32]
 800d2f0:	7ada      	ldrb	r2, [r3, #11]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	331c      	adds	r3, #28
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7fe fb15 	bl	800b92c <ld_dword>
 800d302:	4602      	mov	r2, r0
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a1b      	ldr	r3, [r3, #32]
 800d30c:	3316      	adds	r3, #22
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe fb0c 	bl	800b92c <ld_dword>
 800d314:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	b29a      	uxth	r2, r3
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	80da      	strh	r2, [r3, #6]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	0c1b      	lsrs	r3, r3, #16
 800d322:	b29a      	uxth	r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	809a      	strh	r2, [r3, #4]
 800d328:	e000      	b.n	800d32c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d32a:	bf00      	nop
}
 800d32c:	3720      	adds	r7, #32
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
	...

0800d334 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b08a      	sub	sp, #40	; 0x28
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	60fb      	str	r3, [r7, #12]
 800d34c:	2300      	movs	r3, #0
 800d34e:	617b      	str	r3, [r7, #20]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	61ba      	str	r2, [r7, #24]
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	4413      	add	r3, r2
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d364:	2b1f      	cmp	r3, #31
 800d366:	d940      	bls.n	800d3ea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d368:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d36a:	2b2f      	cmp	r3, #47	; 0x2f
 800d36c:	d006      	beq.n	800d37c <create_name+0x48>
 800d36e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d370:	2b5c      	cmp	r3, #92	; 0x5c
 800d372:	d110      	bne.n	800d396 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d374:	e002      	b.n	800d37c <create_name+0x48>
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	3301      	adds	r3, #1
 800d37a:	61bb      	str	r3, [r7, #24]
 800d37c:	693a      	ldr	r2, [r7, #16]
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	4413      	add	r3, r2
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b2f      	cmp	r3, #47	; 0x2f
 800d386:	d0f6      	beq.n	800d376 <create_name+0x42>
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	4413      	add	r3, r2
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b5c      	cmp	r3, #92	; 0x5c
 800d392:	d0f0      	beq.n	800d376 <create_name+0x42>
			break;
 800d394:	e02a      	b.n	800d3ec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2bfe      	cmp	r3, #254	; 0xfe
 800d39a:	d901      	bls.n	800d3a0 <create_name+0x6c>
 800d39c:	2306      	movs	r3, #6
 800d39e:	e17d      	b.n	800d69c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d3a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d3a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f001 fc32 	bl	800ec14 <ff_convert>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d101      	bne.n	800d3be <create_name+0x8a>
 800d3ba:	2306      	movs	r3, #6
 800d3bc:	e16e      	b.n	800d69c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c0:	2b7f      	cmp	r3, #127	; 0x7f
 800d3c2:	d809      	bhi.n	800d3d8 <create_name+0xa4>
 800d3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	488d      	ldr	r0, [pc, #564]	; (800d600 <create_name+0x2cc>)
 800d3ca:	f7fe fb7c 	bl	800bac6 <chk_chr>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <create_name+0xa4>
 800d3d4:	2306      	movs	r3, #6
 800d3d6:	e161      	b.n	800d69c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	617a      	str	r2, [r7, #20]
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3e6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d3e8:	e7b4      	b.n	800d354 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d3ea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	441a      	add	r2, r3
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f8:	2b1f      	cmp	r3, #31
 800d3fa:	d801      	bhi.n	800d400 <create_name+0xcc>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	e000      	b.n	800d402 <create_name+0xce>
 800d400:	2300      	movs	r3, #0
 800d402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d406:	e011      	b.n	800d42c <create_name+0xf8>
		w = lfn[di - 1];
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d40e:	3b01      	subs	r3, #1
 800d410:	005b      	lsls	r3, r3, #1
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4413      	add	r3, r2
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d41c:	2b20      	cmp	r3, #32
 800d41e:	d002      	beq.n	800d426 <create_name+0xf2>
 800d420:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d422:	2b2e      	cmp	r3, #46	; 0x2e
 800d424:	d106      	bne.n	800d434 <create_name+0x100>
		di--;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	3b01      	subs	r3, #1
 800d42a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1ea      	bne.n	800d408 <create_name+0xd4>
 800d432:	e000      	b.n	800d436 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d434:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	005b      	lsls	r3, r3, #1
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	4413      	add	r3, r2
 800d43e:	2200      	movs	r2, #0
 800d440:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d101      	bne.n	800d44c <create_name+0x118>
 800d448:	2306      	movs	r3, #6
 800d44a:	e127      	b.n	800d69c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	3324      	adds	r3, #36	; 0x24
 800d450:	220b      	movs	r2, #11
 800d452:	2120      	movs	r1, #32
 800d454:	4618      	mov	r0, r3
 800d456:	f7fe faf4 	bl	800ba42 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d45a:	2300      	movs	r3, #0
 800d45c:	61bb      	str	r3, [r7, #24]
 800d45e:	e002      	b.n	800d466 <create_name+0x132>
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	3301      	adds	r3, #1
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	4413      	add	r3, r2
 800d46e:	881b      	ldrh	r3, [r3, #0]
 800d470:	2b20      	cmp	r3, #32
 800d472:	d0f5      	beq.n	800d460 <create_name+0x12c>
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	005b      	lsls	r3, r3, #1
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4413      	add	r3, r2
 800d47c:	881b      	ldrh	r3, [r3, #0]
 800d47e:	2b2e      	cmp	r3, #46	; 0x2e
 800d480:	d0ee      	beq.n	800d460 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d009      	beq.n	800d49c <create_name+0x168>
 800d488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d48c:	f043 0303 	orr.w	r3, r3, #3
 800d490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d494:	e002      	b.n	800d49c <create_name+0x168>
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	3b01      	subs	r3, #1
 800d49a:	617b      	str	r3, [r7, #20]
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d009      	beq.n	800d4b6 <create_name+0x182>
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	005b      	lsls	r3, r3, #1
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	881b      	ldrh	r3, [r3, #0]
 800d4b2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4b4:	d1ef      	bne.n	800d496 <create_name+0x162>

	i = b = 0; ni = 8;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4bc:	2300      	movs	r3, #0
 800d4be:	623b      	str	r3, [r7, #32]
 800d4c0:	2308      	movs	r3, #8
 800d4c2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	61ba      	str	r2, [r7, #24]
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	68fa      	ldr	r2, [r7, #12]
 800d4ce:	4413      	add	r3, r2
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8090 	beq.w	800d5fc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4de:	2b20      	cmp	r3, #32
 800d4e0:	d006      	beq.n	800d4f0 <create_name+0x1bc>
 800d4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d4e4:	2b2e      	cmp	r3, #46	; 0x2e
 800d4e6:	d10a      	bne.n	800d4fe <create_name+0x1ca>
 800d4e8:	69ba      	ldr	r2, [r7, #24]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d006      	beq.n	800d4fe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4f4:	f043 0303 	orr.w	r3, r3, #3
 800d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4fc:	e07d      	b.n	800d5fa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d4fe:	6a3a      	ldr	r2, [r7, #32]
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	429a      	cmp	r2, r3
 800d504:	d203      	bcs.n	800d50e <create_name+0x1da>
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d123      	bne.n	800d556 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	2b0b      	cmp	r3, #11
 800d512:	d106      	bne.n	800d522 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d518:	f043 0303 	orr.w	r3, r3, #3
 800d51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d520:	e075      	b.n	800d60e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d522:	69ba      	ldr	r2, [r7, #24]
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	429a      	cmp	r2, r3
 800d528:	d005      	beq.n	800d536 <create_name+0x202>
 800d52a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d52e:	f043 0303 	orr.w	r3, r3, #3
 800d532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d536:	69ba      	ldr	r2, [r7, #24]
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d866      	bhi.n	800d60c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	61bb      	str	r3, [r7, #24]
 800d542:	2308      	movs	r3, #8
 800d544:	623b      	str	r3, [r7, #32]
 800d546:	230b      	movs	r3, #11
 800d548:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d54a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d554:	e051      	b.n	800d5fa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d558:	2b7f      	cmp	r3, #127	; 0x7f
 800d55a:	d914      	bls.n	800d586 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d55c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d55e:	2100      	movs	r1, #0
 800d560:	4618      	mov	r0, r3
 800d562:	f001 fb57 	bl	800ec14 <ff_convert>
 800d566:	4603      	mov	r3, r0
 800d568:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d004      	beq.n	800d57a <create_name+0x246>
 800d570:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d572:	3b80      	subs	r3, #128	; 0x80
 800d574:	4a23      	ldr	r2, [pc, #140]	; (800d604 <create_name+0x2d0>)
 800d576:	5cd3      	ldrb	r3, [r2, r3]
 800d578:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d57e:	f043 0302 	orr.w	r3, r3, #2
 800d582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d007      	beq.n	800d59c <create_name+0x268>
 800d58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d58e:	4619      	mov	r1, r3
 800d590:	481d      	ldr	r0, [pc, #116]	; (800d608 <create_name+0x2d4>)
 800d592:	f7fe fa98 	bl	800bac6 <chk_chr>
 800d596:	4603      	mov	r3, r0
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d008      	beq.n	800d5ae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d59c:	235f      	movs	r3, #95	; 0x5f
 800d59e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a4:	f043 0303 	orr.w	r3, r3, #3
 800d5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5ac:	e01b      	b.n	800d5e6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d5ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b0:	2b40      	cmp	r3, #64	; 0x40
 800d5b2:	d909      	bls.n	800d5c8 <create_name+0x294>
 800d5b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b6:	2b5a      	cmp	r3, #90	; 0x5a
 800d5b8:	d806      	bhi.n	800d5c8 <create_name+0x294>
					b |= 2;
 800d5ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5be:	f043 0302 	orr.w	r3, r3, #2
 800d5c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5c6:	e00e      	b.n	800d5e6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d5c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ca:	2b60      	cmp	r3, #96	; 0x60
 800d5cc:	d90b      	bls.n	800d5e6 <create_name+0x2b2>
 800d5ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5d0:	2b7a      	cmp	r3, #122	; 0x7a
 800d5d2:	d808      	bhi.n	800d5e6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5d8:	f043 0301 	orr.w	r3, r3, #1
 800d5dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5e2:	3b20      	subs	r3, #32
 800d5e4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	1c5a      	adds	r2, r3, #1
 800d5ea:	623a      	str	r2, [r7, #32]
 800d5ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d5ee:	b2d1      	uxtb	r1, r2
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	460a      	mov	r2, r1
 800d5f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d5fa:	e763      	b.n	800d4c4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d5fc:	bf00      	nop
 800d5fe:	e006      	b.n	800d60e <create_name+0x2da>
 800d600:	0800f74c 	.word	0x0800f74c
 800d604:	0800f828 	.word	0x0800f828
 800d608:	0800f758 	.word	0x0800f758
			if (si > di) break;			/* No extension */
 800d60c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d614:	2be5      	cmp	r3, #229	; 0xe5
 800d616:	d103      	bne.n	800d620 <create_name+0x2ec>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2205      	movs	r2, #5
 800d61c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	2b08      	cmp	r3, #8
 800d624:	d104      	bne.n	800d630 <create_name+0x2fc>
 800d626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d62a:	009b      	lsls	r3, r3, #2
 800d62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d634:	f003 030c 	and.w	r3, r3, #12
 800d638:	2b0c      	cmp	r3, #12
 800d63a:	d005      	beq.n	800d648 <create_name+0x314>
 800d63c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d640:	f003 0303 	and.w	r3, r3, #3
 800d644:	2b03      	cmp	r3, #3
 800d646:	d105      	bne.n	800d654 <create_name+0x320>
 800d648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64c:	f043 0302 	orr.w	r3, r3, #2
 800d650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d117      	bne.n	800d690 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d105      	bne.n	800d678 <create_name+0x344>
 800d66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d670:	f043 0310 	orr.w	r3, r3, #16
 800d674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d678:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d67c:	f003 030c 	and.w	r3, r3, #12
 800d680:	2b04      	cmp	r3, #4
 800d682:	d105      	bne.n	800d690 <create_name+0x35c>
 800d684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d688:	f043 0308 	orr.w	r3, r3, #8
 800d68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d696:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d69a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3728      	adds	r7, #40	; 0x28
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6b8:	e002      	b.n	800d6c0 <follow_path+0x1c>
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	3301      	adds	r3, #1
 800d6be:	603b      	str	r3, [r7, #0]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d6c6:	d0f8      	beq.n	800d6ba <follow_path+0x16>
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	2b5c      	cmp	r3, #92	; 0x5c
 800d6ce:	d0f4      	beq.n	800d6ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	2b1f      	cmp	r3, #31
 800d6dc:	d80a      	bhi.n	800d6f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2280      	movs	r2, #128	; 0x80
 800d6e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d6e6:	2100      	movs	r1, #0
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7fe ff35 	bl	800c558 <dir_sdi>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	75fb      	strb	r3, [r7, #23]
 800d6f2:	e043      	b.n	800d77c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d6f4:	463b      	mov	r3, r7
 800d6f6:	4619      	mov	r1, r3
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f7ff fe1b 	bl	800d334 <create_name>
 800d6fe:	4603      	mov	r3, r0
 800d700:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d134      	bne.n	800d772 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fb7d 	bl	800ce08 <dir_find>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d718:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d71a:	7dfb      	ldrb	r3, [r7, #23]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d00a      	beq.n	800d736 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d720:	7dfb      	ldrb	r3, [r7, #23]
 800d722:	2b04      	cmp	r3, #4
 800d724:	d127      	bne.n	800d776 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	f003 0304 	and.w	r3, r3, #4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d122      	bne.n	800d776 <follow_path+0xd2>
 800d730:	2305      	movs	r3, #5
 800d732:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d734:	e01f      	b.n	800d776 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d736:	7afb      	ldrb	r3, [r7, #11]
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d11c      	bne.n	800d77a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	799b      	ldrb	r3, [r3, #6]
 800d744:	f003 0310 	and.w	r3, r3, #16
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d74c:	2305      	movs	r3, #5
 800d74e:	75fb      	strb	r3, [r7, #23]
 800d750:	e014      	b.n	800d77c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d760:	4413      	add	r3, r2
 800d762:	4619      	mov	r1, r3
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7ff f87e 	bl	800c866 <ld_clust>
 800d76a:	4602      	mov	r2, r0
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d770:	e7c0      	b.n	800d6f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800d772:	bf00      	nop
 800d774:	e002      	b.n	800d77c <follow_path+0xd8>
				break;
 800d776:	bf00      	nop
 800d778:	e000      	b.n	800d77c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d77a:	bf00      	nop
			}
		}
	}

	return res;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3718      	adds	r7, #24
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d786:	b480      	push	{r7}
 800d788:	b087      	sub	sp, #28
 800d78a:	af00      	add	r7, sp, #0
 800d78c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d031      	beq.n	800d800 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	617b      	str	r3, [r7, #20]
 800d7a2:	e002      	b.n	800d7aa <get_ldnumber+0x24>
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	617b      	str	r3, [r7, #20]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	2b1f      	cmp	r3, #31
 800d7b0:	d903      	bls.n	800d7ba <get_ldnumber+0x34>
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b3a      	cmp	r3, #58	; 0x3a
 800d7b8:	d1f4      	bne.n	800d7a4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	2b3a      	cmp	r3, #58	; 0x3a
 800d7c0:	d11c      	bne.n	800d7fc <get_ldnumber+0x76>
			tp = *path;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	60fa      	str	r2, [r7, #12]
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	3b30      	subs	r3, #48	; 0x30
 800d7d2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b09      	cmp	r3, #9
 800d7d8:	d80e      	bhi.n	800d7f8 <get_ldnumber+0x72>
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d10a      	bne.n	800d7f8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d107      	bne.n	800d7f8 <get_ldnumber+0x72>
					vol = (int)i;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	e002      	b.n	800d802 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d800:	693b      	ldr	r3, [r7, #16]
}
 800d802:	4618      	mov	r0, r3
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
	...

0800d810 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	70da      	strb	r2, [r3, #3]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f04f 32ff 	mov.w	r2, #4294967295
 800d826:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7fe fb16 	bl	800be5c <move_window>
 800d830:	4603      	mov	r3, r0
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <check_fs+0x2a>
 800d836:	2304      	movs	r3, #4
 800d838:	e038      	b.n	800d8ac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3334      	adds	r3, #52	; 0x34
 800d83e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d842:	4618      	mov	r0, r3
 800d844:	f7fe f85a 	bl	800b8fc <ld_word>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d850:	429a      	cmp	r2, r3
 800d852:	d001      	beq.n	800d858 <check_fs+0x48>
 800d854:	2303      	movs	r3, #3
 800d856:	e029      	b.n	800d8ac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d85e:	2be9      	cmp	r3, #233	; 0xe9
 800d860:	d009      	beq.n	800d876 <check_fs+0x66>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d868:	2beb      	cmp	r3, #235	; 0xeb
 800d86a:	d11e      	bne.n	800d8aa <check_fs+0x9a>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d872:	2b90      	cmp	r3, #144	; 0x90
 800d874:	d119      	bne.n	800d8aa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	3334      	adds	r3, #52	; 0x34
 800d87a:	3336      	adds	r3, #54	; 0x36
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fe f855 	bl	800b92c <ld_dword>
 800d882:	4603      	mov	r3, r0
 800d884:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d888:	4a0a      	ldr	r2, [pc, #40]	; (800d8b4 <check_fs+0xa4>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d101      	bne.n	800d892 <check_fs+0x82>
 800d88e:	2300      	movs	r3, #0
 800d890:	e00c      	b.n	800d8ac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	3334      	adds	r3, #52	; 0x34
 800d896:	3352      	adds	r3, #82	; 0x52
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe f847 	bl	800b92c <ld_dword>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4a05      	ldr	r2, [pc, #20]	; (800d8b8 <check_fs+0xa8>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d101      	bne.n	800d8aa <check_fs+0x9a>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e000      	b.n	800d8ac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d8aa:	2302      	movs	r3, #2
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	00544146 	.word	0x00544146
 800d8b8:	33544146 	.word	0x33544146

0800d8bc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b096      	sub	sp, #88	; 0x58
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d8d0:	68f8      	ldr	r0, [r7, #12]
 800d8d2:	f7ff ff58 	bl	800d786 <get_ldnumber>
 800d8d6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	da01      	bge.n	800d8e2 <find_volume+0x26>
 800d8de:	230b      	movs	r3, #11
 800d8e0:	e230      	b.n	800dd44 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d8e2:	4aa1      	ldr	r2, [pc, #644]	; (800db68 <find_volume+0x2ac>)
 800d8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8ea:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d101      	bne.n	800d8f6 <find_volume+0x3a>
 800d8f2:	230c      	movs	r3, #12
 800d8f4:	e226      	b.n	800dd44 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d8fc:	79fb      	ldrb	r3, [r7, #7]
 800d8fe:	f023 0301 	bic.w	r3, r3, #1
 800d902:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d01a      	beq.n	800d942 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	785b      	ldrb	r3, [r3, #1]
 800d910:	4618      	mov	r0, r3
 800d912:	f7fd ff55 	bl	800b7c0 <disk_status>
 800d916:	4603      	mov	r3, r0
 800d918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d91c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d920:	f003 0301 	and.w	r3, r3, #1
 800d924:	2b00      	cmp	r3, #0
 800d926:	d10c      	bne.n	800d942 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d007      	beq.n	800d93e <find_volume+0x82>
 800d92e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d932:	f003 0304 	and.w	r3, r3, #4
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d93a:	230a      	movs	r3, #10
 800d93c:	e202      	b.n	800dd44 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800d93e:	2300      	movs	r3, #0
 800d940:	e200      	b.n	800dd44 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d944:	2200      	movs	r2, #0
 800d946:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	4618      	mov	r0, r3
 800d956:	f7fd ff4d 	bl	800b7f4 <disk_initialize>
 800d95a:	4603      	mov	r3, r0
 800d95c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d001      	beq.n	800d970 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d96c:	2303      	movs	r3, #3
 800d96e:	e1e9      	b.n	800dd44 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <find_volume+0xca>
 800d976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d97a:	f003 0304 	and.w	r3, r3, #4
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d982:	230a      	movs	r3, #10
 800d984:	e1de      	b.n	800dd44 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d986:	2300      	movs	r3, #0
 800d988:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d98a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d98c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d98e:	f7ff ff3f 	bl	800d810 <check_fs>
 800d992:	4603      	mov	r3, r0
 800d994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	d149      	bne.n	800da34 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	643b      	str	r3, [r7, #64]	; 0x40
 800d9a4:	e01e      	b.n	800d9e4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d9b4:	4413      	add	r3, r2
 800d9b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ba:	3304      	adds	r3, #4
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d006      	beq.n	800d9d0 <find_volume+0x114>
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7fd ffb0 	bl	800b92c <ld_dword>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	e000      	b.n	800d9d2 <find_volume+0x116>
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	3358      	adds	r3, #88	; 0x58
 800d9d8:	443b      	add	r3, r7
 800d9da:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	643b      	str	r3, [r7, #64]	; 0x40
 800d9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e6:	2b03      	cmp	r3, #3
 800d9e8:	d9dd      	bls.n	800d9a6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d9ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <find_volume+0x13e>
 800d9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	3358      	adds	r3, #88	; 0x58
 800da00:	443b      	add	r3, r7
 800da02:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da06:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d005      	beq.n	800da1a <find_volume+0x15e>
 800da0e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da12:	f7ff fefd 	bl	800d810 <check_fs>
 800da16:	4603      	mov	r3, r0
 800da18:	e000      	b.n	800da1c <find_volume+0x160>
 800da1a:	2303      	movs	r3, #3
 800da1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800da20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da24:	2b01      	cmp	r3, #1
 800da26:	d905      	bls.n	800da34 <find_volume+0x178>
 800da28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da2a:	3301      	adds	r3, #1
 800da2c:	643b      	str	r3, [r7, #64]	; 0x40
 800da2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da30:	2b03      	cmp	r3, #3
 800da32:	d9e2      	bls.n	800d9fa <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800da34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da38:	2b04      	cmp	r3, #4
 800da3a:	d101      	bne.n	800da40 <find_volume+0x184>
 800da3c:	2301      	movs	r3, #1
 800da3e:	e181      	b.n	800dd44 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800da40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da44:	2b01      	cmp	r3, #1
 800da46:	d901      	bls.n	800da4c <find_volume+0x190>
 800da48:	230d      	movs	r3, #13
 800da4a:	e17b      	b.n	800dd44 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4e:	3334      	adds	r3, #52	; 0x34
 800da50:	330b      	adds	r3, #11
 800da52:	4618      	mov	r0, r3
 800da54:	f7fd ff52 	bl	800b8fc <ld_word>
 800da58:	4603      	mov	r3, r0
 800da5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da5e:	d001      	beq.n	800da64 <find_volume+0x1a8>
 800da60:	230d      	movs	r3, #13
 800da62:	e16f      	b.n	800dd44 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da66:	3334      	adds	r3, #52	; 0x34
 800da68:	3316      	adds	r3, #22
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fd ff46 	bl	800b8fc <ld_word>
 800da70:	4603      	mov	r3, r0
 800da72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d106      	bne.n	800da88 <find_volume+0x1cc>
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	3334      	adds	r3, #52	; 0x34
 800da7e:	3324      	adds	r3, #36	; 0x24
 800da80:	4618      	mov	r0, r3
 800da82:	f7fd ff53 	bl	800b92c <ld_dword>
 800da86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800da88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da8c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da90:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800da94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9a:	789b      	ldrb	r3, [r3, #2]
 800da9c:	2b01      	cmp	r3, #1
 800da9e:	d005      	beq.n	800daac <find_volume+0x1f0>
 800daa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daa2:	789b      	ldrb	r3, [r3, #2]
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d001      	beq.n	800daac <find_volume+0x1f0>
 800daa8:	230d      	movs	r3, #13
 800daaa:	e14b      	b.n	800dd44 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800daac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daae:	789b      	ldrb	r3, [r3, #2]
 800dab0:	461a      	mov	r2, r3
 800dab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dab4:	fb02 f303 	mul.w	r3, r2, r3
 800dab8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800daba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dac8:	895b      	ldrh	r3, [r3, #10]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d008      	beq.n	800dae0 <find_volume+0x224>
 800dace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad0:	895b      	ldrh	r3, [r3, #10]
 800dad2:	461a      	mov	r2, r3
 800dad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dad6:	895b      	ldrh	r3, [r3, #10]
 800dad8:	3b01      	subs	r3, #1
 800dada:	4013      	ands	r3, r2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <find_volume+0x228>
 800dae0:	230d      	movs	r3, #13
 800dae2:	e12f      	b.n	800dd44 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	3334      	adds	r3, #52	; 0x34
 800dae8:	3311      	adds	r3, #17
 800daea:	4618      	mov	r0, r3
 800daec:	f7fd ff06 	bl	800b8fc <ld_word>
 800daf0:	4603      	mov	r3, r0
 800daf2:	461a      	mov	r2, r3
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800daf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dafa:	891b      	ldrh	r3, [r3, #8]
 800dafc:	f003 030f 	and.w	r3, r3, #15
 800db00:	b29b      	uxth	r3, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <find_volume+0x24e>
 800db06:	230d      	movs	r3, #13
 800db08:	e11c      	b.n	800dd44 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	3334      	adds	r3, #52	; 0x34
 800db0e:	3313      	adds	r3, #19
 800db10:	4618      	mov	r0, r3
 800db12:	f7fd fef3 	bl	800b8fc <ld_word>
 800db16:	4603      	mov	r3, r0
 800db18:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800db1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <find_volume+0x272>
 800db20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db22:	3334      	adds	r3, #52	; 0x34
 800db24:	3320      	adds	r3, #32
 800db26:	4618      	mov	r0, r3
 800db28:	f7fd ff00 	bl	800b92c <ld_dword>
 800db2c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db30:	3334      	adds	r3, #52	; 0x34
 800db32:	330e      	adds	r3, #14
 800db34:	4618      	mov	r0, r3
 800db36:	f7fd fee1 	bl	800b8fc <ld_word>
 800db3a:	4603      	mov	r3, r0
 800db3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <find_volume+0x28c>
 800db44:	230d      	movs	r3, #13
 800db46:	e0fd      	b.n	800dd44 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800db4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4c:	4413      	add	r3, r2
 800db4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db50:	8912      	ldrh	r2, [r2, #8]
 800db52:	0912      	lsrs	r2, r2, #4
 800db54:	b292      	uxth	r2, r2
 800db56:	4413      	add	r3, r2
 800db58:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	429a      	cmp	r2, r3
 800db60:	d204      	bcs.n	800db6c <find_volume+0x2b0>
 800db62:	230d      	movs	r3, #13
 800db64:	e0ee      	b.n	800dd44 <find_volume+0x488>
 800db66:	bf00      	nop
 800db68:	20001b64 	.word	0x20001b64
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db70:	1ad3      	subs	r3, r2, r3
 800db72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db74:	8952      	ldrh	r2, [r2, #10]
 800db76:	fbb3 f3f2 	udiv	r3, r3, r2
 800db7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <find_volume+0x2ca>
 800db82:	230d      	movs	r3, #13
 800db84:	e0de      	b.n	800dd44 <find_volume+0x488>
		fmt = FS_FAT32;
 800db86:	2303      	movs	r3, #3
 800db88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db92:	4293      	cmp	r3, r2
 800db94:	d802      	bhi.n	800db9c <find_volume+0x2e0>
 800db96:	2302      	movs	r3, #2
 800db98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d802      	bhi.n	800dbac <find_volume+0x2f0>
 800dba6:	2301      	movs	r3, #1
 800dba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	1c9a      	adds	r2, r3, #2
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbb8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dbba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbbe:	441a      	add	r2, r3
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800dbc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc8:	441a      	add	r2, r3
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800dbce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dbd2:	2b03      	cmp	r3, #3
 800dbd4:	d11e      	bne.n	800dc14 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	3334      	adds	r3, #52	; 0x34
 800dbda:	332a      	adds	r3, #42	; 0x2a
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fd fe8d 	bl	800b8fc <ld_word>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <find_volume+0x330>
 800dbe8:	230d      	movs	r3, #13
 800dbea:	e0ab      	b.n	800dd44 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	891b      	ldrh	r3, [r3, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d001      	beq.n	800dbf8 <find_volume+0x33c>
 800dbf4:	230d      	movs	r3, #13
 800dbf6:	e0a5      	b.n	800dd44 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	3334      	adds	r3, #52	; 0x34
 800dbfc:	332c      	adds	r3, #44	; 0x2c
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fd fe94 	bl	800b92c <ld_dword>
 800dc04:	4602      	mov	r2, r0
 800dc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc08:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	647b      	str	r3, [r7, #68]	; 0x44
 800dc12:	e01f      	b.n	800dc54 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc16:	891b      	ldrh	r3, [r3, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d101      	bne.n	800dc20 <find_volume+0x364>
 800dc1c:	230d      	movs	r3, #13
 800dc1e:	e091      	b.n	800dd44 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc26:	441a      	add	r2, r3
 800dc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d103      	bne.n	800dc3c <find_volume+0x380>
 800dc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc36:	699b      	ldr	r3, [r3, #24]
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	e00a      	b.n	800dc52 <find_volume+0x396>
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3e:	699a      	ldr	r2, [r3, #24]
 800dc40:	4613      	mov	r3, r2
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4413      	add	r3, r2
 800dc46:	085a      	lsrs	r2, r3, #1
 800dc48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	f003 0301 	and.w	r3, r3, #1
 800dc50:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc52:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc56:	69da      	ldr	r2, [r3, #28]
 800dc58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc5a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc5e:	0a5b      	lsrs	r3, r3, #9
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d201      	bcs.n	800dc68 <find_volume+0x3ac>
 800dc64:	230d      	movs	r3, #13
 800dc66:	e06d      	b.n	800dd44 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc6e:	615a      	str	r2, [r3, #20]
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	695a      	ldr	r2, [r3, #20]
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800dc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7a:	2280      	movs	r2, #128	; 0x80
 800dc7c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d149      	bne.n	800dd1a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc88:	3334      	adds	r3, #52	; 0x34
 800dc8a:	3330      	adds	r3, #48	; 0x30
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fd fe35 	bl	800b8fc <ld_word>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d140      	bne.n	800dd1a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dca0:	f7fe f8dc 	bl	800be5c <move_window>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d137      	bne.n	800dd1a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	2200      	movs	r2, #0
 800dcae:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	3334      	adds	r3, #52	; 0x34
 800dcb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fd fe1f 	bl	800b8fc <ld_word>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d127      	bne.n	800dd1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dccc:	3334      	adds	r3, #52	; 0x34
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fd fe2c 	bl	800b92c <ld_dword>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	4a1d      	ldr	r2, [pc, #116]	; (800dd4c <find_volume+0x490>)
 800dcd8:	4293      	cmp	r3, r2
 800dcda:	d11e      	bne.n	800dd1a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcde:	3334      	adds	r3, #52	; 0x34
 800dce0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7fd fe21 	bl	800b92c <ld_dword>
 800dcea:	4603      	mov	r3, r0
 800dcec:	4a18      	ldr	r2, [pc, #96]	; (800dd50 <find_volume+0x494>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d113      	bne.n	800dd1a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	3334      	adds	r3, #52	; 0x34
 800dcf6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fd fe16 	bl	800b92c <ld_dword>
 800dd00:	4602      	mov	r2, r0
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd08:	3334      	adds	r3, #52	; 0x34
 800dd0a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fd fe0c 	bl	800b92c <ld_dword>
 800dd14:	4602      	mov	r2, r0
 800dd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd18:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800dd20:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd22:	4b0c      	ldr	r3, [pc, #48]	; (800dd54 <find_volume+0x498>)
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	3301      	adds	r3, #1
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <find_volume+0x498>)
 800dd2c:	801a      	strh	r2, [r3, #0]
 800dd2e:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <find_volume+0x498>)
 800dd30:	881a      	ldrh	r2, [r3, #0]
 800dd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd34:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd38:	4a07      	ldr	r2, [pc, #28]	; (800dd58 <find_volume+0x49c>)
 800dd3a:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd3e:	f7fe f825 	bl	800bd8c <clear_lock>
#endif
	return FR_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3758      	adds	r7, #88	; 0x58
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	41615252 	.word	0x41615252
 800dd50:	61417272 	.word	0x61417272
 800dd54:	20001b68 	.word	0x20001b68
 800dd58:	20001b8c 	.word	0x20001b8c

0800dd5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd66:	2309      	movs	r3, #9
 800dd68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01c      	beq.n	800ddaa <validate+0x4e>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d018      	beq.n	800ddaa <validate+0x4e>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d013      	beq.n	800ddaa <validate+0x4e>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	889a      	ldrh	r2, [r3, #4]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	88db      	ldrh	r3, [r3, #6]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d10c      	bne.n	800ddaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	785b      	ldrb	r3, [r3, #1]
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fd fd12 	bl	800b7c0 <disk_status>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	f003 0301 	and.w	r3, r3, #1
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <validate+0x4e>
			res = FR_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ddaa:	7bfb      	ldrb	r3, [r7, #15]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d102      	bne.n	800ddb6 <validate+0x5a>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	e000      	b.n	800ddb8 <validate+0x5c>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	6013      	str	r3, [r2, #0]
	return res;
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}
	...

0800ddc8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b088      	sub	sp, #32
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddda:	f107 0310 	add.w	r3, r7, #16
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7ff fcd1 	bl	800d786 <get_ldnumber>
 800dde4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	da01      	bge.n	800ddf0 <f_mount+0x28>
 800ddec:	230b      	movs	r3, #11
 800ddee:	e02b      	b.n	800de48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddf0:	4a17      	ldr	r2, [pc, #92]	; (800de50 <f_mount+0x88>)
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d005      	beq.n	800de0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800de00:	69b8      	ldr	r0, [r7, #24]
 800de02:	f7fd ffc3 	bl	800bd8c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	2200      	movs	r2, #0
 800de0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d002      	beq.n	800de18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	490d      	ldr	r1, [pc, #52]	; (800de50 <f_mount+0x88>)
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <f_mount+0x66>
 800de28:	79fb      	ldrb	r3, [r7, #7]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d001      	beq.n	800de32 <f_mount+0x6a>
 800de2e:	2300      	movs	r3, #0
 800de30:	e00a      	b.n	800de48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de32:	f107 010c 	add.w	r1, r7, #12
 800de36:	f107 0308 	add.w	r3, r7, #8
 800de3a:	2200      	movs	r2, #0
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff fd3d 	bl	800d8bc <find_volume>
 800de42:	4603      	mov	r3, r0
 800de44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de46:	7dfb      	ldrb	r3, [r7, #23]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3720      	adds	r7, #32
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	20001b64 	.word	0x20001b64

0800de54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b09a      	sub	sp, #104	; 0x68
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	4613      	mov	r3, r2
 800de60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <f_open+0x18>
 800de68:	2309      	movs	r3, #9
 800de6a:	e1ad      	b.n	800e1c8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de6c:	79fb      	ldrb	r3, [r7, #7]
 800de6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800de74:	79fa      	ldrb	r2, [r7, #7]
 800de76:	f107 0114 	add.w	r1, r7, #20
 800de7a:	f107 0308 	add.w	r3, r7, #8
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff fd1c 	bl	800d8bc <find_volume>
 800de84:	4603      	mov	r3, r0
 800de86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800de8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 8191 	bne.w	800e1b6 <f_open+0x362>
		dj.obj.fs = fs;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	f107 0318 	add.w	r3, r7, #24
 800de9e:	4611      	mov	r1, r2
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff fbff 	bl	800d6a4 <follow_path>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800deac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d11a      	bne.n	800deea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800deb4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800deb8:	b25b      	sxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	da03      	bge.n	800dec6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800debe:	2306      	movs	r3, #6
 800dec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dec4:	e011      	b.n	800deea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dec6:	79fb      	ldrb	r3, [r7, #7]
 800dec8:	f023 0301 	bic.w	r3, r3, #1
 800decc:	2b00      	cmp	r3, #0
 800dece:	bf14      	ite	ne
 800ded0:	2301      	movne	r3, #1
 800ded2:	2300      	moveq	r3, #0
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	461a      	mov	r2, r3
 800ded8:	f107 0318 	add.w	r3, r7, #24
 800dedc:	4611      	mov	r1, r2
 800dede:	4618      	mov	r0, r3
 800dee0:	f7fd fe0c 	bl	800bafc <chk_lock>
 800dee4:	4603      	mov	r3, r0
 800dee6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800deea:	79fb      	ldrb	r3, [r7, #7]
 800deec:	f003 031c 	and.w	r3, r3, #28
 800def0:	2b00      	cmp	r3, #0
 800def2:	d07f      	beq.n	800dff4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800def4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800def8:	2b00      	cmp	r3, #0
 800defa:	d017      	beq.n	800df2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800defc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df00:	2b04      	cmp	r3, #4
 800df02:	d10e      	bne.n	800df22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800df04:	f7fd fe56 	bl	800bbb4 <enq_lock>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d006      	beq.n	800df1c <f_open+0xc8>
 800df0e:	f107 0318 	add.w	r3, r7, #24
 800df12:	4618      	mov	r0, r3
 800df14:	f7ff f838 	bl	800cf88 <dir_register>
 800df18:	4603      	mov	r3, r0
 800df1a:	e000      	b.n	800df1e <f_open+0xca>
 800df1c:	2312      	movs	r3, #18
 800df1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df22:	79fb      	ldrb	r3, [r7, #7]
 800df24:	f043 0308 	orr.w	r3, r3, #8
 800df28:	71fb      	strb	r3, [r7, #7]
 800df2a:	e010      	b.n	800df4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df2c:	7fbb      	ldrb	r3, [r7, #30]
 800df2e:	f003 0311 	and.w	r3, r3, #17
 800df32:	2b00      	cmp	r3, #0
 800df34:	d003      	beq.n	800df3e <f_open+0xea>
					res = FR_DENIED;
 800df36:	2307      	movs	r3, #7
 800df38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df3c:	e007      	b.n	800df4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	f003 0304 	and.w	r3, r3, #4
 800df44:	2b00      	cmp	r3, #0
 800df46:	d002      	beq.n	800df4e <f_open+0xfa>
 800df48:	2308      	movs	r3, #8
 800df4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df52:	2b00      	cmp	r3, #0
 800df54:	d168      	bne.n	800e028 <f_open+0x1d4>
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	f003 0308 	and.w	r3, r3, #8
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d063      	beq.n	800e028 <f_open+0x1d4>
				dw = GET_FATTIME();
 800df60:	f7fa fb1e 	bl	80085a0 <get_fattime>
 800df64:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	330e      	adds	r3, #14
 800df6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7fd fd1b 	bl	800b9a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	3316      	adds	r3, #22
 800df76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fd fd15 	bl	800b9a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	330b      	adds	r3, #11
 800df82:	2220      	movs	r2, #32
 800df84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df8a:	4611      	mov	r1, r2
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fe fc6a 	bl	800c866 <ld_clust>
 800df92:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df98:	2200      	movs	r2, #0
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe fc82 	bl	800c8a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	331c      	adds	r3, #28
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fd fcfe 	bl	800b9a8 <st_dword>
					fs->wflag = 1;
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d037      	beq.n	800e028 <f_open+0x1d4>
						dw = fs->winsect;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dfbe:	f107 0318 	add.w	r3, r7, #24
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7fe f995 	bl	800c2f6 <remove_chain>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800dfd2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d126      	bne.n	800e028 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fd ff3c 	bl	800be5c <move_window>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfee:	3a01      	subs	r2, #1
 800dff0:	611a      	str	r2, [r3, #16]
 800dff2:	e019      	b.n	800e028 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dff4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d115      	bne.n	800e028 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dffc:	7fbb      	ldrb	r3, [r7, #30]
 800dffe:	f003 0310 	and.w	r3, r3, #16
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <f_open+0x1ba>
					res = FR_NO_FILE;
 800e006:	2304      	movs	r3, #4
 800e008:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e00c:	e00c      	b.n	800e028 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e00e:	79fb      	ldrb	r3, [r7, #7]
 800e010:	f003 0302 	and.w	r3, r3, #2
 800e014:	2b00      	cmp	r3, #0
 800e016:	d007      	beq.n	800e028 <f_open+0x1d4>
 800e018:	7fbb      	ldrb	r3, [r7, #30]
 800e01a:	f003 0301 	and.w	r3, r3, #1
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d002      	beq.n	800e028 <f_open+0x1d4>
						res = FR_DENIED;
 800e022:	2307      	movs	r3, #7
 800e024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d128      	bne.n	800e082 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e030:	79fb      	ldrb	r3, [r7, #7]
 800e032:	f003 0308 	and.w	r3, r3, #8
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e03a:	79fb      	ldrb	r3, [r7, #7]
 800e03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e040:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	f023 0301 	bic.w	r3, r3, #1
 800e056:	2b00      	cmp	r3, #0
 800e058:	bf14      	ite	ne
 800e05a:	2301      	movne	r3, #1
 800e05c:	2300      	moveq	r3, #0
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	461a      	mov	r2, r3
 800e062:	f107 0318 	add.w	r3, r7, #24
 800e066:	4611      	mov	r1, r2
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fd fdc5 	bl	800bbf8 <inc_lock>
 800e06e:	4602      	mov	r2, r0
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d102      	bne.n	800e082 <f_open+0x22e>
 800e07c:	2302      	movs	r3, #2
 800e07e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e082:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e086:	2b00      	cmp	r3, #0
 800e088:	f040 8095 	bne.w	800e1b6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fbe7 	bl	800c866 <ld_clust>
 800e098:	4602      	mov	r2, r0
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	331c      	adds	r3, #28
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fd fc42 	bl	800b92c <ld_dword>
 800e0a8:	4602      	mov	r2, r0
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e0b4:	697a      	ldr	r2, [r7, #20]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	88da      	ldrh	r2, [r3, #6]
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	79fa      	ldrb	r2, [r7, #7]
 800e0c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3330      	adds	r3, #48	; 0x30
 800e0de:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f7fd fcac 	bl	800ba42 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	f003 0320 	and.w	r3, r3, #32
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d060      	beq.n	800e1b6 <f_open+0x362>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d05c      	beq.n	800e1b6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	68da      	ldr	r2, [r3, #12]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	895b      	ldrh	r3, [r3, #10]
 800e108:	025b      	lsls	r3, r3, #9
 800e10a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e118:	e016      	b.n	800e148 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd ff57 	bl	800bfd2 <get_fat>
 800e124:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e126:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d802      	bhi.n	800e132 <f_open+0x2de>
 800e12c:	2302      	movs	r3, #2
 800e12e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e138:	d102      	bne.n	800e140 <f_open+0x2ec>
 800e13a:	2301      	movs	r3, #1
 800e13c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e144:	1ad3      	subs	r3, r2, r3
 800e146:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e148:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d103      	bne.n	800e158 <f_open+0x304>
 800e150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e154:	429a      	cmp	r2, r3
 800e156:	d8e0      	bhi.n	800e11a <f_open+0x2c6>
				}
				fp->clust = clst;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e15c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e15e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e162:	2b00      	cmp	r3, #0
 800e164:	d127      	bne.n	800e1b6 <f_open+0x362>
 800e166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d022      	beq.n	800e1b6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd ff0d 	bl	800bf94 <clust2sect>
 800e17a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e17c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d103      	bne.n	800e18a <f_open+0x336>
						res = FR_INT_ERR;
 800e182:	2302      	movs	r3, #2
 800e184:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e188:	e015      	b.n	800e1b6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e18c:	0a5a      	lsrs	r2, r3, #9
 800e18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e190:	441a      	add	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	7858      	ldrb	r0, [r3, #1]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6a1a      	ldr	r2, [r3, #32]
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	f7fd fb4b 	bl	800b840 <disk_read>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <f_open+0x362>
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e1b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d002      	beq.n	800e1c4 <f_open+0x370>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e1c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3768      	adds	r7, #104	; 0x68
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b08e      	sub	sp, #56	; 0x38
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
 800e1dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	f107 0214 	add.w	r2, r7, #20
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7ff fdb3 	bl	800dd5c <validate>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e1fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e200:	2b00      	cmp	r3, #0
 800e202:	d107      	bne.n	800e214 <f_read+0x44>
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	7d5b      	ldrb	r3, [r3, #21]
 800e208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e20c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e210:	2b00      	cmp	r3, #0
 800e212:	d002      	beq.n	800e21a <f_read+0x4a>
 800e214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e218:	e115      	b.n	800e446 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	7d1b      	ldrb	r3, [r3, #20]
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	2b00      	cmp	r3, #0
 800e224:	d101      	bne.n	800e22a <f_read+0x5a>
 800e226:	2307      	movs	r3, #7
 800e228:	e10d      	b.n	800e446 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68da      	ldr	r2, [r3, #12]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	699b      	ldr	r3, [r3, #24]
 800e232:	1ad3      	subs	r3, r2, r3
 800e234:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	f240 80fe 	bls.w	800e43c <f_read+0x26c>
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e244:	e0fa      	b.n	800e43c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f040 80c6 	bne.w	800e3e0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	0a5b      	lsrs	r3, r3, #9
 800e25a:	697a      	ldr	r2, [r7, #20]
 800e25c:	8952      	ldrh	r2, [r2, #10]
 800e25e:	3a01      	subs	r2, #1
 800e260:	4013      	ands	r3, r2
 800e262:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d12f      	bne.n	800e2ca <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	699b      	ldr	r3, [r3, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d103      	bne.n	800e27a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	633b      	str	r3, [r7, #48]	; 0x30
 800e278:	e013      	b.n	800e2a2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d007      	beq.n	800e292 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	699b      	ldr	r3, [r3, #24]
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7fe f931 	bl	800c4f0 <clmt_clust>
 800e28e:	6338      	str	r0, [r7, #48]	; 0x30
 800e290:	e007      	b.n	800e2a2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	4619      	mov	r1, r3
 800e29a:	4610      	mov	r0, r2
 800e29c:	f7fd fe99 	bl	800bfd2 <get_fat>
 800e2a0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d804      	bhi.n	800e2b2 <f_read+0xe2>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	755a      	strb	r2, [r3, #21]
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e0c9      	b.n	800e446 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b8:	d104      	bne.n	800e2c4 <f_read+0xf4>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	755a      	strb	r2, [r3, #21]
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e0c0      	b.n	800e446 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2c8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e2ca:	697a      	ldr	r2, [r7, #20]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	f7fd fe5e 	bl	800bf94 <clust2sect>
 800e2d8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d104      	bne.n	800e2ea <f_read+0x11a>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	755a      	strb	r2, [r3, #21]
 800e2e6:	2302      	movs	r3, #2
 800e2e8:	e0ad      	b.n	800e446 <f_read+0x276>
			sect += csect;
 800e2ea:	69ba      	ldr	r2, [r7, #24]
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	0a5b      	lsrs	r3, r3, #9
 800e2f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d039      	beq.n	800e372 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e2fe:	69fa      	ldr	r2, [r7, #28]
 800e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e302:	4413      	add	r3, r2
 800e304:	697a      	ldr	r2, [r7, #20]
 800e306:	8952      	ldrh	r2, [r2, #10]
 800e308:	4293      	cmp	r3, r2
 800e30a:	d905      	bls.n	800e318 <f_read+0x148>
					cc = fs->csize - csect;
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	895b      	ldrh	r3, [r3, #10]
 800e310:	461a      	mov	r2, r3
 800e312:	69fb      	ldr	r3, [r7, #28]
 800e314:	1ad3      	subs	r3, r2, r3
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	7858      	ldrb	r0, [r3, #1]
 800e31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31e:	69ba      	ldr	r2, [r7, #24]
 800e320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e322:	f7fd fa8d 	bl	800b840 <disk_read>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d004      	beq.n	800e336 <f_read+0x166>
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2201      	movs	r2, #1
 800e330:	755a      	strb	r2, [r3, #21]
 800e332:	2301      	movs	r3, #1
 800e334:	e087      	b.n	800e446 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	7d1b      	ldrb	r3, [r3, #20]
 800e33a:	b25b      	sxtb	r3, r3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	da14      	bge.n	800e36a <f_read+0x19a>
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6a1a      	ldr	r2, [r3, #32]
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d90d      	bls.n	800e36a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	6a1a      	ldr	r2, [r3, #32]
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	1ad3      	subs	r3, r2, r3
 800e356:	025b      	lsls	r3, r3, #9
 800e358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e35a:	18d0      	adds	r0, r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	3330      	adds	r3, #48	; 0x30
 800e360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e364:	4619      	mov	r1, r3
 800e366:	f7fd fb4b 	bl	800ba00 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	025b      	lsls	r3, r3, #9
 800e36e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e370:	e050      	b.n	800e414 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	69ba      	ldr	r2, [r7, #24]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d02e      	beq.n	800e3da <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	7d1b      	ldrb	r3, [r3, #20]
 800e380:	b25b      	sxtb	r3, r3
 800e382:	2b00      	cmp	r3, #0
 800e384:	da18      	bge.n	800e3b8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	7858      	ldrb	r0, [r3, #1]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6a1a      	ldr	r2, [r3, #32]
 800e394:	2301      	movs	r3, #1
 800e396:	f7fd fa73 	bl	800b880 <disk_write>
 800e39a:	4603      	mov	r3, r0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d004      	beq.n	800e3aa <f_read+0x1da>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	755a      	strb	r2, [r3, #21]
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e04d      	b.n	800e446 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	7d1b      	ldrb	r3, [r3, #20]
 800e3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3b2:	b2da      	uxtb	r2, r3
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	7858      	ldrb	r0, [r3, #1]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	69ba      	ldr	r2, [r7, #24]
 800e3c6:	f7fd fa3b 	bl	800b840 <disk_read>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d004      	beq.n	800e3da <f_read+0x20a>
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	2201      	movs	r2, #1
 800e3d4:	755a      	strb	r2, [r3, #21]
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	e035      	b.n	800e446 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e3ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d901      	bls.n	800e3fa <f_read+0x22a>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e408:	4413      	add	r3, r2
 800e40a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e40c:	4619      	mov	r1, r3
 800e40e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e410:	f7fd faf6 	bl	800ba00 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	4413      	add	r3, r2
 800e41a:	627b      	str	r3, [r7, #36]	; 0x24
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	699a      	ldr	r2, [r3, #24]
 800e420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e422:	441a      	add	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	619a      	str	r2, [r3, #24]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	441a      	add	r2, r3
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f47f af01 	bne.w	800e246 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3738      	adds	r7, #56	; 0x38
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b086      	sub	sp, #24
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f107 0208 	add.w	r2, r7, #8
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fc7c 	bl	800dd5c <validate>
 800e464:	4603      	mov	r3, r0
 800e466:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e468:	7dfb      	ldrb	r3, [r7, #23]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d168      	bne.n	800e540 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e476:	2b00      	cmp	r3, #0
 800e478:	d062      	beq.n	800e540 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	7d1b      	ldrb	r3, [r3, #20]
 800e47e:	b25b      	sxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	da15      	bge.n	800e4b0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	7858      	ldrb	r0, [r3, #1]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6a1a      	ldr	r2, [r3, #32]
 800e492:	2301      	movs	r3, #1
 800e494:	f7fd f9f4 	bl	800b880 <disk_write>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d001      	beq.n	800e4a2 <f_sync+0x54>
 800e49e:	2301      	movs	r3, #1
 800e4a0:	e04f      	b.n	800e542 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	7d1b      	ldrb	r3, [r3, #20]
 800e4a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4b0:	f7fa f876 	bl	80085a0 <get_fattime>
 800e4b4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4610      	mov	r0, r2
 800e4c0:	f7fd fccc 	bl	800be5c <move_window>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e4c8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d138      	bne.n	800e540 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	330b      	adds	r3, #11
 800e4d8:	781a      	ldrb	r2, [r3, #0]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	330b      	adds	r3, #11
 800e4de:	f042 0220 	orr.w	r2, r2, #32
 800e4e2:	b2d2      	uxtb	r2, r2
 800e4e4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6818      	ldr	r0, [r3, #0]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	f7fe f9d7 	bl	800c8a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f103 021c 	add.w	r2, r3, #28
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	4619      	mov	r1, r3
 800e502:	4610      	mov	r0, r2
 800e504:	f7fd fa50 	bl	800b9a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	3316      	adds	r3, #22
 800e50c:	6939      	ldr	r1, [r7, #16]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fd fa4a 	bl	800b9a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3312      	adds	r3, #18
 800e518:	2100      	movs	r1, #0
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7fd fa29 	bl	800b972 <st_word>
					fs->wflag = 1;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	2201      	movs	r2, #1
 800e524:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e526:	68bb      	ldr	r3, [r7, #8]
 800e528:	4618      	mov	r0, r3
 800e52a:	f7fd fcc5 	bl	800beb8 <sync_fs>
 800e52e:	4603      	mov	r3, r0
 800e530:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	7d1b      	ldrb	r3, [r3, #20]
 800e536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e540:	7dfb      	ldrb	r3, [r7, #23]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff ff7b 	bl	800e44e <f_sync>
 800e558:	4603      	mov	r3, r0
 800e55a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d118      	bne.n	800e594 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f107 0208 	add.w	r2, r7, #8
 800e568:	4611      	mov	r1, r2
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7ff fbf6 	bl	800dd5c <validate>
 800e570:	4603      	mov	r3, r0
 800e572:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d10c      	bne.n	800e594 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fd fbc8 	bl	800bd14 <dec_lock>
 800e584:	4603      	mov	r3, r0
 800e586:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e588:	7bfb      	ldrb	r3, [r7, #15]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d102      	bne.n	800e594 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e594:	7bfb      	ldrb	r3, [r7, #15]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b090      	sub	sp, #64	; 0x40
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f107 0208 	add.w	r2, r7, #8
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fbd3 	bl	800dd5c <validate>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e5bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d103      	bne.n	800e5cc <f_lseek+0x2e>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	7d5b      	ldrb	r3, [r3, #21]
 800e5c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e5cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <f_lseek+0x3c>
 800e5d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5d8:	e1e6      	b.n	800e9a8 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f000 80d1 	beq.w	800e786 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5ea:	d15a      	bne.n	800e6a2 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f4:	1d1a      	adds	r2, r3, #4
 800e5f6:	627a      	str	r2, [r7, #36]	; 0x24
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d03a      	beq.n	800e682 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e60e:	613b      	str	r3, [r7, #16]
 800e610:	2300      	movs	r3, #0
 800e612:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e616:	3302      	adds	r3, #2
 800e618:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	3301      	adds	r3, #1
 800e622:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fd fcd2 	bl	800bfd2 <get_fat>
 800e62e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	2b01      	cmp	r3, #1
 800e634:	d804      	bhi.n	800e640 <f_lseek+0xa2>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2202      	movs	r2, #2
 800e63a:	755a      	strb	r2, [r3, #21]
 800e63c:	2302      	movs	r3, #2
 800e63e:	e1b3      	b.n	800e9a8 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e646:	d104      	bne.n	800e652 <f_lseek+0xb4>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	755a      	strb	r2, [r3, #21]
 800e64e:	2301      	movs	r3, #1
 800e650:	e1aa      	b.n	800e9a8 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3301      	adds	r3, #1
 800e656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e658:	429a      	cmp	r2, r3
 800e65a:	d0de      	beq.n	800e61a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e65c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	429a      	cmp	r2, r3
 800e662:	d809      	bhi.n	800e678 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e666:	1d1a      	adds	r2, r3, #4
 800e668:	627a      	str	r2, [r7, #36]	; 0x24
 800e66a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	1d1a      	adds	r2, r3, #4
 800e672:	627a      	str	r2, [r7, #36]	; 0x24
 800e674:	693a      	ldr	r2, [r7, #16]
 800e676:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e67e:	429a      	cmp	r2, r3
 800e680:	d3c4      	bcc.n	800e60c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e688:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d803      	bhi.n	800e69a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e694:	2200      	movs	r2, #0
 800e696:	601a      	str	r2, [r3, #0]
 800e698:	e184      	b.n	800e9a4 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e69a:	2311      	movs	r3, #17
 800e69c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e6a0:	e180      	b.n	800e9a4 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	683a      	ldr	r2, [r7, #0]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d902      	bls.n	800e6b2 <f_lseek+0x114>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	683a      	ldr	r2, [r7, #0]
 800e6b6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f000 8172 	beq.w	800e9a4 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	3b01      	subs	r3, #1
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f7fd ff12 	bl	800c4f0 <clmt_clust>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	69db      	ldr	r3, [r3, #28]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	4610      	mov	r0, r2
 800e6dc:	f7fd fc5a 	bl	800bf94 <clust2sect>
 800e6e0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e6e2:	69bb      	ldr	r3, [r7, #24]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d104      	bne.n	800e6f2 <f_lseek+0x154>
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2202      	movs	r2, #2
 800e6ec:	755a      	strb	r2, [r3, #21]
 800e6ee:	2302      	movs	r3, #2
 800e6f0:	e15a      	b.n	800e9a8 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	0a5b      	lsrs	r3, r3, #9
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	8952      	ldrh	r2, [r2, #10]
 800e6fc:	3a01      	subs	r2, #1
 800e6fe:	4013      	ands	r3, r2
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	4413      	add	r3, r2
 800e704:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	699b      	ldr	r3, [r3, #24]
 800e70a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e70e:	2b00      	cmp	r3, #0
 800e710:	f000 8148 	beq.w	800e9a4 <f_lseek+0x406>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	f000 8142 	beq.w	800e9a4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	b25b      	sxtb	r3, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	da18      	bge.n	800e75c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	7858      	ldrb	r0, [r3, #1]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a1a      	ldr	r2, [r3, #32]
 800e738:	2301      	movs	r3, #1
 800e73a:	f7fd f8a1 	bl	800b880 <disk_write>
 800e73e:	4603      	mov	r3, r0
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <f_lseek+0x1b0>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	755a      	strb	r2, [r3, #21]
 800e74a:	2301      	movs	r3, #1
 800e74c:	e12c      	b.n	800e9a8 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	7d1b      	ldrb	r3, [r3, #20]
 800e752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e756:	b2da      	uxtb	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	7858      	ldrb	r0, [r3, #1]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e766:	2301      	movs	r3, #1
 800e768:	69ba      	ldr	r2, [r7, #24]
 800e76a:	f7fd f869 	bl	800b840 <disk_read>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	d004      	beq.n	800e77e <f_lseek+0x1e0>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2201      	movs	r2, #1
 800e778:	755a      	strb	r2, [r3, #21]
 800e77a:	2301      	movs	r3, #1
 800e77c:	e114      	b.n	800e9a8 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	69ba      	ldr	r2, [r7, #24]
 800e782:	621a      	str	r2, [r3, #32]
 800e784:	e10e      	b.n	800e9a4 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d908      	bls.n	800e7a2 <f_lseek+0x204>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	7d1b      	ldrb	r3, [r3, #20]
 800e794:	f003 0302 	and.w	r3, r3, #2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d102      	bne.n	800e7a2 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	699b      	ldr	r3, [r3, #24]
 800e7a6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f000 80a7 	beq.w	800e908 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	895b      	ldrh	r3, [r3, #10]
 800e7be:	025b      	lsls	r3, r3, #9
 800e7c0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d01b      	beq.n	800e800 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	1e5a      	subs	r2, r3, #1
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	fbb2 f2f3 	udiv	r2, r2, r3
 800e7d2:	6a3b      	ldr	r3, [r7, #32]
 800e7d4:	1e59      	subs	r1, r3, #1
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d30f      	bcc.n	800e800 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e7e0:	6a3b      	ldr	r3, [r7, #32]
 800e7e2:	1e5a      	subs	r2, r3, #1
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	425b      	negs	r3, r3
 800e7e8:	401a      	ands	r2, r3
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	699b      	ldr	r3, [r3, #24]
 800e7f2:	683a      	ldr	r2, [r7, #0]
 800e7f4:	1ad3      	subs	r3, r2, r3
 800e7f6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	69db      	ldr	r3, [r3, #28]
 800e7fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7fe:	e022      	b.n	800e846 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	689b      	ldr	r3, [r3, #8]
 800e804:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d119      	bne.n	800e840 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2100      	movs	r1, #0
 800e810:	4618      	mov	r0, r3
 800e812:	f7fd fdd5 	bl	800c3c0 <create_chain>
 800e816:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d104      	bne.n	800e828 <f_lseek+0x28a>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	755a      	strb	r2, [r3, #21]
 800e824:	2302      	movs	r3, #2
 800e826:	e0bf      	b.n	800e9a8 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e82e:	d104      	bne.n	800e83a <f_lseek+0x29c>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2201      	movs	r2, #1
 800e834:	755a      	strb	r2, [r3, #21]
 800e836:	2301      	movs	r3, #1
 800e838:	e0b6      	b.n	800e9a8 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e83e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e844:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d05d      	beq.n	800e908 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e84c:	e03a      	b.n	800e8c4 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e84e:	683a      	ldr	r2, [r7, #0]
 800e850:	69fb      	ldr	r3, [r7, #28]
 800e852:	1ad3      	subs	r3, r2, r3
 800e854:	603b      	str	r3, [r7, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	699a      	ldr	r2, [r3, #24]
 800e85a:	69fb      	ldr	r3, [r7, #28]
 800e85c:	441a      	add	r2, r3
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	7d1b      	ldrb	r3, [r3, #20]
 800e866:	f003 0302 	and.w	r3, r3, #2
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00b      	beq.n	800e886 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e872:	4618      	mov	r0, r3
 800e874:	f7fd fda4 	bl	800c3c0 <create_chain>
 800e878:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d108      	bne.n	800e892 <f_lseek+0x2f4>
							ofs = 0; break;
 800e880:	2300      	movs	r3, #0
 800e882:	603b      	str	r3, [r7, #0]
 800e884:	e022      	b.n	800e8cc <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fd fba1 	bl	800bfd2 <get_fat>
 800e890:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e898:	d104      	bne.n	800e8a4 <f_lseek+0x306>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	755a      	strb	r2, [r3, #21]
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e081      	b.n	800e9a8 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d904      	bls.n	800e8b4 <f_lseek+0x316>
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d304      	bcc.n	800e8be <f_lseek+0x320>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2202      	movs	r2, #2
 800e8b8:	755a      	strb	r2, [r3, #21]
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e074      	b.n	800e9a8 <f_lseek+0x40a>
					fp->clust = clst;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8c2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e8c4:	683a      	ldr	r2, [r7, #0]
 800e8c6:	69fb      	ldr	r3, [r7, #28]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d8c0      	bhi.n	800e84e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699a      	ldr	r2, [r3, #24]
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	441a      	add	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d012      	beq.n	800e908 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fd fb54 	bl	800bf94 <clust2sect>
 800e8ec:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d104      	bne.n	800e8fe <f_lseek+0x360>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2202      	movs	r2, #2
 800e8f8:	755a      	strb	r2, [r3, #21]
 800e8fa:	2302      	movs	r3, #2
 800e8fc:	e054      	b.n	800e9a8 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	0a5b      	lsrs	r3, r3, #9
 800e902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e904:	4413      	add	r3, r2
 800e906:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	699a      	ldr	r2, [r3, #24]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	429a      	cmp	r2, r3
 800e912:	d90a      	bls.n	800e92a <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	699a      	ldr	r2, [r3, #24]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	7d1b      	ldrb	r3, [r3, #20]
 800e920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e924:	b2da      	uxtb	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	699b      	ldr	r3, [r3, #24]
 800e92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e932:	2b00      	cmp	r3, #0
 800e934:	d036      	beq.n	800e9a4 <f_lseek+0x406>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a1b      	ldr	r3, [r3, #32]
 800e93a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d031      	beq.n	800e9a4 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	7d1b      	ldrb	r3, [r3, #20]
 800e944:	b25b      	sxtb	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	da18      	bge.n	800e97c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	7858      	ldrb	r0, [r3, #1]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a1a      	ldr	r2, [r3, #32]
 800e958:	2301      	movs	r3, #1
 800e95a:	f7fc ff91 	bl	800b880 <disk_write>
 800e95e:	4603      	mov	r3, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <f_lseek+0x3d0>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	755a      	strb	r2, [r3, #21]
 800e96a:	2301      	movs	r3, #1
 800e96c:	e01c      	b.n	800e9a8 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7d1b      	ldrb	r3, [r3, #20]
 800e972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e976:	b2da      	uxtb	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	7858      	ldrb	r0, [r3, #1]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e986:	2301      	movs	r3, #1
 800e988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e98a:	f7fc ff59 	bl	800b840 <disk_read>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d004      	beq.n	800e99e <f_lseek+0x400>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2201      	movs	r2, #1
 800e998:	755a      	strb	r2, [r3, #21]
 800e99a:	2301      	movs	r3, #1
 800e99c:	e004      	b.n	800e9a8 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9a2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e9a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3740      	adds	r7, #64	; 0x40
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <f_opendir+0x14>
 800e9c0:	2309      	movs	r3, #9
 800e9c2:	e064      	b.n	800ea8e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e9c8:	f107 010c 	add.w	r1, r7, #12
 800e9cc:	463b      	mov	r3, r7
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7fe ff73 	bl	800d8bc <find_volume>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d14f      	bne.n	800ea80 <f_opendir+0xd0>
		obj->fs = fs;
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7fe fe5a 	bl	800d6a4 <follow_path>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e9f4:	7dfb      	ldrb	r3, [r7, #23]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d13d      	bne.n	800ea76 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ea00:	b25b      	sxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	db12      	blt.n	800ea2c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	799b      	ldrb	r3, [r3, #6]
 800ea0a:	f003 0310 	and.w	r3, r3, #16
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00a      	beq.n	800ea28 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a1b      	ldr	r3, [r3, #32]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	f7fd ff23 	bl	800c866 <ld_clust>
 800ea20:	4602      	mov	r2, r0
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	609a      	str	r2, [r3, #8]
 800ea26:	e001      	b.n	800ea2c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800ea28:	2305      	movs	r3, #5
 800ea2a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d121      	bne.n	800ea76 <f_opendir+0xc6>
				obj->id = fs->id;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	88da      	ldrh	r2, [r3, #6]
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7fd fd8b 	bl	800c558 <dir_sdi>
 800ea42:	4603      	mov	r3, r0
 800ea44:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ea46:	7dfb      	ldrb	r3, [r7, #23]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d114      	bne.n	800ea76 <f_opendir+0xc6>
					if (obj->sclust) {
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	689b      	ldr	r3, [r3, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d00d      	beq.n	800ea70 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ea54:	2100      	movs	r1, #0
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f7fd f8ce 	bl	800bbf8 <inc_lock>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	691b      	ldr	r3, [r3, #16]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d105      	bne.n	800ea76 <f_opendir+0xc6>
 800ea6a:	2312      	movs	r3, #18
 800ea6c:	75fb      	strb	r3, [r7, #23]
 800ea6e:	e002      	b.n	800ea76 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	2200      	movs	r2, #0
 800ea74:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ea76:	7dfb      	ldrb	r3, [r7, #23]
 800ea78:	2b04      	cmp	r3, #4
 800ea7a:	d101      	bne.n	800ea80 <f_opendir+0xd0>
 800ea7c:	2305      	movs	r3, #5
 800ea7e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ea80:	7dfb      	ldrb	r3, [r7, #23]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <f_opendir+0xdc>
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3718      	adds	r7, #24
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}

0800ea96 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800ea96:	b580      	push	{r7, lr}
 800ea98:	b084      	sub	sp, #16
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f107 0208 	add.w	r2, r7, #8
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7ff f958 	bl	800dd5c <validate>
 800eaac:	4603      	mov	r3, r0
 800eaae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eab0:	7bfb      	ldrb	r3, [r7, #15]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d110      	bne.n	800ead8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	691b      	ldr	r3, [r3, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	691b      	ldr	r3, [r3, #16]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f7fd f926 	bl	800bd14 <dec_lock>
 800eac8:	4603      	mov	r3, r0
 800eaca:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800eacc:	7bfb      	ldrb	r3, [r7, #15]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d102      	bne.n	800ead8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}

0800eae2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800eae2:	b580      	push	{r7, lr}
 800eae4:	b084      	sub	sp, #16
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
 800eaea:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f107 0208 	add.w	r2, r7, #8
 800eaf2:	4611      	mov	r1, r2
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7ff f931 	bl	800dd5c <validate>
 800eafa:	4603      	mov	r3, r0
 800eafc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d126      	bne.n	800eb52 <f_readdir+0x70>
		if (!fno) {
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7fd fd23 	bl	800c558 <dir_sdi>
 800eb12:	4603      	mov	r3, r0
 800eb14:	73fb      	strb	r3, [r7, #15]
 800eb16:	e01c      	b.n	800eb52 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800eb18:	2100      	movs	r1, #0
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f7fe f8cd 	bl	800ccba <dir_read>
 800eb20:	4603      	mov	r3, r0
 800eb22:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	2b04      	cmp	r3, #4
 800eb28:	d101      	bne.n	800eb2e <f_readdir+0x4c>
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800eb2e:	7bfb      	ldrb	r3, [r7, #15]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d10e      	bne.n	800eb52 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fe fb1e 	bl	800d178 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fd fd85 	bl	800c64e <dir_next>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	2b04      	cmp	r3, #4
 800eb4c:	d101      	bne.n	800eb52 <f_readdir+0x70>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800eb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b087      	sub	sp, #28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	4613      	mov	r3, r2
 800eb68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb72:	4b1f      	ldr	r3, [pc, #124]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb74:	7a5b      	ldrb	r3, [r3, #9]
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d131      	bne.n	800ebe0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb7c:	4b1c      	ldr	r3, [pc, #112]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb7e:	7a5b      	ldrb	r3, [r3, #9]
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	461a      	mov	r2, r3
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb86:	2100      	movs	r1, #0
 800eb88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb8a:	4b19      	ldr	r3, [pc, #100]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb8c:	7a5b      	ldrb	r3, [r3, #9]
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	4a17      	ldr	r2, [pc, #92]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb92:	009b      	lsls	r3, r3, #2
 800eb94:	4413      	add	r3, r2
 800eb96:	68fa      	ldr	r2, [r7, #12]
 800eb98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb9a:	4b15      	ldr	r3, [pc, #84]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eb9c:	7a5b      	ldrb	r3, [r3, #9]
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	461a      	mov	r2, r3
 800eba2:	4b13      	ldr	r3, [pc, #76]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800eba4:	4413      	add	r3, r2
 800eba6:	79fa      	ldrb	r2, [r7, #7]
 800eba8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ebaa:	4b11      	ldr	r3, [pc, #68]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800ebac:	7a5b      	ldrb	r3, [r3, #9]
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	b2d1      	uxtb	r1, r2
 800ebb4:	4a0e      	ldr	r2, [pc, #56]	; (800ebf0 <FATFS_LinkDriverEx+0x94>)
 800ebb6:	7251      	strb	r1, [r2, #9]
 800ebb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ebba:	7dbb      	ldrb	r3, [r7, #22]
 800ebbc:	3330      	adds	r3, #48	; 0x30
 800ebbe:	b2da      	uxtb	r2, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	223a      	movs	r2, #58	; 0x3a
 800ebca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	3302      	adds	r3, #2
 800ebd0:	222f      	movs	r2, #47	; 0x2f
 800ebd2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	3303      	adds	r3, #3
 800ebd8:	2200      	movs	r2, #0
 800ebda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ebe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	371c      	adds	r7, #28
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop
 800ebf0:	20001d8c 	.word	0x20001d8c

0800ebf4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ebfe:	2200      	movs	r2, #0
 800ec00:	6839      	ldr	r1, [r7, #0]
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff ffaa 	bl	800eb5c <FATFS_LinkDriverEx>
 800ec08:	4603      	mov	r3, r0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
	...

0800ec14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	6039      	str	r1, [r7, #0]
 800ec1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ec20:	88fb      	ldrh	r3, [r7, #6]
 800ec22:	2b7f      	cmp	r3, #127	; 0x7f
 800ec24:	d802      	bhi.n	800ec2c <ff_convert+0x18>
		c = chr;
 800ec26:	88fb      	ldrh	r3, [r7, #6]
 800ec28:	81fb      	strh	r3, [r7, #14]
 800ec2a:	e025      	b.n	800ec78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00b      	beq.n	800ec4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ec32:	88fb      	ldrh	r3, [r7, #6]
 800ec34:	2bff      	cmp	r3, #255	; 0xff
 800ec36:	d805      	bhi.n	800ec44 <ff_convert+0x30>
 800ec38:	88fb      	ldrh	r3, [r7, #6]
 800ec3a:	3b80      	subs	r3, #128	; 0x80
 800ec3c:	4a12      	ldr	r2, [pc, #72]	; (800ec88 <ff_convert+0x74>)
 800ec3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec42:	e000      	b.n	800ec46 <ff_convert+0x32>
 800ec44:	2300      	movs	r3, #0
 800ec46:	81fb      	strh	r3, [r7, #14]
 800ec48:	e016      	b.n	800ec78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	81fb      	strh	r3, [r7, #14]
 800ec4e:	e009      	b.n	800ec64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ec50:	89fb      	ldrh	r3, [r7, #14]
 800ec52:	4a0d      	ldr	r2, [pc, #52]	; (800ec88 <ff_convert+0x74>)
 800ec54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec58:	88fa      	ldrh	r2, [r7, #6]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d006      	beq.n	800ec6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ec5e:	89fb      	ldrh	r3, [r7, #14]
 800ec60:	3301      	adds	r3, #1
 800ec62:	81fb      	strh	r3, [r7, #14]
 800ec64:	89fb      	ldrh	r3, [r7, #14]
 800ec66:	2b7f      	cmp	r3, #127	; 0x7f
 800ec68:	d9f2      	bls.n	800ec50 <ff_convert+0x3c>
 800ec6a:	e000      	b.n	800ec6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ec6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ec6e:	89fb      	ldrh	r3, [r7, #14]
 800ec70:	3380      	adds	r3, #128	; 0x80
 800ec72:	b29b      	uxth	r3, r3
 800ec74:	b2db      	uxtb	r3, r3
 800ec76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ec78:	89fb      	ldrh	r3, [r7, #14]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3714      	adds	r7, #20
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	0800f8b8 	.word	0x0800f8b8

0800ec8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	4603      	mov	r3, r0
 800ec94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ec96:	88fb      	ldrh	r3, [r7, #6]
 800ec98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec9c:	d201      	bcs.n	800eca2 <ff_wtoupper+0x16>
 800ec9e:	4b3e      	ldr	r3, [pc, #248]	; (800ed98 <ff_wtoupper+0x10c>)
 800eca0:	e000      	b.n	800eca4 <ff_wtoupper+0x18>
 800eca2:	4b3e      	ldr	r3, [pc, #248]	; (800ed9c <ff_wtoupper+0x110>)
 800eca4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	1c9a      	adds	r2, r3, #2
 800ecaa:	617a      	str	r2, [r7, #20]
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ecb0:	8a7b      	ldrh	r3, [r7, #18]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d068      	beq.n	800ed88 <ff_wtoupper+0xfc>
 800ecb6:	88fa      	ldrh	r2, [r7, #6]
 800ecb8:	8a7b      	ldrh	r3, [r7, #18]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d364      	bcc.n	800ed88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	1c9a      	adds	r2, r3, #2
 800ecc2:	617a      	str	r2, [r7, #20]
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	823b      	strh	r3, [r7, #16]
 800ecc8:	8a3b      	ldrh	r3, [r7, #16]
 800ecca:	0a1b      	lsrs	r3, r3, #8
 800eccc:	81fb      	strh	r3, [r7, #14]
 800ecce:	8a3b      	ldrh	r3, [r7, #16]
 800ecd0:	b2db      	uxtb	r3, r3
 800ecd2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ecd4:	88fa      	ldrh	r2, [r7, #6]
 800ecd6:	8a79      	ldrh	r1, [r7, #18]
 800ecd8:	8a3b      	ldrh	r3, [r7, #16]
 800ecda:	440b      	add	r3, r1
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	da49      	bge.n	800ed74 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ece0:	89fb      	ldrh	r3, [r7, #14]
 800ece2:	2b08      	cmp	r3, #8
 800ece4:	d84f      	bhi.n	800ed86 <ff_wtoupper+0xfa>
 800ece6:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <ff_wtoupper+0x60>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed11 	.word	0x0800ed11
 800ecf0:	0800ed23 	.word	0x0800ed23
 800ecf4:	0800ed39 	.word	0x0800ed39
 800ecf8:	0800ed41 	.word	0x0800ed41
 800ecfc:	0800ed49 	.word	0x0800ed49
 800ed00:	0800ed51 	.word	0x0800ed51
 800ed04:	0800ed59 	.word	0x0800ed59
 800ed08:	0800ed61 	.word	0x0800ed61
 800ed0c:	0800ed69 	.word	0x0800ed69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ed10:	88fa      	ldrh	r2, [r7, #6]
 800ed12:	8a7b      	ldrh	r3, [r7, #18]
 800ed14:	1ad3      	subs	r3, r2, r3
 800ed16:	005b      	lsls	r3, r3, #1
 800ed18:	697a      	ldr	r2, [r7, #20]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	80fb      	strh	r3, [r7, #6]
 800ed20:	e027      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ed22:	88fa      	ldrh	r2, [r7, #6]
 800ed24:	8a7b      	ldrh	r3, [r7, #18]
 800ed26:	1ad3      	subs	r3, r2, r3
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	f003 0301 	and.w	r3, r3, #1
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	88fa      	ldrh	r2, [r7, #6]
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	80fb      	strh	r3, [r7, #6]
 800ed36:	e01c      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ed38:	88fb      	ldrh	r3, [r7, #6]
 800ed3a:	3b10      	subs	r3, #16
 800ed3c:	80fb      	strh	r3, [r7, #6]
 800ed3e:	e018      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ed40:	88fb      	ldrh	r3, [r7, #6]
 800ed42:	3b20      	subs	r3, #32
 800ed44:	80fb      	strh	r3, [r7, #6]
 800ed46:	e014      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ed48:	88fb      	ldrh	r3, [r7, #6]
 800ed4a:	3b30      	subs	r3, #48	; 0x30
 800ed4c:	80fb      	strh	r3, [r7, #6]
 800ed4e:	e010      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ed50:	88fb      	ldrh	r3, [r7, #6]
 800ed52:	3b1a      	subs	r3, #26
 800ed54:	80fb      	strh	r3, [r7, #6]
 800ed56:	e00c      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ed58:	88fb      	ldrh	r3, [r7, #6]
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	80fb      	strh	r3, [r7, #6]
 800ed5e:	e008      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ed60:	88fb      	ldrh	r3, [r7, #6]
 800ed62:	3b50      	subs	r3, #80	; 0x50
 800ed64:	80fb      	strh	r3, [r7, #6]
 800ed66:	e004      	b.n	800ed72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ed68:	88fb      	ldrh	r3, [r7, #6]
 800ed6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ed6e:	80fb      	strh	r3, [r7, #6]
 800ed70:	bf00      	nop
			}
			break;
 800ed72:	e008      	b.n	800ed86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ed74:	89fb      	ldrh	r3, [r7, #14]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d195      	bne.n	800eca6 <ff_wtoupper+0x1a>
 800ed7a:	8a3b      	ldrh	r3, [r7, #16]
 800ed7c:	005b      	lsls	r3, r3, #1
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	4413      	add	r3, r2
 800ed82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ed84:	e78f      	b.n	800eca6 <ff_wtoupper+0x1a>
			break;
 800ed86:	bf00      	nop
	}

	return chr;
 800ed88:	88fb      	ldrh	r3, [r7, #6]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	371c      	adds	r7, #28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	0800f9b8 	.word	0x0800f9b8
 800ed9c:	0800fbac 	.word	0x0800fbac

0800eda0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eda4:	2201      	movs	r2, #1
 800eda6:	490e      	ldr	r1, [pc, #56]	; (800ede0 <MX_USB_HOST_Init+0x40>)
 800eda8:	480e      	ldr	r0, [pc, #56]	; (800ede4 <MX_USB_HOST_Init+0x44>)
 800edaa:	f7fb f8b5 	bl	8009f18 <USBH_Init>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d001      	beq.n	800edb8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800edb4:	f7f2 fce2 	bl	800177c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800edb8:	490b      	ldr	r1, [pc, #44]	; (800ede8 <MX_USB_HOST_Init+0x48>)
 800edba:	480a      	ldr	r0, [pc, #40]	; (800ede4 <MX_USB_HOST_Init+0x44>)
 800edbc:	f7fb f93a 	bl	800a034 <USBH_RegisterClass>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800edc6:	f7f2 fcd9 	bl	800177c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800edca:	4806      	ldr	r0, [pc, #24]	; (800ede4 <MX_USB_HOST_Init+0x44>)
 800edcc:	f7fb f9be 	bl	800a14c <USBH_Start>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800edd6:	f7f2 fcd1 	bl	800177c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800edda:	bf00      	nop
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	0800ee01 	.word	0x0800ee01
 800ede4:	20001d98 	.word	0x20001d98
 800ede8:	20000048 	.word	0x20000048

0800edec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800edf0:	4802      	ldr	r0, [pc, #8]	; (800edfc <MX_USB_HOST_Process+0x10>)
 800edf2:	f7fb f9bb 	bl	800a16c <USBH_Process>
}
 800edf6:	bf00      	nop
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	20001d98 	.word	0x20001d98

0800ee00 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	460b      	mov	r3, r1
 800ee0a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ee0c:	78fb      	ldrb	r3, [r7, #3]
 800ee0e:	3b01      	subs	r3, #1
 800ee10:	2b04      	cmp	r3, #4
 800ee12:	d819      	bhi.n	800ee48 <USBH_UserProcess+0x48>
 800ee14:	a201      	add	r2, pc, #4	; (adr r2, 800ee1c <USBH_UserProcess+0x1c>)
 800ee16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1a:	bf00      	nop
 800ee1c:	0800ee49 	.word	0x0800ee49
 800ee20:	0800ee39 	.word	0x0800ee39
 800ee24:	0800ee49 	.word	0x0800ee49
 800ee28:	0800ee41 	.word	0x0800ee41
 800ee2c:	0800ee31 	.word	0x0800ee31
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ee30:	4b09      	ldr	r3, [pc, #36]	; (800ee58 <USBH_UserProcess+0x58>)
 800ee32:	2203      	movs	r2, #3
 800ee34:	701a      	strb	r2, [r3, #0]
  break;
 800ee36:	e008      	b.n	800ee4a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ee38:	4b07      	ldr	r3, [pc, #28]	; (800ee58 <USBH_UserProcess+0x58>)
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	701a      	strb	r2, [r3, #0]
  break;
 800ee3e:	e004      	b.n	800ee4a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ee40:	4b05      	ldr	r3, [pc, #20]	; (800ee58 <USBH_UserProcess+0x58>)
 800ee42:	2201      	movs	r2, #1
 800ee44:	701a      	strb	r2, [r3, #0]
  break;
 800ee46:	e000      	b.n	800ee4a <USBH_UserProcess+0x4a>

  default:
  break;
 800ee48:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ee4a:	bf00      	nop
 800ee4c:	370c      	adds	r7, #12
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	20002170 	.word	0x20002170

0800ee5c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b08a      	sub	sp, #40	; 0x28
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee64:	f107 0314 	add.w	r3, r7, #20
 800ee68:	2200      	movs	r2, #0
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	605a      	str	r2, [r3, #4]
 800ee6e:	609a      	str	r2, [r3, #8]
 800ee70:	60da      	str	r2, [r3, #12]
 800ee72:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ee7c:	d147      	bne.n	800ef0e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee7e:	2300      	movs	r3, #0
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	4b25      	ldr	r3, [pc, #148]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800ee84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee86:	4a24      	ldr	r2, [pc, #144]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800ee88:	f043 0301 	orr.w	r3, r3, #1
 800ee8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ee8e:	4b22      	ldr	r3, [pc, #136]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800ee90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee92:	f003 0301 	and.w	r3, r3, #1
 800ee96:	613b      	str	r3, [r7, #16]
 800ee98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ee9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800eea0:	2300      	movs	r3, #0
 800eea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eea4:	2300      	movs	r3, #0
 800eea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eea8:	f107 0314 	add.w	r3, r7, #20
 800eeac:	4619      	mov	r1, r3
 800eeae:	481b      	ldr	r0, [pc, #108]	; (800ef1c <HAL_HCD_MspInit+0xc0>)
 800eeb0:	f7f3 fe26 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800eeb4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800eeb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeba:	2302      	movs	r3, #2
 800eebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eec2:	2303      	movs	r3, #3
 800eec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800eec6:	230a      	movs	r3, #10
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	4619      	mov	r1, r3
 800eed0:	4812      	ldr	r0, [pc, #72]	; (800ef1c <HAL_HCD_MspInit+0xc0>)
 800eed2:	f7f3 fe15 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eed6:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800eed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeda:	4a0f      	ldr	r2, [pc, #60]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800eedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee0:	6353      	str	r3, [r2, #52]	; 0x34
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800eee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeea:	4a0b      	ldr	r2, [pc, #44]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800eeec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800eef0:	6453      	str	r3, [r2, #68]	; 0x44
 800eef2:	4b09      	ldr	r3, [pc, #36]	; (800ef18 <HAL_HCD_MspInit+0xbc>)
 800eef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eefe:	2200      	movs	r2, #0
 800ef00:	2100      	movs	r1, #0
 800ef02:	2043      	movs	r0, #67	; 0x43
 800ef04:	f7f3 f987 	bl	8002216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ef08:	2043      	movs	r0, #67	; 0x43
 800ef0a:	f7f3 f9a0 	bl	800224e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ef0e:	bf00      	nop
 800ef10:	3728      	adds	r7, #40	; 0x28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	40020000 	.word	0x40020000

0800ef20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fb fcfb 	bl	800a92a <USBH_LL_IncTimer>
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fb fd33 	bl	800a9b6 <USBH_LL_Connect>
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}

0800ef58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fb fd3c 	bl	800a9e4 <USBH_LL_Disconnect>
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	70fb      	strb	r3, [r7, #3]
 800ef80:	4613      	mov	r3, r2
 800ef82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ef84:	bf00      	nop
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fb fced 	bl	800a97e <USBH_LL_PortEnabled>
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fb fced 	bl	800a99a <USBH_LL_PortDisabled>
}
 800efc0:	bf00      	nop
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d12a      	bne.n	800f030 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800efda:	4a18      	ldr	r2, [pc, #96]	; (800f03c <USBH_LL_Init+0x74>)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4a15      	ldr	r2, [pc, #84]	; (800f03c <USBH_LL_Init+0x74>)
 800efe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efea:	4b14      	ldr	r3, [pc, #80]	; (800f03c <USBH_LL_Init+0x74>)
 800efec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800eff0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800eff2:	4b12      	ldr	r3, [pc, #72]	; (800f03c <USBH_LL_Init+0x74>)
 800eff4:	2208      	movs	r2, #8
 800eff6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <USBH_LL_Init+0x74>)
 800effa:	2201      	movs	r2, #1
 800effc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800effe:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <USBH_LL_Init+0x74>)
 800f000:	2200      	movs	r2, #0
 800f002:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f004:	4b0d      	ldr	r3, [pc, #52]	; (800f03c <USBH_LL_Init+0x74>)
 800f006:	2202      	movs	r2, #2
 800f008:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f00a:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <USBH_LL_Init+0x74>)
 800f00c:	2200      	movs	r2, #0
 800f00e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f010:	480a      	ldr	r0, [pc, #40]	; (800f03c <USBH_LL_Init+0x74>)
 800f012:	f7f4 f80f 	bl	8003034 <HAL_HCD_Init>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d001      	beq.n	800f020 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f01c:	f7f2 fbae 	bl	800177c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f020:	4806      	ldr	r0, [pc, #24]	; (800f03c <USBH_LL_Init+0x74>)
 800f022:	f7f4 fbf2 	bl	800380a <HAL_HCD_GetCurrentFrame>
 800f026:	4603      	mov	r3, r0
 800f028:	4619      	mov	r1, r3
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f7fb fc6e 	bl	800a90c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	20002174 	.word	0x20002174

0800f040 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b084      	sub	sp, #16
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f04c:	2300      	movs	r3, #0
 800f04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f056:	4618      	mov	r0, r3
 800f058:	f7f4 fb61 	bl	800371e <HAL_HCD_Start>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	4618      	mov	r0, r3
 800f064:	f000 f994 	bl	800f390 <USBH_Get_USB_Status>
 800f068:	4603      	mov	r3, r0
 800f06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f082:	2300      	movs	r3, #0
 800f084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f4 fb69 	bl	8003764 <HAL_HCD_Stop>
 800f092:	4603      	mov	r3, r0
 800f094:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f979 	bl	800f390 <USBH_Get_USB_Status>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7f4 fbb1 	bl	8003826 <HAL_HCD_GetCurrentSpeed>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d00c      	beq.n	800f0e4 <USBH_LL_GetSpeed+0x38>
 800f0ca:	2b02      	cmp	r3, #2
 800f0cc:	d80d      	bhi.n	800f0ea <USBH_LL_GetSpeed+0x3e>
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d002      	beq.n	800f0d8 <USBH_LL_GetSpeed+0x2c>
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d003      	beq.n	800f0de <USBH_LL_GetSpeed+0x32>
 800f0d6:	e008      	b.n	800f0ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	73fb      	strb	r3, [r7, #15]
    break;
 800f0dc:	e008      	b.n	800f0f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e2:	e005      	b.n	800f0f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f0e4:	2302      	movs	r3, #2
 800f0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0e8:	e002      	b.n	800f0f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ee:	bf00      	nop
  }
  return  speed;
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b084      	sub	sp, #16
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f106:	2300      	movs	r3, #0
 800f108:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f110:	4618      	mov	r0, r3
 800f112:	f7f4 fb44 	bl	800379e <HAL_HCD_ResetPort>
 800f116:	4603      	mov	r3, r0
 800f118:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f937 	bl	800f390 <USBH_Get_USB_Status>
 800f122:	4603      	mov	r3, r0
 800f124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f126:	7bbb      	ldrb	r3, [r7, #14]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f142:	78fa      	ldrb	r2, [r7, #3]
 800f144:	4611      	mov	r1, r2
 800f146:	4618      	mov	r0, r3
 800f148:	f7f4 fb4b 	bl	80037e2 <HAL_HCD_HC_GetXferCount>
 800f14c:	4603      	mov	r3, r0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f156:	b590      	push	{r4, r7, lr}
 800f158:	b089      	sub	sp, #36	; 0x24
 800f15a:	af04      	add	r7, sp, #16
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	4608      	mov	r0, r1
 800f160:	4611      	mov	r1, r2
 800f162:	461a      	mov	r2, r3
 800f164:	4603      	mov	r3, r0
 800f166:	70fb      	strb	r3, [r7, #3]
 800f168:	460b      	mov	r3, r1
 800f16a:	70bb      	strb	r3, [r7, #2]
 800f16c:	4613      	mov	r3, r2
 800f16e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f170:	2300      	movs	r3, #0
 800f172:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f17e:	787c      	ldrb	r4, [r7, #1]
 800f180:	78ba      	ldrb	r2, [r7, #2]
 800f182:	78f9      	ldrb	r1, [r7, #3]
 800f184:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f186:	9302      	str	r3, [sp, #8]
 800f188:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f18c:	9301      	str	r3, [sp, #4]
 800f18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	4623      	mov	r3, r4
 800f196:	f7f3 ffaf 	bl	80030f8 <HAL_HCD_HC_Init>
 800f19a:	4603      	mov	r3, r0
 800f19c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f19e:	7bfb      	ldrb	r3, [r7, #15]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f8f5 	bl	800f390 <USBH_Get_USB_Status>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd90      	pop	{r4, r7, pc}

0800f1b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1ce:	78fa      	ldrb	r2, [r7, #3]
 800f1d0:	4611      	mov	r1, r2
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f4 f81f 	bl	8003216 <HAL_HCD_HC_Halt>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1dc:	7bfb      	ldrb	r3, [r7, #15]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 f8d6 	bl	800f390 <USBH_Get_USB_Status>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}

0800f1f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f1f2:	b590      	push	{r4, r7, lr}
 800f1f4:	b089      	sub	sp, #36	; 0x24
 800f1f6:	af04      	add	r7, sp, #16
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	4608      	mov	r0, r1
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	461a      	mov	r2, r3
 800f200:	4603      	mov	r3, r0
 800f202:	70fb      	strb	r3, [r7, #3]
 800f204:	460b      	mov	r3, r1
 800f206:	70bb      	strb	r3, [r7, #2]
 800f208:	4613      	mov	r3, r2
 800f20a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f210:	2300      	movs	r3, #0
 800f212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f21a:	787c      	ldrb	r4, [r7, #1]
 800f21c:	78ba      	ldrb	r2, [r7, #2]
 800f21e:	78f9      	ldrb	r1, [r7, #3]
 800f220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f224:	9303      	str	r3, [sp, #12]
 800f226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f228:	9302      	str	r3, [sp, #8]
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	9301      	str	r3, [sp, #4]
 800f22e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	4623      	mov	r3, r4
 800f236:	f7f4 f811 	bl	800325c <HAL_HCD_HC_SubmitRequest>
 800f23a:	4603      	mov	r3, r0
 800f23c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
 800f240:	4618      	mov	r0, r3
 800f242:	f000 f8a5 	bl	800f390 <USBH_Get_USB_Status>
 800f246:	4603      	mov	r3, r0
 800f248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	bd90      	pop	{r4, r7, pc}

0800f254 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	460b      	mov	r3, r1
 800f25e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f266:	78fa      	ldrb	r2, [r7, #3]
 800f268:	4611      	mov	r1, r2
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f4 faa5 	bl	80037ba <HAL_HCD_HC_GetURBState>
 800f270:	4603      	mov	r3, r0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3708      	adds	r7, #8
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
	...

0800f27c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	460b      	mov	r3, r1
 800f286:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d103      	bne.n	800f29a <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f292:	78fb      	ldrb	r3, [r7, #3]
 800f294:	4618      	mov	r0, r3
 800f296:	f000 f8a7 	bl	800f3e8 <MX_DriverVbusFS>
  }

  /* USER CODE BEGIN 0 */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800f29a:	2200      	movs	r2, #0
 800f29c:	2101      	movs	r1, #1
 800f29e:	4805      	ldr	r0, [pc, #20]	; (800f2b4 <USBH_LL_DriverVBUS+0x38>)
 800f2a0:	f7f3 fe96 	bl	8002fd0 <HAL_GPIO_WritePin>
  /* USER CODE END 0*/

  HAL_Delay(200);
 800f2a4:	20c8      	movs	r0, #200	; 0xc8
 800f2a6:	f7f2 feb7 	bl	8002018 <HAL_Delay>
  return USBH_OK;
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	40020800 	.word	0x40020800

0800f2b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f2b8:	b480      	push	{r7}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	70fb      	strb	r3, [r7, #3]
 800f2c4:	4613      	mov	r3, r2
 800f2c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f2ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f2d0:	78fb      	ldrb	r3, [r7, #3]
 800f2d2:	68fa      	ldr	r2, [r7, #12]
 800f2d4:	212c      	movs	r1, #44	; 0x2c
 800f2d6:	fb01 f303 	mul.w	r3, r1, r3
 800f2da:	4413      	add	r3, r2
 800f2dc:	333b      	adds	r3, #59	; 0x3b
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d009      	beq.n	800f2f8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	68fa      	ldr	r2, [r7, #12]
 800f2e8:	212c      	movs	r1, #44	; 0x2c
 800f2ea:	fb01 f303 	mul.w	r3, r1, r3
 800f2ee:	4413      	add	r3, r2
 800f2f0:	3354      	adds	r3, #84	; 0x54
 800f2f2:	78ba      	ldrb	r2, [r7, #2]
 800f2f4:	701a      	strb	r2, [r3, #0]
 800f2f6:	e008      	b.n	800f30a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	212c      	movs	r1, #44	; 0x2c
 800f2fe:	fb01 f303 	mul.w	r3, r1, r3
 800f302:	4413      	add	r3, r2
 800f304:	3355      	adds	r3, #85	; 0x55
 800f306:	78ba      	ldrb	r2, [r7, #2]
 800f308:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f30a:	2300      	movs	r3, #0
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3714      	adds	r7, #20
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f324:	2300      	movs	r3, #0
 800f326:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f32e:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f330:	78fb      	ldrb	r3, [r7, #3]
 800f332:	68ba      	ldr	r2, [r7, #8]
 800f334:	212c      	movs	r1, #44	; 0x2c
 800f336:	fb01 f303 	mul.w	r3, r1, r3
 800f33a:	4413      	add	r3, r2
 800f33c:	333b      	adds	r3, #59	; 0x3b
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d009      	beq.n	800f358 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f344:	78fb      	ldrb	r3, [r7, #3]
 800f346:	68ba      	ldr	r2, [r7, #8]
 800f348:	212c      	movs	r1, #44	; 0x2c
 800f34a:	fb01 f303 	mul.w	r3, r1, r3
 800f34e:	4413      	add	r3, r2
 800f350:	3354      	adds	r3, #84	; 0x54
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	73fb      	strb	r3, [r7, #15]
 800f356:	e008      	b.n	800f36a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f358:	78fb      	ldrb	r3, [r7, #3]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	212c      	movs	r1, #44	; 0x2c
 800f35e:	fb01 f303 	mul.w	r3, r1, r3
 800f362:	4413      	add	r3, r2
 800f364:	3355      	adds	r3, #85	; 0x55
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f7f2 fe49 	bl	8002018 <HAL_Delay>
}
 800f386:	bf00      	nop
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
	...

0800f390 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f390:	b480      	push	{r7}
 800f392:	b085      	sub	sp, #20
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f39a:	2300      	movs	r3, #0
 800f39c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d817      	bhi.n	800f3d4 <USBH_Get_USB_Status+0x44>
 800f3a4:	a201      	add	r2, pc, #4	; (adr r2, 800f3ac <USBH_Get_USB_Status+0x1c>)
 800f3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3aa:	bf00      	nop
 800f3ac:	0800f3bd 	.word	0x0800f3bd
 800f3b0:	0800f3c3 	.word	0x0800f3c3
 800f3b4:	0800f3c9 	.word	0x0800f3c9
 800f3b8:	0800f3cf 	.word	0x0800f3cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c0:	e00b      	b.n	800f3da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f3c2:	2302      	movs	r3, #2
 800f3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c6:	e008      	b.n	800f3da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800f3cc:	e005      	b.n	800f3da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f3ce:	2302      	movs	r3, #2
 800f3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800f3d2:	e002      	b.n	800f3da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3d8:	bf00      	nop
  }
  return usb_status;
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3714      	adds	r7, #20
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d102      	bne.n	800f402 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	73fb      	strb	r3, [r7, #15]
 800f400:	e001      	b.n	800f406 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f402:	2301      	movs	r3, #1
 800f404:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f406:	7bfb      	ldrb	r3, [r7, #15]
 800f408:	461a      	mov	r2, r3
 800f40a:	2101      	movs	r1, #1
 800f40c:	4803      	ldr	r0, [pc, #12]	; (800f41c <MX_DriverVbusFS+0x34>)
 800f40e:	f7f3 fddf 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 800f412:	bf00      	nop
 800f414:	3710      	adds	r7, #16
 800f416:	46bd      	mov	sp, r7
 800f418:	bd80      	pop	{r7, pc}
 800f41a:	bf00      	nop
 800f41c:	40020800 	.word	0x40020800

0800f420 <malloc>:
 800f420:	4b02      	ldr	r3, [pc, #8]	; (800f42c <malloc+0xc>)
 800f422:	4601      	mov	r1, r0
 800f424:	6818      	ldr	r0, [r3, #0]
 800f426:	f000 b82b 	b.w	800f480 <_malloc_r>
 800f42a:	bf00      	nop
 800f42c:	200000b4 	.word	0x200000b4

0800f430 <free>:
 800f430:	4b02      	ldr	r3, [pc, #8]	; (800f43c <free+0xc>)
 800f432:	4601      	mov	r1, r0
 800f434:	6818      	ldr	r0, [r3, #0]
 800f436:	f000 b92b 	b.w	800f690 <_free_r>
 800f43a:	bf00      	nop
 800f43c:	200000b4 	.word	0x200000b4

0800f440 <sbrk_aligned>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	4e0e      	ldr	r6, [pc, #56]	; (800f47c <sbrk_aligned+0x3c>)
 800f444:	460c      	mov	r4, r1
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	4605      	mov	r5, r0
 800f44a:	b911      	cbnz	r1, 800f452 <sbrk_aligned+0x12>
 800f44c:	f000 f8d6 	bl	800f5fc <_sbrk_r>
 800f450:	6030      	str	r0, [r6, #0]
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	f000 f8d1 	bl	800f5fc <_sbrk_r>
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d00a      	beq.n	800f474 <sbrk_aligned+0x34>
 800f45e:	1cc4      	adds	r4, r0, #3
 800f460:	f024 0403 	bic.w	r4, r4, #3
 800f464:	42a0      	cmp	r0, r4
 800f466:	d007      	beq.n	800f478 <sbrk_aligned+0x38>
 800f468:	1a21      	subs	r1, r4, r0
 800f46a:	4628      	mov	r0, r5
 800f46c:	f000 f8c6 	bl	800f5fc <_sbrk_r>
 800f470:	3001      	adds	r0, #1
 800f472:	d101      	bne.n	800f478 <sbrk_aligned+0x38>
 800f474:	f04f 34ff 	mov.w	r4, #4294967295
 800f478:	4620      	mov	r0, r4
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	2000247c 	.word	0x2000247c

0800f480 <_malloc_r>:
 800f480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f484:	1ccd      	adds	r5, r1, #3
 800f486:	f025 0503 	bic.w	r5, r5, #3
 800f48a:	3508      	adds	r5, #8
 800f48c:	2d0c      	cmp	r5, #12
 800f48e:	bf38      	it	cc
 800f490:	250c      	movcc	r5, #12
 800f492:	2d00      	cmp	r5, #0
 800f494:	4607      	mov	r7, r0
 800f496:	db01      	blt.n	800f49c <_malloc_r+0x1c>
 800f498:	42a9      	cmp	r1, r5
 800f49a:	d905      	bls.n	800f4a8 <_malloc_r+0x28>
 800f49c:	230c      	movs	r3, #12
 800f49e:	603b      	str	r3, [r7, #0]
 800f4a0:	2600      	movs	r6, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f57c <_malloc_r+0xfc>
 800f4ac:	f000 f868 	bl	800f580 <__malloc_lock>
 800f4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800f4b4:	461c      	mov	r4, r3
 800f4b6:	bb5c      	cbnz	r4, 800f510 <_malloc_r+0x90>
 800f4b8:	4629      	mov	r1, r5
 800f4ba:	4638      	mov	r0, r7
 800f4bc:	f7ff ffc0 	bl	800f440 <sbrk_aligned>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	d155      	bne.n	800f572 <_malloc_r+0xf2>
 800f4c6:	f8d8 4000 	ldr.w	r4, [r8]
 800f4ca:	4626      	mov	r6, r4
 800f4cc:	2e00      	cmp	r6, #0
 800f4ce:	d145      	bne.n	800f55c <_malloc_r+0xdc>
 800f4d0:	2c00      	cmp	r4, #0
 800f4d2:	d048      	beq.n	800f566 <_malloc_r+0xe6>
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	4631      	mov	r1, r6
 800f4d8:	4638      	mov	r0, r7
 800f4da:	eb04 0903 	add.w	r9, r4, r3
 800f4de:	f000 f88d 	bl	800f5fc <_sbrk_r>
 800f4e2:	4581      	cmp	r9, r0
 800f4e4:	d13f      	bne.n	800f566 <_malloc_r+0xe6>
 800f4e6:	6821      	ldr	r1, [r4, #0]
 800f4e8:	1a6d      	subs	r5, r5, r1
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4638      	mov	r0, r7
 800f4ee:	f7ff ffa7 	bl	800f440 <sbrk_aligned>
 800f4f2:	3001      	adds	r0, #1
 800f4f4:	d037      	beq.n	800f566 <_malloc_r+0xe6>
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	442b      	add	r3, r5
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	f8d8 3000 	ldr.w	r3, [r8]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d038      	beq.n	800f576 <_malloc_r+0xf6>
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	42a2      	cmp	r2, r4
 800f508:	d12b      	bne.n	800f562 <_malloc_r+0xe2>
 800f50a:	2200      	movs	r2, #0
 800f50c:	605a      	str	r2, [r3, #4]
 800f50e:	e00f      	b.n	800f530 <_malloc_r+0xb0>
 800f510:	6822      	ldr	r2, [r4, #0]
 800f512:	1b52      	subs	r2, r2, r5
 800f514:	d41f      	bmi.n	800f556 <_malloc_r+0xd6>
 800f516:	2a0b      	cmp	r2, #11
 800f518:	d917      	bls.n	800f54a <_malloc_r+0xca>
 800f51a:	1961      	adds	r1, r4, r5
 800f51c:	42a3      	cmp	r3, r4
 800f51e:	6025      	str	r5, [r4, #0]
 800f520:	bf18      	it	ne
 800f522:	6059      	strne	r1, [r3, #4]
 800f524:	6863      	ldr	r3, [r4, #4]
 800f526:	bf08      	it	eq
 800f528:	f8c8 1000 	streq.w	r1, [r8]
 800f52c:	5162      	str	r2, [r4, r5]
 800f52e:	604b      	str	r3, [r1, #4]
 800f530:	4638      	mov	r0, r7
 800f532:	f104 060b 	add.w	r6, r4, #11
 800f536:	f000 f829 	bl	800f58c <__malloc_unlock>
 800f53a:	f026 0607 	bic.w	r6, r6, #7
 800f53e:	1d23      	adds	r3, r4, #4
 800f540:	1af2      	subs	r2, r6, r3
 800f542:	d0ae      	beq.n	800f4a2 <_malloc_r+0x22>
 800f544:	1b9b      	subs	r3, r3, r6
 800f546:	50a3      	str	r3, [r4, r2]
 800f548:	e7ab      	b.n	800f4a2 <_malloc_r+0x22>
 800f54a:	42a3      	cmp	r3, r4
 800f54c:	6862      	ldr	r2, [r4, #4]
 800f54e:	d1dd      	bne.n	800f50c <_malloc_r+0x8c>
 800f550:	f8c8 2000 	str.w	r2, [r8]
 800f554:	e7ec      	b.n	800f530 <_malloc_r+0xb0>
 800f556:	4623      	mov	r3, r4
 800f558:	6864      	ldr	r4, [r4, #4]
 800f55a:	e7ac      	b.n	800f4b6 <_malloc_r+0x36>
 800f55c:	4634      	mov	r4, r6
 800f55e:	6876      	ldr	r6, [r6, #4]
 800f560:	e7b4      	b.n	800f4cc <_malloc_r+0x4c>
 800f562:	4613      	mov	r3, r2
 800f564:	e7cc      	b.n	800f500 <_malloc_r+0x80>
 800f566:	230c      	movs	r3, #12
 800f568:	603b      	str	r3, [r7, #0]
 800f56a:	4638      	mov	r0, r7
 800f56c:	f000 f80e 	bl	800f58c <__malloc_unlock>
 800f570:	e797      	b.n	800f4a2 <_malloc_r+0x22>
 800f572:	6025      	str	r5, [r4, #0]
 800f574:	e7dc      	b.n	800f530 <_malloc_r+0xb0>
 800f576:	605b      	str	r3, [r3, #4]
 800f578:	deff      	udf	#255	; 0xff
 800f57a:	bf00      	nop
 800f57c:	20002478 	.word	0x20002478

0800f580 <__malloc_lock>:
 800f580:	4801      	ldr	r0, [pc, #4]	; (800f588 <__malloc_lock+0x8>)
 800f582:	f000 b875 	b.w	800f670 <__retarget_lock_acquire_recursive>
 800f586:	bf00      	nop
 800f588:	200025bc 	.word	0x200025bc

0800f58c <__malloc_unlock>:
 800f58c:	4801      	ldr	r0, [pc, #4]	; (800f594 <__malloc_unlock+0x8>)
 800f58e:	f000 b870 	b.w	800f672 <__retarget_lock_release_recursive>
 800f592:	bf00      	nop
 800f594:	200025bc 	.word	0x200025bc

0800f598 <memset>:
 800f598:	4402      	add	r2, r0
 800f59a:	4603      	mov	r3, r0
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d100      	bne.n	800f5a2 <memset+0xa>
 800f5a0:	4770      	bx	lr
 800f5a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f5a6:	e7f9      	b.n	800f59c <memset+0x4>

0800f5a8 <strncpy>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	3901      	subs	r1, #1
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	b132      	cbz	r2, 800f5be <strncpy+0x16>
 800f5b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f5b4:	f803 4b01 	strb.w	r4, [r3], #1
 800f5b8:	3a01      	subs	r2, #1
 800f5ba:	2c00      	cmp	r4, #0
 800f5bc:	d1f7      	bne.n	800f5ae <strncpy+0x6>
 800f5be:	441a      	add	r2, r3
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d100      	bne.n	800f5c8 <strncpy+0x20>
 800f5c6:	bd10      	pop	{r4, pc}
 800f5c8:	f803 1b01 	strb.w	r1, [r3], #1
 800f5cc:	e7f9      	b.n	800f5c2 <strncpy+0x1a>

0800f5ce <strstr>:
 800f5ce:	780a      	ldrb	r2, [r1, #0]
 800f5d0:	b570      	push	{r4, r5, r6, lr}
 800f5d2:	b96a      	cbnz	r2, 800f5f0 <strstr+0x22>
 800f5d4:	bd70      	pop	{r4, r5, r6, pc}
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d109      	bne.n	800f5ee <strstr+0x20>
 800f5da:	460c      	mov	r4, r1
 800f5dc:	4605      	mov	r5, r0
 800f5de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d0f6      	beq.n	800f5d4 <strstr+0x6>
 800f5e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f5ea:	429e      	cmp	r6, r3
 800f5ec:	d0f7      	beq.n	800f5de <strstr+0x10>
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	7803      	ldrb	r3, [r0, #0]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1ef      	bne.n	800f5d6 <strstr+0x8>
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	e7ec      	b.n	800f5d4 <strstr+0x6>
	...

0800f5fc <_sbrk_r>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	4d06      	ldr	r5, [pc, #24]	; (800f618 <_sbrk_r+0x1c>)
 800f600:	2300      	movs	r3, #0
 800f602:	4604      	mov	r4, r0
 800f604:	4608      	mov	r0, r1
 800f606:	602b      	str	r3, [r5, #0]
 800f608:	f7f2 fa68 	bl	8001adc <_sbrk>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_sbrk_r+0x1a>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_sbrk_r+0x1a>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	200025b8 	.word	0x200025b8

0800f61c <__errno>:
 800f61c:	4b01      	ldr	r3, [pc, #4]	; (800f624 <__errno+0x8>)
 800f61e:	6818      	ldr	r0, [r3, #0]
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	200000b4 	.word	0x200000b4

0800f628 <__libc_init_array>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4d0d      	ldr	r5, [pc, #52]	; (800f660 <__libc_init_array+0x38>)
 800f62c:	4c0d      	ldr	r4, [pc, #52]	; (800f664 <__libc_init_array+0x3c>)
 800f62e:	1b64      	subs	r4, r4, r5
 800f630:	10a4      	asrs	r4, r4, #2
 800f632:	2600      	movs	r6, #0
 800f634:	42a6      	cmp	r6, r4
 800f636:	d109      	bne.n	800f64c <__libc_init_array+0x24>
 800f638:	4d0b      	ldr	r5, [pc, #44]	; (800f668 <__libc_init_array+0x40>)
 800f63a:	4c0c      	ldr	r4, [pc, #48]	; (800f66c <__libc_init_array+0x44>)
 800f63c:	f000 f874 	bl	800f728 <_init>
 800f640:	1b64      	subs	r4, r4, r5
 800f642:	10a4      	asrs	r4, r4, #2
 800f644:	2600      	movs	r6, #0
 800f646:	42a6      	cmp	r6, r4
 800f648:	d105      	bne.n	800f656 <__libc_init_array+0x2e>
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f650:	4798      	blx	r3
 800f652:	3601      	adds	r6, #1
 800f654:	e7ee      	b.n	800f634 <__libc_init_array+0xc>
 800f656:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65a:	4798      	blx	r3
 800f65c:	3601      	adds	r6, #1
 800f65e:	e7f2      	b.n	800f646 <__libc_init_array+0x1e>
 800f660:	0800fc70 	.word	0x0800fc70
 800f664:	0800fc70 	.word	0x0800fc70
 800f668:	0800fc70 	.word	0x0800fc70
 800f66c:	0800fc74 	.word	0x0800fc74

0800f670 <__retarget_lock_acquire_recursive>:
 800f670:	4770      	bx	lr

0800f672 <__retarget_lock_release_recursive>:
 800f672:	4770      	bx	lr

0800f674 <memcpy>:
 800f674:	440a      	add	r2, r1
 800f676:	4291      	cmp	r1, r2
 800f678:	f100 33ff 	add.w	r3, r0, #4294967295
 800f67c:	d100      	bne.n	800f680 <memcpy+0xc>
 800f67e:	4770      	bx	lr
 800f680:	b510      	push	{r4, lr}
 800f682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f68a:	4291      	cmp	r1, r2
 800f68c:	d1f9      	bne.n	800f682 <memcpy+0xe>
 800f68e:	bd10      	pop	{r4, pc}

0800f690 <_free_r>:
 800f690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f692:	2900      	cmp	r1, #0
 800f694:	d044      	beq.n	800f720 <_free_r+0x90>
 800f696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f69a:	9001      	str	r0, [sp, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f1a1 0404 	sub.w	r4, r1, #4
 800f6a2:	bfb8      	it	lt
 800f6a4:	18e4      	addlt	r4, r4, r3
 800f6a6:	f7ff ff6b 	bl	800f580 <__malloc_lock>
 800f6aa:	4a1e      	ldr	r2, [pc, #120]	; (800f724 <_free_r+0x94>)
 800f6ac:	9801      	ldr	r0, [sp, #4]
 800f6ae:	6813      	ldr	r3, [r2, #0]
 800f6b0:	b933      	cbnz	r3, 800f6c0 <_free_r+0x30>
 800f6b2:	6063      	str	r3, [r4, #4]
 800f6b4:	6014      	str	r4, [r2, #0]
 800f6b6:	b003      	add	sp, #12
 800f6b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6bc:	f7ff bf66 	b.w	800f58c <__malloc_unlock>
 800f6c0:	42a3      	cmp	r3, r4
 800f6c2:	d908      	bls.n	800f6d6 <_free_r+0x46>
 800f6c4:	6825      	ldr	r5, [r4, #0]
 800f6c6:	1961      	adds	r1, r4, r5
 800f6c8:	428b      	cmp	r3, r1
 800f6ca:	bf01      	itttt	eq
 800f6cc:	6819      	ldreq	r1, [r3, #0]
 800f6ce:	685b      	ldreq	r3, [r3, #4]
 800f6d0:	1949      	addeq	r1, r1, r5
 800f6d2:	6021      	streq	r1, [r4, #0]
 800f6d4:	e7ed      	b.n	800f6b2 <_free_r+0x22>
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	b10b      	cbz	r3, 800f6e0 <_free_r+0x50>
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	d9fa      	bls.n	800f6d6 <_free_r+0x46>
 800f6e0:	6811      	ldr	r1, [r2, #0]
 800f6e2:	1855      	adds	r5, r2, r1
 800f6e4:	42a5      	cmp	r5, r4
 800f6e6:	d10b      	bne.n	800f700 <_free_r+0x70>
 800f6e8:	6824      	ldr	r4, [r4, #0]
 800f6ea:	4421      	add	r1, r4
 800f6ec:	1854      	adds	r4, r2, r1
 800f6ee:	42a3      	cmp	r3, r4
 800f6f0:	6011      	str	r1, [r2, #0]
 800f6f2:	d1e0      	bne.n	800f6b6 <_free_r+0x26>
 800f6f4:	681c      	ldr	r4, [r3, #0]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	6053      	str	r3, [r2, #4]
 800f6fa:	440c      	add	r4, r1
 800f6fc:	6014      	str	r4, [r2, #0]
 800f6fe:	e7da      	b.n	800f6b6 <_free_r+0x26>
 800f700:	d902      	bls.n	800f708 <_free_r+0x78>
 800f702:	230c      	movs	r3, #12
 800f704:	6003      	str	r3, [r0, #0]
 800f706:	e7d6      	b.n	800f6b6 <_free_r+0x26>
 800f708:	6825      	ldr	r5, [r4, #0]
 800f70a:	1961      	adds	r1, r4, r5
 800f70c:	428b      	cmp	r3, r1
 800f70e:	bf04      	itt	eq
 800f710:	6819      	ldreq	r1, [r3, #0]
 800f712:	685b      	ldreq	r3, [r3, #4]
 800f714:	6063      	str	r3, [r4, #4]
 800f716:	bf04      	itt	eq
 800f718:	1949      	addeq	r1, r1, r5
 800f71a:	6021      	streq	r1, [r4, #0]
 800f71c:	6054      	str	r4, [r2, #4]
 800f71e:	e7ca      	b.n	800f6b6 <_free_r+0x26>
 800f720:	b003      	add	sp, #12
 800f722:	bd30      	pop	{r4, r5, pc}
 800f724:	20002478 	.word	0x20002478

0800f728 <_init>:
 800f728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72a:	bf00      	nop
 800f72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f72e:	bc08      	pop	{r3}
 800f730:	469e      	mov	lr, r3
 800f732:	4770      	bx	lr

0800f734 <_fini>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	bf00      	nop
 800f738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f73a:	bc08      	pop	{r3}
 800f73c:	469e      	mov	lr, r3
 800f73e:	4770      	bx	lr

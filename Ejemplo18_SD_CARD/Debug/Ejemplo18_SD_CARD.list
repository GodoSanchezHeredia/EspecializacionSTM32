
Ejemplo18_SD_CARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007514  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007928  08007928  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007930  08007930  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007934  08007934  00017934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000080  080079b8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  080079b8  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e25b  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e3  00000000  00000000  0002e34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b5  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018569  00000000  00000000  000321b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001275d  00000000  00000000  0004a71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e80  00000000  00000000  0005ce7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b54  00000000  00000000  000e6cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ea850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800769c 	.word	0x0800769c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800769c 	.word	0x0800769c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2140      	movs	r1, #64	; 0x40
 8000b90:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <SELECT+0x18>)
 8000b92:	f001 fc3b 	bl	800240c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f001 f9aa 	bl	8001ef0 <HAL_Delay>
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40020400 	.word	0x40020400

08000ba4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <DESELECT+0x18>)
 8000bae:	f001 fc2d 	bl	800240c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f001 f99c 	bl	8001ef0 <HAL_Delay>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bca:	bf00      	nop
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <SPI_TxByte+0x30>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d1f8      	bne.n	8000bcc <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bda:	1df9      	adds	r1, r7, #7
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2201      	movs	r2, #1
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <SPI_TxByte+0x30>)
 8000be2:	f002 f94e 	bl	8002e82 <HAL_SPI_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000648 	.word	0x20000648

08000bf4 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c00:	bf00      	nop
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <SPI_TxBuffer+0x30>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d1f8      	bne.n	8000c02 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c10:	887a      	ldrh	r2, [r7, #2]
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <SPI_TxBuffer+0x30>)
 8000c18:	f002 f933 	bl	8002e82 <HAL_SPI_Transmit>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000648 	.word	0x20000648

08000c28 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c2e:	23ff      	movs	r3, #255	; 0xff
 8000c30:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c32:	bf00      	nop
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <SPI_RxByte+0x34>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d1f8      	bne.n	8000c34 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c42:	1dba      	adds	r2, r7, #6
 8000c44:	1df9      	adds	r1, r7, #7
 8000c46:	2364      	movs	r3, #100	; 0x64
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <SPI_RxByte+0x34>)
 8000c4e:	f002 fa54 	bl	80030fa <HAL_SPI_TransmitReceive>

	return data;
 8000c52:	79bb      	ldrb	r3, [r7, #6]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000648 	.word	0x20000648

08000c60 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c68:	f7ff ffde 	bl	8000c28 <SPI_RxByte>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	701a      	strb	r2, [r3, #0]
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <SD_ReadyWait+0x30>)
 8000c84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c88:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000c8a:	f7ff ffcd 	bl	8000c28 <SPI_RxByte>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2bff      	cmp	r3, #255	; 0xff
 8000c96:	d004      	beq.n	8000ca2 <SD_ReadyWait+0x26>
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SD_ReadyWait+0x30>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f3      	bne.n	8000c8a <SD_ReadyWait+0xe>

	return res;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200006a4 	.word	0x200006a4

08000cb0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cb6:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cba:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cbc:	f7ff ff72 	bl	8000ba4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	e005      	b.n	8000cd2 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000cc6:	20ff      	movs	r0, #255	; 0xff
 8000cc8:	f7ff ff7a 	bl	8000bc0 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	2b09      	cmp	r3, #9
 8000cd6:	ddf6      	ble.n	8000cc6 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cd8:	f7ff ff56 	bl	8000b88 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cdc:	2340      	movs	r3, #64	; 0x40
 8000cde:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000cf0:	2395      	movs	r3, #149	; 0x95
 8000cf2:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2106      	movs	r1, #6
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff7b 	bl	8000bf4 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000cfe:	e002      	b.n	8000d06 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3b01      	subs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d06:	f7ff ff8f 	bl	8000c28 <SPI_RxByte>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d002      	beq.n	8000d16 <SD_PowerOn+0x66>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f4      	bne.n	8000d00 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d16:	f7ff ff45 	bl	8000ba4 <DESELECT>
	SPI_TxByte(0XFF);
 8000d1a:	20ff      	movs	r0, #255	; 0xff
 8000d1c:	f7ff ff50 	bl	8000bc0 <SPI_TxByte>

	PowerFlag = 1;
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <SD_PowerOn+0x80>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000009d 	.word	0x2000009d

08000d34 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <SD_PowerOff+0x14>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	2000009d 	.word	0x2000009d

08000d4c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <SD_CheckPower+0x14>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	2000009d 	.word	0x2000009d

08000d64 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SD_RxDataBlock+0x5c>)
 8000d70:	22c8      	movs	r2, #200	; 0xc8
 8000d72:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d74:	f7ff ff58 	bl	8000c28 <SPI_RxByte>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	2bff      	cmp	r3, #255	; 0xff
 8000d80:	d104      	bne.n	8000d8c <SD_RxDataBlock+0x28>
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <SD_RxDataBlock+0x5c>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1f3      	bne.n	8000d74 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2bfe      	cmp	r3, #254	; 0xfe
 8000d90:	d001      	beq.n	8000d96 <SD_RxDataBlock+0x32>
 8000d92:	2300      	movs	r3, #0
 8000d94:	e00f      	b.n	8000db6 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	607a      	str	r2, [r7, #4]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5f 	bl	8000c60 <SPI_RxBytePtr>
	} while(len--);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	1e5a      	subs	r2, r3, #1
 8000da6:	603a      	str	r2, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f4      	bne.n	8000d96 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000dac:	f7ff ff3c 	bl	8000c28 <SPI_RxByte>
	SPI_RxByte();
 8000db0:	f7ff ff3a 	bl	8000c28 <SPI_RxByte>

	return TRUE;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200006a2 	.word	0x200006a2

08000dc4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000dd4:	f7ff ff52 	bl	8000c7c <SD_ReadyWait>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2bff      	cmp	r3, #255	; 0xff
 8000ddc:	d001      	beq.n	8000de2 <SD_TxDataBlock+0x1e>
 8000dde:	2300      	movs	r3, #0
 8000de0:	e02f      	b.n	8000e42 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff feeb 	bl	8000bc0 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	2bfd      	cmp	r3, #253	; 0xfd
 8000dee:	d020      	beq.n	8000e32 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fefd 	bl	8000bf4 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000dfa:	f7ff ff15 	bl	8000c28 <SPI_RxByte>
		SPI_RxByte();
 8000dfe:	f7ff ff13 	bl	8000c28 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e02:	e00b      	b.n	8000e1c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e04:	f7ff ff10 	bl	8000c28 <SPI_RxByte>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f003 031f 	and.w	r3, r3, #31
 8000e12:	2b05      	cmp	r3, #5
 8000e14:	d006      	beq.n	8000e24 <SD_TxDataBlock+0x60>
			i++;
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e1c:	7bbb      	ldrb	r3, [r7, #14]
 8000e1e:	2b40      	cmp	r3, #64	; 0x40
 8000e20:	d9f0      	bls.n	8000e04 <SD_TxDataBlock+0x40>
 8000e22:	e000      	b.n	8000e26 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e24:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e26:	bf00      	nop
 8000e28:	f7ff fefe 	bl	8000c28 <SPI_RxByte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0fa      	beq.n	8000e28 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	f003 031f 	and.w	r3, r3, #31
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	d101      	bne.n	8000e40 <SD_TxDataBlock+0x7c>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	6039      	str	r1, [r7, #0]
 8000e54:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e56:	f7ff ff11 	bl	8000c7c <SD_ReadyWait>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2bff      	cmp	r3, #255	; 0xff
 8000e5e:	d001      	beq.n	8000e64 <SD_SendCmd+0x1a>
 8000e60:	23ff      	movs	r3, #255	; 0xff
 8000e62:	e042      	b.n	8000eea <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feaa 	bl	8000bc0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	0e1b      	lsrs	r3, r3, #24
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fea4 	bl	8000bc0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	0c1b      	lsrs	r3, r3, #16
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe9e 	bl	8000bc0 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fe98 	bl	8000bc0 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fe93 	bl	8000bc0 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b40      	cmp	r3, #64	; 0x40
 8000e9e:	d102      	bne.n	8000ea6 <SD_SendCmd+0x5c>
 8000ea0:	2395      	movs	r3, #149	; 0x95
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e007      	b.n	8000eb6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b48      	cmp	r3, #72	; 0x48
 8000eaa:	d102      	bne.n	8000eb2 <SD_SendCmd+0x68>
 8000eac:	2387      	movs	r3, #135	; 0x87
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <SD_SendCmd+0x6c>
	else crc = 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fe81 	bl	8000bc0 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b4c      	cmp	r3, #76	; 0x4c
 8000ec2:	d101      	bne.n	8000ec8 <SD_SendCmd+0x7e>
 8000ec4:	f7ff feb0 	bl	8000c28 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ec8:	230a      	movs	r3, #10
 8000eca:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ecc:	f7ff feac 	bl	8000c28 <SPI_RxByte>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ed4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da05      	bge.n	8000ee8 <SD_SendCmd+0x9e>
 8000edc:	7bbb      	ldrb	r3, [r7, #14]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	73bb      	strb	r3, [r7, #14]
 8000ee2:	7bbb      	ldrb	r3, [r7, #14]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f1      	bne.n	8000ecc <SD_SendCmd+0x82>

	return res;
 8000ee8:	7b7b      	ldrb	r3, [r7, #13]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
	...

08000ef4 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SD_disk_initialize+0x14>
 8000f04:	2301      	movs	r3, #1
 8000f06:	e0d6      	b.n	80010b6 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f08:	4b6d      	ldr	r3, [pc, #436]	; (80010c0 <SD_disk_initialize+0x1cc>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <SD_disk_initialize+0x2a>
 8000f16:	4b6a      	ldr	r3, [pc, #424]	; (80010c0 <SD_disk_initialize+0x1cc>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	e0cb      	b.n	80010b6 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f1e:	f7ff fec7 	bl	8000cb0 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f22:	f7ff fe31 	bl	8000b88 <SELECT>

	/* check disk type */
	type = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2040      	movs	r0, #64	; 0x40
 8000f2e:	f7ff ff8c 	bl	8000e4a <SD_SendCmd>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	f040 80a6 	bne.w	8001086 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f3a:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <SD_disk_initialize+0x1d0>)
 8000f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f40:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f42:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f46:	2048      	movs	r0, #72	; 0x48
 8000f48:	f7ff ff7f 	bl	8000e4a <SD_SendCmd>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d158      	bne.n	8001004 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	73fb      	strb	r3, [r7, #15]
 8000f56:	e00c      	b.n	8000f72 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f58:	7bfc      	ldrb	r4, [r7, #15]
 8000f5a:	f7ff fe65 	bl	8000c28 <SPI_RxByte>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	f104 0310 	add.w	r3, r4, #16
 8000f66:	443b      	add	r3, r7
 8000f68:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	d9ef      	bls.n	8000f58 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f78:	7abb      	ldrb	r3, [r7, #10]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	f040 8083 	bne.w	8001086 <SD_disk_initialize+0x192>
 8000f80:	7afb      	ldrb	r3, [r7, #11]
 8000f82:	2baa      	cmp	r3, #170	; 0xaa
 8000f84:	d17f      	bne.n	8001086 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000f86:	2100      	movs	r1, #0
 8000f88:	2077      	movs	r0, #119	; 0x77
 8000f8a:	f7ff ff5e 	bl	8000e4a <SD_SendCmd>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d807      	bhi.n	8000fa4 <SD_disk_initialize+0xb0>
 8000f94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000f98:	2069      	movs	r0, #105	; 0x69
 8000f9a:	f7ff ff56 	bl	8000e4a <SD_SendCmd>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d005      	beq.n	8000fb0 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fa4:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <SD_disk_initialize+0x1d0>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1eb      	bne.n	8000f86 <SD_disk_initialize+0x92>
 8000fae:	e000      	b.n	8000fb2 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb0:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fb2:	4b44      	ldr	r3, [pc, #272]	; (80010c4 <SD_disk_initialize+0x1d0>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d064      	beq.n	8001086 <SD_disk_initialize+0x192>
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	207a      	movs	r0, #122	; 0x7a
 8000fc0:	f7ff ff43 	bl	8000e4a <SD_SendCmd>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d15d      	bne.n	8001086 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e00c      	b.n	8000fea <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fd0:	7bfc      	ldrb	r4, [r7, #15]
 8000fd2:	f7ff fe29 	bl	8000c28 <SPI_RxByte>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f104 0310 	add.w	r3, r4, #16
 8000fde:	443b      	add	r3, r7
 8000fe0:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d9ef      	bls.n	8000fd0 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000ff0:	7a3b      	ldrb	r3, [r7, #8]
 8000ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SD_disk_initialize+0x10a>
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	e000      	b.n	8001000 <SD_disk_initialize+0x10c>
 8000ffe:	2304      	movs	r3, #4
 8001000:	73bb      	strb	r3, [r7, #14]
 8001002:	e040      	b.n	8001086 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001004:	2100      	movs	r1, #0
 8001006:	2077      	movs	r0, #119	; 0x77
 8001008:	f7ff ff1f 	bl	8000e4a <SD_SendCmd>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d808      	bhi.n	8001024 <SD_disk_initialize+0x130>
 8001012:	2100      	movs	r1, #0
 8001014:	2069      	movs	r0, #105	; 0x69
 8001016:	f7ff ff18 	bl	8000e4a <SD_SendCmd>
 800101a:	4603      	mov	r3, r0
 800101c:	2b01      	cmp	r3, #1
 800101e:	d801      	bhi.n	8001024 <SD_disk_initialize+0x130>
 8001020:	2302      	movs	r3, #2
 8001022:	e000      	b.n	8001026 <SD_disk_initialize+0x132>
 8001024:	2301      	movs	r3, #1
 8001026:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d10e      	bne.n	800104c <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800102e:	2100      	movs	r1, #0
 8001030:	2077      	movs	r0, #119	; 0x77
 8001032:	f7ff ff0a 	bl	8000e4a <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d80e      	bhi.n	800105a <SD_disk_initialize+0x166>
 800103c:	2100      	movs	r1, #0
 800103e:	2069      	movs	r0, #105	; 0x69
 8001040:	f7ff ff03 	bl	8000e4a <SD_SendCmd>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d107      	bne.n	800105a <SD_disk_initialize+0x166>
 800104a:	e00d      	b.n	8001068 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800104c:	2100      	movs	r1, #0
 800104e:	2041      	movs	r0, #65	; 0x41
 8001050:	f7ff fefb 	bl	8000e4a <SD_SendCmd>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d005      	beq.n	8001066 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <SD_disk_initialize+0x1d0>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e1      	bne.n	8001028 <SD_disk_initialize+0x134>
 8001064:	e000      	b.n	8001068 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001066:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <SD_disk_initialize+0x1d0>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <SD_disk_initialize+0x18e>
 8001072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001076:	2050      	movs	r0, #80	; 0x50
 8001078:	f7ff fee7 	bl	8000e4a <SD_SendCmd>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SD_disk_initialize+0x192>
 8001082:	2300      	movs	r3, #0
 8001084:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001086:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <SD_disk_initialize+0x1d4>)
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 800108c:	f7ff fd8a 	bl	8000ba4 <DESELECT>
	SPI_RxByte();
 8001090:	f7ff fdca 	bl	8000c28 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <SD_disk_initialize+0x1cc>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SD_disk_initialize+0x1cc>)
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e001      	b.n	80010b0 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010ac:	f7ff fe42 	bl	8000d34 <SD_PowerOff>
	}

	return Stat;
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SD_disk_initialize+0x1cc>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000000 	.word	0x20000000
 80010c4:	200006a2 	.word	0x200006a2
 80010c8:	2000009c 	.word	0x2000009c

080010cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SD_disk_status+0x14>
 80010dc:	2301      	movs	r3, #1
 80010de:	e002      	b.n	80010e6 <SD_disk_status+0x1a>
	return Stat;
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <SD_disk_status+0x28>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000000 	.word	0x20000000

080010f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4603      	mov	r3, r0
 8001106:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d102      	bne.n	8001114 <SD_disk_read+0x1c>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <SD_disk_read+0x20>
 8001114:	2304      	movs	r3, #4
 8001116:	e051      	b.n	80011bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <SD_disk_read+0xcc>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SD_disk_read+0x32>
 8001126:	2303      	movs	r3, #3
 8001128:	e048      	b.n	80011bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800112a:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <SD_disk_read+0xd0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <SD_disk_read+0x44>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	025b      	lsls	r3, r3, #9
 800113a:	607b      	str	r3, [r7, #4]

	SELECT();
 800113c:	f7ff fd24 	bl	8000b88 <SELECT>

	if (count == 1)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d111      	bne.n	800116a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2051      	movs	r0, #81	; 0x51
 800114a:	f7ff fe7e 	bl	8000e4a <SD_SendCmd>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d129      	bne.n	80011a8 <SD_disk_read+0xb0>
 8001154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f7ff fe03 	bl	8000d64 <SD_RxDataBlock>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d021      	beq.n	80011a8 <SD_disk_read+0xb0>
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	e01e      	b.n	80011a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2052      	movs	r0, #82	; 0x52
 800116e:	f7ff fe6c 	bl	8000e4a <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d117      	bne.n	80011a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001178:	f44f 7100 	mov.w	r1, #512	; 0x200
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fdf1 	bl	8000d64 <SD_RxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d00a      	beq.n	800119e <SD_disk_read+0xa6>
				buff += 512;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800118e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3b01      	subs	r3, #1
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ed      	bne.n	8001178 <SD_disk_read+0x80>
 800119c:	e000      	b.n	80011a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800119e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011a0:	2100      	movs	r1, #0
 80011a2:	204c      	movs	r0, #76	; 0x4c
 80011a4:	f7ff fe51 	bl	8000e4a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011a8:	f7ff fcfc 	bl	8000ba4 <DESELECT>
	SPI_RxByte();
 80011ac:	f7ff fd3c 	bl	8000c28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	2000009c 	.word	0x2000009c

080011cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <SD_disk_write+0x1c>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <SD_disk_write+0x20>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e06b      	b.n	80012c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80011ec:	4b37      	ldr	r3, [pc, #220]	; (80012cc <SD_disk_write+0x100>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SD_disk_write+0x32>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e062      	b.n	80012c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <SD_disk_write+0x100>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SD_disk_write+0x44>
 800120c:	2302      	movs	r3, #2
 800120e:	e059      	b.n	80012c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001210:	4b2f      	ldr	r3, [pc, #188]	; (80012d0 <SD_disk_write+0x104>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <SD_disk_write+0x56>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	025b      	lsls	r3, r3, #9
 8001220:	607b      	str	r3, [r7, #4]

	SELECT();
 8001222:	f7ff fcb1 	bl	8000b88 <SELECT>

	if (count == 1)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d110      	bne.n	800124e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	2058      	movs	r0, #88	; 0x58
 8001230:	f7ff fe0b 	bl	8000e4a <SD_SendCmd>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d13a      	bne.n	80012b0 <SD_disk_write+0xe4>
 800123a:	21fe      	movs	r1, #254	; 0xfe
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f7ff fdc1 	bl	8000dc4 <SD_TxDataBlock>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d033      	beq.n	80012b0 <SD_disk_write+0xe4>
			count = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	e030      	b.n	80012b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <SD_disk_write+0x104>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800125a:	2100      	movs	r1, #0
 800125c:	2077      	movs	r0, #119	; 0x77
 800125e:	f7ff fdf4 	bl	8000e4a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001262:	6839      	ldr	r1, [r7, #0]
 8001264:	2057      	movs	r0, #87	; 0x57
 8001266:	f7ff fdf0 	bl	8000e4a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	2059      	movs	r0, #89	; 0x59
 800126e:	f7ff fdec 	bl	8000e4a <SD_SendCmd>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d11b      	bne.n	80012b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001278:	21fc      	movs	r1, #252	; 0xfc
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f7ff fda2 	bl	8000dc4 <SD_TxDataBlock>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <SD_disk_write+0xd0>
				buff += 512;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800128c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3b01      	subs	r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ee      	bne.n	8001278 <SD_disk_write+0xac>
 800129a:	e000      	b.n	800129e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800129c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800129e:	21fd      	movs	r1, #253	; 0xfd
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff fd8f 	bl	8000dc4 <SD_TxDataBlock>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012b0:	f7ff fc78 	bl	8000ba4 <DESELECT>
	SPI_RxByte();
 80012b4:	f7ff fcb8 	bl	8000c28 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000000 	.word	0x20000000
 80012d0:	2000009c 	.word	0x2000009c

080012d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b08b      	sub	sp, #44	; 0x2c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	603a      	str	r2, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
 80012e0:	460b      	mov	r3, r1
 80012e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SD_disk_ioctl+0x1e>
 80012ee:	2304      	movs	r3, #4
 80012f0:	e115      	b.n	800151e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	2b05      	cmp	r3, #5
 80012fc:	d124      	bne.n	8001348 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80012fe:	6a3b      	ldr	r3, [r7, #32]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d012      	beq.n	800132c <SD_disk_ioctl+0x58>
 8001306:	2b02      	cmp	r3, #2
 8001308:	dc1a      	bgt.n	8001340 <SD_disk_ioctl+0x6c>
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <SD_disk_ioctl+0x40>
 800130e:	2b01      	cmp	r3, #1
 8001310:	d006      	beq.n	8001320 <SD_disk_ioctl+0x4c>
 8001312:	e015      	b.n	8001340 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001314:	f7ff fd0e 	bl	8000d34 <SD_PowerOff>
			res = RES_OK;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800131e:	e0fc      	b.n	800151a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001320:	f7ff fcc6 	bl	8000cb0 <SD_PowerOn>
			res = RES_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800132a:	e0f6      	b.n	800151a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	1c5c      	adds	r4, r3, #1
 8001330:	f7ff fd0c 	bl	8000d4c <SD_CheckPower>
 8001334:	4603      	mov	r3, r0
 8001336:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133e:	e0ec      	b.n	800151a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001340:	2304      	movs	r3, #4
 8001342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001346:	e0e8      	b.n	800151a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001348:	4b77      	ldr	r3, [pc, #476]	; (8001528 <SD_disk_ioctl+0x254>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SD_disk_ioctl+0x86>
 8001356:	2303      	movs	r3, #3
 8001358:	e0e1      	b.n	800151e <SD_disk_ioctl+0x24a>

		SELECT();
 800135a:	f7ff fc15 	bl	8000b88 <SELECT>

		switch (ctrl)
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	2b0d      	cmp	r3, #13
 8001362:	f200 80cb 	bhi.w	80014fc <SD_disk_ioctl+0x228>
 8001366:	a201      	add	r2, pc, #4	; (adr r2, 800136c <SD_disk_ioctl+0x98>)
 8001368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136c:	08001467 	.word	0x08001467
 8001370:	080013a5 	.word	0x080013a5
 8001374:	08001457 	.word	0x08001457
 8001378:	080014fd 	.word	0x080014fd
 800137c:	080014fd 	.word	0x080014fd
 8001380:	080014fd 	.word	0x080014fd
 8001384:	080014fd 	.word	0x080014fd
 8001388:	080014fd 	.word	0x080014fd
 800138c:	080014fd 	.word	0x080014fd
 8001390:	080014fd 	.word	0x080014fd
 8001394:	080014fd 	.word	0x080014fd
 8001398:	08001479 	.word	0x08001479
 800139c:	0800149d 	.word	0x0800149d
 80013a0:	080014c1 	.word	0x080014c1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013a4:	2100      	movs	r1, #0
 80013a6:	2049      	movs	r0, #73	; 0x49
 80013a8:	f7ff fd4f 	bl	8000e4a <SD_SendCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 80a8 	bne.w	8001504 <SD_disk_ioctl+0x230>
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	2110      	movs	r1, #16
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fcd2 	bl	8000d64 <SD_RxDataBlock>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 809e 	beq.w	8001504 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013c8:	7b3b      	ldrb	r3, [r7, #12]
 80013ca:	099b      	lsrs	r3, r3, #6
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10e      	bne.n	80013f0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013d2:	7d7b      	ldrb	r3, [r7, #21]
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	7d3b      	ldrb	r3, [r7, #20]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3301      	adds	r3, #1
 80013e4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80013e6:	8bfb      	ldrh	r3, [r7, #30]
 80013e8:	029a      	lsls	r2, r3, #10
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e02e      	b.n	800144e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80013f0:	7c7b      	ldrb	r3, [r7, #17]
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	7dbb      	ldrb	r3, [r7, #22]
 80013fa:	09db      	lsrs	r3, r3, #7
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b2da      	uxtb	r2, r3
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 0306 	and.w	r3, r3, #6
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	3302      	adds	r3, #2
 8001414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001418:	7d3b      	ldrb	r3, [r7, #20]
 800141a:	099b      	lsrs	r3, r3, #6
 800141c:	b2db      	uxtb	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	b29b      	uxth	r3, r3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	7cbb      	ldrb	r3, [r7, #18]
 800142e:	029b      	lsls	r3, r3, #10
 8001430:	b29b      	uxth	r3, r3
 8001432:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001436:	b29b      	uxth	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b29b      	uxth	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001440:	8bfa      	ldrh	r2, [r7, #30]
 8001442:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001446:	3b09      	subs	r3, #9
 8001448:	409a      	lsls	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001454:	e056      	b.n	8001504 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001464:	e055      	b.n	8001512 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001466:	f7ff fc09 	bl	8000c7c <SD_ReadyWait>
 800146a:	4603      	mov	r3, r0
 800146c:	2bff      	cmp	r3, #255	; 0xff
 800146e:	d14b      	bne.n	8001508 <SD_disk_ioctl+0x234>
 8001470:	2300      	movs	r3, #0
 8001472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001476:	e047      	b.n	8001508 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001478:	2100      	movs	r1, #0
 800147a:	2049      	movs	r0, #73	; 0x49
 800147c:	f7ff fce5 	bl	8000e4a <SD_SendCmd>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d142      	bne.n	800150c <SD_disk_ioctl+0x238>
 8001486:	2110      	movs	r1, #16
 8001488:	6a38      	ldr	r0, [r7, #32]
 800148a:	f7ff fc6b 	bl	8000d64 <SD_RxDataBlock>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03b      	beq.n	800150c <SD_disk_ioctl+0x238>
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800149a:	e037      	b.n	800150c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800149c:	2100      	movs	r1, #0
 800149e:	204a      	movs	r0, #74	; 0x4a
 80014a0:	f7ff fcd3 	bl	8000e4a <SD_SendCmd>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d132      	bne.n	8001510 <SD_disk_ioctl+0x23c>
 80014aa:	2110      	movs	r1, #16
 80014ac:	6a38      	ldr	r0, [r7, #32]
 80014ae:	f7ff fc59 	bl	8000d64 <SD_RxDataBlock>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d02b      	beq.n	8001510 <SD_disk_ioctl+0x23c>
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014be:	e027      	b.n	8001510 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014c0:	2100      	movs	r1, #0
 80014c2:	207a      	movs	r0, #122	; 0x7a
 80014c4:	f7ff fcc1 	bl	8000e4a <SD_SendCmd>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014d4:	e00b      	b.n	80014ee <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014d6:	6a3c      	ldr	r4, [r7, #32]
 80014d8:	1c63      	adds	r3, r4, #1
 80014da:	623b      	str	r3, [r7, #32]
 80014dc:	f7ff fba4 	bl	8000c28 <SPI_RxByte>
 80014e0:	4603      	mov	r3, r0
 80014e2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80014e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d9ef      	bls.n	80014d6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001502:	e006      	b.n	8001512 <SD_disk_ioctl+0x23e>
			break;
 8001504:	bf00      	nop
 8001506:	e004      	b.n	8001512 <SD_disk_ioctl+0x23e>
			break;
 8001508:	bf00      	nop
 800150a:	e002      	b.n	8001512 <SD_disk_ioctl+0x23e>
			break;
 800150c:	bf00      	nop
 800150e:	e000      	b.n	8001512 <SD_disk_ioctl+0x23e>
			break;
 8001510:	bf00      	nop
		}

		DESELECT();
 8001512:	f7ff fb47 	bl	8000ba4 <DESELECT>
		SPI_RxByte();
 8001516:	f7ff fb87 	bl	8000c28 <SPI_RxByte>
	}

	return res;
 800151a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800151e:	4618      	mov	r0, r3
 8001520:	372c      	adds	r7, #44	; 0x2c
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	20000000 	.word	0x20000000

0800152c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <MX_GPIO_Init+0x98>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a17      	ldr	r2, [pc, #92]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	603b      	str	r3, [r7, #0]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <MX_GPIO_Init+0x98>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_GPIO_Init+0x98>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001596:	2201      	movs	r2, #1
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <MX_GPIO_Init+0x9c>)
 800159c:	f000 ff36 	bl	800240c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015a0:	2340      	movs	r3, #64	; 0x40
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_GPIO_Init+0x9c>)
 80015b8:	f000 fda4 	bl	8002104 <HAL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3720      	adds	r7, #32
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020400 	.word	0x40020400

080015cc <__io_putchar>:
FATFS *pfs;
DWORD free_clust;
uint32_t Mtotal,Mlibre;
DIR di;
char buffer[300];
int __io_putchar(int ch){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]

	  HAL_UART_Transmit(&huart2, (const uint8_t *)&ch, (uint16_t)1, HAL_MAX_DELAY);
 80015d4:	1d39      	adds	r1, r7, #4
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	2201      	movs	r2, #1
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <__io_putchar+0x20>)
 80015de:	f002 f846 	bl	800366e <HAL_UART_Transmit>

	  return ch;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200006ac 	.word	0x200006ac

080015f0 <buffesize>:


int buffesize(char *s){
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

	int bs=0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	while(*s++)bs++;
 80015fc:	e002      	b.n	8001604 <buffesize+0x14>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f6      	bne.n	80015fe <buffesize+0xe>

	return bs;
 8001610:	68fb      	ldr	r3, [r7, #12]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001626:	f000 fbf1 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162a:	f000 f925 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f7ff ff7d 	bl	800152c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001632:	f000 f991 	bl	8001958 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001636:	f000 fb4d 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800163a:	f002 fb8d 	bl	8003d58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  printf("Tema SDCARD\r\n");
 800163e:	4871      	ldr	r0, [pc, #452]	; (8001804 <main+0x1e4>)
 8001640:	f005 f9c4 	bl	80069cc <puts>
  //Capacidad de almacenamiento
 fresul = f_mount(&fs, "/", 1);
 8001644:	2201      	movs	r2, #1
 8001646:	4970      	ldr	r1, [pc, #448]	; (8001808 <main+0x1e8>)
 8001648:	4870      	ldr	r0, [pc, #448]	; (800180c <main+0x1ec>)
 800164a:	f004 f931 	bl	80058b0 <f_mount>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <main+0x1f0>)
 8001654:	701a      	strb	r2, [r3, #0]
switch (fresul) {
 8001656:	4b6e      	ldr	r3, [pc, #440]	; (8001810 <main+0x1f0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <main+0x46>
	case FR_OK:
		printf("SD CARD Correctamente Montado\n\r");
 800165e:	486d      	ldr	r0, [pc, #436]	; (8001814 <main+0x1f4>)
 8001660:	f005 f94e 	bl	8006900 <iprintf>
		break;
 8001664:	e005      	b.n	8001672 <main+0x52>
	default:
		printf("SD CARD Fallo en el Montaje :C \n\r");
 8001666:	486c      	ldr	r0, [pc, #432]	; (8001818 <main+0x1f8>)
 8001668:	f005 f94a 	bl	8006900 <iprintf>
		Error_Handler();
 800166c:	f000 f96e 	bl	800194c <Error_Handler>
		break;
 8001670:	bf00      	nop
}

	f_getfree("", &free_clust, &pfs);
 8001672:	4a6a      	ldr	r2, [pc, #424]	; (800181c <main+0x1fc>)
 8001674:	496a      	ldr	r1, [pc, #424]	; (8001820 <main+0x200>)
 8001676:	486b      	ldr	r0, [pc, #428]	; (8001824 <main+0x204>)
 8001678:	f004 fe7a 	bl	8006370 <f_getfree>
	Mtotal = (uint32_t)  pfs->n_fatent*(pfs->csize*0.5);
 800167c:	4b67      	ldr	r3, [pc, #412]	; (800181c <main+0x1fc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff f868 	bl	8000758 <__aeabi_ui2d>
 8001688:	4604      	mov	r4, r0
 800168a:	460d      	mov	r5, r1
 800168c:	4b63      	ldr	r3, [pc, #396]	; (800181c <main+0x1fc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	895b      	ldrh	r3, [r3, #10]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f870 	bl	8000778 <__aeabi_i2d>
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	4b62      	ldr	r3, [pc, #392]	; (8001828 <main+0x208>)
 800169e:	f7fe fdef 	bl	8000280 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe fde9 	bl	8000280 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff f8c9 	bl	800084c <__aeabi_d2uiz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a5b      	ldr	r2, [pc, #364]	; (800182c <main+0x20c>)
 80016be:	6013      	str	r3, [r2, #0]
	printf("Espacio total : %lu\n\r",Mtotal);
 80016c0:	4b5a      	ldr	r3, [pc, #360]	; (800182c <main+0x20c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	485a      	ldr	r0, [pc, #360]	; (8001830 <main+0x210>)
 80016c8:	f005 f91a 	bl	8006900 <iprintf>
	Mlibre = (uint32_t)  pfs->free_clst*(pfs->csize*0.5);
 80016cc:	4b53      	ldr	r3, [pc, #332]	; (800181c <main+0x1fc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff f840 	bl	8000758 <__aeabi_ui2d>
 80016d8:	4604      	mov	r4, r0
 80016da:	460d      	mov	r5, r1
 80016dc:	4b4f      	ldr	r3, [pc, #316]	; (800181c <main+0x1fc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	895b      	ldrh	r3, [r3, #10]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff f848 	bl	8000778 <__aeabi_i2d>
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <main+0x208>)
 80016ee:	f7fe fdc7 	bl	8000280 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fdc1 	bl	8000280 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_d2uiz>
 800170a:	4603      	mov	r3, r0
 800170c:	4a49      	ldr	r2, [pc, #292]	; (8001834 <main+0x214>)
 800170e:	6013      	str	r3, [r2, #0]
	printf("Espacio libre: %lu\n\r",Mlibre);
 8001710:	4b48      	ldr	r3, [pc, #288]	; (8001834 <main+0x214>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	4848      	ldr	r0, [pc, #288]	; (8001838 <main+0x218>)
 8001718:	f005 f8f2 	bl	8006900 <iprintf>
	HAL_Delay(500);
 800171c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001720:	f000 fbe6 	bl	8001ef0 <HAL_Delay>

	//Creacion & escritura de un archivo
	fresul = f_open(&file, "doc1.txt", FA_WRITE);
 8001724:	2202      	movs	r2, #2
 8001726:	4945      	ldr	r1, [pc, #276]	; (800183c <main+0x21c>)
 8001728:	4845      	ldr	r0, [pc, #276]	; (8001840 <main+0x220>)
 800172a:	f004 f907 	bl	800593c <f_open>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b37      	ldr	r3, [pc, #220]	; (8001810 <main+0x1f0>)
 8001734:	701a      	strb	r2, [r3, #0]
	switch (fresul) {
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <main+0x1f0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <main+0x126>
		case FR_OK:
			printf("Archivo creado :D\n\r");
 800173e:	4841      	ldr	r0, [pc, #260]	; (8001844 <main+0x224>)
 8001740:	f005 f8de 	bl	8006900 <iprintf>
			break;
 8001744:	e005      	b.n	8001752 <main+0x132>
		default:
			printf("ERROR :C \n\r");
 8001746:	4840      	ldr	r0, [pc, #256]	; (8001848 <main+0x228>)
 8001748:	f005 f8da 	bl	8006900 <iprintf>
			Error_Handler();
 800174c:	f000 f8fe 	bl	800194c <Error_Handler>
			break;
 8001750:	bf00      	nop
	}

char * text = " hola a todos";
 8001752:	4b3e      	ldr	r3, [pc, #248]	; (800184c <main+0x22c>)
 8001754:	607b      	str	r3, [r7, #4]
f_write(&file,text , buffesize(text), &bw);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff4a 	bl	80015f0 <buffesize>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <main+0x230>)
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4836      	ldr	r0, [pc, #216]	; (8001840 <main+0x220>)
 8001766:	f004 fbe6 	bl	8005f36 <f_write>
	fresul = f_close(&file);
 800176a:	4835      	ldr	r0, [pc, #212]	; (8001840 <main+0x220>)
 800176c:	f004 fdd6 	bl	800631c <f_close>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b26      	ldr	r3, [pc, #152]	; (8001810 <main+0x1f0>)
 8001776:	701a      	strb	r2, [r3, #0]
	if (fresul == FR_OK) {
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <main+0x1f0>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <main+0x166>
		printf("Archivo Cerrado y escrito\n\r");
 8001780:	4834      	ldr	r0, [pc, #208]	; (8001854 <main+0x234>)
 8001782:	f005 f8bd 	bl	8006900 <iprintf>
	}

	f_mkdir("Dir1");
 8001786:	4834      	ldr	r0, [pc, #208]	; (8001858 <main+0x238>)
 8001788:	f004 fea7 	bl	80064da <f_mkdir>
	//f_opendir(&di, "Dir1");

	//Lectura sd CARD

	fresul = f_open(&file, "tramajson.txt", FA_READ);
 800178c:	2201      	movs	r2, #1
 800178e:	4933      	ldr	r1, [pc, #204]	; (800185c <main+0x23c>)
 8001790:	482b      	ldr	r0, [pc, #172]	; (8001840 <main+0x220>)
 8001792:	f004 f8d3 	bl	800593c <f_open>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <main+0x1f0>)
 800179c:	701a      	strb	r2, [r3, #0]
	if (fresul == FR_OK) {
 800179e:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <main+0x1f0>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <main+0x18c>
		printf("Archivo JSON ABIERTO\n\r");
 80017a6:	482e      	ldr	r0, [pc, #184]	; (8001860 <main+0x240>)
 80017a8:	f005 f8aa 	bl	8006900 <iprintf>
	}



	f_read(&file, buffer, 50, &br);
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <main+0x244>)
 80017ae:	2232      	movs	r2, #50	; 0x32
 80017b0:	492d      	ldr	r1, [pc, #180]	; (8001868 <main+0x248>)
 80017b2:	4823      	ldr	r0, [pc, #140]	; (8001840 <main+0x220>)
 80017b4:	f004 fa80 	bl	8005cb8 <f_read>
	printf(buffer);
 80017b8:	482b      	ldr	r0, [pc, #172]	; (8001868 <main+0x248>)
 80017ba:	f005 f8a1 	bl	8006900 <iprintf>
	printf("\n\r");
 80017be:	482b      	ldr	r0, [pc, #172]	; (800186c <main+0x24c>)
 80017c0:	f005 f89e 	bl	8006900 <iprintf>
	fresul = f_close(&file);
 80017c4:	481e      	ldr	r0, [pc, #120]	; (8001840 <main+0x220>)
 80017c6:	f004 fda9 	bl	800631c <f_close>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <main+0x1f0>)
 80017d0:	701a      	strb	r2, [r3, #0]

//Me Desmonto de la BOARD
fresul = f_mount(NULL, "/", 1);
 80017d2:	2201      	movs	r2, #1
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <main+0x1e8>)
 80017d6:	2000      	movs	r0, #0
 80017d8:	f004 f86a 	bl	80058b0 <f_mount>
 80017dc:	4603      	mov	r3, r0
 80017de:	461a      	mov	r2, r3
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <main+0x1f0>)
 80017e2:	701a      	strb	r2, [r3, #0]
switch (fresul) {
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <main+0x1f0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d103      	bne.n	80017f4 <main+0x1d4>
	case FR_OK:
		printf("SD CARD Correctamente DESMontado\n\r");
 80017ec:	4820      	ldr	r0, [pc, #128]	; (8001870 <main+0x250>)
 80017ee:	f005 f887 	bl	8006900 <iprintf>
		break;
 80017f2:	e005      	b.n	8001800 <main+0x1e0>
	default:
		printf("SD CARD Fallo en el DesMontaje :C \n\r");
 80017f4:	481f      	ldr	r0, [pc, #124]	; (8001874 <main+0x254>)
 80017f6:	f005 f883 	bl	8006900 <iprintf>
		Error_Handler();
 80017fa:	f000 f8a7 	bl	800194c <Error_Handler>
		break;
 80017fe:	bf00      	nop
}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001800:	e7fe      	b.n	8001800 <main+0x1e0>
 8001802:	bf00      	nop
 8001804:	080076b4 	.word	0x080076b4
 8001808:	080076c4 	.word	0x080076c4
 800180c:	200000a0 	.word	0x200000a0
 8001810:	20000500 	.word	0x20000500
 8001814:	080076c8 	.word	0x080076c8
 8001818:	080076e8 	.word	0x080076e8
 800181c:	2000050c 	.word	0x2000050c
 8001820:	20000510 	.word	0x20000510
 8001824:	0800770c 	.word	0x0800770c
 8001828:	3fe00000 	.word	0x3fe00000
 800182c:	20000514 	.word	0x20000514
 8001830:	08007710 	.word	0x08007710
 8001834:	20000518 	.word	0x20000518
 8001838:	08007728 	.word	0x08007728
 800183c:	08007740 	.word	0x08007740
 8001840:	200002d0 	.word	0x200002d0
 8001844:	0800774c 	.word	0x0800774c
 8001848:	08007760 	.word	0x08007760
 800184c:	0800776c 	.word	0x0800776c
 8001850:	20000508 	.word	0x20000508
 8001854:	0800777c 	.word	0x0800777c
 8001858:	08007798 	.word	0x08007798
 800185c:	080077a0 	.word	0x080077a0
 8001860:	080077b0 	.word	0x080077b0
 8001864:	20000504 	.word	0x20000504
 8001868:	2000051c 	.word	0x2000051c
 800186c:	080077c8 	.word	0x080077c8
 8001870:	080077cc 	.word	0x080077cc
 8001874:	080077f0 	.word	0x080077f0

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	; 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f005 f980 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <SystemClock_Config+0xcc>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a27      	ldr	r2, [pc, #156]	; (8001944 <SystemClock_Config+0xcc>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <SystemClock_Config+0xcc>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <SystemClock_Config+0xd0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018c4:	4a20      	ldr	r2, [pc, #128]	; (8001948 <SystemClock_Config+0xd0>)
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <SystemClock_Config+0xd0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d8:	2301      	movs	r3, #1
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ec:	2304      	movs	r3, #4
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80018f0:	2354      	movs	r3, #84	; 0x54
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f8:	2304      	movs	r3, #4
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f000 fd9d 	bl	8002440 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800190c:	f000 f81e 	bl	800194c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001914:	2302      	movs	r3, #2
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f000 ffff 	bl	8002930 <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001938:	f000 f808 	bl	800194c <Error_Handler>
  }
}
 800193c:	bf00      	nop
 800193e:	3750      	adds	r7, #80	; 0x50
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001950:	b672      	cpsid	i
}
 8001952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001954:	e7fe      	b.n	8001954 <Error_Handler+0x8>
	...

08001958 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <MX_SPI1_Init+0x64>)
 800195e:	4a18      	ldr	r2, [pc, #96]	; (80019c0 <MX_SPI1_Init+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_SPI1_Init+0x64>)
 8001964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001968:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196a:	4b14      	ldr	r3, [pc, #80]	; (80019bc <MX_SPI1_Init+0x64>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <MX_SPI1_Init+0x64>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <MX_SPI1_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <MX_SPI1_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001982:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <MX_SPI1_Init+0x64>)
 8001984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001988:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <MX_SPI1_Init+0x64>)
 800198c:	2218      	movs	r2, #24
 800198e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <MX_SPI1_Init+0x64>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <MX_SPI1_Init+0x64>)
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <MX_SPI1_Init+0x64>)
 80019a4:	220a      	movs	r2, #10
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	; (80019bc <MX_SPI1_Init+0x64>)
 80019aa:	f001 f9e1 	bl	8002d70 <HAL_SPI_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019b4:	f7ff ffca 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000648 	.word	0x20000648
 80019c0:	40013000 	.word	0x40013000

080019c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	; (8001a48 <HAL_SPI_MspInit+0x84>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a17      	ldr	r2, [pc, #92]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_SPI_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a1e:	23e0      	movs	r3, #224	; 0xe0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <HAL_SPI_MspInit+0x8c>)
 8001a3a:	f000 fb63 	bl	8002104 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a3e:	bf00      	nop
 8001a40:	3728      	adds	r7, #40	; 0x28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40013000 	.word	0x40013000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020000 	.word	0x40020000

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint16_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <SDTimer_Handler+0x40>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d006      	beq.n	8001ac0 <SDTimer_Handler+0x1c>
    Timer1--;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <SDTimer_Handler+0x40>)
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <SDTimer_Handler+0x40>)
 8001abe:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001ac0:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <SDTimer_Handler+0x44>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <SDTimer_Handler+0x34>
    Timer2--;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <SDTimer_Handler+0x44>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SDTimer_Handler+0x44>)
 8001ad6:	801a      	strh	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200006a2 	.word	0x200006a2
 8001ae8:	200006a4 	.word	0x200006a4

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <NMI_Handler+0x4>

08001af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <HardFault_Handler+0x4>

08001af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <MemManage_Handler+0x4>

08001afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <BusFault_Handler+0x4>

08001b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler+0x4>

08001b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <SysTick_Handler+0x30>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <SysTick_Handler+0x30>)
 8001b44:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <SysTick_Handler+0x30>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d904      	bls.n	8001b5a <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Handler+0x30>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 8001b56:	f7ff ffa5 	bl	8001aa4 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5a:	f000 f9a9 	bl	8001eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	200006a0 	.word	0x200006a0

08001b68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
  }

  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e009      	b.n	8001bc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fd05 	bl	80015cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf1      	blt.n	8001bb4 <_write+0x12>
  }
  return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_close>:

int _close(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
  return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_isatty>:

int _isatty(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f004 ffd8 	bl	8006c28 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20018000 	.word	0x20018000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	200006a8 	.word	0x200006a8
 8001cac:	20000880 	.word	0x20000880

08001cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART2_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	f001 fc62 	bl	80035d4 <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f7ff fe19 	bl	800194c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200006ac 	.word	0x200006ac
 8001d24:	40004400 	.word	0x40004400

08001d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	; 0x28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <HAL_UART_MspInit+0x84>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d12b      	bne.n	8001da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_UART_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d82:	230c      	movs	r3, #12
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0x8c>)
 8001d9e:	f000 f9b1 	bl	8002104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020000 	.word	0x40020000

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dbc:	480d      	ldr	r0, [pc, #52]	; (8001df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dbe:	490e      	ldr	r1, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd4:	4c0b      	ldr	r4, [pc, #44]	; (8001e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff ff65 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f004 ff25 	bl	8006c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fc19 	bl	8001620 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001dfc:	08007938 	.word	0x08007938
  ldr r2, =_sbss
 8001e00:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e04:	2000087c 	.word	0x2000087c

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e10:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <HAL_Init+0x40>)
 8001e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_Init+0x40>)
 8001e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_Init+0x40>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e34:	2003      	movs	r0, #3
 8001e36:	f000 f931 	bl	800209c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3a:	200f      	movs	r0, #15
 8001e3c:	f000 f808 	bl	8001e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e40:	f7ff fe08 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x54>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_InitTick+0x58>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f93b 	bl	80020ea <HAL_SYSTICK_Config>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e00e      	b.n	8001e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b0f      	cmp	r3, #15
 8001e82:	d80a      	bhi.n	8001e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e84:	2200      	movs	r2, #0
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f000 f911 	bl	80020b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e90:	4a06      	ldr	r2, [pc, #24]	; (8001eac <HAL_InitTick+0x5c>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	2000000c 	.word	0x2000000c
 8001eac:	20000008 	.word	0x20000008

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	2000000c 	.word	0x2000000c
 8001ed4:	200006f0 	.word	0x200006f0

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200006f0 	.word	0x200006f0

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	6039      	str	r1, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db0a      	blt.n	8001fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	490c      	ldr	r1, [pc, #48]	; (8001fe8 <__NVIC_SetPriority+0x4c>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	0112      	lsls	r2, r2, #4
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fc4:	e00a      	b.n	8001fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4908      	ldr	r1, [pc, #32]	; (8001fec <__NVIC_SetPriority+0x50>)
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	3b04      	subs	r3, #4
 8001fd4:	0112      	lsls	r2, r2, #4
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	440b      	add	r3, r1
 8001fda:	761a      	strb	r2, [r3, #24]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000e100 	.word	0xe000e100
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f1c3 0307 	rsb	r3, r3, #7
 800200a:	2b04      	cmp	r3, #4
 800200c:	bf28      	it	cs
 800200e:	2304      	movcs	r3, #4
 8002010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3304      	adds	r3, #4
 8002016:	2b06      	cmp	r3, #6
 8002018:	d902      	bls.n	8002020 <NVIC_EncodePriority+0x30>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3b03      	subs	r3, #3
 800201e:	e000      	b.n	8002022 <NVIC_EncodePriority+0x32>
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	f04f 32ff 	mov.w	r2, #4294967295
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	401a      	ands	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002038:	f04f 31ff 	mov.w	r1, #4294967295
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	43d9      	mvns	r1, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	4313      	orrs	r3, r2
         );
}
 800204a:	4618      	mov	r0, r3
 800204c:	3724      	adds	r7, #36	; 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002068:	d301      	bcc.n	800206e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <SysTick_Config+0x40>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002076:	210f      	movs	r1, #15
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f7ff ff8e 	bl	8001f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SysTick_Config+0x40>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <SysTick_Config+0x40>)
 8002088:	2207      	movs	r2, #7
 800208a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	e000e010 	.word	0xe000e010

0800209c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff47 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020c4:	f7ff ff5c 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	6978      	ldr	r0, [r7, #20]
 80020d0:	f7ff ff8e 	bl	8001ff0 <NVIC_EncodePriority>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff ff5d 	bl	8001f9c <__NVIC_SetPriority>
}
 80020e2:	bf00      	nop
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ffb0 	bl	8002058 <SysTick_Config>
 80020f8:	4603      	mov	r3, r0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
 800211e:	e159      	b.n	80023d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	f040 8148 	bne.w	80023ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f003 0303 	and.w	r3, r3, #3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d005      	beq.n	8002156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	2b02      	cmp	r3, #2
 8002154:	d130      	bne.n	80021b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0201 	and.w	r2, r3, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d017      	beq.n	80021f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d123      	bne.n	8002248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	220f      	movs	r2, #15
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	08da      	lsrs	r2, r3, #3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3208      	adds	r2, #8
 8002242:	69b9      	ldr	r1, [r7, #24]
 8002244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0203 	and.w	r2, r3, #3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80a2 	beq.w	80023ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b57      	ldr	r3, [pc, #348]	; (80023ec <HAL_GPIO_Init+0x2e8>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_GPIO_Init+0x2e8>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b54      	ldr	r3, [pc, #336]	; (80023ec <HAL_GPIO_Init+0x2e8>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_GPIO_Init+0x2ec>)
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a49      	ldr	r2, [pc, #292]	; (80023f4 <HAL_GPIO_Init+0x2f0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d019      	beq.n	8002306 <HAL_GPIO_Init+0x202>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a48      	ldr	r2, [pc, #288]	; (80023f8 <HAL_GPIO_Init+0x2f4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d013      	beq.n	8002302 <HAL_GPIO_Init+0x1fe>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a47      	ldr	r2, [pc, #284]	; (80023fc <HAL_GPIO_Init+0x2f8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00d      	beq.n	80022fe <HAL_GPIO_Init+0x1fa>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a46      	ldr	r2, [pc, #280]	; (8002400 <HAL_GPIO_Init+0x2fc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <HAL_GPIO_Init+0x1f6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a45      	ldr	r2, [pc, #276]	; (8002404 <HAL_GPIO_Init+0x300>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d101      	bne.n	80022f6 <HAL_GPIO_Init+0x1f2>
 80022f2:	2304      	movs	r3, #4
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x204>
 80022f6:	2307      	movs	r3, #7
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x204>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x204>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x204>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x204>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	; (80023f0 <HAL_GPIO_Init+0x2ec>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b38      	ldr	r3, [pc, #224]	; (8002408 <HAL_GPIO_Init+0x304>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a2f      	ldr	r2, [pc, #188]	; (8002408 <HAL_GPIO_Init+0x304>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b2d      	ldr	r3, [pc, #180]	; (8002408 <HAL_GPIO_Init+0x304>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a24      	ldr	r2, [pc, #144]	; (8002408 <HAL_GPIO_Init+0x304>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237a:	4b23      	ldr	r3, [pc, #140]	; (8002408 <HAL_GPIO_Init+0x304>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <HAL_GPIO_Init+0x304>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <HAL_GPIO_Init+0x304>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c8:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_GPIO_Init+0x304>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f aea2 	bls.w	8002120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40013c00 	.word	0x40013c00

0800240c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800241c:	787b      	ldrb	r3, [r7, #1]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002428:	e003      	b.n	8002432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	041a      	lsls	r2, r3, #16
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	619a      	str	r2, [r3, #24]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e267      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d075      	beq.n	800254a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b04      	cmp	r3, #4
 8002468:	d00c      	beq.n	8002484 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002472:	2b08      	cmp	r3, #8
 8002474:	d112      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002476:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002482:	d10b      	bne.n	800249c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d05b      	beq.n	8002548 <HAL_RCC_OscConfig+0x108>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d157      	bne.n	8002548 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e242      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d106      	bne.n	80024b4 <HAL_RCC_OscConfig+0x74>
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6f      	ldr	r2, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6c      	ldr	r2, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xb0>
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a65      	ldr	r2, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7ff fcee 	bl	8001ed8 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fcea 	bl	8001ed8 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e207      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xc0>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fcda 	bl	8001ed8 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fcd6 	bl	8001ed8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	; 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e1f3      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253a:	4b51      	ldr	r3, [pc, #324]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0xe8>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d063      	beq.n	800261e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002556:	4b4a      	ldr	r3, [pc, #296]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256a:	2b08      	cmp	r3, #8
 800256c:	d11c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d116      	bne.n	80025a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e1c7      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4937      	ldr	r1, [pc, #220]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a6:	e03a      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d020      	beq.n	80025f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b6:	f7ff fc8f 	bl	8001ed8 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025be:	f7ff fc8b 	bl	8001ed8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1a8      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d0:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f0      	beq.n	80025be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
 80025f0:	e015      	b.n	800261e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <HAL_RCC_OscConfig+0x244>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fc6e 	bl	8001ed8 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7ff fc6a 	bl	8001ed8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e187      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d036      	beq.n	8002698 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7ff fc4e 	bl	8001ed8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002640:	f7ff fc4a 	bl	8001ed8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e167      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_OscConfig+0x240>)
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x200>
 800265e:	e01b      	b.n	8002698 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_OscConfig+0x248>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fc37 	bl	8001ed8 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	e00e      	b.n	800268c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fc33 	bl	8001ed8 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d907      	bls.n	800268c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e150      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ea      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 8097 	beq.w	80027d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026aa:	4b81      	ldr	r3, [pc, #516]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	4b7d      	ldr	r3, [pc, #500]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	4a7c      	ldr	r2, [pc, #496]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c4:	6413      	str	r3, [r2, #64]	; 0x40
 80026c6:	4b7a      	ldr	r3, [pc, #488]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	60bb      	str	r3, [r7, #8]
 80026d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d6:	4b77      	ldr	r3, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d118      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e2:	4b74      	ldr	r3, [pc, #464]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a73      	ldr	r2, [pc, #460]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fbf3 	bl	8001ed8 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7ff fbef 	bl	8001ed8 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e10c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x474>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d106      	bne.n	800272a <HAL_RCC_OscConfig+0x2ea>
 800271c:	4b64      	ldr	r3, [pc, #400]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	4a63      	ldr	r2, [pc, #396]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6713      	str	r3, [r2, #112]	; 0x70
 8002728:	e01c      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b05      	cmp	r3, #5
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x30c>
 8002732:	4b5f      	ldr	r3, [pc, #380]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002738:	f043 0304 	orr.w	r3, r3, #4
 800273c:	6713      	str	r3, [r2, #112]	; 0x70
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	; 0x70
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0x324>
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002752:	f023 0301 	bic.w	r3, r3, #1
 8002756:	6713      	str	r3, [r2, #112]	; 0x70
 8002758:	4b55      	ldr	r3, [pc, #340]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275c:	4a54      	ldr	r2, [pc, #336]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 0304 	bic.w	r3, r3, #4
 8002762:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d015      	beq.n	8002798 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff fbb4 	bl	8001ed8 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	e00a      	b.n	800278a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002774:	f7ff fbb0 	bl	8001ed8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0cb      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278a:	4b49      	ldr	r3, [pc, #292]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0ee      	beq.n	8002774 <HAL_RCC_OscConfig+0x334>
 8002796:	e014      	b.n	80027c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7ff fb9e 	bl	8001ed8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a0:	f7ff fb9a 	bl	8001ed8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e0b5      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b6:	4b3e      	ldr	r3, [pc, #248]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ee      	bne.n	80027a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4b39      	ldr	r3, [pc, #228]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	4a38      	ldr	r2, [pc, #224]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80a1 	beq.w	8002920 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027de:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d05c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d141      	bne.n	8002876 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f2:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7ff fb6e 	bl	8001ed8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff fb6a 	bl	8001ed8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e087      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	491b      	ldr	r1, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7ff fb43 	bl	8001ed8 <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002854:	e008      	b.n	8002868 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002856:	f7ff fb3f 	bl	8001ed8 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e05c      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002868:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0f0      	beq.n	8002856 <HAL_RCC_OscConfig+0x416>
 8002874:	e054      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <HAL_RCC_OscConfig+0x478>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff fb2c 	bl	8001ed8 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7ff fb28 	bl	8001ed8 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e045      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x470>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
 80028a2:	e03d      	b.n	8002920 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e038      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x4ec>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d028      	beq.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d121      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d11a      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d111      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	085b      	lsrs	r3, r3, #1
 8002904:	3b01      	subs	r3, #1
 8002906:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800

08002930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0cc      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002944:	4b68      	ldr	r3, [pc, #416]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d90c      	bls.n	800296c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b65      	ldr	r3, [pc, #404]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002984:	4b59      	ldr	r3, [pc, #356]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800299c:	4b53      	ldr	r3, [pc, #332]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a52      	ldr	r2, [pc, #328]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	494d      	ldr	r1, [pc, #308]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d044      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d107      	bne.n	80029de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b47      	ldr	r3, [pc, #284]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e07f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ee:	4b3f      	ldr	r3, [pc, #252]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d109      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e06f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e067      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f023 0203 	bic.w	r2, r3, #3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4934      	ldr	r1, [pc, #208]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a20:	f7ff fa5a 	bl	8001ed8 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	e00a      	b.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a28:	f7ff fa56 	bl	8001ed8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e04f      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 020c 	and.w	r2, r3, #12
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d1eb      	bne.n	8002a28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d20c      	bcs.n	8002a78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a66:	4b20      	ldr	r3, [pc, #128]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	683a      	ldr	r2, [r7, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e032      	b.n	8002ade <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	4916      	ldr	r1, [pc, #88]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	490e      	ldr	r1, [pc, #56]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f000 f821 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002aba:	4602      	mov	r2, r0
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	5ccb      	ldrb	r3, [r1, r3]
 8002aca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff f9ba 	bl	8001e50 <HAL_InitTick>

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	0800785c 	.word	0x0800785c
 8002af4:	20000004 	.word	0x20000004
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b094      	sub	sp, #80	; 0x50
 8002b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	647b      	str	r3, [r7, #68]	; 0x44
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b14:	4b79      	ldr	r3, [pc, #484]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d00d      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x40>
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	f200 80e1 	bhi.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2e:	e0db      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b34:	e0db      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b36:	4b73      	ldr	r3, [pc, #460]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b3a:	e0d8      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b6f      	ldr	r3, [pc, #444]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b46:	4b6d      	ldr	r3, [pc, #436]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d063      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	2300      	movs	r3, #0
 8002b68:	637b      	str	r3, [r7, #52]	; 0x34
 8002b6a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6e:	4622      	mov	r2, r4
 8002b70:	462b      	mov	r3, r5
 8002b72:	f04f 0000 	mov.w	r0, #0
 8002b76:	f04f 0100 	mov.w	r1, #0
 8002b7a:	0159      	lsls	r1, r3, #5
 8002b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b80:	0150      	lsls	r0, r2, #5
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4621      	mov	r1, r4
 8002b88:	1a51      	subs	r1, r2, r1
 8002b8a:	6139      	str	r1, [r7, #16]
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	018b      	lsls	r3, r1, #6
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002baa:	4651      	mov	r1, sl
 8002bac:	018a      	lsls	r2, r1, #6
 8002bae:	4651      	mov	r1, sl
 8002bb0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb4:	4659      	mov	r1, fp
 8002bb6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bce:	4690      	mov	r8, r2
 8002bd0:	4699      	mov	r9, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	eb18 0303 	adds.w	r3, r8, r3
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	eb49 0303 	adc.w	r3, r9, r3
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	024b      	lsls	r3, r1, #9
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	024a      	lsls	r2, r1, #9
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c0c:	f7fd fe3e 	bl	800088c <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c18:	e058      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	4618      	mov	r0, r3
 8002c24:	4611      	mov	r1, r2
 8002c26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c2a:	623b      	str	r3, [r7, #32]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c34:	4642      	mov	r2, r8
 8002c36:	464b      	mov	r3, r9
 8002c38:	f04f 0000 	mov.w	r0, #0
 8002c3c:	f04f 0100 	mov.w	r1, #0
 8002c40:	0159      	lsls	r1, r3, #5
 8002c42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c46:	0150      	lsls	r0, r2, #5
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c6c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c70:	eb63 050b 	sbc.w	r5, r3, fp
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	00eb      	lsls	r3, r5, #3
 8002c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c82:	00e2      	lsls	r2, r4, #3
 8002c84:	4614      	mov	r4, r2
 8002c86:	461d      	mov	r5, r3
 8002c88:	4643      	mov	r3, r8
 8002c8a:	18e3      	adds	r3, r4, r3
 8002c8c:	603b      	str	r3, [r7, #0]
 8002c8e:	464b      	mov	r3, r9
 8002c90:	eb45 0303 	adc.w	r3, r5, r3
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	028b      	lsls	r3, r1, #10
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cac:	4621      	mov	r1, r4
 8002cae:	028a      	lsls	r2, r1, #10
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	61fa      	str	r2, [r7, #28]
 8002cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc0:	f7fd fde4 	bl	800088c <__aeabi_uldivmod>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4613      	mov	r3, r2
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3750      	adds	r7, #80	; 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a9b      	lsrs	r3, r3, #10
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4903      	ldr	r1, [pc, #12]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40023800 	.word	0x40023800
 8002d44:	0800786c 	.word	0x0800786c

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d4c:	f7ff ffdc 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	; (8002d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	0800786c 	.word	0x0800786c

08002d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07b      	b.n	8002e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d92:	d009      	beq.n	8002da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fe fdfe 	bl	80019c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2c:	ea42 0103 	orr.w	r1, r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0104 	and.w	r1, r3, #4
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	f003 0210 	and.w	r2, r3, #16
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69da      	ldr	r2, [r3, #28]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b088      	sub	sp, #32
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_SPI_Transmit+0x22>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e126      	b.n	80030f2 <HAL_SPI_Transmit+0x270>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eac:	f7ff f814 	bl	8001ed8 <HAL_GetTick>
 8002eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ec6:	e10b      	b.n	80030e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Transmit+0x52>
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed8:	e102      	b.n	80030e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2203      	movs	r2, #3
 8002ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	88fa      	ldrh	r2, [r7, #6]
 8002ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f20:	d10f      	bne.n	8002f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d007      	beq.n	8002f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d14b      	bne.n	8003002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Transmit+0xf6>
 8002f72:	8afb      	ldrh	r3, [r7, #22]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d13e      	bne.n	8002ff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	881a      	ldrh	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f9c:	e02b      	b.n	8002ff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d112      	bne.n	8002fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	881a      	ldrh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	1c9a      	adds	r2, r3, #2
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fd0:	e011      	b.n	8002ff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fd2:	f7fe ff81 	bl	8001ed8 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d803      	bhi.n	8002fea <HAL_SPI_Transmit+0x168>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d102      	bne.n	8002ff0 <HAL_SPI_Transmit+0x16e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ff4:	e074      	b.n	80030e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ce      	bne.n	8002f9e <HAL_SPI_Transmit+0x11c>
 8003000:	e04c      	b.n	800309c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_SPI_Transmit+0x18e>
 800300a:	8afb      	ldrh	r3, [r7, #22]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d140      	bne.n	8003092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	7812      	ldrb	r2, [r2, #0]
 800301c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	1c5a      	adds	r2, r3, #1
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800302c:	b29b      	uxth	r3, r3
 800302e:	3b01      	subs	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003036:	e02c      	b.n	8003092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b02      	cmp	r3, #2
 8003044:	d113      	bne.n	800306e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	330c      	adds	r3, #12
 8003050:	7812      	ldrb	r2, [r2, #0]
 8003052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	86da      	strh	r2, [r3, #54]	; 0x36
 800306c:	e011      	b.n	8003092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306e:	f7fe ff33 	bl	8001ed8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d803      	bhi.n	8003086 <HAL_SPI_Transmit+0x204>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003084:	d102      	bne.n	800308c <HAL_SPI_Transmit+0x20a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d102      	bne.n	8003092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003090:	e026      	b.n	80030e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1cd      	bne.n	8003038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	6839      	ldr	r1, [r7, #0]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fa55 	bl	8003550 <SPI_EndRxTxTransaction>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	77fb      	strb	r3, [r7, #31]
 80030dc:	e000      	b.n	80030e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80030de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b08c      	sub	sp, #48	; 0x30
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003108:	2301      	movs	r3, #1
 800310a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_SPI_TransmitReceive+0x26>
 800311c:	2302      	movs	r3, #2
 800311e:	e18a      	b.n	8003436 <HAL_SPI_TransmitReceive+0x33c>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003128:	f7fe fed6 	bl	8001ed8 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003146:	2b01      	cmp	r3, #1
 8003148:	d00f      	beq.n	800316a <HAL_SPI_TransmitReceive+0x70>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003150:	d107      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x68>
 800315a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315e:	2b04      	cmp	r3, #4
 8003160:	d003      	beq.n	800316a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003162:	2302      	movs	r3, #2
 8003164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003168:	e15b      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_SPI_TransmitReceive+0x82>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_SPI_TransmitReceive+0x82>
 8003176:	887b      	ldrh	r3, [r7, #2]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d103      	bne.n	8003184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003182:	e14e      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b04      	cmp	r3, #4
 800318e:	d003      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2205      	movs	r2, #5
 8003194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	887a      	ldrh	r2, [r7, #2]
 80031ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	887a      	ldrh	r2, [r7, #2]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b40      	cmp	r3, #64	; 0x40
 80031da:	d007      	beq.n	80031ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d178      	bne.n	80032e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x10a>
 80031fe:	8b7b      	ldrh	r3, [r7, #26]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d166      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	881a      	ldrh	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	1c9a      	adds	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003228:	e053      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d11b      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x176>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_SPI_TransmitReceive+0x176>
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d113      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	881a      	ldrh	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	1c9a      	adds	r2, r3, #2
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800326c:	2300      	movs	r3, #0
 800326e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d119      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x1b8>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d014      	beq.n	80032b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	b292      	uxth	r2, r2
 8003294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	1c9a      	adds	r2, r3, #2
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032ae:	2301      	movs	r3, #1
 80032b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032b2:	f7fe fe11 	bl	8001ed8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032be:	429a      	cmp	r2, r3
 80032c0:	d807      	bhi.n	80032d2 <HAL_SPI_TransmitReceive+0x1d8>
 80032c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d003      	beq.n	80032d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032d0:	e0a7      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1a6      	bne.n	800322a <HAL_SPI_TransmitReceive+0x130>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1a1      	bne.n	800322a <HAL_SPI_TransmitReceive+0x130>
 80032e6:	e07c      	b.n	80033e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_SPI_TransmitReceive+0x1fc>
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d16b      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	7812      	ldrb	r2, [r2, #0]
 8003302:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800331c:	e057      	b.n	80033ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11c      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x26c>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d017      	beq.n	8003366 <HAL_SPI_TransmitReceive+0x26c>
 8003336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003338:	2b01      	cmp	r3, #1
 800333a:	d114      	bne.n	8003366 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	330c      	adds	r3, #12
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b01      	cmp	r3, #1
 8003372:	d119      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x2ae>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d014      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033a4:	2301      	movs	r3, #1
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033a8:	f7fe fd96 	bl	8001ed8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d803      	bhi.n	80033c0 <HAL_SPI_TransmitReceive+0x2c6>
 80033b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d102      	bne.n	80033c6 <HAL_SPI_TransmitReceive+0x2cc>
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033cc:	e029      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1a2      	bne.n	800331e <HAL_SPI_TransmitReceive+0x224>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d19d      	bne.n	800331e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f8b2 	bl	8003550 <SPI_EndRxTxTransaction>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80033fe:	e010      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	617b      	str	r3, [r7, #20]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	e000      	b.n	8003422 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003420:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003436:	4618      	mov	r0, r3
 8003438:	3730      	adds	r7, #48	; 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003450:	f7fe fd42 	bl	8001ed8 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003460:	f7fe fd3a 	bl	8001ed8 <HAL_GetTick>
 8003464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003476:	e054      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d050      	beq.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003480:	f7fe fd2a 	bl	8001ed8 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	d902      	bls.n	8003496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d13d      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d111      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b8:	d004      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d107      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d10f      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e017      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d19b      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000004 	.word	0x20000004

08003550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <SPI_EndRxTxTransaction+0x7c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <SPI_EndRxTxTransaction+0x80>)
 8003562:	fba2 2303 	umull	r2, r3, r2, r3
 8003566:	0d5b      	lsrs	r3, r3, #21
 8003568:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800356c:	fb02 f303 	mul.w	r3, r2, r3
 8003570:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d112      	bne.n	80035a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2200      	movs	r2, #0
 8003584:	2180      	movs	r1, #128	; 0x80
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f7ff ff5a 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e00f      	b.n	80035c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b8:	2b80      	cmp	r3, #128	; 0x80
 80035ba:	d0f2      	beq.n	80035a2 <SPI_EndRxTxTransaction+0x52>
 80035bc:	e000      	b.n	80035c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80035be:	bf00      	nop
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000004 	.word	0x20000004
 80035d0:	165e9f81 	.word	0x165e9f81

080035d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03f      	b.n	8003666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fb94 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f929 	bl	8003870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800364c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b08a      	sub	sp, #40	; 0x28
 8003672:	af02      	add	r7, sp, #8
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d17c      	bne.n	8003788 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <HAL_UART_Transmit+0x2c>
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e075      	b.n	800378a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_UART_Transmit+0x3e>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e06e      	b.n	800378a <HAL_UART_Transmit+0x11c>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe fc09 	bl	8001ed8 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x82>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003700:	e02a      	b.n	8003758 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 f840 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e036      	b.n	800378a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cf      	bne.n	8003702 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	; 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f810 	bl	8003792 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e006      	b.n	800378a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b090      	sub	sp, #64	; 0x40
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a2:	e050      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037aa:	d04c      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b2:	f7fe fb91 	bl	8001ed8 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037be:	429a      	cmp	r2, r3
 80037c0:	d241      	bcs.n	8003846 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	330c      	adds	r3, #12
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037e2:	637a      	str	r2, [r7, #52]	; 0x34
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e5      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3314      	adds	r3, #20
 80037fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	613b      	str	r3, [r7, #16]
   return(result);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	3314      	adds	r3, #20
 8003814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003816:	623a      	str	r2, [r7, #32]
 8003818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	69f9      	ldr	r1, [r7, #28]
 800381c:	6a3a      	ldr	r2, [r7, #32]
 800381e:	e841 2300 	strex	r3, r2, [r1]
 8003822:	61bb      	str	r3, [r7, #24]
   return(result);
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1e5      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d09f      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3740      	adds	r7, #64	; 0x40
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b0c0      	sub	sp, #256	; 0x100
 8003876:	af00      	add	r7, sp, #0
 8003878:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388c:	68d9      	ldr	r1, [r3, #12]
 800388e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	ea40 0301 	orr.w	r3, r0, r1
 8003898:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c8:	f021 010c 	bic.w	r1, r1, #12
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038d6:	430b      	orrs	r3, r1
 80038d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ea:	6999      	ldr	r1, [r3, #24]
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	ea40 0301 	orr.w	r3, r0, r1
 80038f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <UART_SetConfig+0x2cc>)
 8003900:	429a      	cmp	r2, r3
 8003902:	d005      	beq.n	8003910 <UART_SetConfig+0xa0>
 8003904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b8d      	ldr	r3, [pc, #564]	; (8003b40 <UART_SetConfig+0x2d0>)
 800390c:	429a      	cmp	r2, r3
 800390e:	d104      	bne.n	800391a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003910:	f7ff fa1a 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8003914:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003918:	e003      	b.n	8003922 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800391a:	f7ff fa01 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 800391e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392c:	f040 810c 	bne.w	8003b48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003930:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800393a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800393e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003942:	4622      	mov	r2, r4
 8003944:	462b      	mov	r3, r5
 8003946:	1891      	adds	r1, r2, r2
 8003948:	65b9      	str	r1, [r7, #88]	; 0x58
 800394a:	415b      	adcs	r3, r3
 800394c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800394e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003952:	4621      	mov	r1, r4
 8003954:	eb12 0801 	adds.w	r8, r2, r1
 8003958:	4629      	mov	r1, r5
 800395a:	eb43 0901 	adc.w	r9, r3, r1
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800396a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800396e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003972:	4690      	mov	r8, r2
 8003974:	4699      	mov	r9, r3
 8003976:	4623      	mov	r3, r4
 8003978:	eb18 0303 	adds.w	r3, r8, r3
 800397c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003980:	462b      	mov	r3, r5
 8003982:	eb49 0303 	adc.w	r3, r9, r3
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003996:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800399a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800399e:	460b      	mov	r3, r1
 80039a0:	18db      	adds	r3, r3, r3
 80039a2:	653b      	str	r3, [r7, #80]	; 0x50
 80039a4:	4613      	mov	r3, r2
 80039a6:	eb42 0303 	adc.w	r3, r2, r3
 80039aa:	657b      	str	r3, [r7, #84]	; 0x54
 80039ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039b4:	f7fc ff6a 	bl	800088c <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <UART_SetConfig+0x2d4>)
 80039be:	fba3 2302 	umull	r2, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	011c      	lsls	r4, r3, #4
 80039c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039d8:	4642      	mov	r2, r8
 80039da:	464b      	mov	r3, r9
 80039dc:	1891      	adds	r1, r2, r2
 80039de:	64b9      	str	r1, [r7, #72]	; 0x48
 80039e0:	415b      	adcs	r3, r3
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e8:	4641      	mov	r1, r8
 80039ea:	eb12 0a01 	adds.w	sl, r2, r1
 80039ee:	4649      	mov	r1, r9
 80039f0:	eb43 0b01 	adc.w	fp, r3, r1
 80039f4:	f04f 0200 	mov.w	r2, #0
 80039f8:	f04f 0300 	mov.w	r3, #0
 80039fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a08:	4692      	mov	sl, r2
 8003a0a:	469b      	mov	fp, r3
 8003a0c:	4643      	mov	r3, r8
 8003a0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a16:	464b      	mov	r3, r9
 8003a18:	eb4b 0303 	adc.w	r3, fp, r3
 8003a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a34:	460b      	mov	r3, r1
 8003a36:	18db      	adds	r3, r3, r3
 8003a38:	643b      	str	r3, [r7, #64]	; 0x40
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	eb42 0303 	adc.w	r3, r2, r3
 8003a40:	647b      	str	r3, [r7, #68]	; 0x44
 8003a42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a4a:	f7fc ff1f 	bl	800088c <__aeabi_uldivmod>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4611      	mov	r1, r2
 8003a54:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <UART_SetConfig+0x2d4>)
 8003a56:	fba3 2301 	umull	r2, r3, r3, r1
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	2264      	movs	r2, #100	; 0x64
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	1acb      	subs	r3, r1, r3
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a6a:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <UART_SetConfig+0x2d4>)
 8003a6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a70:	095b      	lsrs	r3, r3, #5
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a78:	441c      	add	r4, r3
 8003a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a94:	415b      	adcs	r3, r3
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	1851      	adds	r1, r2, r1
 8003aa0:	6339      	str	r1, [r7, #48]	; 0x30
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	414b      	adcs	r3, r1
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ab4:	4659      	mov	r1, fp
 8003ab6:	00cb      	lsls	r3, r1, #3
 8003ab8:	4651      	mov	r1, sl
 8003aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003abe:	4651      	mov	r1, sl
 8003ac0:	00ca      	lsls	r2, r1, #3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4642      	mov	r2, r8
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ae8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003aec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003af0:	460b      	mov	r3, r1
 8003af2:	18db      	adds	r3, r3, r3
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af6:	4613      	mov	r3, r2
 8003af8:	eb42 0303 	adc.w	r3, r2, r3
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b06:	f7fc fec1 	bl	800088c <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <UART_SetConfig+0x2d4>)
 8003b10:	fba3 1302 	umull	r1, r3, r3, r2
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	2164      	movs	r1, #100	; 0x64
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	3332      	adds	r3, #50	; 0x32
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <UART_SetConfig+0x2d4>)
 8003b24:	fba2 2303 	umull	r2, r3, r2, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	f003 0207 	and.w	r2, r3, #7
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4422      	add	r2, r4
 8003b36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b38:	e106      	b.n	8003d48 <UART_SetConfig+0x4d8>
 8003b3a:	bf00      	nop
 8003b3c:	40011000 	.word	0x40011000
 8003b40:	40011400 	.word	0x40011400
 8003b44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b5a:	4642      	mov	r2, r8
 8003b5c:	464b      	mov	r3, r9
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	6239      	str	r1, [r7, #32]
 8003b62:	415b      	adcs	r3, r3
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
 8003b66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b6a:	4641      	mov	r1, r8
 8003b6c:	1854      	adds	r4, r2, r1
 8003b6e:	4649      	mov	r1, r9
 8003b70:	eb43 0501 	adc.w	r5, r3, r1
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	00eb      	lsls	r3, r5, #3
 8003b7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b82:	00e2      	lsls	r2, r4, #3
 8003b84:	4614      	mov	r4, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	4643      	mov	r3, r8
 8003b8a:	18e3      	adds	r3, r4, r3
 8003b8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b90:	464b      	mov	r3, r9
 8003b92:	eb45 0303 	adc.w	r3, r5, r3
 8003b96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ba6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	008b      	lsls	r3, r1, #2
 8003bba:	4621      	mov	r1, r4
 8003bbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	008a      	lsls	r2, r1, #2
 8003bc4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bc8:	f7fc fe60 	bl	800088c <__aeabi_uldivmod>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	460b      	mov	r3, r1
 8003bd0:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <UART_SetConfig+0x4e4>)
 8003bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	011c      	lsls	r4, r3, #4
 8003bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003be4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	61b9      	str	r1, [r7, #24]
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	1851      	adds	r1, r2, r1
 8003c00:	6139      	str	r1, [r7, #16]
 8003c02:	4649      	mov	r1, r9
 8003c04:	414b      	adcs	r3, r1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c14:	4659      	mov	r1, fp
 8003c16:	00cb      	lsls	r3, r1, #3
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1e:	4651      	mov	r1, sl
 8003c20:	00ca      	lsls	r2, r1, #3
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	4642      	mov	r2, r8
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c30:	464b      	mov	r3, r9
 8003c32:	460a      	mov	r2, r1
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c54:	4649      	mov	r1, r9
 8003c56:	008b      	lsls	r3, r1, #2
 8003c58:	4641      	mov	r1, r8
 8003c5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c5e:	4641      	mov	r1, r8
 8003c60:	008a      	lsls	r2, r1, #2
 8003c62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c66:	f7fc fe11 	bl	800088c <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4b38      	ldr	r3, [pc, #224]	; (8003d54 <UART_SetConfig+0x4e4>)
 8003c72:	fba3 2301 	umull	r2, r3, r3, r1
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	2264      	movs	r2, #100	; 0x64
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	1acb      	subs	r3, r1, r3
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	3332      	adds	r3, #50	; 0x32
 8003c84:	4a33      	ldr	r2, [pc, #204]	; (8003d54 <UART_SetConfig+0x4e4>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	441c      	add	r4, r3
 8003c92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c96:	2200      	movs	r2, #0
 8003c98:	673b      	str	r3, [r7, #112]	; 0x70
 8003c9a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	1891      	adds	r1, r2, r2
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	415b      	adcs	r3, r3
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb0:	4641      	mov	r1, r8
 8003cb2:	1851      	adds	r1, r2, r1
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	414b      	adcs	r3, r1
 8003cba:	607b      	str	r3, [r7, #4]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cc8:	4659      	mov	r1, fp
 8003cca:	00cb      	lsls	r3, r1, #3
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	00ca      	lsls	r2, r1, #3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4642      	mov	r2, r8
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	eb42 0303 	adc.w	r3, r2, r3
 8003cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf6:	667a      	str	r2, [r7, #100]	; 0x64
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d04:	4649      	mov	r1, r9
 8003d06:	008b      	lsls	r3, r1, #2
 8003d08:	4641      	mov	r1, r8
 8003d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0e:	4641      	mov	r1, r8
 8003d10:	008a      	lsls	r2, r1, #2
 8003d12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d16:	f7fc fdb9 	bl	800088c <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <UART_SetConfig+0x4e4>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	; 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <UART_SetConfig+0x4e4>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 020f 	and.w	r2, r3, #15
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4422      	add	r2, r4
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d54:	51eb851f 	.word	0x51eb851f

08003d58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d5c:	4904      	ldr	r1, [pc, #16]	; (8003d70 <MX_FATFS_Init+0x18>)
 8003d5e:	4805      	ldr	r0, [pc, #20]	; (8003d74 <MX_FATFS_Init+0x1c>)
 8003d60:	f002 fd0e 	bl	8006780 <FATFS_LinkDriver>
 8003d64:	4603      	mov	r3, r0
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <MX_FATFS_Init+0x20>)
 8003d6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	200006f8 	.word	0x200006f8
 8003d74:	20000010 	.word	0x20000010
 8003d78:	200006f4 	.word	0x200006f4

08003d7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize (pdrv);
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fd f8ab 	bl	8000ef4 <SD_disk_initialize>
 8003d9e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fd f989 	bl	80010cc <SD_disk_status>
 8003dba:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	603b      	str	r3, [r7, #0]
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8003dd4:	7bf8      	ldrb	r0, [r7, #15]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	f7fd f98c 	bl	80010f8 <SD_disk_read>
 8003de0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4603      	mov	r3, r0
 8003df8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8003dfa:	7bf8      	ldrb	r0, [r7, #15]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	f7fd f9e3 	bl	80011cc <SD_disk_write>
 8003e06:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	603a      	str	r2, [r7, #0]
 8003e1a:	71fb      	strb	r3, [r7, #7]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8003e20:	79b9      	ldrb	r1, [r7, #6]
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd fa54 	bl	80012d4 <SD_disk_ioctl>
 8003e2c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <disk_status+0x30>)
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	79fa      	ldrb	r2, [r7, #7]
 8003e50:	4905      	ldr	r1, [pc, #20]	; (8003e68 <disk_status+0x30>)
 8003e52:	440a      	add	r2, r1
 8003e54:	7a12      	ldrb	r2, [r2, #8]
 8003e56:	4610      	mov	r0, r2
 8003e58:	4798      	blx	r3
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20000724 	.word	0x20000724

08003e6c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	4603      	mov	r3, r0
 8003e74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <disk_initialize+0x48>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d111      	bne.n	8003ea8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	4a0b      	ldr	r2, [pc, #44]	; (8003eb4 <disk_initialize+0x48>)
 8003e88:	2101      	movs	r1, #1
 8003e8a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <disk_initialize+0x48>)
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	79fa      	ldrb	r2, [r7, #7]
 8003e9a:	4906      	ldr	r1, [pc, #24]	; (8003eb4 <disk_initialize+0x48>)
 8003e9c:	440a      	add	r2, r1
 8003e9e:	7a12      	ldrb	r2, [r2, #8]
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4798      	blx	r3
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000724 	.word	0x20000724

08003eb8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60b9      	str	r1, [r7, #8]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	4a0a      	ldr	r2, [pc, #40]	; (8003ef4 <disk_read+0x3c>)
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4413      	add	r3, r2
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	689c      	ldr	r4, [r3, #8]
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	4a07      	ldr	r2, [pc, #28]	; (8003ef4 <disk_read+0x3c>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	7a18      	ldrb	r0, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	47a0      	blx	r4
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000724 	.word	0x20000724

08003ef8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ef8:	b590      	push	{r4, r7, lr}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <disk_write+0x3c>)
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68dc      	ldr	r4, [r3, #12]
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <disk_write+0x3c>)
 8003f18:	4413      	add	r3, r2
 8003f1a:	7a18      	ldrb	r0, [r3, #8]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	47a0      	blx	r4
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd90      	pop	{r4, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000724 	.word	0x20000724

08003f38 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	603a      	str	r2, [r7, #0]
 8003f42:	71fb      	strb	r3, [r7, #7]
 8003f44:	460b      	mov	r3, r1
 8003f46:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <disk_ioctl+0x38>)
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	79fa      	ldrb	r2, [r7, #7]
 8003f56:	4906      	ldr	r1, [pc, #24]	; (8003f70 <disk_ioctl+0x38>)
 8003f58:	440a      	add	r2, r1
 8003f5a:	7a10      	ldrb	r0, [r2, #8]
 8003f5c:	79b9      	ldrb	r1, [r7, #6]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	4798      	blx	r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000724 	.word	0x20000724

08003f74 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	b21a      	sxth	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b21b      	sxth	r3, r3
 8003f94:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f96:	89fb      	ldrh	r3, [r7, #14]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3303      	adds	r3, #3
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	3202      	adds	r2, #2
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	3201      	adds	r2, #1
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	0a1b      	lsrs	r3, r3, #8
 800403a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	701a      	strb	r2, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1c5a      	adds	r2, r3, #1
 8004064:	607a      	str	r2, [r7, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]
}
 800406c:	bf00      	nop
 800406e:	370c      	adds	r7, #12
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00d      	beq.n	80040ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	1c53      	adds	r3, r2, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1c59      	adds	r1, r3, #1
 800409c:	6179      	str	r1, [r7, #20]
 800409e:	7812      	ldrb	r2, [r2, #0]
 80040a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f1      	bne.n	8004092 <mem_cpy+0x1a>
	}
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040ba:	b480      	push	{r7}
 80040bc:	b087      	sub	sp, #28
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	617a      	str	r2, [r7, #20]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3b01      	subs	r3, #1
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f3      	bne.n	80040ca <mem_set+0x10>
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040f0:	b480      	push	{r7}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	61ba      	str	r2, [r7, #24]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	1acb      	subs	r3, r1, r3
 800411c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3b01      	subs	r3, #1
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <mem_cmp+0x40>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0eb      	beq.n	8004108 <mem_cmp+0x18>

	return r;
 8004130:	697b      	ldr	r3, [r7, #20]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004148:	e002      	b.n	8004150 <chk_chr+0x12>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3301      	adds	r3, #1
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <chk_chr+0x26>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4293      	cmp	r3, r2
 8004162:	d1f2      	bne.n	800414a <chk_chr+0xc>
	return *str;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	781b      	ldrb	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e029      	b.n	80041dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <chk_lock+0xb4>)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01d      	beq.n	80041d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004196:	4a24      	ldr	r2, [pc, #144]	; (8004228 <chk_lock+0xb4>)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	4413      	add	r3, r2
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d116      	bne.n	80041d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <chk_lock+0xb4>)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	4413      	add	r3, r2
 80041b0:	3304      	adds	r3, #4
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d10c      	bne.n	80041d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041bc:	4a1a      	ldr	r2, [pc, #104]	; (8004228 <chk_lock+0xb4>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	4413      	add	r3, r2
 80041c4:	3308      	adds	r3, #8
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d102      	bne.n	80041d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041d0:	e007      	b.n	80041e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3301      	adds	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d9d2      	bls.n	8004188 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d109      	bne.n	80041fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <chk_lock+0x80>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d101      	bne.n	80041f8 <chk_lock+0x84>
 80041f4:	2300      	movs	r3, #0
 80041f6:	e010      	b.n	800421a <chk_lock+0xa6>
 80041f8:	2312      	movs	r3, #18
 80041fa:	e00e      	b.n	800421a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <chk_lock+0xa0>
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <chk_lock+0xb4>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	4413      	add	r3, r2
 800420a:	330c      	adds	r3, #12
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004212:	d101      	bne.n	8004218 <chk_lock+0xa4>
 8004214:	2310      	movs	r3, #16
 8004216:	e000      	b.n	800421a <chk_lock+0xa6>
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000704 	.word	0x20000704

0800422c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004232:	2300      	movs	r3, #0
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e002      	b.n	800423e <enq_lock+0x12>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3301      	adds	r3, #1
 800423c:	607b      	str	r3, [r7, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d806      	bhi.n	8004252 <enq_lock+0x26>
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <enq_lock+0x40>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	4413      	add	r3, r2
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f2      	bne.n	8004238 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b02      	cmp	r3, #2
 8004256:	bf14      	ite	ne
 8004258:	2301      	movne	r3, #1
 800425a:	2300      	moveq	r3, #0
 800425c:	b2db      	uxtb	r3, r3
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000704 	.word	0x20000704

08004270 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e01f      	b.n	80042c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004280:	4a41      	ldr	r2, [pc, #260]	; (8004388 <inc_lock+0x118>)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	4413      	add	r3, r2
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d113      	bne.n	80042ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004292:	4a3d      	ldr	r2, [pc, #244]	; (8004388 <inc_lock+0x118>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	3304      	adds	r3, #4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d109      	bne.n	80042ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80042a6:	4a38      	ldr	r2, [pc, #224]	; (8004388 <inc_lock+0x118>)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	4413      	add	r3, r2
 80042ae:	3308      	adds	r3, #8
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d006      	beq.n	80042c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3301      	adds	r3, #1
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d9dc      	bls.n	8004280 <inc_lock+0x10>
 80042c6:	e000      	b.n	80042ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d132      	bne.n	8004336 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e002      	b.n	80042dc <inc_lock+0x6c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	3301      	adds	r3, #1
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d806      	bhi.n	80042f0 <inc_lock+0x80>
 80042e2:	4a29      	ldr	r2, [pc, #164]	; (8004388 <inc_lock+0x118>)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4413      	add	r3, r2
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f2      	bne.n	80042d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d101      	bne.n	80042fa <inc_lock+0x8a>
 80042f6:	2300      	movs	r3, #0
 80042f8:	e040      	b.n	800437c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4922      	ldr	r1, [pc, #136]	; (8004388 <inc_lock+0x118>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	440b      	add	r3, r1
 8004306:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	491e      	ldr	r1, [pc, #120]	; (8004388 <inc_lock+0x118>)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	440b      	add	r3, r1
 8004314:	3304      	adds	r3, #4
 8004316:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	491a      	ldr	r1, [pc, #104]	; (8004388 <inc_lock+0x118>)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	440b      	add	r3, r1
 8004324:	3308      	adds	r3, #8
 8004326:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004328:	4a17      	ldr	r2, [pc, #92]	; (8004388 <inc_lock+0x118>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	330c      	adds	r3, #12
 8004332:	2200      	movs	r2, #0
 8004334:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <inc_lock+0xe0>
 800433c:	4a12      	ldr	r2, [pc, #72]	; (8004388 <inc_lock+0x118>)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	4413      	add	r3, r2
 8004344:	330c      	adds	r3, #12
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <inc_lock+0xe0>
 800434c:	2300      	movs	r3, #0
 800434e:	e015      	b.n	800437c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <inc_lock+0xf8>
 8004356:	4a0c      	ldr	r2, [pc, #48]	; (8004388 <inc_lock+0x118>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	330c      	adds	r3, #12
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	3301      	adds	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	e001      	b.n	800436c <inc_lock+0xfc>
 8004368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <inc_lock+0x118>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	440b      	add	r3, r1
 8004374:	330c      	adds	r3, #12
 8004376:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	20000704 	.word	0x20000704

0800438c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d825      	bhi.n	80043ec <dec_lock+0x60>
		n = Files[i].ctr;
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <dec_lock+0x74>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	330c      	adds	r3, #12
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80043ae:	89fb      	ldrh	r3, [r7, #14]
 80043b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b4:	d101      	bne.n	80043ba <dec_lock+0x2e>
 80043b6:	2300      	movs	r3, #0
 80043b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80043ba:	89fb      	ldrh	r3, [r7, #14]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <dec_lock+0x3a>
 80043c0:	89fb      	ldrh	r3, [r7, #14]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <dec_lock+0x74>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	330c      	adds	r3, #12
 80043d0:	89fa      	ldrh	r2, [r7, #14]
 80043d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043d4:	89fb      	ldrh	r3, [r7, #14]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d105      	bne.n	80043e6 <dec_lock+0x5a>
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <dec_lock+0x74>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	737b      	strb	r3, [r7, #13]
 80043ea:	e001      	b.n	80043f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043ec:	2302      	movs	r3, #2
 80043ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000704 	.word	0x20000704

08004404 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800440c:	2300      	movs	r3, #0
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	e010      	b.n	8004434 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <clear_lock+0x44>)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	4413      	add	r3, r2
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	429a      	cmp	r2, r3
 8004420:	d105      	bne.n	800442e <clear_lock+0x2a>
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <clear_lock+0x44>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	4413      	add	r3, r2
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d9eb      	bls.n	8004412 <clear_lock+0xe>
	}
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	20000704 	.word	0x20000704

0800444c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	78db      	ldrb	r3, [r3, #3]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d034      	beq.n	80044ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004464:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	7858      	ldrb	r0, [r3, #1]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004470:	2301      	movs	r3, #1
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f7ff fd40 	bl	8003ef8 <disk_write>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <sync_window+0x38>
			res = FR_DISK_ERR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
 8004482:	e022      	b.n	80044ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	1ad2      	subs	r2, r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	429a      	cmp	r2, r3
 8004498:	d217      	bcs.n	80044ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	789b      	ldrb	r3, [r3, #2]
 800449e:	613b      	str	r3, [r7, #16]
 80044a0:	e010      	b.n	80044c4 <sync_window+0x78>
					wsect += fs->fsize;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7858      	ldrb	r0, [r3, #1]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80044b6:	2301      	movs	r3, #1
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	f7ff fd1d 	bl	8003ef8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d8eb      	bhi.n	80044a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d01b      	beq.n	8004524 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ffad 	bl	800444c <sync_window>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d113      	bne.n	8004524 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	7858      	ldrb	r0, [r3, #1]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004506:	2301      	movs	r3, #1
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	f7ff fcd5 	bl	8003eb8 <disk_read>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d004      	beq.n	800451e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004514:	f04f 33ff 	mov.w	r3, #4294967295
 8004518:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff87 	bl	800444c <sync_window>
 800453e:	4603      	mov	r3, r0
 8004540:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d158      	bne.n	80045fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d148      	bne.n	80045e2 <sync_fs+0xb2>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	791b      	ldrb	r3, [r3, #4]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d144      	bne.n	80045e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3330      	adds	r3, #48	; 0x30
 800455c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004560:	2100      	movs	r1, #0
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff fda9 	bl	80040ba <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3330      	adds	r3, #48	; 0x30
 800456c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004570:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004574:	4618      	mov	r0, r3
 8004576:	f7ff fd38 	bl	8003fea <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3330      	adds	r3, #48	; 0x30
 800457e:	4921      	ldr	r1, [pc, #132]	; (8004604 <sync_fs+0xd4>)
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff fd4d 	bl	8004020 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3330      	adds	r3, #48	; 0x30
 800458a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800458e:	491e      	ldr	r1, [pc, #120]	; (8004608 <sync_fs+0xd8>)
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fd45 	bl	8004020 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	3330      	adds	r3, #48	; 0x30
 800459a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7ff fd3b 	bl	8004020 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3330      	adds	r3, #48	; 0x30
 80045ae:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7ff fd31 	bl	8004020 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	7858      	ldrb	r0, [r3, #1]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d6:	2301      	movs	r3, #1
 80045d8:	f7ff fc8e 	bl	8003ef8 <disk_write>
			fs->fsi_flag = 0;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2200      	movs	r2, #0
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fca4 	bl	8003f38 <disk_ioctl>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <sync_fs+0xca>
 80045f6:	2301      	movs	r3, #1
 80045f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	41615252 	.word	0x41615252
 8004608:	61417272 	.word	0x61417272

0800460c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	3b02      	subs	r3, #2
 800461a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	3b02      	subs	r3, #2
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d301      	bcc.n	800462c <clust2sect+0x20>
 8004628:	2300      	movs	r3, #0
 800462a:	e008      	b.n	800463e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	895b      	ldrh	r3, [r3, #10]
 8004630:	461a      	mov	r2, r3
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	fb03 f202 	mul.w	r2, r3, r2
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	4413      	add	r3, r2
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b086      	sub	sp, #24
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
 8004652:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d904      	bls.n	800466a <get_fat+0x20>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <get_fat+0x26>
		val = 1;	/* Internal error */
 800466a:	2301      	movs	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e08f      	b.n	8004790 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004670:	f04f 33ff 	mov.w	r3, #4294967295
 8004674:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d062      	beq.n	8004744 <get_fat+0xfa>
 800467e:	2b03      	cmp	r3, #3
 8004680:	dc7c      	bgt.n	800477c <get_fat+0x132>
 8004682:	2b01      	cmp	r3, #1
 8004684:	d002      	beq.n	800468c <get_fat+0x42>
 8004686:	2b02      	cmp	r3, #2
 8004688:	d042      	beq.n	8004710 <get_fat+0xc6>
 800468a:	e077      	b.n	800477c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6a1a      	ldr	r2, [r3, #32]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	0a5b      	lsrs	r3, r3, #9
 80046a2:	4413      	add	r3, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	6938      	ldr	r0, [r7, #16]
 80046a8:	f7ff ff14 	bl	80044d4 <move_window>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d167      	bne.n	8004782 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	60fa      	str	r2, [r7, #12]
 80046b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	0a5b      	lsrs	r3, r3, #9
 80046ce:	4413      	add	r3, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7ff fefe 	bl	80044d4 <move_window>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d153      	bne.n	8004786 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4413      	add	r3, r2
 80046e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <get_fat+0xbc>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	e002      	b.n	800470c <get_fat+0xc2>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470c:	617b      	str	r3, [r7, #20]
			break;
 800470e:	e03f      	b.n	8004790 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	4413      	add	r3, r2
 800471a:	4619      	mov	r1, r3
 800471c:	6938      	ldr	r0, [r7, #16]
 800471e:	f7ff fed9 	bl	80044d4 <move_window>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d130      	bne.n	800478a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004736:	4413      	add	r3, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fc1b 	bl	8003f74 <ld_word>
 800473e:	4603      	mov	r3, r0
 8004740:	617b      	str	r3, [r7, #20]
			break;
 8004742:	e025      	b.n	8004790 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6a1a      	ldr	r2, [r3, #32]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	09db      	lsrs	r3, r3, #7
 800474c:	4413      	add	r3, r2
 800474e:	4619      	mov	r1, r3
 8004750:	6938      	ldr	r0, [r7, #16]
 8004752:	f7ff febf 	bl	80044d4 <move_window>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d118      	bne.n	800478e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800476a:	4413      	add	r3, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fc19 	bl	8003fa4 <ld_dword>
 8004772:	4603      	mov	r3, r0
 8004774:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004778:	617b      	str	r3, [r7, #20]
			break;
 800477a:	e009      	b.n	8004790 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e006      	b.n	8004790 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800478e:	bf00      	nop
		}
	}

	return val;
 8004790:	697b      	ldr	r3, [r7, #20]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800479a:	b590      	push	{r4, r7, lr}
 800479c:	b089      	sub	sp, #36	; 0x24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	f240 80d9 	bls.w	8004964 <put_fat+0x1ca>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	f080 80d3 	bcs.w	8004964 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	f000 8096 	beq.w	80048f4 <put_fat+0x15a>
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	f300 80cb 	bgt.w	8004964 <put_fat+0x1ca>
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d002      	beq.n	80047d8 <put_fat+0x3e>
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d06e      	beq.n	80048b4 <put_fat+0x11a>
 80047d6:	e0c5      	b.n	8004964 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	085b      	lsrs	r3, r3, #1
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4413      	add	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	0a5b      	lsrs	r3, r3, #9
 80047ee:	4413      	add	r3, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	f7ff fe6e 	bl	80044d4 <move_window>
 80047f8:	4603      	mov	r3, r0
 80047fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80047fc:	7ffb      	ldrb	r3, [r7, #31]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 80a9 	bne.w	8004956 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	1c59      	adds	r1, r3, #1
 800480e:	61b9      	str	r1, [r7, #24]
 8004810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004814:	4413      	add	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00d      	beq.n	800483e <put_fat+0xa4>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b25b      	sxtb	r3, r3
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	b25a      	sxtb	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	b25b      	sxtb	r3, r3
 8004836:	4313      	orrs	r3, r2
 8004838:	b25b      	sxtb	r3, r3
 800483a:	b2db      	uxtb	r3, r3
 800483c:	e001      	b.n	8004842 <put_fat+0xa8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2201      	movs	r2, #1
 800484a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1a      	ldr	r2, [r3, #32]
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	0a5b      	lsrs	r3, r3, #9
 8004854:	4413      	add	r3, r2
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff fe3b 	bl	80044d4 <move_window>
 800485e:	4603      	mov	r3, r0
 8004860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004862:	7ffb      	ldrb	r3, [r7, #31]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d178      	bne.n	800495a <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	4413      	add	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <put_fat+0xf0>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	b2db      	uxtb	r3, r3
 8004888:	e00e      	b.n	80048a8 <put_fat+0x10e>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	b25b      	sxtb	r3, r3
 8004890:	f023 030f 	bic.w	r3, r3, #15
 8004894:	b25a      	sxtb	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0a1b      	lsrs	r3, r3, #8
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	b25b      	sxtb	r3, r3
 80048a2:	4313      	orrs	r3, r2
 80048a4:	b25b      	sxtb	r3, r3
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	70da      	strb	r2, [r3, #3]
			break;
 80048b2:	e057      	b.n	8004964 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1a      	ldr	r2, [r3, #32]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	4413      	add	r3, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fe07 	bl	80044d4 <move_window>
 80048c6:	4603      	mov	r3, r0
 80048c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048ca:	7ffb      	ldrb	r3, [r7, #31]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d146      	bne.n	800495e <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80048de:	4413      	add	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	b292      	uxth	r2, r2
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fb7f 	bl	8003fea <st_word>
			fs->wflag = 1;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	70da      	strb	r2, [r3, #3]
			break;
 80048f2:	e037      	b.n	8004964 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	09db      	lsrs	r3, r3, #7
 80048fc:	4413      	add	r3, r2
 80048fe:	4619      	mov	r1, r3
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f7ff fde7 	bl	80044d4 <move_window>
 8004906:	4603      	mov	r3, r0
 8004908:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800490a:	7ffb      	ldrb	r3, [r7, #31]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d128      	bne.n	8004962 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004924:	4413      	add	r3, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fb3c 	bl	8003fa4 <ld_dword>
 800492c:	4603      	mov	r3, r0
 800492e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004932:	4323      	orrs	r3, r4
 8004934:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004944:	4413      	add	r3, r2
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fb69 	bl	8004020 <st_dword>
			fs->wflag = 1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	70da      	strb	r2, [r3, #3]
			break;
 8004954:	e006      	b.n	8004964 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004956:	bf00      	nop
 8004958:	e004      	b.n	8004964 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800495a:	bf00      	nop
 800495c:	e002      	b.n	8004964 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800495e:	bf00      	nop
 8004960:	e000      	b.n	8004964 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8004962:	bf00      	nop
		}
	}
	return res;
 8004964:	7ffb      	ldrb	r3, [r7, #31]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd90      	pop	{r4, r7, pc}

0800496e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b088      	sub	sp, #32
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d904      	bls.n	8004994 <remove_chain+0x26>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d301      	bcc.n	8004998 <remove_chain+0x2a>
 8004994:	2302      	movs	r3, #2
 8004996:	e04b      	b.n	8004a30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	69b8      	ldr	r0, [r7, #24]
 80049a6:	f7ff fef8 	bl	800479a <put_fat>
 80049aa:	4603      	mov	r3, r0
 80049ac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80049ae:	7ffb      	ldrb	r3, [r7, #31]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <remove_chain+0x4a>
 80049b4:	7ffb      	ldrb	r3, [r7, #31]
 80049b6:	e03b      	b.n	8004a30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff fe45 	bl	800464a <get_fat>
 80049c0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d031      	beq.n	8004a2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d101      	bne.n	80049d2 <remove_chain+0x64>
 80049ce:	2302      	movs	r3, #2
 80049d0:	e02e      	b.n	8004a30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d101      	bne.n	80049de <remove_chain+0x70>
 80049da:	2301      	movs	r3, #1
 80049dc:	e028      	b.n	8004a30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80049de:	2200      	movs	r2, #0
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	69b8      	ldr	r0, [r7, #24]
 80049e4:	f7ff fed9 	bl	800479a <put_fat>
 80049e8:	4603      	mov	r3, r0
 80049ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80049ec:	7ffb      	ldrb	r3, [r7, #31]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <remove_chain+0x88>
 80049f2:	7ffb      	ldrb	r3, [r7, #31]
 80049f4:	e01c      	b.n	8004a30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	3b02      	subs	r3, #2
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d20b      	bcs.n	8004a1c <remove_chain+0xae>
			fs->free_clst++;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	791b      	ldrb	r3, [r3, #4]
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3c6      	bcc.n	80049b8 <remove_chain+0x4a>
 8004a2a:	e000      	b.n	8004a2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10d      	bne.n	8004a6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <create_chain+0x2c>
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d31b      	bcc.n	8004a9c <create_chain+0x64>
 8004a64:	2301      	movs	r3, #1
 8004a66:	61bb      	str	r3, [r7, #24]
 8004a68:	e018      	b.n	8004a9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fdec 	bl	800464a <get_fat>
 8004a72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d801      	bhi.n	8004a7e <create_chain+0x46>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e070      	b.n	8004b60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d101      	bne.n	8004a8a <create_chain+0x52>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e06a      	b.n	8004b60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d201      	bcs.n	8004a98 <create_chain+0x60>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	e063      	b.n	8004b60 <create_chain+0x128>
		scl = clst;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d307      	bcc.n	8004ac0 <create_chain+0x88>
				ncl = 2;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d901      	bls.n	8004ac0 <create_chain+0x88>
 8004abc:	2300      	movs	r3, #0
 8004abe:	e04f      	b.n	8004b60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004ac0:	69f9      	ldr	r1, [r7, #28]
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff fdc1 	bl	800464a <get_fat>
 8004ac8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d003      	beq.n	8004ade <create_chain+0xa6>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d101      	bne.n	8004ae2 <create_chain+0xaa>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	e03e      	b.n	8004b60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d1da      	bne.n	8004aa0 <create_chain+0x68>
 8004aea:	2300      	movs	r3, #0
 8004aec:	e038      	b.n	8004b60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004aee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	6938      	ldr	r0, [r7, #16]
 8004af8:	f7ff fe4f 	bl	800479a <put_fat>
 8004afc:	4603      	mov	r3, r0
 8004afe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <create_chain+0xe2>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d006      	beq.n	8004b1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	6839      	ldr	r1, [r7, #0]
 8004b10:	6938      	ldr	r0, [r7, #16]
 8004b12:	f7ff fe42 	bl	800479a <put_fat>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d116      	bne.n	8004b4e <create_chain+0x116>
		fs->last_clst = ncl;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	3b02      	subs	r3, #2
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d804      	bhi.n	8004b3e <create_chain+0x106>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	791b      	ldrb	r3, [r3, #4]
 8004b42:	f043 0301 	orr.w	r3, r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	711a      	strb	r2, [r3, #4]
 8004b4c:	e007      	b.n	8004b5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <create_chain+0x122>
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e000      	b.n	8004b5c <create_chain+0x124>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004b5e:	69fb      	ldr	r3, [r7, #28]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3720      	adds	r7, #32
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	0a5b      	lsrs	r3, r3, #9
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	8952      	ldrh	r2, [r2, #10]
 8004b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1d1a      	adds	r2, r3, #4
 8004b92:	613a      	str	r2, [r7, #16]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <clmt_clust+0x3a>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e010      	b.n	8004bc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d307      	bcc.n	8004bba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004bb8:	e7e9      	b.n	8004b8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004bba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4413      	add	r3, r2
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be6:	d204      	bcs.n	8004bf2 <dir_sdi+0x22>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	f003 031f 	and.w	r3, r3, #31
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e063      	b.n	8004cbe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d106      	bne.n	8004c16 <dir_sdi+0x46>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d902      	bls.n	8004c16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10c      	bne.n	8004c36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	8912      	ldrh	r2, [r2, #8]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d301      	bcc.n	8004c2c <dir_sdi+0x5c>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e048      	b.n	8004cbe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	61da      	str	r2, [r3, #28]
 8004c34:	e029      	b.n	8004c8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	895b      	ldrh	r3, [r3, #10]
 8004c3a:	025b      	lsls	r3, r3, #9
 8004c3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c3e:	e019      	b.n	8004c74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fd00 	bl	800464a <get_fat>
 8004c4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d101      	bne.n	8004c58 <dir_sdi+0x88>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e032      	b.n	8004cbe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d904      	bls.n	8004c68 <dir_sdi+0x98>
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d301      	bcc.n	8004c6c <dir_sdi+0x9c>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e028      	b.n	8004cbe <dir_sdi+0xee>
			ofs -= csz;
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d2e1      	bcs.n	8004c40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004c7c:	6979      	ldr	r1, [r7, #20]
 8004c7e:	6938      	ldr	r0, [r7, #16]
 8004c80:	f7ff fcc4 	bl	800460c <clust2sect>
 8004c84:	4602      	mov	r2, r0
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <dir_sdi+0xcc>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e010      	b.n	8004cbe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	0a5b      	lsrs	r3, r3, #9
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb6:	441a      	add	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b086      	sub	sp, #24
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	3320      	adds	r3, #32
 8004cdc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <dir_next+0x28>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cec:	d301      	bcc.n	8004cf2 <dir_next+0x2c>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	e0aa      	b.n	8004e48 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f040 8098 	bne.w	8004e2e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	095b      	lsrs	r3, r3, #5
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	8912      	ldrh	r2, [r2, #8]
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	f0c0 8088 	bcc.w	8004e2e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	61da      	str	r2, [r3, #28]
 8004d24:	2304      	movs	r3, #4
 8004d26:	e08f      	b.n	8004e48 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	8952      	ldrh	r2, [r2, #10]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	4013      	ands	r3, r2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d17a      	bne.n	8004e2e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7ff fc82 	bl	800464a <get_fat>
 8004d46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d801      	bhi.n	8004d52 <dir_next+0x8c>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e07a      	b.n	8004e48 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d101      	bne.n	8004d5e <dir_next+0x98>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e074      	b.n	8004e48 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d358      	bcc.n	8004e1a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d104      	bne.n	8004d78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	61da      	str	r2, [r3, #28]
 8004d74:	2304      	movs	r3, #4
 8004d76:	e067      	b.n	8004e48 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f7ff fe59 	bl	8004a38 <create_chain>
 8004d86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <dir_next+0xcc>
 8004d8e:	2307      	movs	r3, #7
 8004d90:	e05a      	b.n	8004e48 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <dir_next+0xd6>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e055      	b.n	8004e48 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d101      	bne.n	8004da8 <dir_next+0xe2>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e04f      	b.n	8004e48 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fb4f 	bl	800444c <sync_window>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <dir_next+0xf2>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e047      	b.n	8004e48 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3330      	adds	r3, #48	; 0x30
 8004dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff f979 	bl	80040ba <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff fc1c 	bl	800460c <clust2sect>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dda:	e012      	b.n	8004e02 <dir_next+0x13c>
						fs->wflag = 1;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fb32 	bl	800444c <sync_window>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <dir_next+0x12c>
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02a      	b.n	8004e48 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	3301      	adds	r3, #1
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	895b      	ldrh	r3, [r3, #10]
 8004e06:	461a      	mov	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d3e6      	bcc.n	8004ddc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004e20:	6979      	ldr	r1, [r7, #20]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7ff fbf2 	bl	800460c <clust2sect>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	441a      	add	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004e60:	2100      	movs	r1, #0
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff feb4 	bl	8004bd0 <dir_sdi>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d12b      	bne.n	8004eca <dir_alloc+0x7a>
		n = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fb29 	bl	80044d4 <move_window>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11d      	bne.n	8004ec8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2be5      	cmp	r3, #229	; 0xe5
 8004e94:	d004      	beq.n	8004ea0 <dir_alloc+0x50>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d102      	bne.n	8004eb4 <dir_alloc+0x64>
 8004eae:	e00c      	b.n	8004eca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff ff05 	bl	8004cc6 <dir_next>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0d7      	beq.n	8004e76 <dir_alloc+0x26>
 8004ec6:	e000      	b.n	8004eca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004ec8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004eca:	7dfb      	ldrb	r3, [r7, #23]
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d101      	bne.n	8004ed4 <dir_alloc+0x84>
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	75fb      	strb	r3, [r7, #23]
	return res;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	331a      	adds	r3, #26
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff f841 	bl	8003f74 <ld_word>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d109      	bne.n	8004f12 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7ff f836 	bl	8003f74 <ld_word>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	041b      	lsls	r3, r3, #16
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004f12:	68fb      	ldr	r3, [r7, #12]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	331a      	adds	r3, #26
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	b292      	uxth	r2, r2
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f859 	bl	8003fea <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d109      	bne.n	8004f54 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f103 0214 	add.w	r2, r3, #20
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7ff f84b 	bl	8003fea <st_word>
	}
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fe2f 	bl	8004bd0 <dir_sdi>
 8004f72:	4603      	mov	r3, r0
 8004f74:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <dir_find+0x24>
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	e03e      	b.n	8004ffe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4619      	mov	r1, r3
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f7ff faa4 	bl	80044d4 <move_window>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d12f      	bne.n	8004ff6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <dir_find+0x4e>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	75fb      	strb	r3, [r7, #23]
 8004fa8:	e028      	b.n	8004ffc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	330b      	adds	r3, #11
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb6:	b2da      	uxtb	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	330b      	adds	r3, #11
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <dir_find+0x86>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a18      	ldr	r0, [r3, #32]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	220b      	movs	r2, #11
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7ff f88a 	bl	80040f0 <mem_cmp>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff fe6e 	bl	8004cc6 <dir_next>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d0c5      	beq.n	8004f80 <dir_find+0x24>
 8004ff4:	e002      	b.n	8004ffc <dir_find+0xa0>
		if (res != FR_OK) break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004ffa:	bf00      	nop

	return res;
 8004ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005014:	2101      	movs	r1, #1
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7ff ff1a 	bl	8004e50 <dir_alloc>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11c      	bne.n	8005060 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	4619      	mov	r1, r3
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f7ff fa51 	bl	80044d4 <move_window>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d111      	bne.n	8005060 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	2220      	movs	r2, #32
 8005042:	2100      	movs	r1, #0
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff f838 	bl	80040ba <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a18      	ldr	r0, [r3, #32]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3324      	adds	r3, #36	; 0x24
 8005052:	220b      	movs	r2, #11
 8005054:	4619      	mov	r1, r3
 8005056:	f7ff f80f 	bl	8004078 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2201      	movs	r2, #1
 800505e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005060:	7bfb      	ldrb	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005082:	220b      	movs	r2, #11
 8005084:	2120      	movs	r1, #32
 8005086:	68b8      	ldr	r0, [r7, #8]
 8005088:	f7ff f817 	bl	80040ba <mem_set>
	si = i = 0; ni = 8;
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	2308      	movs	r3, #8
 8005096:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	61fa      	str	r2, [r7, #28]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80050a6:	7efb      	ldrb	r3, [r7, #27]
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d94e      	bls.n	800514a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80050ac:	7efb      	ldrb	r3, [r7, #27]
 80050ae:	2b2f      	cmp	r3, #47	; 0x2f
 80050b0:	d006      	beq.n	80050c0 <create_name+0x54>
 80050b2:	7efb      	ldrb	r3, [r7, #27]
 80050b4:	2b5c      	cmp	r3, #92	; 0x5c
 80050b6:	d110      	bne.n	80050da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80050b8:	e002      	b.n	80050c0 <create_name+0x54>
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b2f      	cmp	r3, #47	; 0x2f
 80050ca:	d0f6      	beq.n	80050ba <create_name+0x4e>
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	4413      	add	r3, r2
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b5c      	cmp	r3, #92	; 0x5c
 80050d6:	d0f0      	beq.n	80050ba <create_name+0x4e>
			break;
 80050d8:	e038      	b.n	800514c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80050da:	7efb      	ldrb	r3, [r7, #27]
 80050dc:	2b2e      	cmp	r3, #46	; 0x2e
 80050de:	d003      	beq.n	80050e8 <create_name+0x7c>
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d30c      	bcc.n	8005102 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b0b      	cmp	r3, #11
 80050ec:	d002      	beq.n	80050f4 <create_name+0x88>
 80050ee:	7efb      	ldrb	r3, [r7, #27]
 80050f0:	2b2e      	cmp	r3, #46	; 0x2e
 80050f2:	d001      	beq.n	80050f8 <create_name+0x8c>
 80050f4:	2306      	movs	r3, #6
 80050f6:	e044      	b.n	8005182 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80050f8:	2308      	movs	r3, #8
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	230b      	movs	r3, #11
 80050fe:	617b      	str	r3, [r7, #20]
			continue;
 8005100:	e022      	b.n	8005148 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005102:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da04      	bge.n	8005114 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800510a:	7efb      	ldrb	r3, [r7, #27]
 800510c:	3b80      	subs	r3, #128	; 0x80
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <create_name+0x120>)
 8005110:	5cd3      	ldrb	r3, [r2, r3]
 8005112:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005114:	7efb      	ldrb	r3, [r7, #27]
 8005116:	4619      	mov	r1, r3
 8005118:	481d      	ldr	r0, [pc, #116]	; (8005190 <create_name+0x124>)
 800511a:	f7ff f810 	bl	800413e <chk_chr>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <create_name+0xbc>
 8005124:	2306      	movs	r3, #6
 8005126:	e02c      	b.n	8005182 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005128:	7efb      	ldrb	r3, [r7, #27]
 800512a:	2b60      	cmp	r3, #96	; 0x60
 800512c:	d905      	bls.n	800513a <create_name+0xce>
 800512e:	7efb      	ldrb	r3, [r7, #27]
 8005130:	2b7a      	cmp	r3, #122	; 0x7a
 8005132:	d802      	bhi.n	800513a <create_name+0xce>
 8005134:	7efb      	ldrb	r3, [r7, #27]
 8005136:	3b20      	subs	r3, #32
 8005138:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	613a      	str	r2, [r7, #16]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4413      	add	r3, r2
 8005144:	7efa      	ldrb	r2, [r7, #27]
 8005146:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005148:	e7a6      	b.n	8005098 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800514a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	441a      	add	r2, r3
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <create_name+0xf4>
 800515c:	2306      	movs	r3, #6
 800515e:	e010      	b.n	8005182 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2be5      	cmp	r3, #229	; 0xe5
 8005166:	d102      	bne.n	800516e <create_name+0x102>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2205      	movs	r2, #5
 800516c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800516e:	7efb      	ldrb	r3, [r7, #27]
 8005170:	2b20      	cmp	r3, #32
 8005172:	d801      	bhi.n	8005178 <create_name+0x10c>
 8005174:	2204      	movs	r2, #4
 8005176:	e000      	b.n	800517a <create_name+0x10e>
 8005178:	2200      	movs	r2, #0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	330b      	adds	r3, #11
 800517e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005180:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	08007874 	.word	0x08007874
 8005190:	08007818 	.word	0x08007818

08005194 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80051a8:	e002      	b.n	80051b0 <follow_path+0x1c>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b2f      	cmp	r3, #47	; 0x2f
 80051b6:	d0f8      	beq.n	80051aa <follow_path+0x16>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b5c      	cmp	r3, #92	; 0x5c
 80051be:	d0f4      	beq.n	80051aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b1f      	cmp	r3, #31
 80051cc:	d80a      	bhi.n	80051e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80051d6:	2100      	movs	r1, #0
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff fcf9 	bl	8004bd0 <dir_sdi>
 80051de:	4603      	mov	r3, r0
 80051e0:	75fb      	strb	r3, [r7, #23]
 80051e2:	e043      	b.n	800526c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80051e4:	463b      	mov	r3, r7
 80051e6:	4619      	mov	r1, r3
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff ff3f 	bl	800506c <create_name>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d134      	bne.n	8005262 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff feaf 	bl	8004f5c <dir_find>
 80051fe:	4603      	mov	r3, r0
 8005200:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005208:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	2b04      	cmp	r3, #4
 8005214:	d127      	bne.n	8005266 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005216:	7afb      	ldrb	r3, [r7, #11]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d122      	bne.n	8005266 <follow_path+0xd2>
 8005220:	2305      	movs	r3, #5
 8005222:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005224:	e01f      	b.n	8005266 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005226:	7afb      	ldrb	r3, [r7, #11]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d11c      	bne.n	800526a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	799b      	ldrb	r3, [r3, #6]
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800523c:	2305      	movs	r3, #5
 800523e:	75fb      	strb	r3, [r7, #23]
 8005240:	e014      	b.n	800526c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005250:	4413      	add	r3, r2
 8005252:	4619      	mov	r1, r3
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fe42 	bl	8004ede <ld_clust>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005260:	e7c0      	b.n	80051e4 <follow_path+0x50>
			if (res != FR_OK) break;
 8005262:	bf00      	nop
 8005264:	e002      	b.n	800526c <follow_path+0xd8>
				break;
 8005266:	bf00      	nop
 8005268:	e000      	b.n	800526c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800526a:	bf00      	nop
			}
		}
	}

	return res;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800527e:	f04f 33ff 	mov.w	r3, #4294967295
 8005282:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d031      	beq.n	80052f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e002      	b.n	800529a <get_ldnumber+0x24>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3301      	adds	r3, #1
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d903      	bls.n	80052aa <get_ldnumber+0x34>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b3a      	cmp	r3, #58	; 0x3a
 80052a8:	d1f4      	bne.n	8005294 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b3a      	cmp	r3, #58	; 0x3a
 80052b0:	d11c      	bne.n	80052ec <get_ldnumber+0x76>
			tp = *path;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	60fa      	str	r2, [r7, #12]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	3b30      	subs	r3, #48	; 0x30
 80052c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d80e      	bhi.n	80052e8 <get_ldnumber+0x72>
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d10a      	bne.n	80052e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <get_ldnumber+0x72>
					vol = (int)i;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	e002      	b.n	80052f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80052f0:	693b      	ldr	r3, [r7, #16]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	70da      	strb	r2, [r3, #3]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f04f 32ff 	mov.w	r2, #4294967295
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff f8da 	bl	80044d4 <move_window>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <check_fs+0x2a>
 8005326:	2304      	movs	r3, #4
 8005328:	e038      	b.n	800539c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3330      	adds	r3, #48	; 0x30
 800532e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fe1e 	bl	8003f74 <ld_word>
 8005338:	4603      	mov	r3, r0
 800533a:	461a      	mov	r2, r3
 800533c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <check_fs+0x48>
 8005344:	2303      	movs	r3, #3
 8005346:	e029      	b.n	800539c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800534e:	2be9      	cmp	r3, #233	; 0xe9
 8005350:	d009      	beq.n	8005366 <check_fs+0x66>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005358:	2beb      	cmp	r3, #235	; 0xeb
 800535a:	d11e      	bne.n	800539a <check_fs+0x9a>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005362:	2b90      	cmp	r3, #144	; 0x90
 8005364:	d119      	bne.n	800539a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3330      	adds	r3, #48	; 0x30
 800536a:	3336      	adds	r3, #54	; 0x36
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fe19 	bl	8003fa4 <ld_dword>
 8005372:	4603      	mov	r3, r0
 8005374:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005378:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <check_fs+0xa4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <check_fs+0x82>
 800537e:	2300      	movs	r3, #0
 8005380:	e00c      	b.n	800539c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3330      	adds	r3, #48	; 0x30
 8005386:	3352      	adds	r3, #82	; 0x52
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fe0b 	bl	8003fa4 <ld_dword>
 800538e:	4603      	mov	r3, r0
 8005390:	4a05      	ldr	r2, [pc, #20]	; (80053a8 <check_fs+0xa8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d101      	bne.n	800539a <check_fs+0x9a>
 8005396:	2300      	movs	r3, #0
 8005398:	e000      	b.n	800539c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800539a:	2302      	movs	r3, #2
}
 800539c:	4618      	mov	r0, r3
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	00544146 	.word	0x00544146
 80053a8:	33544146 	.word	0x33544146

080053ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b096      	sub	sp, #88	; 0x58
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	4613      	mov	r3, r2
 80053b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff ff58 	bl	8005276 <get_ldnumber>
 80053c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	da01      	bge.n	80053d2 <find_volume+0x26>
 80053ce:	230b      	movs	r3, #11
 80053d0:	e22d      	b.n	800582e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80053d2:	4aa1      	ldr	r2, [pc, #644]	; (8005658 <find_volume+0x2ac>)
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <find_volume+0x3a>
 80053e2:	230c      	movs	r3, #12
 80053e4:	e223      	b.n	800582e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	785b      	ldrb	r3, [r3, #1]
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fd19 	bl	8003e38 <disk_status>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800540c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10c      	bne.n	8005432 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d007      	beq.n	800542e <find_volume+0x82>
 800541e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800542a:	230a      	movs	r3, #10
 800542c:	e1ff      	b.n	800582e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800542e:	2300      	movs	r3, #0
 8005430:	e1fd      	b.n	800582e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	b2da      	uxtb	r2, r3
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe fd11 	bl	8003e6c <disk_initialize>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005450:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800545c:	2303      	movs	r3, #3
 800545e:	e1e6      	b.n	800582e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <find_volume+0xca>
 8005466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005472:	230a      	movs	r3, #10
 8005474:	e1db      	b.n	800582e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800547a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800547c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800547e:	f7ff ff3f 	bl	8005300 <check_fs>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005488:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800548c:	2b02      	cmp	r3, #2
 800548e:	d149      	bne.n	8005524 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005490:	2300      	movs	r3, #0
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
 8005494:	e01e      	b.n	80054d4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800549c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80054a4:	4413      	add	r3, r2
 80054a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	3304      	adds	r3, #4
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <find_volume+0x114>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	3308      	adds	r3, #8
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe fd74 	bl	8003fa4 <ld_dword>
 80054bc:	4602      	mov	r2, r0
 80054be:	e000      	b.n	80054c2 <find_volume+0x116>
 80054c0:	2200      	movs	r2, #0
 80054c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	3358      	adds	r3, #88	; 0x58
 80054c8:	443b      	add	r3, r7
 80054ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80054ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d0:	3301      	adds	r3, #1
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
 80054d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d9dd      	bls.n	8005496 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80054da:	2300      	movs	r3, #0
 80054dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80054de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <find_volume+0x13e>
 80054e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e6:	3b01      	subs	r3, #1
 80054e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80054ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	3358      	adds	r3, #88	; 0x58
 80054f0:	443b      	add	r3, r7
 80054f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80054f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80054f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <find_volume+0x15e>
 80054fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005500:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005502:	f7ff fefd 	bl	8005300 <check_fs>
 8005506:	4603      	mov	r3, r0
 8005508:	e000      	b.n	800550c <find_volume+0x160>
 800550a:	2303      	movs	r3, #3
 800550c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005510:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005514:	2b01      	cmp	r3, #1
 8005516:	d905      	bls.n	8005524 <find_volume+0x178>
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	3301      	adds	r3, #1
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	2b03      	cmp	r3, #3
 8005522:	d9e2      	bls.n	80054ea <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005528:	2b04      	cmp	r3, #4
 800552a:	d101      	bne.n	8005530 <find_volume+0x184>
 800552c:	2301      	movs	r3, #1
 800552e:	e17e      	b.n	800582e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005530:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005534:	2b01      	cmp	r3, #1
 8005536:	d901      	bls.n	800553c <find_volume+0x190>
 8005538:	230d      	movs	r3, #13
 800553a:	e178      	b.n	800582e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800553c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553e:	3330      	adds	r3, #48	; 0x30
 8005540:	330b      	adds	r3, #11
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fd16 	bl	8003f74 <ld_word>
 8005548:	4603      	mov	r3, r0
 800554a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800554e:	d001      	beq.n	8005554 <find_volume+0x1a8>
 8005550:	230d      	movs	r3, #13
 8005552:	e16c      	b.n	800582e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	3330      	adds	r3, #48	; 0x30
 8005558:	3316      	adds	r3, #22
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fd0a 	bl	8003f74 <ld_word>
 8005560:	4603      	mov	r3, r0
 8005562:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <find_volume+0x1cc>
 800556a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556c:	3330      	adds	r3, #48	; 0x30
 800556e:	3324      	adds	r3, #36	; 0x24
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fd17 	bl	8003fa4 <ld_dword>
 8005576:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800557c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005586:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d005      	beq.n	800559c <find_volume+0x1f0>
 8005590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d001      	beq.n	800559c <find_volume+0x1f0>
 8005598:	230d      	movs	r3, #13
 800559a:	e148      	b.n	800582e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	789b      	ldrb	r3, [r3, #2]
 80055a0:	461a      	mov	r2, r3
 80055a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80055aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80055b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b8:	895b      	ldrh	r3, [r3, #10]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <find_volume+0x224>
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	895b      	ldrh	r3, [r3, #10]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	895b      	ldrh	r3, [r3, #10]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <find_volume+0x228>
 80055d0:	230d      	movs	r3, #13
 80055d2:	e12c      	b.n	800582e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	3330      	adds	r3, #48	; 0x30
 80055d8:	3311      	adds	r3, #17
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fcca 	bl	8003f74 <ld_word>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	891b      	ldrh	r3, [r3, #8]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <find_volume+0x24e>
 80055f6:	230d      	movs	r3, #13
 80055f8:	e119      	b.n	800582e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80055fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fc:	3330      	adds	r3, #48	; 0x30
 80055fe:	3313      	adds	r3, #19
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fcb7 	bl	8003f74 <ld_word>
 8005606:	4603      	mov	r3, r0
 8005608:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	2b00      	cmp	r3, #0
 800560e:	d106      	bne.n	800561e <find_volume+0x272>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	3330      	adds	r3, #48	; 0x30
 8005614:	3320      	adds	r3, #32
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe fcc4 	bl	8003fa4 <ld_dword>
 800561c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800561e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005620:	3330      	adds	r3, #48	; 0x30
 8005622:	330e      	adds	r3, #14
 8005624:	4618      	mov	r0, r3
 8005626:	f7fe fca5 	bl	8003f74 <ld_word>
 800562a:	4603      	mov	r3, r0
 800562c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800562e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <find_volume+0x28c>
 8005634:	230d      	movs	r3, #13
 8005636:	e0fa      	b.n	800582e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005638:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800563a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563c:	4413      	add	r3, r2
 800563e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005640:	8912      	ldrh	r2, [r2, #8]
 8005642:	0912      	lsrs	r2, r2, #4
 8005644:	b292      	uxth	r2, r2
 8005646:	4413      	add	r3, r2
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800564a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	429a      	cmp	r2, r3
 8005650:	d204      	bcs.n	800565c <find_volume+0x2b0>
 8005652:	230d      	movs	r3, #13
 8005654:	e0eb      	b.n	800582e <find_volume+0x482>
 8005656:	bf00      	nop
 8005658:	200006fc 	.word	0x200006fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800565c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005664:	8952      	ldrh	r2, [r2, #10]
 8005666:	fbb3 f3f2 	udiv	r3, r3, r2
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <find_volume+0x2ca>
 8005672:	230d      	movs	r3, #13
 8005674:	e0db      	b.n	800582e <find_volume+0x482>
		fmt = FS_FAT32;
 8005676:	2303      	movs	r3, #3
 8005678:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005682:	4293      	cmp	r3, r2
 8005684:	d802      	bhi.n	800568c <find_volume+0x2e0>
 8005686:	2302      	movs	r3, #2
 8005688:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005692:	4293      	cmp	r3, r2
 8005694:	d802      	bhi.n	800569c <find_volume+0x2f0>
 8005696:	2301      	movs	r3, #1
 8005698:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	1c9a      	adds	r2, r3, #2
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056a8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80056aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ae:	441a      	add	r2, r3
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80056b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	441a      	add	r2, r3
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80056be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d11e      	bne.n	8005704 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	3330      	adds	r3, #48	; 0x30
 80056ca:	332a      	adds	r3, #42	; 0x2a
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7fe fc51 	bl	8003f74 <ld_word>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <find_volume+0x330>
 80056d8:	230d      	movs	r3, #13
 80056da:	e0a8      	b.n	800582e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	891b      	ldrh	r3, [r3, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <find_volume+0x33c>
 80056e4:	230d      	movs	r3, #13
 80056e6:	e0a2      	b.n	800582e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	3330      	adds	r3, #48	; 0x30
 80056ec:	332c      	adds	r3, #44	; 0x2c
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fc58 	bl	8003fa4 <ld_dword>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	647b      	str	r3, [r7, #68]	; 0x44
 8005702:	e01f      	b.n	8005744 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	891b      	ldrh	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <find_volume+0x364>
 800570c:	230d      	movs	r3, #13
 800570e:	e08e      	b.n	800582e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	6a1a      	ldr	r2, [r3, #32]
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005716:	441a      	add	r2, r3
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800571c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005720:	2b02      	cmp	r3, #2
 8005722:	d103      	bne.n	800572c <find_volume+0x380>
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	e00a      	b.n	8005742 <find_volume+0x396>
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	695a      	ldr	r2, [r3, #20]
 8005730:	4613      	mov	r3, r2
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	4413      	add	r3, r2
 8005736:	085a      	lsrs	r2, r3, #1
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005742:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800574a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800574e:	0a5b      	lsrs	r3, r3, #9
 8005750:	429a      	cmp	r2, r3
 8005752:	d201      	bcs.n	8005758 <find_volume+0x3ac>
 8005754:	230d      	movs	r3, #13
 8005756:	e06a      	b.n	800582e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	611a      	str	r2, [r3, #16]
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576a:	2280      	movs	r2, #128	; 0x80
 800576c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800576e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005772:	2b03      	cmp	r3, #3
 8005774:	d149      	bne.n	800580a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	3330      	adds	r3, #48	; 0x30
 800577a:	3330      	adds	r3, #48	; 0x30
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fbf9 	bl	8003f74 <ld_word>
 8005782:	4603      	mov	r3, r0
 8005784:	2b01      	cmp	r3, #1
 8005786:	d140      	bne.n	800580a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800578a:	3301      	adds	r3, #1
 800578c:	4619      	mov	r1, r3
 800578e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005790:	f7fe fea0 	bl	80044d4 <move_window>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d137      	bne.n	800580a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	2200      	movs	r2, #0
 800579e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80057a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a2:	3330      	adds	r3, #48	; 0x30
 80057a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fe fbe3 	bl	8003f74 <ld_word>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d127      	bne.n	800580a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	3330      	adds	r3, #48	; 0x30
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fbf0 	bl	8003fa4 <ld_dword>
 80057c4:	4603      	mov	r3, r0
 80057c6:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <find_volume+0x48c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d11e      	bne.n	800580a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	3330      	adds	r3, #48	; 0x30
 80057d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe fbe5 	bl	8003fa4 <ld_dword>
 80057da:	4603      	mov	r3, r0
 80057dc:	4a17      	ldr	r2, [pc, #92]	; (800583c <find_volume+0x490>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	3330      	adds	r3, #48	; 0x30
 80057e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fbda 	bl	8003fa4 <ld_dword>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	3330      	adds	r3, #48	; 0x30
 80057fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fe fbd0 	bl	8003fa4 <ld_dword>
 8005804:	4602      	mov	r2, r0
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005810:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005812:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <find_volume+0x494>)
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <find_volume+0x494>)
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	4b08      	ldr	r3, [pc, #32]	; (8005840 <find_volume+0x494>)
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005826:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005828:	f7fe fdec 	bl	8004404 <clear_lock>
#endif
	return FR_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3758      	adds	r7, #88	; 0x58
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	41615252 	.word	0x41615252
 800583c:	61417272 	.word	0x61417272
 8005840:	20000700 	.word	0x20000700

08005844 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800584e:	2309      	movs	r3, #9
 8005850:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01c      	beq.n	8005892 <validate+0x4e>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d018      	beq.n	8005892 <validate+0x4e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d013      	beq.n	8005892 <validate+0x4e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	889a      	ldrh	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	429a      	cmp	r2, r3
 8005876:	d10c      	bne.n	8005892 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fada 	bl	8003e38 <disk_status>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <validate+0x4e>
			res = FR_OK;
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005892:	7bfb      	ldrb	r3, [r7, #15]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <validate+0x5a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	e000      	b.n	80058a0 <validate+0x5c>
 800589e:	2300      	movs	r3, #0
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	6013      	str	r3, [r2, #0]
	return res;
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	4613      	mov	r3, r2
 80058bc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80058c2:	f107 0310 	add.w	r3, r7, #16
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fcd5 	bl	8005276 <get_ldnumber>
 80058cc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da01      	bge.n	80058d8 <f_mount+0x28>
 80058d4:	230b      	movs	r3, #11
 80058d6:	e02b      	b.n	8005930 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <f_mount+0x88>)
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80058e8:	69b8      	ldr	r0, [r7, #24]
 80058ea:	f7fe fd8b 	bl	8004404 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	490d      	ldr	r1, [pc, #52]	; (8005938 <f_mount+0x88>)
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <f_mount+0x66>
 8005910:	79fb      	ldrb	r3, [r7, #7]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d001      	beq.n	800591a <f_mount+0x6a>
 8005916:	2300      	movs	r3, #0
 8005918:	e00a      	b.n	8005930 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800591a:	f107 010c 	add.w	r1, r7, #12
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	2200      	movs	r2, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fd41 	bl	80053ac <find_volume>
 800592a:	4603      	mov	r3, r0
 800592c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3720      	adds	r7, #32
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200006fc 	.word	0x200006fc

0800593c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b098      	sub	sp, #96	; 0x60
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <f_open+0x18>
 8005950:	2309      	movs	r3, #9
 8005952:	e1ad      	b.n	8005cb0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005954:	79fb      	ldrb	r3, [r7, #7]
 8005956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800595a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800595c:	79fa      	ldrb	r2, [r7, #7]
 800595e:	f107 0110 	add.w	r1, r7, #16
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fd20 	bl	80053ac <find_volume>
 800596c:	4603      	mov	r3, r0
 800596e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005972:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 8191 	bne.w	8005c9e <f_open+0x362>
		dj.obj.fs = fs;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fc03 	bl	8005194 <follow_path>
 800598e:	4603      	mov	r3, r0
 8005990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005994:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11a      	bne.n	80059d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800599c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da03      	bge.n	80059ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80059a6:	2306      	movs	r3, #6
 80059a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80059ac:	e011      	b.n	80059d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	f023 0301 	bic.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	f107 0314 	add.w	r3, r7, #20
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fbd4 	bl	8004174 <chk_lock>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	f003 031c 	and.w	r3, r3, #28
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d07f      	beq.n	8005adc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80059dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d017      	beq.n	8005a14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80059e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d10e      	bne.n	8005a0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80059ec:	f7fe fc1e 	bl	800422c <enq_lock>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d006      	beq.n	8005a04 <f_open+0xc8>
 80059f6:	f107 0314 	add.w	r3, r7, #20
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff fb03 	bl	8005006 <dir_register>
 8005a00:	4603      	mov	r3, r0
 8005a02:	e000      	b.n	8005a06 <f_open+0xca>
 8005a04:	2312      	movs	r3, #18
 8005a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	71fb      	strb	r3, [r7, #7]
 8005a12:	e010      	b.n	8005a36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a14:	7ebb      	ldrb	r3, [r7, #26]
 8005a16:	f003 0311 	and.w	r3, r3, #17
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <f_open+0xea>
					res = FR_DENIED;
 8005a1e:	2307      	movs	r3, #7
 8005a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005a24:	e007      	b.n	8005a36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <f_open+0xfa>
 8005a30:	2308      	movs	r3, #8
 8005a32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d168      	bne.n	8005b10 <f_open+0x1d4>
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d063      	beq.n	8005b10 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005a48:	f7fe f998 	bl	8003d7c <get_fattime>
 8005a4c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	330e      	adds	r3, #14
 8005a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fe fae3 	bl	8004020 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	3316      	adds	r3, #22
 8005a5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fadd 	bl	8004020 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a68:	330b      	adds	r3, #11
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fa32 	bl	8004ede <ld_clust>
 8005a7a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a80:	2200      	movs	r2, #0
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fa4a 	bl	8004f1c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	331c      	adds	r3, #28
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fac6 	bl	8004020 <st_dword>
					fs->wflag = 1;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	2201      	movs	r2, #1
 8005a98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d037      	beq.n	8005b10 <f_open+0x1d4>
						dw = fs->winsect;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005aa6:	f107 0314 	add.w	r3, r7, #20
 8005aaa:	2200      	movs	r2, #0
 8005aac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fe ff5d 	bl	800496e <remove_chain>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005aba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d126      	bne.n	8005b10 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fd04 	bl	80044d4 <move_window>
 8005acc:	4603      	mov	r3, r0
 8005ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad6:	3a01      	subs	r2, #1
 8005ad8:	60da      	str	r2, [r3, #12]
 8005ada:	e019      	b.n	8005b10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d115      	bne.n	8005b10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005ae4:	7ebb      	ldrb	r3, [r7, #26]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8005aee:	2304      	movs	r3, #4
 8005af0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005af4:	e00c      	b.n	8005b10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <f_open+0x1d4>
 8005b00:	7ebb      	ldrb	r3, [r7, #26]
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <f_open+0x1d4>
						res = FR_DENIED;
 8005b0a:	2307      	movs	r3, #7
 8005b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d128      	bne.n	8005b6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	f003 0308 	and.w	r3, r3, #8
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b38:	79fb      	ldrb	r3, [r7, #7]
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf14      	ite	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	2300      	moveq	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	f107 0314 	add.w	r3, r7, #20
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe fb8d 	bl	8004270 <inc_lock>
 8005b56:	4602      	mov	r2, r0
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <f_open+0x22e>
 8005b64:	2302      	movs	r3, #2
 8005b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 8095 	bne.w	8005c9e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f9af 	bl	8004ede <ld_clust>
 8005b80:	4602      	mov	r2, r0
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	331c      	adds	r3, #28
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fa0a 	bl	8003fa4 <ld_dword>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	88da      	ldrh	r2, [r3, #6]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	79fa      	ldrb	r2, [r7, #7]
 8005bae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3330      	adds	r3, #48	; 0x30
 8005bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bca:	2100      	movs	r1, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe fa74 	bl	80040ba <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d060      	beq.n	8005c9e <f_open+0x362>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d05c      	beq.n	8005c9e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	895b      	ldrh	r3, [r3, #10]
 8005bf0:	025b      	lsls	r3, r3, #9
 8005bf2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8005c00:	e016      	b.n	8005c30 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fe fd1f 	bl	800464a <get_fat>
 8005c0c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005c0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d802      	bhi.n	8005c1a <f_open+0x2de>
 8005c14:	2302      	movs	r3, #2
 8005c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d102      	bne.n	8005c28 <f_open+0x2ec>
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d103      	bne.n	8005c40 <f_open+0x304>
 8005c38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d8e0      	bhi.n	8005c02 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d127      	bne.n	8005c9e <f_open+0x362>
 8005c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d022      	beq.n	8005c9e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fcd5 	bl	800460c <clust2sect>
 8005c62:	6478      	str	r0, [r7, #68]	; 0x44
 8005c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d103      	bne.n	8005c72 <f_open+0x336>
						res = FR_INT_ERR;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c70:	e015      	b.n	8005c9e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c74:	0a5a      	lsrs	r2, r3, #9
 8005c76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c78:	441a      	add	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	7858      	ldrb	r0, [r3, #1]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1a      	ldr	r2, [r3, #32]
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f7fe f913 	bl	8003eb8 <disk_read>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d002      	beq.n	8005c9e <f_open+0x362>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005c9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <f_open+0x370>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005cac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3760      	adds	r7, #96	; 0x60
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08e      	sub	sp, #56	; 0x38
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f107 0214 	add.w	r2, r7, #20
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fdb3 	bl	8005844 <validate>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d107      	bne.n	8005cfc <f_read+0x44>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	7d5b      	ldrb	r3, [r3, #21]
 8005cf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005cf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <f_read+0x4a>
 8005cfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d00:	e115      	b.n	8005f2e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	7d1b      	ldrb	r3, [r3, #20]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <f_read+0x5a>
 8005d0e:	2307      	movs	r3, #7
 8005d10:	e10d      	b.n	8005f2e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	f240 80fe 	bls.w	8005f24 <f_read+0x26c>
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005d2c:	e0fa      	b.n	8005f24 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 80c6 	bne.w	8005ec8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	0a5b      	lsrs	r3, r3, #9
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	8952      	ldrh	r2, [r2, #10]
 8005d46:	3a01      	subs	r2, #1
 8005d48:	4013      	ands	r3, r2
 8005d4a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d12f      	bne.n	8005db2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d60:	e013      	b.n	8005d8a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7fe fef9 	bl	8004b68 <clmt_clust>
 8005d76:	6338      	str	r0, [r7, #48]	; 0x30
 8005d78:	e007      	b.n	8005d8a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	4619      	mov	r1, r3
 8005d82:	4610      	mov	r0, r2
 8005d84:	f7fe fc61 	bl	800464a <get_fat>
 8005d88:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d804      	bhi.n	8005d9a <f_read+0xe2>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2202      	movs	r2, #2
 8005d94:	755a      	strb	r2, [r3, #21]
 8005d96:	2302      	movs	r3, #2
 8005d98:	e0c9      	b.n	8005f2e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d104      	bne.n	8005dac <f_read+0xf4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	755a      	strb	r2, [r3, #21]
 8005da8:	2301      	movs	r3, #1
 8005daa:	e0c0      	b.n	8005f2e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f7fe fc26 	bl	800460c <clust2sect>
 8005dc0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <f_read+0x11a>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	755a      	strb	r2, [r3, #21]
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0ad      	b.n	8005f2e <f_read+0x276>
			sect += csect;
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0a5b      	lsrs	r3, r3, #9
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d039      	beq.n	8005e5a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	4413      	add	r3, r2
 8005dec:	697a      	ldr	r2, [r7, #20]
 8005dee:	8952      	ldrh	r2, [r2, #10]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d905      	bls.n	8005e00 <f_read+0x148>
					cc = fs->csize - csect;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	895b      	ldrh	r3, [r3, #10]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	7858      	ldrb	r0, [r3, #1]
 8005e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e0a:	f7fe f855 	bl	8003eb8 <disk_read>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <f_read+0x166>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	755a      	strb	r2, [r3, #21]
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e087      	b.n	8005f2e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	7d1b      	ldrb	r3, [r3, #20]
 8005e22:	b25b      	sxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da14      	bge.n	8005e52 <f_read+0x19a>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a1a      	ldr	r2, [r3, #32]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d90d      	bls.n	8005e52 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	025b      	lsls	r3, r3, #9
 8005e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e42:	18d0      	adds	r0, r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3330      	adds	r3, #48	; 0x30
 8005e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f7fe f913 	bl	8004078 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	025b      	lsls	r3, r3, #9
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005e58:	e050      	b.n	8005efc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d02e      	beq.n	8005ec2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	7d1b      	ldrb	r3, [r3, #20]
 8005e68:	b25b      	sxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da18      	bge.n	8005ea0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	7858      	ldrb	r0, [r3, #1]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1a      	ldr	r2, [r3, #32]
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f7fe f83b 	bl	8003ef8 <disk_write>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <f_read+0x1da>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	755a      	strb	r2, [r3, #21]
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e04d      	b.n	8005f2e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	7d1b      	ldrb	r3, [r3, #20]
 8005e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	7858      	ldrb	r0, [r3, #1]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eaa:	2301      	movs	r3, #1
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	f7fe f803 	bl	8003eb8 <disk_read>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <f_read+0x20a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	755a      	strb	r2, [r3, #21]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e035      	b.n	8005f2e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d901      	bls.n	8005ee2 <f_read+0x22a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	4413      	add	r3, r2
 8005ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ef8:	f7fe f8be 	bl	8004078 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	4413      	add	r3, r2
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	699a      	ldr	r2, [r3, #24]
 8005f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0a:	441a      	add	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	619a      	str	r2, [r3, #24]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f16:	441a      	add	r2, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f47f af01 	bne.w	8005d2e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3738      	adds	r7, #56	; 0x38
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b08c      	sub	sp, #48	; 0x30
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f107 0210 	add.w	r2, r7, #16
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fc74 	bl	8005844 <validate>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <f_write+0x44>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	7d5b      	ldrb	r3, [r3, #21]
 8005f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <f_write+0x4a>
 8005f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f7e:	e14b      	b.n	8006218 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	7d1b      	ldrb	r3, [r3, #20]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <f_write+0x5a>
 8005f8c:	2307      	movs	r3, #7
 8005f8e:	e143      	b.n	8006218 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699a      	ldr	r2, [r3, #24]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	f080 812d 	bcs.w	80061fc <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005faa:	e127      	b.n	80061fc <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 80e3 	bne.w	8006180 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	0a5b      	lsrs	r3, r3, #9
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	8952      	ldrh	r2, [r2, #10]
 8005fc4:	3a01      	subs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d143      	bne.n	8006058 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10c      	bne.n	8005ff2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11a      	bne.n	800601a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fe fd25 	bl	8004a38 <create_chain>
 8005fee:	62b8      	str	r0, [r7, #40]	; 0x28
 8005ff0:	e013      	b.n	800601a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	4619      	mov	r1, r3
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7fe fdb1 	bl	8004b68 <clmt_clust>
 8006006:	62b8      	str	r0, [r7, #40]	; 0x28
 8006008:	e007      	b.n	800601a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4619      	mov	r1, r3
 8006012:	4610      	mov	r0, r2
 8006014:	f7fe fd10 	bl	8004a38 <create_chain>
 8006018:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80f2 	beq.w	8006206 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b01      	cmp	r3, #1
 8006026:	d104      	bne.n	8006032 <f_write+0xfc>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2202      	movs	r2, #2
 800602c:	755a      	strb	r2, [r3, #21]
 800602e:	2302      	movs	r3, #2
 8006030:	e0f2      	b.n	8006218 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d104      	bne.n	8006044 <f_write+0x10e>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	755a      	strb	r2, [r3, #21]
 8006040:	2301      	movs	r3, #1
 8006042:	e0e9      	b.n	8006218 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006048:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <f_write+0x122>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	7d1b      	ldrb	r3, [r3, #20]
 800605c:	b25b      	sxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	da18      	bge.n	8006094 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	7858      	ldrb	r0, [r3, #1]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	2301      	movs	r3, #1
 8006072:	f7fd ff41 	bl	8003ef8 <disk_write>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <f_write+0x150>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	755a      	strb	r2, [r3, #21]
 8006082:	2301      	movs	r3, #1
 8006084:	e0c8      	b.n	8006218 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	7d1b      	ldrb	r3, [r3, #20]
 800608a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4619      	mov	r1, r3
 800609c:	4610      	mov	r0, r2
 800609e:	f7fe fab5 	bl	800460c <clust2sect>
 80060a2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <f_write+0x17e>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2202      	movs	r2, #2
 80060ae:	755a      	strb	r2, [r3, #21]
 80060b0:	2302      	movs	r3, #2
 80060b2:	e0b1      	b.n	8006218 <f_write+0x2e2>
			sect += csect;
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	4413      	add	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0a5b      	lsrs	r3, r3, #9
 80060c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03c      	beq.n	8006142 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	4413      	add	r3, r2
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	8952      	ldrh	r2, [r2, #10]
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d905      	bls.n	80060e2 <f_write+0x1ac>
					cc = fs->csize - csect;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	895b      	ldrh	r3, [r3, #10]
 80060da:	461a      	mov	r2, r3
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	7858      	ldrb	r0, [r3, #1]
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	69f9      	ldr	r1, [r7, #28]
 80060ec:	f7fd ff04 	bl	8003ef8 <disk_write>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d004      	beq.n	8006100 <f_write+0x1ca>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	755a      	strb	r2, [r3, #21]
 80060fc:	2301      	movs	r3, #1
 80060fe:	e08b      	b.n	8006218 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a1a      	ldr	r2, [r3, #32]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	6a3a      	ldr	r2, [r7, #32]
 800610a:	429a      	cmp	r2, r3
 800610c:	d915      	bls.n	800613a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a1a      	ldr	r2, [r3, #32]
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	025b      	lsls	r3, r3, #9
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	4413      	add	r3, r2
 8006122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006126:	4619      	mov	r1, r3
 8006128:	f7fd ffa6 	bl	8004078 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	7d1b      	ldrb	r3, [r3, #20]
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	025b      	lsls	r3, r3, #9
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006140:	e03f      	b.n	80061c2 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	429a      	cmp	r2, r3
 800614a:	d016      	beq.n	800617a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	699a      	ldr	r2, [r3, #24]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006154:	429a      	cmp	r2, r3
 8006156:	d210      	bcs.n	800617a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	7858      	ldrb	r0, [r3, #1]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006162:	2301      	movs	r3, #1
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	f7fd fea7 	bl	8003eb8 <disk_read>
 800616a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	755a      	strb	r2, [r3, #21]
 8006176:	2301      	movs	r3, #1
 8006178:	e04e      	b.n	8006218 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800618e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d901      	bls.n	800619a <f_write+0x264>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	4413      	add	r3, r2
 80061aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ac:	69f9      	ldr	r1, [r7, #28]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fd ff62 	bl	8004078 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	7d1b      	ldrb	r3, [r3, #20]
 80061b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	4413      	add	r3, r2
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699a      	ldr	r2, [r3, #24]
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	441a      	add	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	619a      	str	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	429a      	cmp	r2, r3
 80061e0:	bf38      	it	cc
 80061e2:	461a      	movcc	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	60da      	str	r2, [r3, #12]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	441a      	add	r2, r3
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f aed4 	bne.w	8005fac <f_write+0x76>
 8006204:	e000      	b.n	8006208 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006206:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	7d1b      	ldrb	r3, [r3, #20]
 800620c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	; 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f107 0208 	add.w	r2, r7, #8
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f7ff fb07 	bl	8005844 <validate>
 8006236:	4603      	mov	r3, r0
 8006238:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d168      	bne.n	8006312 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7d1b      	ldrb	r3, [r3, #20]
 8006244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006248:	2b00      	cmp	r3, #0
 800624a:	d062      	beq.n	8006312 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7d1b      	ldrb	r3, [r3, #20]
 8006250:	b25b      	sxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	da15      	bge.n	8006282 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	7858      	ldrb	r0, [r3, #1]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1a      	ldr	r2, [r3, #32]
 8006264:	2301      	movs	r3, #1
 8006266:	f7fd fe47 	bl	8003ef8 <disk_write>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <f_sync+0x54>
 8006270:	2301      	movs	r3, #1
 8006272:	e04f      	b.n	8006314 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	7d1b      	ldrb	r3, [r3, #20]
 8006278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800627c:	b2da      	uxtb	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006282:	f7fd fd7b 	bl	8003d7c <get_fattime>
 8006286:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fe f91f 	bl	80044d4 <move_window>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d138      	bne.n	8006312 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	330b      	adds	r3, #11
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	330b      	adds	r3, #11
 80062b0:	f042 0220 	orr.w	r2, r2, #32
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6818      	ldr	r0, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68f9      	ldr	r1, [r7, #12]
 80062c4:	f7fe fe2a 	bl	8004f1c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f103 021c 	add.w	r2, r3, #28
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f7fd fea3 	bl	8004020 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3316      	adds	r3, #22
 80062de:	6939      	ldr	r1, [r7, #16]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fd fe9d 	bl	8004020 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3312      	adds	r3, #18
 80062ea:	2100      	movs	r1, #0
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fd fe7c 	bl	8003fea <st_word>
					fs->wflag = 1;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2201      	movs	r2, #1
 80062f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe f918 	bl	8004530 <sync_fs>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7d1b      	ldrb	r3, [r3, #20]
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	b2da      	uxtb	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006312:	7dfb      	ldrb	r3, [r7, #23]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3718      	adds	r7, #24
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ff7b 	bl	8006220 <f_sync>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d118      	bne.n	8006366 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f107 0208 	add.w	r2, r7, #8
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fa81 	bl	8005844 <validate>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10c      	bne.n	8006366 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe f81b 	bl	800438c <dec_lock>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b092      	sub	sp, #72	; 0x48
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800637c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006380:	f107 030c 	add.w	r3, r7, #12
 8006384:	2200      	movs	r2, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff f810 	bl	80053ac <find_volume>
 800638c:	4603      	mov	r3, r0
 800638e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 8099 	bne.w	80064ce <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800639c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	3b02      	subs	r3, #2
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d804      	bhi.n	80063ba <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	e089      	b.n	80064ce <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d128      	bne.n	8006418 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80063c6:	2302      	movs	r3, #2
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe f938 	bl	800464a <get_fat>
 80063da:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d103      	bne.n	80063ec <f_getfree+0x7c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063ea:	e063      	b.n	80064b4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80063ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d103      	bne.n	80063fa <f_getfree+0x8a>
 80063f2:	2302      	movs	r3, #2
 80063f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063f8:	e05c      	b.n	80064b4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d102      	bne.n	8006406 <f_getfree+0x96>
 8006400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006402:	3301      	adds	r3, #1
 8006404:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	3301      	adds	r3, #1
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006412:	429a      	cmp	r2, r3
 8006414:	d3db      	bcc.n	80063ce <f_getfree+0x5e>
 8006416:	e04d      	b.n	80064b4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	637b      	str	r3, [r7, #52]	; 0x34
 8006428:	2300      	movs	r3, #0
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	2b00      	cmp	r3, #0
 8006430:	d113      	bne.n	800645a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	63ba      	str	r2, [r7, #56]	; 0x38
 800643a:	4619      	mov	r1, r3
 800643c:	f7fe f84a 	bl	80044d4 <move_window>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8006446:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800644a:	2b00      	cmp	r3, #0
 800644c:	d131      	bne.n	80064b2 <f_getfree+0x142>
							p = fs->win;
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	3330      	adds	r3, #48	; 0x30
 8006452:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006458:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d10f      	bne.n	8006482 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006462:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006464:	f7fd fd86 	bl	8003f74 <ld_word>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d102      	bne.n	8006474 <f_getfree+0x104>
 800646e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006470:	3301      	adds	r3, #1
 8006472:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	3302      	adds	r3, #2
 8006478:	633b      	str	r3, [r7, #48]	; 0x30
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	3b02      	subs	r3, #2
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
 8006480:	e010      	b.n	80064a4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006484:	f7fd fd8e 	bl	8003fa4 <ld_dword>
 8006488:	4603      	mov	r3, r0
 800648a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d102      	bne.n	8006498 <f_getfree+0x128>
 8006492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006494:	3301      	adds	r3, #1
 8006496:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	3304      	adds	r3, #4
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
 800649e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a0:	3b04      	subs	r3, #4
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80064a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a6:	3b01      	subs	r3, #1
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1bd      	bne.n	800642c <f_getfree+0xbc>
 80064b0:	e000      	b.n	80064b4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80064b2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064b8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064be:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	791a      	ldrb	r2, [r3, #4]
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80064ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3748      	adds	r7, #72	; 0x48
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b096      	sub	sp, #88	; 0x58
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80064e2:	f107 0108 	add.w	r1, r7, #8
 80064e6:	1d3b      	adds	r3, r7, #4
 80064e8:	2202      	movs	r2, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7fe ff5e 	bl	80053ac <find_volume>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80064fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 80ec 	bne.w	80066dc <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	f107 030c 	add.w	r3, r7, #12
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe fe41 	bl	8005194 <follow_path>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8006518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <f_mkdir+0x4c>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8006526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800652a:	2b04      	cmp	r3, #4
 800652c:	f040 80d6 	bne.w	80066dc <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8006530:	f107 030c 	add.w	r3, r7, #12
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fa7e 	bl	8004a38 <create_chain>
 800653c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	025b      	lsls	r3, r3, #9
 8006544:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800654c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654e:	2b00      	cmp	r3, #0
 8006550:	d102      	bne.n	8006558 <f_mkdir+0x7e>
 8006552:	2307      	movs	r3, #7
 8006554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8006558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800655a:	2b01      	cmp	r3, #1
 800655c:	d102      	bne.n	8006564 <f_mkdir+0x8a>
 800655e:	2302      	movs	r3, #2
 8006560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656a:	d102      	bne.n	8006572 <f_mkdir+0x98>
 800656c:	2301      	movs	r3, #1
 800656e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8006572:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <f_mkdir+0xae>
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f7fd ff65 	bl	800444c <sync_window>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8006588:	f7fd fbf8 	bl	8003d7c <get_fattime>
 800658c:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800658e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006592:	2b00      	cmp	r3, #0
 8006594:	d16a      	bne.n	800666c <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe f836 	bl	800460c <clust2sect>
 80065a0:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	3330      	adds	r3, #48	; 0x30
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80065a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ac:	2100      	movs	r1, #0
 80065ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065b0:	f7fd fd83 	bl	80040ba <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80065b4:	220b      	movs	r2, #11
 80065b6:	2120      	movs	r1, #32
 80065b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065ba:	f7fd fd7e 	bl	80040ba <mem_set>
					dir[DIR_Name] = '.';
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	222e      	movs	r2, #46	; 0x2e
 80065c2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80065c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c6:	330b      	adds	r3, #11
 80065c8:	2210      	movs	r2, #16
 80065ca:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80065cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ce:	3316      	adds	r3, #22
 80065d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fd24 	bl	8004020 <st_dword>
					st_clust(fs, dir, dcl);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fe fc9c 	bl	8004f1c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	3320      	adds	r3, #32
 80065e8:	2220      	movs	r2, #32
 80065ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fd fd43 	bl	8004078 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80065f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f4:	3321      	adds	r3, #33	; 0x21
 80065f6:	222e      	movs	r2, #46	; 0x2e
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b03      	cmp	r3, #3
 8006604:	d106      	bne.n	8006614 <f_mkdir+0x13a>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800660c:	429a      	cmp	r2, r3
 800660e:	d101      	bne.n	8006614 <f_mkdir+0x13a>
 8006610:	2300      	movs	r3, #0
 8006612:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8006614:	68b8      	ldr	r0, [r7, #8]
 8006616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006618:	3320      	adds	r3, #32
 800661a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800661c:	4619      	mov	r1, r3
 800661e:	f7fe fc7d 	bl	8004f1c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	895b      	ldrh	r3, [r3, #10]
 8006626:	653b      	str	r3, [r7, #80]	; 0x50
 8006628:	e01b      	b.n	8006662 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800662a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	2201      	movs	r2, #1
 8006638:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fd ff05 	bl	800444c <sync_window>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8006648:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8006650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006654:	2100      	movs	r1, #0
 8006656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006658:	f7fd fd2f 	bl	80040ba <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800665c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800665e:	3b01      	subs	r3, #1
 8006660:	653b      	str	r3, [r7, #80]	; 0x50
 8006662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e0      	bne.n	800662a <f_mkdir+0x150>
 8006668:	e000      	b.n	800666c <f_mkdir+0x192>
					if (res != FR_OK) break;
 800666a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800666c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006670:	2b00      	cmp	r3, #0
 8006672:	d107      	bne.n	8006684 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	4618      	mov	r0, r3
 800667a:	f7fe fcc4 	bl	8005006 <dir_register>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8006684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006688:	2b00      	cmp	r3, #0
 800668a:	d120      	bne.n	80066ce <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8006690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006692:	3316      	adds	r3, #22
 8006694:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006696:	4618      	mov	r0, r3
 8006698:	f7fd fcc2 	bl	8004020 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fe fc3a 	bl	8004f1c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80066a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066aa:	330b      	adds	r3, #11
 80066ac:	2210      	movs	r2, #16
 80066ae:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	2201      	movs	r2, #1
 80066b4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80066b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10e      	bne.n	80066dc <f_mkdir+0x202>
					res = sync_fs(fs);
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fd ff35 	bl	8004530 <sync_fs>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80066cc:	e006      	b.n	80066dc <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80066ce:	f107 030c 	add.w	r3, r7, #12
 80066d2:	2200      	movs	r2, #0
 80066d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe f949 	bl	800496e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80066dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3758      	adds	r7, #88	; 0x58
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006700:	7a5b      	ldrb	r3, [r3, #9]
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d131      	bne.n	800676c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <FATFS_LinkDriverEx+0x94>)
 800670a:	7a5b      	ldrb	r3, [r3, #9]
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	4b1a      	ldr	r3, [pc, #104]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006712:	2100      	movs	r1, #0
 8006714:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006718:	7a5b      	ldrb	r3, [r3, #9]
 800671a:	b2db      	uxtb	r3, r3
 800671c:	4a17      	ldr	r2, [pc, #92]	; (800677c <FATFS_LinkDriverEx+0x94>)
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006726:	4b15      	ldr	r3, [pc, #84]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006728:	7a5b      	ldrb	r3, [r3, #9]
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006730:	4413      	add	r3, r2
 8006732:	79fa      	ldrb	r2, [r7, #7]
 8006734:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006738:	7a5b      	ldrb	r3, [r3, #9]
 800673a:	b2db      	uxtb	r3, r3
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	b2d1      	uxtb	r1, r2
 8006740:	4a0e      	ldr	r2, [pc, #56]	; (800677c <FATFS_LinkDriverEx+0x94>)
 8006742:	7251      	strb	r1, [r2, #9]
 8006744:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006746:	7dbb      	ldrb	r3, [r7, #22]
 8006748:	3330      	adds	r3, #48	; 0x30
 800674a:	b2da      	uxtb	r2, r3
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	3301      	adds	r3, #1
 8006754:	223a      	movs	r2, #58	; 0x3a
 8006756:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	3302      	adds	r3, #2
 800675c:	222f      	movs	r2, #47	; 0x2f
 800675e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	3303      	adds	r3, #3
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000724 	.word	0x20000724

08006780 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800678a:	2200      	movs	r2, #0
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff ffaa 	bl	80066e8 <FATFS_LinkDriverEx>
 8006794:	4603      	mov	r3, r0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <std>:
 80067a0:	2300      	movs	r3, #0
 80067a2:	b510      	push	{r4, lr}
 80067a4:	4604      	mov	r4, r0
 80067a6:	e9c0 3300 	strd	r3, r3, [r0]
 80067aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ae:	6083      	str	r3, [r0, #8]
 80067b0:	8181      	strh	r1, [r0, #12]
 80067b2:	6643      	str	r3, [r0, #100]	; 0x64
 80067b4:	81c2      	strh	r2, [r0, #14]
 80067b6:	6183      	str	r3, [r0, #24]
 80067b8:	4619      	mov	r1, r3
 80067ba:	2208      	movs	r2, #8
 80067bc:	305c      	adds	r0, #92	; 0x5c
 80067be:	f000 f9e5 	bl	8006b8c <memset>
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <std+0x38>)
 80067c4:	6263      	str	r3, [r4, #36]	; 0x24
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <std+0x3c>)
 80067c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <std+0x40>)
 80067cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <std+0x44>)
 80067d0:	6224      	str	r4, [r4, #32]
 80067d2:	6323      	str	r3, [r4, #48]	; 0x30
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	bf00      	nop
 80067d8:	080069dd 	.word	0x080069dd
 80067dc:	080069ff 	.word	0x080069ff
 80067e0:	08006a37 	.word	0x08006a37
 80067e4:	08006a5b 	.word	0x08006a5b

080067e8 <stdio_exit_handler>:
 80067e8:	4a02      	ldr	r2, [pc, #8]	; (80067f4 <stdio_exit_handler+0xc>)
 80067ea:	4903      	ldr	r1, [pc, #12]	; (80067f8 <stdio_exit_handler+0x10>)
 80067ec:	4803      	ldr	r0, [pc, #12]	; (80067fc <stdio_exit_handler+0x14>)
 80067ee:	f000 b869 	b.w	80068c4 <_fwalk_sglue>
 80067f2:	bf00      	nop
 80067f4:	20000024 	.word	0x20000024
 80067f8:	08007525 	.word	0x08007525
 80067fc:	20000030 	.word	0x20000030

08006800 <cleanup_stdio>:
 8006800:	6841      	ldr	r1, [r0, #4]
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <cleanup_stdio+0x34>)
 8006804:	4299      	cmp	r1, r3
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
 800680a:	d001      	beq.n	8006810 <cleanup_stdio+0x10>
 800680c:	f000 fe8a 	bl	8007524 <_fflush_r>
 8006810:	68a1      	ldr	r1, [r4, #8]
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <cleanup_stdio+0x38>)
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <cleanup_stdio+0x1e>
 8006818:	4620      	mov	r0, r4
 800681a:	f000 fe83 	bl	8007524 <_fflush_r>
 800681e:	68e1      	ldr	r1, [r4, #12]
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <cleanup_stdio+0x3c>)
 8006822:	4299      	cmp	r1, r3
 8006824:	d004      	beq.n	8006830 <cleanup_stdio+0x30>
 8006826:	4620      	mov	r0, r4
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f000 be7a 	b.w	8007524 <_fflush_r>
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	20000730 	.word	0x20000730
 8006838:	20000798 	.word	0x20000798
 800683c:	20000800 	.word	0x20000800

08006840 <global_stdio_init.part.0>:
 8006840:	b510      	push	{r4, lr}
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <global_stdio_init.part.0+0x30>)
 8006844:	4c0b      	ldr	r4, [pc, #44]	; (8006874 <global_stdio_init.part.0+0x34>)
 8006846:	4a0c      	ldr	r2, [pc, #48]	; (8006878 <global_stdio_init.part.0+0x38>)
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	4620      	mov	r0, r4
 800684c:	2200      	movs	r2, #0
 800684e:	2104      	movs	r1, #4
 8006850:	f7ff ffa6 	bl	80067a0 <std>
 8006854:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006858:	2201      	movs	r2, #1
 800685a:	2109      	movs	r1, #9
 800685c:	f7ff ffa0 	bl	80067a0 <std>
 8006860:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006864:	2202      	movs	r2, #2
 8006866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800686a:	2112      	movs	r1, #18
 800686c:	f7ff bf98 	b.w	80067a0 <std>
 8006870:	20000868 	.word	0x20000868
 8006874:	20000730 	.word	0x20000730
 8006878:	080067e9 	.word	0x080067e9

0800687c <__sfp_lock_acquire>:
 800687c:	4801      	ldr	r0, [pc, #4]	; (8006884 <__sfp_lock_acquire+0x8>)
 800687e:	f000 b9fd 	b.w	8006c7c <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20000871 	.word	0x20000871

08006888 <__sfp_lock_release>:
 8006888:	4801      	ldr	r0, [pc, #4]	; (8006890 <__sfp_lock_release+0x8>)
 800688a:	f000 b9f8 	b.w	8006c7e <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20000871 	.word	0x20000871

08006894 <__sinit>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
 8006898:	f7ff fff0 	bl	800687c <__sfp_lock_acquire>
 800689c:	6a23      	ldr	r3, [r4, #32]
 800689e:	b11b      	cbz	r3, 80068a8 <__sinit+0x14>
 80068a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a4:	f7ff bff0 	b.w	8006888 <__sfp_lock_release>
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <__sinit+0x28>)
 80068aa:	6223      	str	r3, [r4, #32]
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <__sinit+0x2c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f5      	bne.n	80068a0 <__sinit+0xc>
 80068b4:	f7ff ffc4 	bl	8006840 <global_stdio_init.part.0>
 80068b8:	e7f2      	b.n	80068a0 <__sinit+0xc>
 80068ba:	bf00      	nop
 80068bc:	08006801 	.word	0x08006801
 80068c0:	20000868 	.word	0x20000868

080068c4 <_fwalk_sglue>:
 80068c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	4607      	mov	r7, r0
 80068ca:	4688      	mov	r8, r1
 80068cc:	4614      	mov	r4, r2
 80068ce:	2600      	movs	r6, #0
 80068d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068d4:	f1b9 0901 	subs.w	r9, r9, #1
 80068d8:	d505      	bpl.n	80068e6 <_fwalk_sglue+0x22>
 80068da:	6824      	ldr	r4, [r4, #0]
 80068dc:	2c00      	cmp	r4, #0
 80068de:	d1f7      	bne.n	80068d0 <_fwalk_sglue+0xc>
 80068e0:	4630      	mov	r0, r6
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	89ab      	ldrh	r3, [r5, #12]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d907      	bls.n	80068fc <_fwalk_sglue+0x38>
 80068ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068f0:	3301      	adds	r3, #1
 80068f2:	d003      	beq.n	80068fc <_fwalk_sglue+0x38>
 80068f4:	4629      	mov	r1, r5
 80068f6:	4638      	mov	r0, r7
 80068f8:	47c0      	blx	r8
 80068fa:	4306      	orrs	r6, r0
 80068fc:	3568      	adds	r5, #104	; 0x68
 80068fe:	e7e9      	b.n	80068d4 <_fwalk_sglue+0x10>

08006900 <iprintf>:
 8006900:	b40f      	push	{r0, r1, r2, r3}
 8006902:	b507      	push	{r0, r1, r2, lr}
 8006904:	4906      	ldr	r1, [pc, #24]	; (8006920 <iprintf+0x20>)
 8006906:	ab04      	add	r3, sp, #16
 8006908:	6808      	ldr	r0, [r1, #0]
 800690a:	f853 2b04 	ldr.w	r2, [r3], #4
 800690e:	6881      	ldr	r1, [r0, #8]
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	f000 fad7 	bl	8006ec4 <_vfiprintf_r>
 8006916:	b003      	add	sp, #12
 8006918:	f85d eb04 	ldr.w	lr, [sp], #4
 800691c:	b004      	add	sp, #16
 800691e:	4770      	bx	lr
 8006920:	2000007c 	.word	0x2000007c

08006924 <_puts_r>:
 8006924:	6a03      	ldr	r3, [r0, #32]
 8006926:	b570      	push	{r4, r5, r6, lr}
 8006928:	6884      	ldr	r4, [r0, #8]
 800692a:	4605      	mov	r5, r0
 800692c:	460e      	mov	r6, r1
 800692e:	b90b      	cbnz	r3, 8006934 <_puts_r+0x10>
 8006930:	f7ff ffb0 	bl	8006894 <__sinit>
 8006934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d405      	bmi.n	8006946 <_puts_r+0x22>
 800693a:	89a3      	ldrh	r3, [r4, #12]
 800693c:	0598      	lsls	r0, r3, #22
 800693e:	d402      	bmi.n	8006946 <_puts_r+0x22>
 8006940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006942:	f000 f99b 	bl	8006c7c <__retarget_lock_acquire_recursive>
 8006946:	89a3      	ldrh	r3, [r4, #12]
 8006948:	0719      	lsls	r1, r3, #28
 800694a:	d513      	bpl.n	8006974 <_puts_r+0x50>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	b18b      	cbz	r3, 8006974 <_puts_r+0x50>
 8006950:	3e01      	subs	r6, #1
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006958:	3b01      	subs	r3, #1
 800695a:	60a3      	str	r3, [r4, #8]
 800695c:	b9e9      	cbnz	r1, 800699a <_puts_r+0x76>
 800695e:	2b00      	cmp	r3, #0
 8006960:	da2e      	bge.n	80069c0 <_puts_r+0x9c>
 8006962:	4622      	mov	r2, r4
 8006964:	210a      	movs	r1, #10
 8006966:	4628      	mov	r0, r5
 8006968:	f000 f87b 	bl	8006a62 <__swbuf_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d007      	beq.n	8006980 <_puts_r+0x5c>
 8006970:	250a      	movs	r5, #10
 8006972:	e007      	b.n	8006984 <_puts_r+0x60>
 8006974:	4621      	mov	r1, r4
 8006976:	4628      	mov	r0, r5
 8006978:	f000 f8b0 	bl	8006adc <__swsetup_r>
 800697c:	2800      	cmp	r0, #0
 800697e:	d0e7      	beq.n	8006950 <_puts_r+0x2c>
 8006980:	f04f 35ff 	mov.w	r5, #4294967295
 8006984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006986:	07da      	lsls	r2, r3, #31
 8006988:	d405      	bmi.n	8006996 <_puts_r+0x72>
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	059b      	lsls	r3, r3, #22
 800698e:	d402      	bmi.n	8006996 <_puts_r+0x72>
 8006990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006992:	f000 f974 	bl	8006c7e <__retarget_lock_release_recursive>
 8006996:	4628      	mov	r0, r5
 8006998:	bd70      	pop	{r4, r5, r6, pc}
 800699a:	2b00      	cmp	r3, #0
 800699c:	da04      	bge.n	80069a8 <_puts_r+0x84>
 800699e:	69a2      	ldr	r2, [r4, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	dc06      	bgt.n	80069b2 <_puts_r+0x8e>
 80069a4:	290a      	cmp	r1, #10
 80069a6:	d004      	beq.n	80069b2 <_puts_r+0x8e>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	6022      	str	r2, [r4, #0]
 80069ae:	7019      	strb	r1, [r3, #0]
 80069b0:	e7cf      	b.n	8006952 <_puts_r+0x2e>
 80069b2:	4622      	mov	r2, r4
 80069b4:	4628      	mov	r0, r5
 80069b6:	f000 f854 	bl	8006a62 <__swbuf_r>
 80069ba:	3001      	adds	r0, #1
 80069bc:	d1c9      	bne.n	8006952 <_puts_r+0x2e>
 80069be:	e7df      	b.n	8006980 <_puts_r+0x5c>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	250a      	movs	r5, #10
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	6022      	str	r2, [r4, #0]
 80069c8:	701d      	strb	r5, [r3, #0]
 80069ca:	e7db      	b.n	8006984 <_puts_r+0x60>

080069cc <puts>:
 80069cc:	4b02      	ldr	r3, [pc, #8]	; (80069d8 <puts+0xc>)
 80069ce:	4601      	mov	r1, r0
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	f7ff bfa7 	b.w	8006924 <_puts_r>
 80069d6:	bf00      	nop
 80069d8:	2000007c 	.word	0x2000007c

080069dc <__sread>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	460c      	mov	r4, r1
 80069e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e4:	f000 f8fc 	bl	8006be0 <_read_r>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	bfab      	itete	ge
 80069ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069ee:	89a3      	ldrhlt	r3, [r4, #12]
 80069f0:	181b      	addge	r3, r3, r0
 80069f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069f6:	bfac      	ite	ge
 80069f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80069fa:	81a3      	strhlt	r3, [r4, #12]
 80069fc:	bd10      	pop	{r4, pc}

080069fe <__swrite>:
 80069fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a02:	461f      	mov	r7, r3
 8006a04:	898b      	ldrh	r3, [r1, #12]
 8006a06:	05db      	lsls	r3, r3, #23
 8006a08:	4605      	mov	r5, r0
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4616      	mov	r6, r2
 8006a0e:	d505      	bpl.n	8006a1c <__swrite+0x1e>
 8006a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a14:	2302      	movs	r3, #2
 8006a16:	2200      	movs	r2, #0
 8006a18:	f000 f8d0 	bl	8006bbc <_lseek_r>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	4632      	mov	r2, r6
 8006a2a:	463b      	mov	r3, r7
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a32:	f000 b8e7 	b.w	8006c04 <_write_r>

08006a36 <__sseek>:
 8006a36:	b510      	push	{r4, lr}
 8006a38:	460c      	mov	r4, r1
 8006a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a3e:	f000 f8bd 	bl	8006bbc <_lseek_r>
 8006a42:	1c43      	adds	r3, r0, #1
 8006a44:	89a3      	ldrh	r3, [r4, #12]
 8006a46:	bf15      	itete	ne
 8006a48:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a52:	81a3      	strheq	r3, [r4, #12]
 8006a54:	bf18      	it	ne
 8006a56:	81a3      	strhne	r3, [r4, #12]
 8006a58:	bd10      	pop	{r4, pc}

08006a5a <__sclose>:
 8006a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a5e:	f000 b89d 	b.w	8006b9c <_close_r>

08006a62 <__swbuf_r>:
 8006a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a64:	460e      	mov	r6, r1
 8006a66:	4614      	mov	r4, r2
 8006a68:	4605      	mov	r5, r0
 8006a6a:	b118      	cbz	r0, 8006a74 <__swbuf_r+0x12>
 8006a6c:	6a03      	ldr	r3, [r0, #32]
 8006a6e:	b90b      	cbnz	r3, 8006a74 <__swbuf_r+0x12>
 8006a70:	f7ff ff10 	bl	8006894 <__sinit>
 8006a74:	69a3      	ldr	r3, [r4, #24]
 8006a76:	60a3      	str	r3, [r4, #8]
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	071a      	lsls	r2, r3, #28
 8006a7c:	d525      	bpl.n	8006aca <__swbuf_r+0x68>
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	b31b      	cbz	r3, 8006aca <__swbuf_r+0x68>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	6922      	ldr	r2, [r4, #16]
 8006a86:	1a98      	subs	r0, r3, r2
 8006a88:	6963      	ldr	r3, [r4, #20]
 8006a8a:	b2f6      	uxtb	r6, r6
 8006a8c:	4283      	cmp	r3, r0
 8006a8e:	4637      	mov	r7, r6
 8006a90:	dc04      	bgt.n	8006a9c <__swbuf_r+0x3a>
 8006a92:	4621      	mov	r1, r4
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fd45 	bl	8007524 <_fflush_r>
 8006a9a:	b9e0      	cbnz	r0, 8006ad6 <__swbuf_r+0x74>
 8006a9c:	68a3      	ldr	r3, [r4, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	60a3      	str	r3, [r4, #8]
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	6022      	str	r2, [r4, #0]
 8006aa8:	701e      	strb	r6, [r3, #0]
 8006aaa:	6962      	ldr	r2, [r4, #20]
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d004      	beq.n	8006abc <__swbuf_r+0x5a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	07db      	lsls	r3, r3, #31
 8006ab6:	d506      	bpl.n	8006ac6 <__swbuf_r+0x64>
 8006ab8:	2e0a      	cmp	r6, #10
 8006aba:	d104      	bne.n	8006ac6 <__swbuf_r+0x64>
 8006abc:	4621      	mov	r1, r4
 8006abe:	4628      	mov	r0, r5
 8006ac0:	f000 fd30 	bl	8007524 <_fflush_r>
 8006ac4:	b938      	cbnz	r0, 8006ad6 <__swbuf_r+0x74>
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aca:	4621      	mov	r1, r4
 8006acc:	4628      	mov	r0, r5
 8006ace:	f000 f805 	bl	8006adc <__swsetup_r>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d0d5      	beq.n	8006a82 <__swbuf_r+0x20>
 8006ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8006ada:	e7f4      	b.n	8006ac6 <__swbuf_r+0x64>

08006adc <__swsetup_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4b2a      	ldr	r3, [pc, #168]	; (8006b88 <__swsetup_r+0xac>)
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	b118      	cbz	r0, 8006af0 <__swsetup_r+0x14>
 8006ae8:	6a03      	ldr	r3, [r0, #32]
 8006aea:	b90b      	cbnz	r3, 8006af0 <__swsetup_r+0x14>
 8006aec:	f7ff fed2 	bl	8006894 <__sinit>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af6:	0718      	lsls	r0, r3, #28
 8006af8:	d422      	bmi.n	8006b40 <__swsetup_r+0x64>
 8006afa:	06d9      	lsls	r1, r3, #27
 8006afc:	d407      	bmi.n	8006b0e <__swsetup_r+0x32>
 8006afe:	2309      	movs	r3, #9
 8006b00:	602b      	str	r3, [r5, #0]
 8006b02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e034      	b.n	8006b78 <__swsetup_r+0x9c>
 8006b0e:	0758      	lsls	r0, r3, #29
 8006b10:	d512      	bpl.n	8006b38 <__swsetup_r+0x5c>
 8006b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b14:	b141      	cbz	r1, 8006b28 <__swsetup_r+0x4c>
 8006b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1a:	4299      	cmp	r1, r3
 8006b1c:	d002      	beq.n	8006b24 <__swsetup_r+0x48>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f8ae 	bl	8006c80 <_free_r>
 8006b24:	2300      	movs	r3, #0
 8006b26:	6363      	str	r3, [r4, #52]	; 0x34
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	2300      	movs	r3, #0
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f043 0308 	orr.w	r3, r3, #8
 8006b3e:	81a3      	strh	r3, [r4, #12]
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	b94b      	cbnz	r3, 8006b58 <__swsetup_r+0x7c>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b4e:	d003      	beq.n	8006b58 <__swsetup_r+0x7c>
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 fd34 	bl	80075c0 <__smakebuf_r>
 8006b58:	89a0      	ldrh	r0, [r4, #12]
 8006b5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b5e:	f010 0301 	ands.w	r3, r0, #1
 8006b62:	d00a      	beq.n	8006b7a <__swsetup_r+0x9e>
 8006b64:	2300      	movs	r3, #0
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	6963      	ldr	r3, [r4, #20]
 8006b6a:	425b      	negs	r3, r3
 8006b6c:	61a3      	str	r3, [r4, #24]
 8006b6e:	6923      	ldr	r3, [r4, #16]
 8006b70:	b943      	cbnz	r3, 8006b84 <__swsetup_r+0xa8>
 8006b72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b76:	d1c4      	bne.n	8006b02 <__swsetup_r+0x26>
 8006b78:	bd38      	pop	{r3, r4, r5, pc}
 8006b7a:	0781      	lsls	r1, r0, #30
 8006b7c:	bf58      	it	pl
 8006b7e:	6963      	ldrpl	r3, [r4, #20]
 8006b80:	60a3      	str	r3, [r4, #8]
 8006b82:	e7f4      	b.n	8006b6e <__swsetup_r+0x92>
 8006b84:	2000      	movs	r0, #0
 8006b86:	e7f7      	b.n	8006b78 <__swsetup_r+0x9c>
 8006b88:	2000007c 	.word	0x2000007c

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <_close_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d06      	ldr	r5, [pc, #24]	; (8006bb8 <_close_r+0x1c>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fb f817 	bl	8001bda <_close>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_close_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_close_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	2000086c 	.word	0x2000086c

08006bbc <_lseek_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	; (8006bdc <_lseek_r+0x20>)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	602a      	str	r2, [r5, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fb f82c 	bl	8001c28 <_lseek>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_lseek_r+0x1e>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_lseek_r+0x1e>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	2000086c 	.word	0x2000086c

08006be0 <_read_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	; (8006c00 <_read_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa ffba 	bl	8001b68 <_read>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_read_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_read_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	2000086c 	.word	0x2000086c

08006c04 <_write_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	; (8006c24 <_write_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa ffc5 	bl	8001ba2 <_write>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_write_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_write_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	2000086c 	.word	0x2000086c

08006c28 <__errno>:
 8006c28:	4b01      	ldr	r3, [pc, #4]	; (8006c30 <__errno+0x8>)
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	2000007c 	.word	0x2000007c

08006c34 <__libc_init_array>:
 8006c34:	b570      	push	{r4, r5, r6, lr}
 8006c36:	4d0d      	ldr	r5, [pc, #52]	; (8006c6c <__libc_init_array+0x38>)
 8006c38:	4c0d      	ldr	r4, [pc, #52]	; (8006c70 <__libc_init_array+0x3c>)
 8006c3a:	1b64      	subs	r4, r4, r5
 8006c3c:	10a4      	asrs	r4, r4, #2
 8006c3e:	2600      	movs	r6, #0
 8006c40:	42a6      	cmp	r6, r4
 8006c42:	d109      	bne.n	8006c58 <__libc_init_array+0x24>
 8006c44:	4d0b      	ldr	r5, [pc, #44]	; (8006c74 <__libc_init_array+0x40>)
 8006c46:	4c0c      	ldr	r4, [pc, #48]	; (8006c78 <__libc_init_array+0x44>)
 8006c48:	f000 fd28 	bl	800769c <_init>
 8006c4c:	1b64      	subs	r4, r4, r5
 8006c4e:	10a4      	asrs	r4, r4, #2
 8006c50:	2600      	movs	r6, #0
 8006c52:	42a6      	cmp	r6, r4
 8006c54:	d105      	bne.n	8006c62 <__libc_init_array+0x2e>
 8006c56:	bd70      	pop	{r4, r5, r6, pc}
 8006c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5c:	4798      	blx	r3
 8006c5e:	3601      	adds	r6, #1
 8006c60:	e7ee      	b.n	8006c40 <__libc_init_array+0xc>
 8006c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c66:	4798      	blx	r3
 8006c68:	3601      	adds	r6, #1
 8006c6a:	e7f2      	b.n	8006c52 <__libc_init_array+0x1e>
 8006c6c:	08007930 	.word	0x08007930
 8006c70:	08007930 	.word	0x08007930
 8006c74:	08007930 	.word	0x08007930
 8006c78:	08007934 	.word	0x08007934

08006c7c <__retarget_lock_acquire_recursive>:
 8006c7c:	4770      	bx	lr

08006c7e <__retarget_lock_release_recursive>:
 8006c7e:	4770      	bx	lr

08006c80 <_free_r>:
 8006c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c82:	2900      	cmp	r1, #0
 8006c84:	d044      	beq.n	8006d10 <_free_r+0x90>
 8006c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c92:	bfb8      	it	lt
 8006c94:	18e4      	addlt	r4, r4, r3
 8006c96:	f000 f8df 	bl	8006e58 <__malloc_lock>
 8006c9a:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <_free_r+0x94>)
 8006c9c:	9801      	ldr	r0, [sp, #4]
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	b933      	cbnz	r3, 8006cb0 <_free_r+0x30>
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6014      	str	r4, [r2, #0]
 8006ca6:	b003      	add	sp, #12
 8006ca8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cac:	f000 b8da 	b.w	8006e64 <__malloc_unlock>
 8006cb0:	42a3      	cmp	r3, r4
 8006cb2:	d908      	bls.n	8006cc6 <_free_r+0x46>
 8006cb4:	6825      	ldr	r5, [r4, #0]
 8006cb6:	1961      	adds	r1, r4, r5
 8006cb8:	428b      	cmp	r3, r1
 8006cba:	bf01      	itttt	eq
 8006cbc:	6819      	ldreq	r1, [r3, #0]
 8006cbe:	685b      	ldreq	r3, [r3, #4]
 8006cc0:	1949      	addeq	r1, r1, r5
 8006cc2:	6021      	streq	r1, [r4, #0]
 8006cc4:	e7ed      	b.n	8006ca2 <_free_r+0x22>
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b10b      	cbz	r3, 8006cd0 <_free_r+0x50>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d9fa      	bls.n	8006cc6 <_free_r+0x46>
 8006cd0:	6811      	ldr	r1, [r2, #0]
 8006cd2:	1855      	adds	r5, r2, r1
 8006cd4:	42a5      	cmp	r5, r4
 8006cd6:	d10b      	bne.n	8006cf0 <_free_r+0x70>
 8006cd8:	6824      	ldr	r4, [r4, #0]
 8006cda:	4421      	add	r1, r4
 8006cdc:	1854      	adds	r4, r2, r1
 8006cde:	42a3      	cmp	r3, r4
 8006ce0:	6011      	str	r1, [r2, #0]
 8006ce2:	d1e0      	bne.n	8006ca6 <_free_r+0x26>
 8006ce4:	681c      	ldr	r4, [r3, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	6053      	str	r3, [r2, #4]
 8006cea:	440c      	add	r4, r1
 8006cec:	6014      	str	r4, [r2, #0]
 8006cee:	e7da      	b.n	8006ca6 <_free_r+0x26>
 8006cf0:	d902      	bls.n	8006cf8 <_free_r+0x78>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	6003      	str	r3, [r0, #0]
 8006cf6:	e7d6      	b.n	8006ca6 <_free_r+0x26>
 8006cf8:	6825      	ldr	r5, [r4, #0]
 8006cfa:	1961      	adds	r1, r4, r5
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	bf04      	itt	eq
 8006d00:	6819      	ldreq	r1, [r3, #0]
 8006d02:	685b      	ldreq	r3, [r3, #4]
 8006d04:	6063      	str	r3, [r4, #4]
 8006d06:	bf04      	itt	eq
 8006d08:	1949      	addeq	r1, r1, r5
 8006d0a:	6021      	streq	r1, [r4, #0]
 8006d0c:	6054      	str	r4, [r2, #4]
 8006d0e:	e7ca      	b.n	8006ca6 <_free_r+0x26>
 8006d10:	b003      	add	sp, #12
 8006d12:	bd30      	pop	{r4, r5, pc}
 8006d14:	20000874 	.word	0x20000874

08006d18 <sbrk_aligned>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	4e0e      	ldr	r6, [pc, #56]	; (8006d54 <sbrk_aligned+0x3c>)
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	6831      	ldr	r1, [r6, #0]
 8006d20:	4605      	mov	r5, r0
 8006d22:	b911      	cbnz	r1, 8006d2a <sbrk_aligned+0x12>
 8006d24:	f000 fcaa 	bl	800767c <_sbrk_r>
 8006d28:	6030      	str	r0, [r6, #0]
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 fca5 	bl	800767c <_sbrk_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	d00a      	beq.n	8006d4c <sbrk_aligned+0x34>
 8006d36:	1cc4      	adds	r4, r0, #3
 8006d38:	f024 0403 	bic.w	r4, r4, #3
 8006d3c:	42a0      	cmp	r0, r4
 8006d3e:	d007      	beq.n	8006d50 <sbrk_aligned+0x38>
 8006d40:	1a21      	subs	r1, r4, r0
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 fc9a 	bl	800767c <_sbrk_r>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d101      	bne.n	8006d50 <sbrk_aligned+0x38>
 8006d4c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d50:	4620      	mov	r0, r4
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	20000878 	.word	0x20000878

08006d58 <_malloc_r>:
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	1ccd      	adds	r5, r1, #3
 8006d5e:	f025 0503 	bic.w	r5, r5, #3
 8006d62:	3508      	adds	r5, #8
 8006d64:	2d0c      	cmp	r5, #12
 8006d66:	bf38      	it	cc
 8006d68:	250c      	movcc	r5, #12
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	db01      	blt.n	8006d74 <_malloc_r+0x1c>
 8006d70:	42a9      	cmp	r1, r5
 8006d72:	d905      	bls.n	8006d80 <_malloc_r+0x28>
 8006d74:	230c      	movs	r3, #12
 8006d76:	603b      	str	r3, [r7, #0]
 8006d78:	2600      	movs	r6, #0
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e54 <_malloc_r+0xfc>
 8006d84:	f000 f868 	bl	8006e58 <__malloc_lock>
 8006d88:	f8d8 3000 	ldr.w	r3, [r8]
 8006d8c:	461c      	mov	r4, r3
 8006d8e:	bb5c      	cbnz	r4, 8006de8 <_malloc_r+0x90>
 8006d90:	4629      	mov	r1, r5
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ffc0 	bl	8006d18 <sbrk_aligned>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	d155      	bne.n	8006e4a <_malloc_r+0xf2>
 8006d9e:	f8d8 4000 	ldr.w	r4, [r8]
 8006da2:	4626      	mov	r6, r4
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	d145      	bne.n	8006e34 <_malloc_r+0xdc>
 8006da8:	2c00      	cmp	r4, #0
 8006daa:	d048      	beq.n	8006e3e <_malloc_r+0xe6>
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	4631      	mov	r1, r6
 8006db0:	4638      	mov	r0, r7
 8006db2:	eb04 0903 	add.w	r9, r4, r3
 8006db6:	f000 fc61 	bl	800767c <_sbrk_r>
 8006dba:	4581      	cmp	r9, r0
 8006dbc:	d13f      	bne.n	8006e3e <_malloc_r+0xe6>
 8006dbe:	6821      	ldr	r1, [r4, #0]
 8006dc0:	1a6d      	subs	r5, r5, r1
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f7ff ffa7 	bl	8006d18 <sbrk_aligned>
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d037      	beq.n	8006e3e <_malloc_r+0xe6>
 8006dce:	6823      	ldr	r3, [r4, #0]
 8006dd0:	442b      	add	r3, r5
 8006dd2:	6023      	str	r3, [r4, #0]
 8006dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d038      	beq.n	8006e4e <_malloc_r+0xf6>
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	42a2      	cmp	r2, r4
 8006de0:	d12b      	bne.n	8006e3a <_malloc_r+0xe2>
 8006de2:	2200      	movs	r2, #0
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	e00f      	b.n	8006e08 <_malloc_r+0xb0>
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	1b52      	subs	r2, r2, r5
 8006dec:	d41f      	bmi.n	8006e2e <_malloc_r+0xd6>
 8006dee:	2a0b      	cmp	r2, #11
 8006df0:	d917      	bls.n	8006e22 <_malloc_r+0xca>
 8006df2:	1961      	adds	r1, r4, r5
 8006df4:	42a3      	cmp	r3, r4
 8006df6:	6025      	str	r5, [r4, #0]
 8006df8:	bf18      	it	ne
 8006dfa:	6059      	strne	r1, [r3, #4]
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	bf08      	it	eq
 8006e00:	f8c8 1000 	streq.w	r1, [r8]
 8006e04:	5162      	str	r2, [r4, r5]
 8006e06:	604b      	str	r3, [r1, #4]
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f104 060b 	add.w	r6, r4, #11
 8006e0e:	f000 f829 	bl	8006e64 <__malloc_unlock>
 8006e12:	f026 0607 	bic.w	r6, r6, #7
 8006e16:	1d23      	adds	r3, r4, #4
 8006e18:	1af2      	subs	r2, r6, r3
 8006e1a:	d0ae      	beq.n	8006d7a <_malloc_r+0x22>
 8006e1c:	1b9b      	subs	r3, r3, r6
 8006e1e:	50a3      	str	r3, [r4, r2]
 8006e20:	e7ab      	b.n	8006d7a <_malloc_r+0x22>
 8006e22:	42a3      	cmp	r3, r4
 8006e24:	6862      	ldr	r2, [r4, #4]
 8006e26:	d1dd      	bne.n	8006de4 <_malloc_r+0x8c>
 8006e28:	f8c8 2000 	str.w	r2, [r8]
 8006e2c:	e7ec      	b.n	8006e08 <_malloc_r+0xb0>
 8006e2e:	4623      	mov	r3, r4
 8006e30:	6864      	ldr	r4, [r4, #4]
 8006e32:	e7ac      	b.n	8006d8e <_malloc_r+0x36>
 8006e34:	4634      	mov	r4, r6
 8006e36:	6876      	ldr	r6, [r6, #4]
 8006e38:	e7b4      	b.n	8006da4 <_malloc_r+0x4c>
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	e7cc      	b.n	8006dd8 <_malloc_r+0x80>
 8006e3e:	230c      	movs	r3, #12
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4638      	mov	r0, r7
 8006e44:	f000 f80e 	bl	8006e64 <__malloc_unlock>
 8006e48:	e797      	b.n	8006d7a <_malloc_r+0x22>
 8006e4a:	6025      	str	r5, [r4, #0]
 8006e4c:	e7dc      	b.n	8006e08 <_malloc_r+0xb0>
 8006e4e:	605b      	str	r3, [r3, #4]
 8006e50:	deff      	udf	#255	; 0xff
 8006e52:	bf00      	nop
 8006e54:	20000874 	.word	0x20000874

08006e58 <__malloc_lock>:
 8006e58:	4801      	ldr	r0, [pc, #4]	; (8006e60 <__malloc_lock+0x8>)
 8006e5a:	f7ff bf0f 	b.w	8006c7c <__retarget_lock_acquire_recursive>
 8006e5e:	bf00      	nop
 8006e60:	20000870 	.word	0x20000870

08006e64 <__malloc_unlock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__malloc_unlock+0x8>)
 8006e66:	f7ff bf0a 	b.w	8006c7e <__retarget_lock_release_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20000870 	.word	0x20000870

08006e70 <__sfputc_r>:
 8006e70:	6893      	ldr	r3, [r2, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	b410      	push	{r4}
 8006e78:	6093      	str	r3, [r2, #8]
 8006e7a:	da08      	bge.n	8006e8e <__sfputc_r+0x1e>
 8006e7c:	6994      	ldr	r4, [r2, #24]
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	db01      	blt.n	8006e86 <__sfputc_r+0x16>
 8006e82:	290a      	cmp	r1, #10
 8006e84:	d103      	bne.n	8006e8e <__sfputc_r+0x1e>
 8006e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e8a:	f7ff bdea 	b.w	8006a62 <__swbuf_r>
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	1c58      	adds	r0, r3, #1
 8006e92:	6010      	str	r0, [r2, #0]
 8006e94:	7019      	strb	r1, [r3, #0]
 8006e96:	4608      	mov	r0, r1
 8006e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <__sfputs_r>:
 8006e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	18d5      	adds	r5, r2, r3
 8006ea8:	42ac      	cmp	r4, r5
 8006eaa:	d101      	bne.n	8006eb0 <__sfputs_r+0x12>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e007      	b.n	8006ec0 <__sfputs_r+0x22>
 8006eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ffda 	bl	8006e70 <__sfputc_r>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d1f3      	bne.n	8006ea8 <__sfputs_r+0xa>
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ec4 <_vfiprintf_r>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	460d      	mov	r5, r1
 8006eca:	b09d      	sub	sp, #116	; 0x74
 8006ecc:	4614      	mov	r4, r2
 8006ece:	4698      	mov	r8, r3
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	b118      	cbz	r0, 8006edc <_vfiprintf_r+0x18>
 8006ed4:	6a03      	ldr	r3, [r0, #32]
 8006ed6:	b90b      	cbnz	r3, 8006edc <_vfiprintf_r+0x18>
 8006ed8:	f7ff fcdc 	bl	8006894 <__sinit>
 8006edc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ede:	07d9      	lsls	r1, r3, #31
 8006ee0:	d405      	bmi.n	8006eee <_vfiprintf_r+0x2a>
 8006ee2:	89ab      	ldrh	r3, [r5, #12]
 8006ee4:	059a      	lsls	r2, r3, #22
 8006ee6:	d402      	bmi.n	8006eee <_vfiprintf_r+0x2a>
 8006ee8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eea:	f7ff fec7 	bl	8006c7c <__retarget_lock_acquire_recursive>
 8006eee:	89ab      	ldrh	r3, [r5, #12]
 8006ef0:	071b      	lsls	r3, r3, #28
 8006ef2:	d501      	bpl.n	8006ef8 <_vfiprintf_r+0x34>
 8006ef4:	692b      	ldr	r3, [r5, #16]
 8006ef6:	b99b      	cbnz	r3, 8006f20 <_vfiprintf_r+0x5c>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	4630      	mov	r0, r6
 8006efc:	f7ff fdee 	bl	8006adc <__swsetup_r>
 8006f00:	b170      	cbz	r0, 8006f20 <_vfiprintf_r+0x5c>
 8006f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f04:	07dc      	lsls	r4, r3, #31
 8006f06:	d504      	bpl.n	8006f12 <_vfiprintf_r+0x4e>
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	b01d      	add	sp, #116	; 0x74
 8006f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f12:	89ab      	ldrh	r3, [r5, #12]
 8006f14:	0598      	lsls	r0, r3, #22
 8006f16:	d4f7      	bmi.n	8006f08 <_vfiprintf_r+0x44>
 8006f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f1a:	f7ff feb0 	bl	8006c7e <__retarget_lock_release_recursive>
 8006f1e:	e7f3      	b.n	8006f08 <_vfiprintf_r+0x44>
 8006f20:	2300      	movs	r3, #0
 8006f22:	9309      	str	r3, [sp, #36]	; 0x24
 8006f24:	2320      	movs	r3, #32
 8006f26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f2e:	2330      	movs	r3, #48	; 0x30
 8006f30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80070e4 <_vfiprintf_r+0x220>
 8006f34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f38:	f04f 0901 	mov.w	r9, #1
 8006f3c:	4623      	mov	r3, r4
 8006f3e:	469a      	mov	sl, r3
 8006f40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f44:	b10a      	cbz	r2, 8006f4a <_vfiprintf_r+0x86>
 8006f46:	2a25      	cmp	r2, #37	; 0x25
 8006f48:	d1f9      	bne.n	8006f3e <_vfiprintf_r+0x7a>
 8006f4a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f4e:	d00b      	beq.n	8006f68 <_vfiprintf_r+0xa4>
 8006f50:	465b      	mov	r3, fp
 8006f52:	4622      	mov	r2, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ffa1 	bl	8006e9e <__sfputs_r>
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	f000 80a9 	beq.w	80070b4 <_vfiprintf_r+0x1f0>
 8006f62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f64:	445a      	add	r2, fp
 8006f66:	9209      	str	r2, [sp, #36]	; 0x24
 8006f68:	f89a 3000 	ldrb.w	r3, [sl]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80a1 	beq.w	80070b4 <_vfiprintf_r+0x1f0>
 8006f72:	2300      	movs	r3, #0
 8006f74:	f04f 32ff 	mov.w	r2, #4294967295
 8006f78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f7c:	f10a 0a01 	add.w	sl, sl, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	9307      	str	r3, [sp, #28]
 8006f84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f88:	931a      	str	r3, [sp, #104]	; 0x68
 8006f8a:	4654      	mov	r4, sl
 8006f8c:	2205      	movs	r2, #5
 8006f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f92:	4854      	ldr	r0, [pc, #336]	; (80070e4 <_vfiprintf_r+0x220>)
 8006f94:	f7f9 f924 	bl	80001e0 <memchr>
 8006f98:	9a04      	ldr	r2, [sp, #16]
 8006f9a:	b9d8      	cbnz	r0, 8006fd4 <_vfiprintf_r+0x110>
 8006f9c:	06d1      	lsls	r1, r2, #27
 8006f9e:	bf44      	itt	mi
 8006fa0:	2320      	movmi	r3, #32
 8006fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa6:	0713      	lsls	r3, r2, #28
 8006fa8:	bf44      	itt	mi
 8006faa:	232b      	movmi	r3, #43	; 0x2b
 8006fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb6:	d015      	beq.n	8006fe4 <_vfiprintf_r+0x120>
 8006fb8:	9a07      	ldr	r2, [sp, #28]
 8006fba:	4654      	mov	r4, sl
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	f04f 0c0a 	mov.w	ip, #10
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fc8:	3b30      	subs	r3, #48	; 0x30
 8006fca:	2b09      	cmp	r3, #9
 8006fcc:	d94d      	bls.n	800706a <_vfiprintf_r+0x1a6>
 8006fce:	b1b0      	cbz	r0, 8006ffe <_vfiprintf_r+0x13a>
 8006fd0:	9207      	str	r2, [sp, #28]
 8006fd2:	e014      	b.n	8006ffe <_vfiprintf_r+0x13a>
 8006fd4:	eba0 0308 	sub.w	r3, r0, r8
 8006fd8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	46a2      	mov	sl, r4
 8006fe2:	e7d2      	b.n	8006f8a <_vfiprintf_r+0xc6>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	1d19      	adds	r1, r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	bfbb      	ittet	lt
 8006ff0:	425b      	neglt	r3, r3
 8006ff2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ff6:	9307      	strge	r3, [sp, #28]
 8006ff8:	9307      	strlt	r3, [sp, #28]
 8006ffa:	bfb8      	it	lt
 8006ffc:	9204      	strlt	r2, [sp, #16]
 8006ffe:	7823      	ldrb	r3, [r4, #0]
 8007000:	2b2e      	cmp	r3, #46	; 0x2e
 8007002:	d10c      	bne.n	800701e <_vfiprintf_r+0x15a>
 8007004:	7863      	ldrb	r3, [r4, #1]
 8007006:	2b2a      	cmp	r3, #42	; 0x2a
 8007008:	d134      	bne.n	8007074 <_vfiprintf_r+0x1b0>
 800700a:	9b03      	ldr	r3, [sp, #12]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	9203      	str	r2, [sp, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	bfb8      	it	lt
 8007016:	f04f 33ff 	movlt.w	r3, #4294967295
 800701a:	3402      	adds	r4, #2
 800701c:	9305      	str	r3, [sp, #20]
 800701e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070f4 <_vfiprintf_r+0x230>
 8007022:	7821      	ldrb	r1, [r4, #0]
 8007024:	2203      	movs	r2, #3
 8007026:	4650      	mov	r0, sl
 8007028:	f7f9 f8da 	bl	80001e0 <memchr>
 800702c:	b138      	cbz	r0, 800703e <_vfiprintf_r+0x17a>
 800702e:	9b04      	ldr	r3, [sp, #16]
 8007030:	eba0 000a 	sub.w	r0, r0, sl
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	4082      	lsls	r2, r0
 8007038:	4313      	orrs	r3, r2
 800703a:	3401      	adds	r4, #1
 800703c:	9304      	str	r3, [sp, #16]
 800703e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007042:	4829      	ldr	r0, [pc, #164]	; (80070e8 <_vfiprintf_r+0x224>)
 8007044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007048:	2206      	movs	r2, #6
 800704a:	f7f9 f8c9 	bl	80001e0 <memchr>
 800704e:	2800      	cmp	r0, #0
 8007050:	d03f      	beq.n	80070d2 <_vfiprintf_r+0x20e>
 8007052:	4b26      	ldr	r3, [pc, #152]	; (80070ec <_vfiprintf_r+0x228>)
 8007054:	bb1b      	cbnz	r3, 800709e <_vfiprintf_r+0x1da>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	3307      	adds	r3, #7
 800705a:	f023 0307 	bic.w	r3, r3, #7
 800705e:	3308      	adds	r3, #8
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007064:	443b      	add	r3, r7
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	e768      	b.n	8006f3c <_vfiprintf_r+0x78>
 800706a:	fb0c 3202 	mla	r2, ip, r2, r3
 800706e:	460c      	mov	r4, r1
 8007070:	2001      	movs	r0, #1
 8007072:	e7a6      	b.n	8006fc2 <_vfiprintf_r+0xfe>
 8007074:	2300      	movs	r3, #0
 8007076:	3401      	adds	r4, #1
 8007078:	9305      	str	r3, [sp, #20]
 800707a:	4619      	mov	r1, r3
 800707c:	f04f 0c0a 	mov.w	ip, #10
 8007080:	4620      	mov	r0, r4
 8007082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007086:	3a30      	subs	r2, #48	; 0x30
 8007088:	2a09      	cmp	r2, #9
 800708a:	d903      	bls.n	8007094 <_vfiprintf_r+0x1d0>
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0c6      	beq.n	800701e <_vfiprintf_r+0x15a>
 8007090:	9105      	str	r1, [sp, #20]
 8007092:	e7c4      	b.n	800701e <_vfiprintf_r+0x15a>
 8007094:	fb0c 2101 	mla	r1, ip, r1, r2
 8007098:	4604      	mov	r4, r0
 800709a:	2301      	movs	r3, #1
 800709c:	e7f0      	b.n	8007080 <_vfiprintf_r+0x1bc>
 800709e:	ab03      	add	r3, sp, #12
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	462a      	mov	r2, r5
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <_vfiprintf_r+0x22c>)
 80070a6:	a904      	add	r1, sp, #16
 80070a8:	4630      	mov	r0, r6
 80070aa:	f3af 8000 	nop.w
 80070ae:	4607      	mov	r7, r0
 80070b0:	1c78      	adds	r0, r7, #1
 80070b2:	d1d6      	bne.n	8007062 <_vfiprintf_r+0x19e>
 80070b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b6:	07d9      	lsls	r1, r3, #31
 80070b8:	d405      	bmi.n	80070c6 <_vfiprintf_r+0x202>
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	059a      	lsls	r2, r3, #22
 80070be:	d402      	bmi.n	80070c6 <_vfiprintf_r+0x202>
 80070c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c2:	f7ff fddc 	bl	8006c7e <__retarget_lock_release_recursive>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	065b      	lsls	r3, r3, #25
 80070ca:	f53f af1d 	bmi.w	8006f08 <_vfiprintf_r+0x44>
 80070ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070d0:	e71c      	b.n	8006f0c <_vfiprintf_r+0x48>
 80070d2:	ab03      	add	r3, sp, #12
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	462a      	mov	r2, r5
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <_vfiprintf_r+0x22c>)
 80070da:	a904      	add	r1, sp, #16
 80070dc:	4630      	mov	r0, r6
 80070de:	f000 f879 	bl	80071d4 <_printf_i>
 80070e2:	e7e4      	b.n	80070ae <_vfiprintf_r+0x1ea>
 80070e4:	080078f4 	.word	0x080078f4
 80070e8:	080078fe 	.word	0x080078fe
 80070ec:	00000000 	.word	0x00000000
 80070f0:	08006e9f 	.word	0x08006e9f
 80070f4:	080078fa 	.word	0x080078fa

080070f8 <_printf_common>:
 80070f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070fc:	4616      	mov	r6, r2
 80070fe:	4699      	mov	r9, r3
 8007100:	688a      	ldr	r2, [r1, #8]
 8007102:	690b      	ldr	r3, [r1, #16]
 8007104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007108:	4293      	cmp	r3, r2
 800710a:	bfb8      	it	lt
 800710c:	4613      	movlt	r3, r2
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007114:	4607      	mov	r7, r0
 8007116:	460c      	mov	r4, r1
 8007118:	b10a      	cbz	r2, 800711e <_printf_common+0x26>
 800711a:	3301      	adds	r3, #1
 800711c:	6033      	str	r3, [r6, #0]
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	0699      	lsls	r1, r3, #26
 8007122:	bf42      	ittt	mi
 8007124:	6833      	ldrmi	r3, [r6, #0]
 8007126:	3302      	addmi	r3, #2
 8007128:	6033      	strmi	r3, [r6, #0]
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	f015 0506 	ands.w	r5, r5, #6
 8007130:	d106      	bne.n	8007140 <_printf_common+0x48>
 8007132:	f104 0a19 	add.w	sl, r4, #25
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	6832      	ldr	r2, [r6, #0]
 800713a:	1a9b      	subs	r3, r3, r2
 800713c:	42ab      	cmp	r3, r5
 800713e:	dc26      	bgt.n	800718e <_printf_common+0x96>
 8007140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007144:	1e13      	subs	r3, r2, #0
 8007146:	6822      	ldr	r2, [r4, #0]
 8007148:	bf18      	it	ne
 800714a:	2301      	movne	r3, #1
 800714c:	0692      	lsls	r2, r2, #26
 800714e:	d42b      	bmi.n	80071a8 <_printf_common+0xb0>
 8007150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007154:	4649      	mov	r1, r9
 8007156:	4638      	mov	r0, r7
 8007158:	47c0      	blx	r8
 800715a:	3001      	adds	r0, #1
 800715c:	d01e      	beq.n	800719c <_printf_common+0xa4>
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	f003 0306 	and.w	r3, r3, #6
 8007166:	2b04      	cmp	r3, #4
 8007168:	bf02      	ittt	eq
 800716a:	68e5      	ldreq	r5, [r4, #12]
 800716c:	6833      	ldreq	r3, [r6, #0]
 800716e:	1aed      	subeq	r5, r5, r3
 8007170:	68a3      	ldr	r3, [r4, #8]
 8007172:	bf0c      	ite	eq
 8007174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007178:	2500      	movne	r5, #0
 800717a:	4293      	cmp	r3, r2
 800717c:	bfc4      	itt	gt
 800717e:	1a9b      	subgt	r3, r3, r2
 8007180:	18ed      	addgt	r5, r5, r3
 8007182:	2600      	movs	r6, #0
 8007184:	341a      	adds	r4, #26
 8007186:	42b5      	cmp	r5, r6
 8007188:	d11a      	bne.n	80071c0 <_printf_common+0xc8>
 800718a:	2000      	movs	r0, #0
 800718c:	e008      	b.n	80071a0 <_printf_common+0xa8>
 800718e:	2301      	movs	r3, #1
 8007190:	4652      	mov	r2, sl
 8007192:	4649      	mov	r1, r9
 8007194:	4638      	mov	r0, r7
 8007196:	47c0      	blx	r8
 8007198:	3001      	adds	r0, #1
 800719a:	d103      	bne.n	80071a4 <_printf_common+0xac>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	3501      	adds	r5, #1
 80071a6:	e7c6      	b.n	8007136 <_printf_common+0x3e>
 80071a8:	18e1      	adds	r1, r4, r3
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	2030      	movs	r0, #48	; 0x30
 80071ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071b2:	4422      	add	r2, r4
 80071b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071bc:	3302      	adds	r3, #2
 80071be:	e7c7      	b.n	8007150 <_printf_common+0x58>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4622      	mov	r2, r4
 80071c4:	4649      	mov	r1, r9
 80071c6:	4638      	mov	r0, r7
 80071c8:	47c0      	blx	r8
 80071ca:	3001      	adds	r0, #1
 80071cc:	d0e6      	beq.n	800719c <_printf_common+0xa4>
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7d9      	b.n	8007186 <_printf_common+0x8e>
	...

080071d4 <_printf_i>:
 80071d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071d8:	7e0f      	ldrb	r7, [r1, #24]
 80071da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071dc:	2f78      	cmp	r7, #120	; 0x78
 80071de:	4691      	mov	r9, r2
 80071e0:	4680      	mov	r8, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	469a      	mov	sl, r3
 80071e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071ea:	d807      	bhi.n	80071fc <_printf_i+0x28>
 80071ec:	2f62      	cmp	r7, #98	; 0x62
 80071ee:	d80a      	bhi.n	8007206 <_printf_i+0x32>
 80071f0:	2f00      	cmp	r7, #0
 80071f2:	f000 80d4 	beq.w	800739e <_printf_i+0x1ca>
 80071f6:	2f58      	cmp	r7, #88	; 0x58
 80071f8:	f000 80c0 	beq.w	800737c <_printf_i+0x1a8>
 80071fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007204:	e03a      	b.n	800727c <_printf_i+0xa8>
 8007206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800720a:	2b15      	cmp	r3, #21
 800720c:	d8f6      	bhi.n	80071fc <_printf_i+0x28>
 800720e:	a101      	add	r1, pc, #4	; (adr r1, 8007214 <_printf_i+0x40>)
 8007210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007214:	0800726d 	.word	0x0800726d
 8007218:	08007281 	.word	0x08007281
 800721c:	080071fd 	.word	0x080071fd
 8007220:	080071fd 	.word	0x080071fd
 8007224:	080071fd 	.word	0x080071fd
 8007228:	080071fd 	.word	0x080071fd
 800722c:	08007281 	.word	0x08007281
 8007230:	080071fd 	.word	0x080071fd
 8007234:	080071fd 	.word	0x080071fd
 8007238:	080071fd 	.word	0x080071fd
 800723c:	080071fd 	.word	0x080071fd
 8007240:	08007385 	.word	0x08007385
 8007244:	080072ad 	.word	0x080072ad
 8007248:	0800733f 	.word	0x0800733f
 800724c:	080071fd 	.word	0x080071fd
 8007250:	080071fd 	.word	0x080071fd
 8007254:	080073a7 	.word	0x080073a7
 8007258:	080071fd 	.word	0x080071fd
 800725c:	080072ad 	.word	0x080072ad
 8007260:	080071fd 	.word	0x080071fd
 8007264:	080071fd 	.word	0x080071fd
 8007268:	08007347 	.word	0x08007347
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	1d1a      	adds	r2, r3, #4
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	602a      	str	r2, [r5, #0]
 8007274:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800727c:	2301      	movs	r3, #1
 800727e:	e09f      	b.n	80073c0 <_printf_i+0x1ec>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	682b      	ldr	r3, [r5, #0]
 8007284:	0607      	lsls	r7, r0, #24
 8007286:	f103 0104 	add.w	r1, r3, #4
 800728a:	6029      	str	r1, [r5, #0]
 800728c:	d501      	bpl.n	8007292 <_printf_i+0xbe>
 800728e:	681e      	ldr	r6, [r3, #0]
 8007290:	e003      	b.n	800729a <_printf_i+0xc6>
 8007292:	0646      	lsls	r6, r0, #25
 8007294:	d5fb      	bpl.n	800728e <_printf_i+0xba>
 8007296:	f9b3 6000 	ldrsh.w	r6, [r3]
 800729a:	2e00      	cmp	r6, #0
 800729c:	da03      	bge.n	80072a6 <_printf_i+0xd2>
 800729e:	232d      	movs	r3, #45	; 0x2d
 80072a0:	4276      	negs	r6, r6
 80072a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a6:	485a      	ldr	r0, [pc, #360]	; (8007410 <_printf_i+0x23c>)
 80072a8:	230a      	movs	r3, #10
 80072aa:	e012      	b.n	80072d2 <_printf_i+0xfe>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	6820      	ldr	r0, [r4, #0]
 80072b0:	1d19      	adds	r1, r3, #4
 80072b2:	6029      	str	r1, [r5, #0]
 80072b4:	0605      	lsls	r5, r0, #24
 80072b6:	d501      	bpl.n	80072bc <_printf_i+0xe8>
 80072b8:	681e      	ldr	r6, [r3, #0]
 80072ba:	e002      	b.n	80072c2 <_printf_i+0xee>
 80072bc:	0641      	lsls	r1, r0, #25
 80072be:	d5fb      	bpl.n	80072b8 <_printf_i+0xe4>
 80072c0:	881e      	ldrh	r6, [r3, #0]
 80072c2:	4853      	ldr	r0, [pc, #332]	; (8007410 <_printf_i+0x23c>)
 80072c4:	2f6f      	cmp	r7, #111	; 0x6f
 80072c6:	bf0c      	ite	eq
 80072c8:	2308      	moveq	r3, #8
 80072ca:	230a      	movne	r3, #10
 80072cc:	2100      	movs	r1, #0
 80072ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072d2:	6865      	ldr	r5, [r4, #4]
 80072d4:	60a5      	str	r5, [r4, #8]
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	bfa2      	ittt	ge
 80072da:	6821      	ldrge	r1, [r4, #0]
 80072dc:	f021 0104 	bicge.w	r1, r1, #4
 80072e0:	6021      	strge	r1, [r4, #0]
 80072e2:	b90e      	cbnz	r6, 80072e8 <_printf_i+0x114>
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	d04b      	beq.n	8007380 <_printf_i+0x1ac>
 80072e8:	4615      	mov	r5, r2
 80072ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ee:	fb03 6711 	mls	r7, r3, r1, r6
 80072f2:	5dc7      	ldrb	r7, [r0, r7]
 80072f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072f8:	4637      	mov	r7, r6
 80072fa:	42bb      	cmp	r3, r7
 80072fc:	460e      	mov	r6, r1
 80072fe:	d9f4      	bls.n	80072ea <_printf_i+0x116>
 8007300:	2b08      	cmp	r3, #8
 8007302:	d10b      	bne.n	800731c <_printf_i+0x148>
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	07de      	lsls	r6, r3, #31
 8007308:	d508      	bpl.n	800731c <_printf_i+0x148>
 800730a:	6923      	ldr	r3, [r4, #16]
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4299      	cmp	r1, r3
 8007310:	bfde      	ittt	le
 8007312:	2330      	movle	r3, #48	; 0x30
 8007314:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007318:	f105 35ff 	addle.w	r5, r5, #4294967295
 800731c:	1b52      	subs	r2, r2, r5
 800731e:	6122      	str	r2, [r4, #16]
 8007320:	f8cd a000 	str.w	sl, [sp]
 8007324:	464b      	mov	r3, r9
 8007326:	aa03      	add	r2, sp, #12
 8007328:	4621      	mov	r1, r4
 800732a:	4640      	mov	r0, r8
 800732c:	f7ff fee4 	bl	80070f8 <_printf_common>
 8007330:	3001      	adds	r0, #1
 8007332:	d14a      	bne.n	80073ca <_printf_i+0x1f6>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	b004      	add	sp, #16
 800733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	f043 0320 	orr.w	r3, r3, #32
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	4833      	ldr	r0, [pc, #204]	; (8007414 <_printf_i+0x240>)
 8007348:	2778      	movs	r7, #120	; 0x78
 800734a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	6829      	ldr	r1, [r5, #0]
 8007352:	061f      	lsls	r7, r3, #24
 8007354:	f851 6b04 	ldr.w	r6, [r1], #4
 8007358:	d402      	bmi.n	8007360 <_printf_i+0x18c>
 800735a:	065f      	lsls	r7, r3, #25
 800735c:	bf48      	it	mi
 800735e:	b2b6      	uxthmi	r6, r6
 8007360:	07df      	lsls	r7, r3, #31
 8007362:	bf48      	it	mi
 8007364:	f043 0320 	orrmi.w	r3, r3, #32
 8007368:	6029      	str	r1, [r5, #0]
 800736a:	bf48      	it	mi
 800736c:	6023      	strmi	r3, [r4, #0]
 800736e:	b91e      	cbnz	r6, 8007378 <_printf_i+0x1a4>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	f023 0320 	bic.w	r3, r3, #32
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	2310      	movs	r3, #16
 800737a:	e7a7      	b.n	80072cc <_printf_i+0xf8>
 800737c:	4824      	ldr	r0, [pc, #144]	; (8007410 <_printf_i+0x23c>)
 800737e:	e7e4      	b.n	800734a <_printf_i+0x176>
 8007380:	4615      	mov	r5, r2
 8007382:	e7bd      	b.n	8007300 <_printf_i+0x12c>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	6826      	ldr	r6, [r4, #0]
 8007388:	6961      	ldr	r1, [r4, #20]
 800738a:	1d18      	adds	r0, r3, #4
 800738c:	6028      	str	r0, [r5, #0]
 800738e:	0635      	lsls	r5, r6, #24
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	d501      	bpl.n	8007398 <_printf_i+0x1c4>
 8007394:	6019      	str	r1, [r3, #0]
 8007396:	e002      	b.n	800739e <_printf_i+0x1ca>
 8007398:	0670      	lsls	r0, r6, #25
 800739a:	d5fb      	bpl.n	8007394 <_printf_i+0x1c0>
 800739c:	8019      	strh	r1, [r3, #0]
 800739e:	2300      	movs	r3, #0
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	4615      	mov	r5, r2
 80073a4:	e7bc      	b.n	8007320 <_printf_i+0x14c>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	602a      	str	r2, [r5, #0]
 80073ac:	681d      	ldr	r5, [r3, #0]
 80073ae:	6862      	ldr	r2, [r4, #4]
 80073b0:	2100      	movs	r1, #0
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7f8 ff14 	bl	80001e0 <memchr>
 80073b8:	b108      	cbz	r0, 80073be <_printf_i+0x1ea>
 80073ba:	1b40      	subs	r0, r0, r5
 80073bc:	6060      	str	r0, [r4, #4]
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	6123      	str	r3, [r4, #16]
 80073c2:	2300      	movs	r3, #0
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c8:	e7aa      	b.n	8007320 <_printf_i+0x14c>
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	462a      	mov	r2, r5
 80073ce:	4649      	mov	r1, r9
 80073d0:	4640      	mov	r0, r8
 80073d2:	47d0      	blx	sl
 80073d4:	3001      	adds	r0, #1
 80073d6:	d0ad      	beq.n	8007334 <_printf_i+0x160>
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	079b      	lsls	r3, r3, #30
 80073dc:	d413      	bmi.n	8007406 <_printf_i+0x232>
 80073de:	68e0      	ldr	r0, [r4, #12]
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	4298      	cmp	r0, r3
 80073e4:	bfb8      	it	lt
 80073e6:	4618      	movlt	r0, r3
 80073e8:	e7a6      	b.n	8007338 <_printf_i+0x164>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4632      	mov	r2, r6
 80073ee:	4649      	mov	r1, r9
 80073f0:	4640      	mov	r0, r8
 80073f2:	47d0      	blx	sl
 80073f4:	3001      	adds	r0, #1
 80073f6:	d09d      	beq.n	8007334 <_printf_i+0x160>
 80073f8:	3501      	adds	r5, #1
 80073fa:	68e3      	ldr	r3, [r4, #12]
 80073fc:	9903      	ldr	r1, [sp, #12]
 80073fe:	1a5b      	subs	r3, r3, r1
 8007400:	42ab      	cmp	r3, r5
 8007402:	dcf2      	bgt.n	80073ea <_printf_i+0x216>
 8007404:	e7eb      	b.n	80073de <_printf_i+0x20a>
 8007406:	2500      	movs	r5, #0
 8007408:	f104 0619 	add.w	r6, r4, #25
 800740c:	e7f5      	b.n	80073fa <_printf_i+0x226>
 800740e:	bf00      	nop
 8007410:	08007905 	.word	0x08007905
 8007414:	08007916 	.word	0x08007916

08007418 <__sflush_r>:
 8007418:	898a      	ldrh	r2, [r1, #12]
 800741a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	4605      	mov	r5, r0
 8007420:	0710      	lsls	r0, r2, #28
 8007422:	460c      	mov	r4, r1
 8007424:	d458      	bmi.n	80074d8 <__sflush_r+0xc0>
 8007426:	684b      	ldr	r3, [r1, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	dc05      	bgt.n	8007438 <__sflush_r+0x20>
 800742c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	dc02      	bgt.n	8007438 <__sflush_r+0x20>
 8007432:	2000      	movs	r0, #0
 8007434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800743a:	2e00      	cmp	r6, #0
 800743c:	d0f9      	beq.n	8007432 <__sflush_r+0x1a>
 800743e:	2300      	movs	r3, #0
 8007440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007444:	682f      	ldr	r7, [r5, #0]
 8007446:	6a21      	ldr	r1, [r4, #32]
 8007448:	602b      	str	r3, [r5, #0]
 800744a:	d032      	beq.n	80074b2 <__sflush_r+0x9a>
 800744c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	075a      	lsls	r2, r3, #29
 8007452:	d505      	bpl.n	8007460 <__sflush_r+0x48>
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	1ac0      	subs	r0, r0, r3
 8007458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800745a:	b10b      	cbz	r3, 8007460 <__sflush_r+0x48>
 800745c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800745e:	1ac0      	subs	r0, r0, r3
 8007460:	2300      	movs	r3, #0
 8007462:	4602      	mov	r2, r0
 8007464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007466:	6a21      	ldr	r1, [r4, #32]
 8007468:	4628      	mov	r0, r5
 800746a:	47b0      	blx	r6
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	d106      	bne.n	8007480 <__sflush_r+0x68>
 8007472:	6829      	ldr	r1, [r5, #0]
 8007474:	291d      	cmp	r1, #29
 8007476:	d82b      	bhi.n	80074d0 <__sflush_r+0xb8>
 8007478:	4a29      	ldr	r2, [pc, #164]	; (8007520 <__sflush_r+0x108>)
 800747a:	410a      	asrs	r2, r1
 800747c:	07d6      	lsls	r6, r2, #31
 800747e:	d427      	bmi.n	80074d0 <__sflush_r+0xb8>
 8007480:	2200      	movs	r2, #0
 8007482:	6062      	str	r2, [r4, #4]
 8007484:	04d9      	lsls	r1, r3, #19
 8007486:	6922      	ldr	r2, [r4, #16]
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	d504      	bpl.n	8007496 <__sflush_r+0x7e>
 800748c:	1c42      	adds	r2, r0, #1
 800748e:	d101      	bne.n	8007494 <__sflush_r+0x7c>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b903      	cbnz	r3, 8007496 <__sflush_r+0x7e>
 8007494:	6560      	str	r0, [r4, #84]	; 0x54
 8007496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007498:	602f      	str	r7, [r5, #0]
 800749a:	2900      	cmp	r1, #0
 800749c:	d0c9      	beq.n	8007432 <__sflush_r+0x1a>
 800749e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a2:	4299      	cmp	r1, r3
 80074a4:	d002      	beq.n	80074ac <__sflush_r+0x94>
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7ff fbea 	bl	8006c80 <_free_r>
 80074ac:	2000      	movs	r0, #0
 80074ae:	6360      	str	r0, [r4, #52]	; 0x34
 80074b0:	e7c0      	b.n	8007434 <__sflush_r+0x1c>
 80074b2:	2301      	movs	r3, #1
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	1c41      	adds	r1, r0, #1
 80074ba:	d1c8      	bne.n	800744e <__sflush_r+0x36>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0c5      	beq.n	800744e <__sflush_r+0x36>
 80074c2:	2b1d      	cmp	r3, #29
 80074c4:	d001      	beq.n	80074ca <__sflush_r+0xb2>
 80074c6:	2b16      	cmp	r3, #22
 80074c8:	d101      	bne.n	80074ce <__sflush_r+0xb6>
 80074ca:	602f      	str	r7, [r5, #0]
 80074cc:	e7b1      	b.n	8007432 <__sflush_r+0x1a>
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	e7ad      	b.n	8007434 <__sflush_r+0x1c>
 80074d8:	690f      	ldr	r7, [r1, #16]
 80074da:	2f00      	cmp	r7, #0
 80074dc:	d0a9      	beq.n	8007432 <__sflush_r+0x1a>
 80074de:	0793      	lsls	r3, r2, #30
 80074e0:	680e      	ldr	r6, [r1, #0]
 80074e2:	bf08      	it	eq
 80074e4:	694b      	ldreq	r3, [r1, #20]
 80074e6:	600f      	str	r7, [r1, #0]
 80074e8:	bf18      	it	ne
 80074ea:	2300      	movne	r3, #0
 80074ec:	eba6 0807 	sub.w	r8, r6, r7
 80074f0:	608b      	str	r3, [r1, #8]
 80074f2:	f1b8 0f00 	cmp.w	r8, #0
 80074f6:	dd9c      	ble.n	8007432 <__sflush_r+0x1a>
 80074f8:	6a21      	ldr	r1, [r4, #32]
 80074fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074fc:	4643      	mov	r3, r8
 80074fe:	463a      	mov	r2, r7
 8007500:	4628      	mov	r0, r5
 8007502:	47b0      	blx	r6
 8007504:	2800      	cmp	r0, #0
 8007506:	dc06      	bgt.n	8007516 <__sflush_r+0xfe>
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750e:	81a3      	strh	r3, [r4, #12]
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	e78e      	b.n	8007434 <__sflush_r+0x1c>
 8007516:	4407      	add	r7, r0
 8007518:	eba8 0800 	sub.w	r8, r8, r0
 800751c:	e7e9      	b.n	80074f2 <__sflush_r+0xda>
 800751e:	bf00      	nop
 8007520:	dfbffffe 	.word	0xdfbffffe

08007524 <_fflush_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	690b      	ldr	r3, [r1, #16]
 8007528:	4605      	mov	r5, r0
 800752a:	460c      	mov	r4, r1
 800752c:	b913      	cbnz	r3, 8007534 <_fflush_r+0x10>
 800752e:	2500      	movs	r5, #0
 8007530:	4628      	mov	r0, r5
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	b118      	cbz	r0, 800753e <_fflush_r+0x1a>
 8007536:	6a03      	ldr	r3, [r0, #32]
 8007538:	b90b      	cbnz	r3, 800753e <_fflush_r+0x1a>
 800753a:	f7ff f9ab 	bl	8006894 <__sinit>
 800753e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d0f3      	beq.n	800752e <_fflush_r+0xa>
 8007546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007548:	07d0      	lsls	r0, r2, #31
 800754a:	d404      	bmi.n	8007556 <_fflush_r+0x32>
 800754c:	0599      	lsls	r1, r3, #22
 800754e:	d402      	bmi.n	8007556 <_fflush_r+0x32>
 8007550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007552:	f7ff fb93 	bl	8006c7c <__retarget_lock_acquire_recursive>
 8007556:	4628      	mov	r0, r5
 8007558:	4621      	mov	r1, r4
 800755a:	f7ff ff5d 	bl	8007418 <__sflush_r>
 800755e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007560:	07da      	lsls	r2, r3, #31
 8007562:	4605      	mov	r5, r0
 8007564:	d4e4      	bmi.n	8007530 <_fflush_r+0xc>
 8007566:	89a3      	ldrh	r3, [r4, #12]
 8007568:	059b      	lsls	r3, r3, #22
 800756a:	d4e1      	bmi.n	8007530 <_fflush_r+0xc>
 800756c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800756e:	f7ff fb86 	bl	8006c7e <__retarget_lock_release_recursive>
 8007572:	e7dd      	b.n	8007530 <_fflush_r+0xc>

08007574 <__swhatbuf_r>:
 8007574:	b570      	push	{r4, r5, r6, lr}
 8007576:	460c      	mov	r4, r1
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	2900      	cmp	r1, #0
 800757e:	b096      	sub	sp, #88	; 0x58
 8007580:	4615      	mov	r5, r2
 8007582:	461e      	mov	r6, r3
 8007584:	da0d      	bge.n	80075a2 <__swhatbuf_r+0x2e>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f013 0f80 	tst.w	r3, #128	; 0x80
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	bf0c      	ite	eq
 8007592:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007596:	2340      	movne	r3, #64	; 0x40
 8007598:	2000      	movs	r0, #0
 800759a:	6031      	str	r1, [r6, #0]
 800759c:	602b      	str	r3, [r5, #0]
 800759e:	b016      	add	sp, #88	; 0x58
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
 80075a2:	466a      	mov	r2, sp
 80075a4:	f000 f848 	bl	8007638 <_fstat_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	dbec      	blt.n	8007586 <__swhatbuf_r+0x12>
 80075ac:	9901      	ldr	r1, [sp, #4]
 80075ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075b6:	4259      	negs	r1, r3
 80075b8:	4159      	adcs	r1, r3
 80075ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075be:	e7eb      	b.n	8007598 <__swhatbuf_r+0x24>

080075c0 <__smakebuf_r>:
 80075c0:	898b      	ldrh	r3, [r1, #12]
 80075c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075c4:	079d      	lsls	r5, r3, #30
 80075c6:	4606      	mov	r6, r0
 80075c8:	460c      	mov	r4, r1
 80075ca:	d507      	bpl.n	80075dc <__smakebuf_r+0x1c>
 80075cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2301      	movs	r3, #1
 80075d6:	6163      	str	r3, [r4, #20]
 80075d8:	b002      	add	sp, #8
 80075da:	bd70      	pop	{r4, r5, r6, pc}
 80075dc:	ab01      	add	r3, sp, #4
 80075de:	466a      	mov	r2, sp
 80075e0:	f7ff ffc8 	bl	8007574 <__swhatbuf_r>
 80075e4:	9900      	ldr	r1, [sp, #0]
 80075e6:	4605      	mov	r5, r0
 80075e8:	4630      	mov	r0, r6
 80075ea:	f7ff fbb5 	bl	8006d58 <_malloc_r>
 80075ee:	b948      	cbnz	r0, 8007604 <__smakebuf_r+0x44>
 80075f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d4ef      	bmi.n	80075d8 <__smakebuf_r+0x18>
 80075f8:	f023 0303 	bic.w	r3, r3, #3
 80075fc:	f043 0302 	orr.w	r3, r3, #2
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	e7e3      	b.n	80075cc <__smakebuf_r+0xc>
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	6020      	str	r0, [r4, #0]
 8007608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	9b00      	ldr	r3, [sp, #0]
 8007610:	6163      	str	r3, [r4, #20]
 8007612:	9b01      	ldr	r3, [sp, #4]
 8007614:	6120      	str	r0, [r4, #16]
 8007616:	b15b      	cbz	r3, 8007630 <__smakebuf_r+0x70>
 8007618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800761c:	4630      	mov	r0, r6
 800761e:	f000 f81d 	bl	800765c <_isatty_r>
 8007622:	b128      	cbz	r0, 8007630 <__smakebuf_r+0x70>
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	f023 0303 	bic.w	r3, r3, #3
 800762a:	f043 0301 	orr.w	r3, r3, #1
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	431d      	orrs	r5, r3
 8007634:	81a5      	strh	r5, [r4, #12]
 8007636:	e7cf      	b.n	80075d8 <__smakebuf_r+0x18>

08007638 <_fstat_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	; (8007658 <_fstat_r+0x20>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	f7fa fad4 	bl	8001bf2 <_fstat>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d102      	bne.n	8007654 <_fstat_r+0x1c>
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	b103      	cbz	r3, 8007654 <_fstat_r+0x1c>
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop
 8007658:	2000086c 	.word	0x2000086c

0800765c <_isatty_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	; (8007678 <_isatty_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fa fad3 	bl	8001c12 <_isatty>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_isatty_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_isatty_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	2000086c 	.word	0x2000086c

0800767c <_sbrk_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_sbrk_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa fadc 	bl	8001c44 <_sbrk>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_sbrk_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_sbrk_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	2000086c 	.word	0x2000086c

0800769c <_init>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	bf00      	nop
 80076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076a2:	bc08      	pop	{r3}
 80076a4:	469e      	mov	lr, r3
 80076a6:	4770      	bx	lr

080076a8 <_fini>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	bf00      	nop
 80076ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ae:	bc08      	pop	{r3}
 80076b0:	469e      	mov	lr, r3
 80076b2:	4770      	bx	lr

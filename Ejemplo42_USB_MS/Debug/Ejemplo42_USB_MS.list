
Ejemplo42_USB_MS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800eeec  0800eeec  0001eeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f974  0800f974  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f974  0800f974  0001f974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f97c  0800f97c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f97c  0800f97c  0001f97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f980  0800f980  0001f980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800f984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f04  20000080  0800fa00  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002f84  0800fa00  00022f84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019367  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042a4  00000000  00000000  00039456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  0003d700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d34  00000000  00000000  0003e828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9cc  00000000  00000000  0003f55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ca5b  00000000  00000000  00059f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008be72  00000000  00000000  00076983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bcc  00000000  00000000  001027f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001073c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eed4 	.word	0x0800eed4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800eed4 	.word	0x0800eed4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2uiz>:
 800087c:	004a      	lsls	r2, r1, #1
 800087e:	d211      	bcs.n	80008a4 <__aeabi_d2uiz+0x28>
 8000880:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000884:	d211      	bcs.n	80008aa <__aeabi_d2uiz+0x2e>
 8000886:	d50d      	bpl.n	80008a4 <__aeabi_d2uiz+0x28>
 8000888:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800088c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000890:	d40e      	bmi.n	80008b0 <__aeabi_d2uiz+0x34>
 8000892:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000896:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800089a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800089e:	fa23 f002 	lsr.w	r0, r3, r2
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008ae:	d102      	bne.n	80008b6 <__aeabi_d2uiz+0x3a>
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b970 	b.w	8000bb4 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9e08      	ldr	r6, [sp, #32]
 80008f2:	460d      	mov	r5, r1
 80008f4:	4604      	mov	r4, r0
 80008f6:	460f      	mov	r7, r1
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d14a      	bne.n	8000992 <__udivmoddi4+0xa6>
 80008fc:	428a      	cmp	r2, r1
 80008fe:	4694      	mov	ip, r2
 8000900:	d965      	bls.n	80009ce <__udivmoddi4+0xe2>
 8000902:	fab2 f382 	clz	r3, r2
 8000906:	b143      	cbz	r3, 800091a <__udivmoddi4+0x2e>
 8000908:	fa02 fc03 	lsl.w	ip, r2, r3
 800090c:	f1c3 0220 	rsb	r2, r3, #32
 8000910:	409f      	lsls	r7, r3
 8000912:	fa20 f202 	lsr.w	r2, r0, r2
 8000916:	4317      	orrs	r7, r2
 8000918:	409c      	lsls	r4, r3
 800091a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800091e:	fa1f f58c 	uxth.w	r5, ip
 8000922:	fbb7 f1fe 	udiv	r1, r7, lr
 8000926:	0c22      	lsrs	r2, r4, #16
 8000928:	fb0e 7711 	mls	r7, lr, r1, r7
 800092c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000930:	fb01 f005 	mul.w	r0, r1, r5
 8000934:	4290      	cmp	r0, r2
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x62>
 8000938:	eb1c 0202 	adds.w	r2, ip, r2
 800093c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000940:	f080 811c 	bcs.w	8000b7c <__udivmoddi4+0x290>
 8000944:	4290      	cmp	r0, r2
 8000946:	f240 8119 	bls.w	8000b7c <__udivmoddi4+0x290>
 800094a:	3902      	subs	r1, #2
 800094c:	4462      	add	r2, ip
 800094e:	1a12      	subs	r2, r2, r0
 8000950:	b2a4      	uxth	r4, r4
 8000952:	fbb2 f0fe 	udiv	r0, r2, lr
 8000956:	fb0e 2210 	mls	r2, lr, r0, r2
 800095a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800095e:	fb00 f505 	mul.w	r5, r0, r5
 8000962:	42a5      	cmp	r5, r4
 8000964:	d90a      	bls.n	800097c <__udivmoddi4+0x90>
 8000966:	eb1c 0404 	adds.w	r4, ip, r4
 800096a:	f100 32ff 	add.w	r2, r0, #4294967295
 800096e:	f080 8107 	bcs.w	8000b80 <__udivmoddi4+0x294>
 8000972:	42a5      	cmp	r5, r4
 8000974:	f240 8104 	bls.w	8000b80 <__udivmoddi4+0x294>
 8000978:	4464      	add	r4, ip
 800097a:	3802      	subs	r0, #2
 800097c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000980:	1b64      	subs	r4, r4, r5
 8000982:	2100      	movs	r1, #0
 8000984:	b11e      	cbz	r6, 800098e <__udivmoddi4+0xa2>
 8000986:	40dc      	lsrs	r4, r3
 8000988:	2300      	movs	r3, #0
 800098a:	e9c6 4300 	strd	r4, r3, [r6]
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	428b      	cmp	r3, r1
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0xbc>
 8000996:	2e00      	cmp	r6, #0
 8000998:	f000 80ed 	beq.w	8000b76 <__udivmoddi4+0x28a>
 800099c:	2100      	movs	r1, #0
 800099e:	e9c6 0500 	strd	r0, r5, [r6]
 80009a2:	4608      	mov	r0, r1
 80009a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a8:	fab3 f183 	clz	r1, r3
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d149      	bne.n	8000a44 <__udivmoddi4+0x158>
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	d302      	bcc.n	80009ba <__udivmoddi4+0xce>
 80009b4:	4282      	cmp	r2, r0
 80009b6:	f200 80f8 	bhi.w	8000baa <__udivmoddi4+0x2be>
 80009ba:	1a84      	subs	r4, r0, r2
 80009bc:	eb65 0203 	sbc.w	r2, r5, r3
 80009c0:	2001      	movs	r0, #1
 80009c2:	4617      	mov	r7, r2
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d0e2      	beq.n	800098e <__udivmoddi4+0xa2>
 80009c8:	e9c6 4700 	strd	r4, r7, [r6]
 80009cc:	e7df      	b.n	800098e <__udivmoddi4+0xa2>
 80009ce:	b902      	cbnz	r2, 80009d2 <__udivmoddi4+0xe6>
 80009d0:	deff      	udf	#255	; 0xff
 80009d2:	fab2 f382 	clz	r3, r2
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8090 	bne.w	8000afc <__udivmoddi4+0x210>
 80009dc:	1a8a      	subs	r2, r1, r2
 80009de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009e2:	fa1f fe8c 	uxth.w	lr, ip
 80009e6:	2101      	movs	r1, #1
 80009e8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009ec:	fb07 2015 	mls	r0, r7, r5, r2
 80009f0:	0c22      	lsrs	r2, r4, #16
 80009f2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009f6:	fb0e f005 	mul.w	r0, lr, r5
 80009fa:	4290      	cmp	r0, r2
 80009fc:	d908      	bls.n	8000a10 <__udivmoddi4+0x124>
 80009fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000a02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x122>
 8000a08:	4290      	cmp	r0, r2
 8000a0a:	f200 80cb 	bhi.w	8000ba4 <__udivmoddi4+0x2b8>
 8000a0e:	4645      	mov	r5, r8
 8000a10:	1a12      	subs	r2, r2, r0
 8000a12:	b2a4      	uxth	r4, r4
 8000a14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a18:	fb07 2210 	mls	r2, r7, r0, r2
 8000a1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a20:	fb0e fe00 	mul.w	lr, lr, r0
 8000a24:	45a6      	cmp	lr, r4
 8000a26:	d908      	bls.n	8000a3a <__udivmoddi4+0x14e>
 8000a28:	eb1c 0404 	adds.w	r4, ip, r4
 8000a2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a30:	d202      	bcs.n	8000a38 <__udivmoddi4+0x14c>
 8000a32:	45a6      	cmp	lr, r4
 8000a34:	f200 80bb 	bhi.w	8000bae <__udivmoddi4+0x2c2>
 8000a38:	4610      	mov	r0, r2
 8000a3a:	eba4 040e 	sub.w	r4, r4, lr
 8000a3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a42:	e79f      	b.n	8000984 <__udivmoddi4+0x98>
 8000a44:	f1c1 0720 	rsb	r7, r1, #32
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a52:	fa05 f401 	lsl.w	r4, r5, r1
 8000a56:	fa20 f307 	lsr.w	r3, r0, r7
 8000a5a:	40fd      	lsrs	r5, r7
 8000a5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a60:	4323      	orrs	r3, r4
 8000a62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a66:	fa1f fe8c 	uxth.w	lr, ip
 8000a6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a6e:	0c1c      	lsrs	r4, r3, #16
 8000a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a74:	fb08 f50e 	mul.w	r5, r8, lr
 8000a78:	42a5      	cmp	r5, r4
 8000a7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a82:	d90b      	bls.n	8000a9c <__udivmoddi4+0x1b0>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a8c:	f080 8088 	bcs.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a90:	42a5      	cmp	r5, r4
 8000a92:	f240 8085 	bls.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a96:	f1a8 0802 	sub.w	r8, r8, #2
 8000a9a:	4464      	add	r4, ip
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	b29d      	uxth	r5, r3
 8000aa0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000aa4:	fb09 4413 	mls	r4, r9, r3, r4
 8000aa8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1da>
 8000ab4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000abc:	d26c      	bcs.n	8000b98 <__udivmoddi4+0x2ac>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	d96a      	bls.n	8000b98 <__udivmoddi4+0x2ac>
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	4464      	add	r4, ip
 8000ac6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aca:	fba3 9502 	umull	r9, r5, r3, r2
 8000ace:	eba4 040e 	sub.w	r4, r4, lr
 8000ad2:	42ac      	cmp	r4, r5
 8000ad4:	46c8      	mov	r8, r9
 8000ad6:	46ae      	mov	lr, r5
 8000ad8:	d356      	bcc.n	8000b88 <__udivmoddi4+0x29c>
 8000ada:	d053      	beq.n	8000b84 <__udivmoddi4+0x298>
 8000adc:	b156      	cbz	r6, 8000af4 <__udivmoddi4+0x208>
 8000ade:	ebb0 0208 	subs.w	r2, r0, r8
 8000ae2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ae6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aea:	40ca      	lsrs	r2, r1
 8000aec:	40cc      	lsrs	r4, r1
 8000aee:	4317      	orrs	r7, r2
 8000af0:	e9c6 7400 	strd	r7, r4, [r6]
 8000af4:	4618      	mov	r0, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afc:	f1c3 0120 	rsb	r1, r3, #32
 8000b00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b04:	fa20 f201 	lsr.w	r2, r0, r1
 8000b08:	fa25 f101 	lsr.w	r1, r5, r1
 8000b0c:	409d      	lsls	r5, r3
 8000b0e:	432a      	orrs	r2, r5
 8000b10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b14:	fa1f fe8c 	uxth.w	lr, ip
 8000b18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b26:	fb00 f50e 	mul.w	r5, r0, lr
 8000b2a:	428d      	cmp	r5, r1
 8000b2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x258>
 8000b32:	eb1c 0101 	adds.w	r1, ip, r1
 8000b36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b3a:	d22f      	bcs.n	8000b9c <__udivmoddi4+0x2b0>
 8000b3c:	428d      	cmp	r5, r1
 8000b3e:	d92d      	bls.n	8000b9c <__udivmoddi4+0x2b0>
 8000b40:	3802      	subs	r0, #2
 8000b42:	4461      	add	r1, ip
 8000b44:	1b49      	subs	r1, r1, r5
 8000b46:	b292      	uxth	r2, r2
 8000b48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b54:	fb05 f10e 	mul.w	r1, r5, lr
 8000b58:	4291      	cmp	r1, r2
 8000b5a:	d908      	bls.n	8000b6e <__udivmoddi4+0x282>
 8000b5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b64:	d216      	bcs.n	8000b94 <__udivmoddi4+0x2a8>
 8000b66:	4291      	cmp	r1, r2
 8000b68:	d914      	bls.n	8000b94 <__udivmoddi4+0x2a8>
 8000b6a:	3d02      	subs	r5, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a52      	subs	r2, r2, r1
 8000b70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b74:	e738      	b.n	80009e8 <__udivmoddi4+0xfc>
 8000b76:	4631      	mov	r1, r6
 8000b78:	4630      	mov	r0, r6
 8000b7a:	e708      	b.n	800098e <__udivmoddi4+0xa2>
 8000b7c:	4639      	mov	r1, r7
 8000b7e:	e6e6      	b.n	800094e <__udivmoddi4+0x62>
 8000b80:	4610      	mov	r0, r2
 8000b82:	e6fb      	b.n	800097c <__udivmoddi4+0x90>
 8000b84:	4548      	cmp	r0, r9
 8000b86:	d2a9      	bcs.n	8000adc <__udivmoddi4+0x1f0>
 8000b88:	ebb9 0802 	subs.w	r8, r9, r2
 8000b8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b90:	3b01      	subs	r3, #1
 8000b92:	e7a3      	b.n	8000adc <__udivmoddi4+0x1f0>
 8000b94:	4645      	mov	r5, r8
 8000b96:	e7ea      	b.n	8000b6e <__udivmoddi4+0x282>
 8000b98:	462b      	mov	r3, r5
 8000b9a:	e794      	b.n	8000ac6 <__udivmoddi4+0x1da>
 8000b9c:	4640      	mov	r0, r8
 8000b9e:	e7d1      	b.n	8000b44 <__udivmoddi4+0x258>
 8000ba0:	46d0      	mov	r8, sl
 8000ba2:	e77b      	b.n	8000a9c <__udivmoddi4+0x1b0>
 8000ba4:	3d02      	subs	r5, #2
 8000ba6:	4462      	add	r2, ip
 8000ba8:	e732      	b.n	8000a10 <__udivmoddi4+0x124>
 8000baa:	4608      	mov	r0, r1
 8000bac:	e70a      	b.n	80009c4 <__udivmoddi4+0xd8>
 8000bae:	4464      	add	r4, ip
 8000bb0:	3802      	subs	r0, #2
 8000bb2:	e742      	b.n	8000a3a <__udivmoddi4+0x14e>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fb17 	bl	80001f4 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <Send_Uart+0x28>)
 8000bd2:	f003 faf2 	bl	80041ba <HAL_UART_Transmit>
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001dc 	.word	0x200001dc

08000be4 <Mount_USB>:



void Mount_USB (void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	490a      	ldr	r1, [pc, #40]	; (8000c14 <Mount_USB+0x30>)
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <Mount_USB+0x34>)
 8000bee:	f00b fca5 	bl	800c53c <f_mount>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <Mount_USB+0x38>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <Mount_USB+0x38>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <Mount_USB+0x26>
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <Mount_USB+0x3c>)
 8000c04:	f7ff ffd8 	bl	8000bb8 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000c08:	e002      	b.n	8000c10 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <Mount_USB+0x40>)
 8000c0c:	f7ff ffd4 	bl	8000bb8 <Send_Uart>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	2000022c 	.word	0x2000022c
 8000c18:	20000230 	.word	0x20000230
 8000c1c:	200001c0 	.word	0x200001c0
 8000c20:	0800eeec 	.word	0x0800eeec
 8000c24:	0800ef0c 	.word	0x0800ef0c

08000c28 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	490a      	ldr	r1, [pc, #40]	; (8000c58 <Unmount_USB+0x30>)
 8000c30:	2000      	movs	r0, #0
 8000c32:	f00b fc83 	bl	800c53c <f_mount>
 8000c36:	4603      	mov	r3, r0
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <Unmount_USB+0x34>)
 8000c3c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <Unmount_USB+0x34>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d103      	bne.n	8000c4e <Unmount_USB+0x26>
 8000c46:	4806      	ldr	r0, [pc, #24]	; (8000c60 <Unmount_USB+0x38>)
 8000c48:	f7ff ffb6 	bl	8000bb8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c4c:	e002      	b.n	8000c54 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <Unmount_USB+0x3c>)
 8000c50:	f7ff ffb2 	bl	8000bb8 <Send_Uart>
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000022c 	.word	0x2000022c
 8000c5c:	200001c0 	.word	0x200001c0
 8000c60:	0800ef2c 	.word	0x0800ef2c
 8000c64:	0800ef50 	.word	0x0800ef50

08000c68 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09a      	sub	sp, #104	; 0x68
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c70:	2014      	movs	r0, #20
 8000c72:	f00d fc7b 	bl	800e56c <malloc>
 8000c76:	4603      	mov	r3, r0
 8000c78:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4944      	ldr	r1, [pc, #272]	; (8000d90 <Scan_USB+0x128>)
 8000c7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000c80:	f00d fd30 	bl	800e6e4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f00c fc26 	bl	800d4dc <f_opendir>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	4b3f      	ldr	r3, [pc, #252]	; (8000d94 <Scan_USB+0x12c>)
 8000c96:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c98:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <Scan_USB+0x12c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d16e      	bne.n	8000d7e <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	493c      	ldr	r1, [pc, #240]	; (8000d98 <Scan_USB+0x130>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f00c fce7 	bl	800d67a <f_readdir>
 8000cac:	4603      	mov	r3, r0
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <Scan_USB+0x12c>)
 8000cb2:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <Scan_USB+0x12c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d15b      	bne.n	8000d74 <Scan_USB+0x10c>
 8000cbc:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <Scan_USB+0x130>)
 8000cbe:	7e9b      	ldrb	r3, [r3, #26]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d057      	beq.n	8000d74 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <Scan_USB+0x130>)
 8000cc6:	7b1b      	ldrb	r3, [r3, #12]
 8000cc8:	f003 0310 	and.w	r3, r3, #16
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d03a      	beq.n	8000d46 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cd0:	4932      	ldr	r1, [pc, #200]	; (8000d9c <Scan_USB+0x134>)
 8000cd2:	4833      	ldr	r0, [pc, #204]	; (8000da0 <Scan_USB+0x138>)
 8000cd4:	f7ff fa84 	bl	80001e0 <strcmp>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d045      	beq.n	8000d6a <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000cde:	492f      	ldr	r1, [pc, #188]	; (8000d9c <Scan_USB+0x134>)
 8000ce0:	4830      	ldr	r0, [pc, #192]	; (8000da4 <Scan_USB+0x13c>)
 8000ce2:	f7ff fa7d 	bl	80001e0 <strcmp>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d040      	beq.n	8000d6e <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000cec:	201e      	movs	r0, #30
 8000cee:	f00d fc3d 	bl	800e56c <malloc>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <Scan_USB+0x134>)
 8000cf8:	492b      	ldr	r1, [pc, #172]	; (8000da8 <Scan_USB+0x140>)
 8000cfa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000cfc:	f00d fcf2 	bl	800e6e4 <siprintf>
            	Send_Uart(buf);
 8000d00:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d02:	f7ff ff59 	bl	8000bb8 <Send_Uart>
            	free(buf);
 8000d06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d08:	f00d fc38 	bl	800e57c <free>
                i = strlen(path);
 8000d0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d0e:	f7ff fa71 	bl	80001f4 <strlen>
 8000d12:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a20      	ldr	r2, [pc, #128]	; (8000d9c <Scan_USB+0x134>)
 8000d1c:	4923      	ldr	r1, [pc, #140]	; (8000dac <Scan_USB+0x144>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f00d fce0 	bl	800e6e4 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d24:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d26:	f7ff ff9f 	bl	8000c68 <Scan_USB>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <Scan_USB+0x12c>)
 8000d30:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <Scan_USB+0x12c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11b      	bne.n	8000d72 <Scan_USB+0x10a>
                path[i] = 0;
 8000d3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d3e:	4413      	add	r3, r2
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e7ac      	b.n	8000ca0 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d46:	201e      	movs	r0, #30
 8000d48:	f00d fc10 	bl	800e56c <malloc>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <Scan_USB+0x134>)
 8000d52:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000d54:	4916      	ldr	r1, [pc, #88]	; (8000db0 <Scan_USB+0x148>)
 8000d56:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d58:	f00d fcc4 	bl	800e6e4 <siprintf>
               Send_Uart(buf);
 8000d5c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d5e:	f7ff ff2b 	bl	8000bb8 <Send_Uart>
               free(buf);
 8000d62:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000d64:	f00d fc0a 	bl	800e57c <free>
 8000d68:	e79a      	b.n	8000ca0 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d6a:	bf00      	nop
 8000d6c:	e798      	b.n	8000ca0 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d6e:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d70:	e796      	b.n	8000ca0 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d72:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00c fc58 	bl	800d62e <f_closedir>
    }
    free(path);
 8000d7e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d80:	f00d fbfc 	bl	800e57c <free>
    return fresult;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <Scan_USB+0x12c>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3768      	adds	r7, #104	; 0x68
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0800ef70 	.word	0x0800ef70
 8000d94:	200001c0 	.word	0x200001c0
 8000d98:	200000a0 	.word	0x200000a0
 8000d9c:	200000ba 	.word	0x200000ba
 8000da0:	0800ef74 	.word	0x0800ef74
 8000da4:	0800ef80 	.word	0x0800ef80
 8000da8:	0800ef9c 	.word	0x0800ef9c
 8000dac:	0800efa8 	.word	0x0800efa8
 8000db0:	0800efac 	.word	0x0800efac

08000db4 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000dbe:	4955      	ldr	r1, [pc, #340]	; (8000f14 <Write_File+0x160>)
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f00c fc97 	bl	800d6f4 <f_stat>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b53      	ldr	r3, [pc, #332]	; (8000f18 <Write_File+0x164>)
 8000dcc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dce:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <Write_File+0x164>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d012      	beq.n	8000dfc <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000dd6:	2064      	movs	r0, #100	; 0x64
 8000dd8:	f00d fbc8 	bl	800e56c <malloc>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	494e      	ldr	r1, [pc, #312]	; (8000f1c <Write_File+0x168>)
 8000de4:	68b8      	ldr	r0, [r7, #8]
 8000de6:	f00d fc7d 	bl	800e6e4 <siprintf>
		Send_Uart (buf);
 8000dea:	68b8      	ldr	r0, [r7, #8]
 8000dec:	f7ff fee4 	bl	8000bb8 <Send_Uart>
	    free(buf);
 8000df0:	68b8      	ldr	r0, [r7, #8]
 8000df2:	f00d fbc3 	bl	800e57c <free>
	    return fresult;
 8000df6:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <Write_File+0x164>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	e087      	b.n	8000f0c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4847      	ldr	r0, [pc, #284]	; (8000f20 <Write_File+0x16c>)
 8000e02:	f00b fbe1 	bl	800c5c8 <f_open>
 8000e06:	4603      	mov	r3, r0
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <Write_File+0x164>)
 8000e0c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000e0e:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <Write_File+0x164>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d015      	beq.n	8000e42 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f00d fba8 	bl	800e56c <malloc>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <Write_File+0x164>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	493e      	ldr	r1, [pc, #248]	; (8000f24 <Write_File+0x170>)
 8000e2a:	68f8      	ldr	r0, [r7, #12]
 8000e2c:	f00d fc5a 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff fec1 	bl	8000bb8 <Send_Uart>
	        free(buf);
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f00d fba0 	bl	800e57c <free>
	        return fresult;
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <Write_File+0x164>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	e064      	b.n	8000f0c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e42:	2064      	movs	r0, #100	; 0x64
 8000e44:	f00d fb92 	bl	800e56c <malloc>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4936      	ldr	r1, [pc, #216]	; (8000f28 <Write_File+0x174>)
 8000e50:	69f8      	ldr	r0, [r7, #28]
 8000e52:	f00d fc47 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8000e56:	69f8      	ldr	r0, [r7, #28]
 8000e58:	f7ff feae 	bl	8000bb8 <Send_Uart>
	        free(buf);
 8000e5c:	69f8      	ldr	r0, [r7, #28]
 8000e5e:	f00d fb8d 	bl	800e57c <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e62:	6838      	ldr	r0, [r7, #0]
 8000e64:	f7ff f9c6 	bl	80001f4 <strlen>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b30      	ldr	r3, [pc, #192]	; (8000f2c <Write_File+0x178>)
 8000e6c:	6839      	ldr	r1, [r7, #0]
 8000e6e:	482c      	ldr	r0, [pc, #176]	; (8000f20 <Write_File+0x16c>)
 8000e70:	f00c f815 	bl	800ce9e <f_write>
 8000e74:	4603      	mov	r3, r0
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <Write_File+0x164>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <Write_File+0x164>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d012      	beq.n	8000eaa <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e84:	2064      	movs	r0, #100	; 0x64
 8000e86:	f00d fb71 	bl	800e56c <malloc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <Write_File+0x164>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4926      	ldr	r1, [pc, #152]	; (8000f30 <Write_File+0x17c>)
 8000e98:	69b8      	ldr	r0, [r7, #24]
 8000e9a:	f00d fc23 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000e9e:	69b8      	ldr	r0, [r7, #24]
 8000ea0:	f7ff fe8a 	bl	8000bb8 <Send_Uart>
	    		free(buf);
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f00d fb69 	bl	800e57c <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000eaa:	481d      	ldr	r0, [pc, #116]	; (8000f20 <Write_File+0x16c>)
 8000eac:	f00c faec 	bl	800d488 <f_close>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <Write_File+0x164>)
 8000eb6:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <Write_File+0x164>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d013      	beq.n	8000ee8 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ec0:	2064      	movs	r0, #100	; 0x64
 8000ec2:	f00d fb53 	bl	800e56c <malloc>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <Write_File+0x164>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4918      	ldr	r1, [pc, #96]	; (8000f34 <Write_File+0x180>)
 8000ed4:	6938      	ldr	r0, [r7, #16]
 8000ed6:	f00d fc05 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000eda:	6938      	ldr	r0, [r7, #16]
 8000edc:	f7ff fe6c 	bl	8000bb8 <Send_Uart>
	    		free(buf);
 8000ee0:	6938      	ldr	r0, [r7, #16]
 8000ee2:	f00d fb4b 	bl	800e57c <free>
 8000ee6:	e00f      	b.n	8000f08 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ee8:	2064      	movs	r0, #100	; 0x64
 8000eea:	f00d fb3f 	bl	800e56c <malloc>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	4910      	ldr	r1, [pc, #64]	; (8000f38 <Write_File+0x184>)
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f00d fbf4 	bl	800e6e4 <siprintf>
	    		Send_Uart(buf);
 8000efc:	6978      	ldr	r0, [r7, #20]
 8000efe:	f7ff fe5b 	bl	8000bb8 <Send_Uart>
	    		free(buf);
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f00d fb3a 	bl	800e57c <free>
	    	}
	    }
	    return fresult;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <Write_File+0x164>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000a0 	.word	0x200000a0
 8000f18:	200001c0 	.word	0x200001c0
 8000f1c:	0800efc0 	.word	0x0800efc0
 8000f20:	20001270 	.word	0x20001270
 8000f24:	0800efe0 	.word	0x0800efe0
 8000f28:	0800f008 	.word	0x0800f008
 8000f2c:	200001c8 	.word	0x200001c8
 8000f30:	0800f034 	.word	0x0800f034
 8000f34:	0800f068 	.word	0x0800f068
 8000f38:	0800f0a0 	.word	0x0800f0a0

08000f3c <Read_File>:

FRESULT Read_File (char *name)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000f44:	495c      	ldr	r1, [pc, #368]	; (80010b8 <Read_File+0x17c>)
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f00c fbd4 	bl	800d6f4 <f_stat>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b5a      	ldr	r3, [pc, #360]	; (80010bc <Read_File+0x180>)
 8000f52:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000f54:	4b59      	ldr	r3, [pc, #356]	; (80010bc <Read_File+0x180>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d012      	beq.n	8000f82 <Read_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f00d fb05 	bl	800e56c <malloc>
 8000f62:	4603      	mov	r3, r0
 8000f64:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERRROR!!! *%s* does not exists\n\n", name);
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4955      	ldr	r1, [pc, #340]	; (80010c0 <Read_File+0x184>)
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f00d fbba 	bl	800e6e4 <siprintf>
		Send_Uart (buf);
 8000f70:	68f8      	ldr	r0, [r7, #12]
 8000f72:	f7ff fe21 	bl	8000bb8 <Send_Uart>
		free(buf);
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f00d fb00 	bl	800e57c <free>
	    return fresult;
 8000f7c:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <Read_File+0x180>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	e095      	b.n	80010ae <Read_File+0x172>
	}

	else
	{
		/* Open file to read */
		fresult = f_open(&USBHFile, name, FA_READ);
 8000f82:	2201      	movs	r2, #1
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	484f      	ldr	r0, [pc, #316]	; (80010c4 <Read_File+0x188>)
 8000f88:	f00b fb1e 	bl	800c5c8 <f_open>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <Read_File+0x180>)
 8000f92:	701a      	strb	r2, [r3, #0]

		if (fresult != FR_OK)
 8000f94:	4b49      	ldr	r3, [pc, #292]	; (80010bc <Read_File+0x180>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d015      	beq.n	8000fc8 <Read_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000f9c:	2064      	movs	r0, #100	; 0x64
 8000f9e:	f00d fae5 	bl	800e56c <malloc>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <Read_File+0x180>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4946      	ldr	r1, [pc, #280]	; (80010c8 <Read_File+0x18c>)
 8000fb0:	6938      	ldr	r0, [r7, #16]
 8000fb2:	f00d fb97 	bl	800e6e4 <siprintf>
		    Send_Uart(buf);
 8000fb6:	6938      	ldr	r0, [r7, #16]
 8000fb8:	f7ff fdfe 	bl	8000bb8 <Send_Uart>
		    free(buf);
 8000fbc:	6938      	ldr	r0, [r7, #16]
 8000fbe:	f00d fadd 	bl	800e57c <free>
		    return fresult;
 8000fc2:	4b3e      	ldr	r3, [pc, #248]	; (80010bc <Read_File+0x180>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	e072      	b.n	80010ae <Read_File+0x172>
		}

		/* Read data from the file
		* see the function details for the arguments */

    	char *buf = malloc(100*sizeof(char));
 8000fc8:	2064      	movs	r0, #100	; 0x64
 8000fca:	f00d facf 	bl	800e56c <malloc>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To READ data from it\n", name);
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	493d      	ldr	r1, [pc, #244]	; (80010cc <Read_File+0x190>)
 8000fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fd8:	f00d fb84 	bl	800e6e4 <siprintf>
    	Send_Uart(buf);
 8000fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fde:	f7ff fdeb 	bl	8000bb8 <Send_Uart>
        free(buf);
 8000fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fe4:	f00d faca 	bl	800e57c <free>

		char *buffer = malloc(sizeof(f_size(&USBHFile)));
 8000fe8:	2008      	movs	r0, #8
 8000fea:	f00d fabf 	bl	800e56c <malloc>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	623b      	str	r3, [r7, #32]
		fresult = f_read (&USBHFile, buffer, f_size(&USBHFile), &br);
 8000ff2:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <Read_File+0x188>)
 8000ff4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ff8:	4b35      	ldr	r3, [pc, #212]	; (80010d0 <Read_File+0x194>)
 8000ffa:	6a39      	ldr	r1, [r7, #32]
 8000ffc:	4831      	ldr	r0, [pc, #196]	; (80010c4 <Read_File+0x188>)
 8000ffe:	f00b fdb6 	bl	800cb6e <f_read>
 8001002:	4603      	mov	r3, r0
 8001004:	461a      	mov	r2, r3
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <Read_File+0x180>)
 8001008:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <Read_File+0x180>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d016      	beq.n	8001040 <Read_File+0x104>
		{
			char *buf = malloc(100*sizeof(char));
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f00d faaa 	bl	800e56c <malloc>
 8001018:	4603      	mov	r3, r0
 800101a:	617b      	str	r3, [r7, #20]
			free(buffer);
 800101c:	6a38      	ldr	r0, [r7, #32]
 800101e:	f00d faad 	bl	800e57c <free>
		 	sprintf (buf, "ERROR!!! No. %d in reading file *%s*\n\n", fresult, name);
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <Read_File+0x180>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	492a      	ldr	r1, [pc, #168]	; (80010d4 <Read_File+0x198>)
 800102c:	6978      	ldr	r0, [r7, #20]
 800102e:	f00d fb59 	bl	800e6e4 <siprintf>
		  	Send_Uart(buffer);
 8001032:	6a38      	ldr	r0, [r7, #32]
 8001034:	f7ff fdc0 	bl	8000bb8 <Send_Uart>
		  	free(buf);
 8001038:	6978      	ldr	r0, [r7, #20]
 800103a:	f00d fa9f 	bl	800e57c <free>
 800103e:	e034      	b.n	80010aa <Read_File+0x16e>
		}

		else
		{
			Send_Uart(buffer);
 8001040:	6a38      	ldr	r0, [r7, #32]
 8001042:	f7ff fdb9 	bl	8000bb8 <Send_Uart>
			free(buffer);
 8001046:	6a38      	ldr	r0, [r7, #32]
 8001048:	f00d fa98 	bl	800e57c <free>

			/* Close file */
			fresult = f_close(&USBHFile);
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <Read_File+0x188>)
 800104e:	f00c fa1b 	bl	800d488 <f_close>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <Read_File+0x180>)
 8001058:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK)
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <Read_File+0x180>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d013      	beq.n	800108a <Read_File+0x14e>
			{
				char *buf = malloc(100*sizeof(char));
 8001062:	2064      	movs	r0, #100	; 0x64
 8001064:	f00d fa82 	bl	800e56c <malloc>
 8001068:	4603      	mov	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
				sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <Read_File+0x180>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4918      	ldr	r1, [pc, #96]	; (80010d8 <Read_File+0x19c>)
 8001076:	69b8      	ldr	r0, [r7, #24]
 8001078:	f00d fb34 	bl	800e6e4 <siprintf>
				Send_Uart(buf);
 800107c:	69b8      	ldr	r0, [r7, #24]
 800107e:	f7ff fd9b 	bl	8000bb8 <Send_Uart>
				free(buf);
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f00d fa7a 	bl	800e57c <free>
 8001088:	e00f      	b.n	80010aa <Read_File+0x16e>
			}
			else
			{
				char *buf = malloc(100*sizeof(char));
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f00d fa6e 	bl	800e56c <malloc>
 8001090:	4603      	mov	r3, r0
 8001092:	61fb      	str	r3, [r7, #28]
				sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	4911      	ldr	r1, [pc, #68]	; (80010dc <Read_File+0x1a0>)
 8001098:	69f8      	ldr	r0, [r7, #28]
 800109a:	f00d fb23 	bl	800e6e4 <siprintf>
				Send_Uart(buf);
 800109e:	69f8      	ldr	r0, [r7, #28]
 80010a0:	f7ff fd8a 	bl	8000bb8 <Send_Uart>
				free(buf);
 80010a4:	69f8      	ldr	r0, [r7, #28]
 80010a6:	f00d fa69 	bl	800e57c <free>
			}
		}
	    return fresult;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <Read_File+0x180>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
	}
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000a0 	.word	0x200000a0
 80010bc:	200001c0 	.word	0x200001c0
 80010c0:	0800f0d0 	.word	0x0800f0d0
 80010c4:	20001270 	.word	0x20001270
 80010c8:	0800efe0 	.word	0x0800efe0
 80010cc:	0800f0f4 	.word	0x0800f0f4
 80010d0:	200001c4 	.word	0x200001c4
 80010d4:	0800f124 	.word	0x0800f124
 80010d8:	0800f14c 	.word	0x0800f14c
 80010dc:	0800f174 	.word	0x0800f174

080010e0 <Create_File>:

FRESULT Create_File (char *name)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 80010e8:	4943      	ldr	r1, [pc, #268]	; (80011f8 <Create_File+0x118>)
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f00c fb02 	bl	800d6f4 <f_stat>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b41      	ldr	r3, [pc, #260]	; (80011fc <Create_File+0x11c>)
 80010f6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <Create_File+0x11c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d112      	bne.n	8001126 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001100:	2064      	movs	r0, #100	; 0x64
 8001102:	f00d fa33 	bl	800e56c <malloc>
 8001106:	4603      	mov	r3, r0
 8001108:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	493c      	ldr	r1, [pc, #240]	; (8001200 <Create_File+0x120>)
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f00d fae8 	bl	800e6e4 <siprintf>
		Send_Uart(buf);
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff fd4f 	bl	8000bb8 <Send_Uart>
		free(buf);
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f00d fa2e 	bl	800e57c <free>
	    return fresult;
 8001120:	4b36      	ldr	r3, [pc, #216]	; (80011fc <Create_File+0x11c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	e063      	b.n	80011ee <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001126:	220b      	movs	r2, #11
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4836      	ldr	r0, [pc, #216]	; (8001204 <Create_File+0x124>)
 800112c:	f00b fa4c 	bl	800c5c8 <f_open>
 8001130:	4603      	mov	r3, r0
 8001132:	461a      	mov	r2, r3
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <Create_File+0x11c>)
 8001136:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <Create_File+0x11c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d015      	beq.n	800116c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f00d fa13 	bl	800e56c <malloc>
 8001146:	4603      	mov	r3, r0
 8001148:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <Create_File+0x11c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	492d      	ldr	r1, [pc, #180]	; (8001208 <Create_File+0x128>)
 8001154:	6938      	ldr	r0, [r7, #16]
 8001156:	f00d fac5 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 800115a:	6938      	ldr	r0, [r7, #16]
 800115c:	f7ff fd2c 	bl	8000bb8 <Send_Uart>
			free(buf);
 8001160:	6938      	ldr	r0, [r7, #16]
 8001162:	f00d fa0b 	bl	800e57c <free>
		    return fresult;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <Create_File+0x11c>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	e040      	b.n	80011ee <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800116c:	2064      	movs	r0, #100	; 0x64
 800116e:	f00d f9fd 	bl	800e56c <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4924      	ldr	r1, [pc, #144]	; (800120c <Create_File+0x12c>)
 800117a:	69f8      	ldr	r0, [r7, #28]
 800117c:	f00d fab2 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 8001180:	69f8      	ldr	r0, [r7, #28]
 8001182:	f7ff fd19 	bl	8000bb8 <Send_Uart>
			free(buf);
 8001186:	69f8      	ldr	r0, [r7, #28]
 8001188:	f00d f9f8 	bl	800e57c <free>
		}

		fresult = f_close(&USBHFile);
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <Create_File+0x124>)
 800118e:	f00c f97b 	bl	800d488 <f_close>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <Create_File+0x11c>)
 8001198:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <Create_File+0x11c>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d013      	beq.n	80011ca <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 80011a2:	2064      	movs	r0, #100	; 0x64
 80011a4:	f00d f9e2 	bl	800e56c <malloc>
 80011a8:	4603      	mov	r3, r0
 80011aa:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <Create_File+0x11c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4916      	ldr	r1, [pc, #88]	; (8001210 <Create_File+0x130>)
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f00d fa94 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f7ff fcfb 	bl	8000bb8 <Send_Uart>
			free(buf);
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f00d f9da 	bl	800e57c <free>
 80011c8:	e00f      	b.n	80011ea <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011ca:	2064      	movs	r0, #100	; 0x64
 80011cc:	f00d f9ce 	bl	800e56c <malloc>
 80011d0:	4603      	mov	r3, r0
 80011d2:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	490f      	ldr	r1, [pc, #60]	; (8001214 <Create_File+0x134>)
 80011d8:	69b8      	ldr	r0, [r7, #24]
 80011da:	f00d fa83 	bl	800e6e4 <siprintf>
			Send_Uart(buf);
 80011de:	69b8      	ldr	r0, [r7, #24]
 80011e0:	f7ff fcea 	bl	8000bb8 <Send_Uart>
			free(buf);
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f00d f9c9 	bl	800e57c <free>
		}
	}
    return fresult;
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <Create_File+0x11c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3720      	adds	r7, #32
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	200001c0 	.word	0x200001c0
 8001200:	0800f194 	.word	0x0800f194
 8001204:	20001270 	.word	0x20001270
 8001208:	0800f1cc 	.word	0x0800f1cc
 800120c:	0800f1f4 	.word	0x0800f1f4
 8001210:	0800f234 	.word	0x0800f234
 8001214:	0800f174 	.word	0x0800f174

08001218 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8001222:	495e      	ldr	r1, [pc, #376]	; (800139c <Update_File+0x184>)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f00c fa65 	bl	800d6f4 <f_stat>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <Update_File+0x188>)
 8001230:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001232:	4b5b      	ldr	r3, [pc, #364]	; (80013a0 <Update_File+0x188>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d012      	beq.n	8001260 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f00d f996 	bl	800e56c <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4957      	ldr	r1, [pc, #348]	; (80013a4 <Update_File+0x18c>)
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f00d fa4b 	bl	800e6e4 <siprintf>
		Send_Uart (buf);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff fcb2 	bl	8000bb8 <Send_Uart>
		free(buf);
 8001254:	68f8      	ldr	r0, [r7, #12]
 8001256:	f00d f991 	bl	800e57c <free>
	    return fresult;
 800125a:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <Update_File+0x188>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	e098      	b.n	8001392 <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8001260:	2232      	movs	r2, #50	; 0x32
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4850      	ldr	r0, [pc, #320]	; (80013a8 <Update_File+0x190>)
 8001266:	f00b f9af 	bl	800c5c8 <f_open>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <Update_File+0x188>)
 8001270:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001272:	4b4b      	ldr	r3, [pc, #300]	; (80013a0 <Update_File+0x188>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d015      	beq.n	80012a6 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f00d f976 	bl	800e56c <malloc>
 8001280:	4603      	mov	r3, r0
 8001282:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <Update_File+0x188>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4947      	ldr	r1, [pc, #284]	; (80013ac <Update_File+0x194>)
 800128e:	6938      	ldr	r0, [r7, #16]
 8001290:	f00d fa28 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8001294:	6938      	ldr	r0, [r7, #16]
 8001296:	f7ff fc8f 	bl	8000bb8 <Send_Uart>
	        free(buf);
 800129a:	6938      	ldr	r0, [r7, #16]
 800129c:	f00d f96e 	bl	800e57c <free>
	        return fresult;
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <Update_File+0x188>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	e075      	b.n	8001392 <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f00d f960 	bl	800e56c <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	493f      	ldr	r1, [pc, #252]	; (80013b0 <Update_File+0x198>)
 80012b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b6:	f00d fa15 	bl	800e6e4 <siprintf>
    	Send_Uart(buf);
 80012ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012bc:	f7ff fc7c 	bl	8000bb8 <Send_Uart>
        free(buf);
 80012c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012c2:	f00d f95b 	bl	800e57c <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f7fe ff94 	bl	80001f4 <strlen>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <Update_File+0x19c>)
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <Update_File+0x190>)
 80012d4:	f00b fde3 	bl	800ce9e <f_write>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <Update_File+0x188>)
 80012de:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <Update_File+0x188>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d013      	beq.n	8001310 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012e8:	2064      	movs	r0, #100	; 0x64
 80012ea:	f00d f93f 	bl	800e56c <malloc>
 80012ee:	4603      	mov	r3, r0
 80012f0:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <Update_File+0x188>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	492f      	ldr	r1, [pc, #188]	; (80013b8 <Update_File+0x1a0>)
 80012fc:	69f8      	ldr	r0, [r7, #28]
 80012fe:	f00d f9f1 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8001302:	69f8      	ldr	r0, [r7, #28]
 8001304:	f7ff fc58 	bl	8000bb8 <Send_Uart>
	    	free(buf);
 8001308:	69f8      	ldr	r0, [r7, #28]
 800130a:	f00d f937 	bl	800e57c <free>
 800130e:	e00f      	b.n	8001330 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001310:	2064      	movs	r0, #100	; 0x64
 8001312:	f00d f92b 	bl	800e56c <malloc>
 8001316:	4603      	mov	r3, r0
 8001318:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	4927      	ldr	r1, [pc, #156]	; (80013bc <Update_File+0x1a4>)
 800131e:	6a38      	ldr	r0, [r7, #32]
 8001320:	f00d f9e0 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8001324:	6a38      	ldr	r0, [r7, #32]
 8001326:	f7ff fc47 	bl	8000bb8 <Send_Uart>
	    	free(buf);
 800132a:	6a38      	ldr	r0, [r7, #32]
 800132c:	f00d f926 	bl	800e57c <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001330:	481d      	ldr	r0, [pc, #116]	; (80013a8 <Update_File+0x190>)
 8001332:	f00c f8a9 	bl	800d488 <f_close>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <Update_File+0x188>)
 800133c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <Update_File+0x188>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d013      	beq.n	800136e <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f00d f910 	bl	800e56c <malloc>
 800134c:	4603      	mov	r3, r0
 800134e:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <Update_File+0x188>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4919      	ldr	r1, [pc, #100]	; (80013c0 <Update_File+0x1a8>)
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f00d f9c2 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff fc29 	bl	8000bb8 <Send_Uart>
	    	free(buf);
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f00d f908 	bl	800e57c <free>
 800136c:	e00f      	b.n	800138e <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800136e:	2064      	movs	r0, #100	; 0x64
 8001370:	f00d f8fc 	bl	800e56c <malloc>
 8001374:	4603      	mov	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	4912      	ldr	r1, [pc, #72]	; (80013c4 <Update_File+0x1ac>)
 800137c:	69b8      	ldr	r0, [r7, #24]
 800137e:	f00d f9b1 	bl	800e6e4 <siprintf>
	    	Send_Uart(buf);
 8001382:	69b8      	ldr	r0, [r7, #24]
 8001384:	f7ff fc18 	bl	8000bb8 <Send_Uart>
	    	free(buf);
 8001388:	69b8      	ldr	r0, [r7, #24]
 800138a:	f00d f8f7 	bl	800e57c <free>
	     }
	}
    return fresult;
 800138e:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <Update_File+0x188>)
 8001390:	781b      	ldrb	r3, [r3, #0]
}
 8001392:	4618      	mov	r0, r3
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000a0 	.word	0x200000a0
 80013a0:	200001c0 	.word	0x200001c0
 80013a4:	0800efc0 	.word	0x0800efc0
 80013a8:	20001270 	.word	0x20001270
 80013ac:	0800efe0 	.word	0x0800efe0
 80013b0:	0800f258 	.word	0x0800f258
 80013b4:	200001c8 	.word	0x200001c8
 80013b8:	0800f288 	.word	0x0800f288
 80013bc:	0800f2b0 	.word	0x0800f2b0
 80013c0:	0800f14c 	.word	0x0800f14c
 80013c4:	0800f174 	.word	0x0800f174

080013c8 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f00c facf 	bl	800d974 <f_mkdir>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <Create_Dir+0x74>)
 80013dc:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <Create_Dir+0x74>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d110      	bne.n	8001408 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f00d f8c0 	bl	800e56c <malloc>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4913      	ldr	r1, [pc, #76]	; (8001440 <Create_Dir+0x78>)
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f00d f975 	bl	800e6e4 <siprintf>
    	Send_Uart (buf);
 80013fa:	68b8      	ldr	r0, [r7, #8]
 80013fc:	f7ff fbdc 	bl	8000bb8 <Send_Uart>
    	free(buf);
 8001400:	68b8      	ldr	r0, [r7, #8]
 8001402:	f00d f8bb 	bl	800e57c <free>
 8001406:	e012      	b.n	800142e <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001408:	2064      	movs	r0, #100	; 0x64
 800140a:	f00d f8af 	bl	800e56c <malloc>
 800140e:	4603      	mov	r3, r0
 8001410:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <Create_Dir+0x74>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <Create_Dir+0x7c>)
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f00d f961 	bl	800e6e4 <siprintf>
    	Send_Uart(buf);
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f7ff fbc8 	bl	8000bb8 <Send_Uart>
    	free(buf);
 8001428:	68f8      	ldr	r0, [r7, #12]
 800142a:	f00d f8a7 	bl	800e57c <free>
    }
    return fresult;
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <Create_Dir+0x74>)
 8001430:	781b      	ldrb	r3, [r3, #0]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200001c0 	.word	0x200001c0
 8001440:	0800f314 	.word	0x0800f314
 8001444:	0800f33c 	.word	0x0800f33c

08001448 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <Check_USB_Details+0xc8>)
 8001450:	4930      	ldr	r1, [pc, #192]	; (8001514 <Check_USB_Details+0xcc>)
 8001452:	4831      	ldr	r0, [pc, #196]	; (8001518 <Check_USB_Details+0xd0>)
 8001454:	f00c f987 	bl	800d766 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001458:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <Check_USB_Details+0xc8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	3b02      	subs	r3, #2
 8001460:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <Check_USB_Details+0xc8>)
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	8952      	ldrh	r2, [r2, #10]
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f98c 	bl	8000788 <__aeabi_ui2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <Check_USB_Details+0xd4>)
 8001476:	f7fe ff1b 	bl	80002b0 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff f9fb 	bl	800087c <__aeabi_d2uiz>
 8001486:	4603      	mov	r3, r0
 8001488:	4a25      	ldr	r2, [pc, #148]	; (8001520 <Check_USB_Details+0xd8>)
 800148a:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 800148c:	201e      	movs	r0, #30
 800148e:	f00d f86d 	bl	800e56c <malloc>
 8001492:	4603      	mov	r3, r0
 8001494:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <Check_USB_Details+0xd8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4921      	ldr	r1, [pc, #132]	; (8001524 <Check_USB_Details+0xdc>)
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f00d f920 	bl	800e6e4 <siprintf>
    Send_Uart(buf);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fb87 	bl	8000bb8 <Send_Uart>
    free(buf);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f00d f866 	bl	800e57c <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <Check_USB_Details+0xc8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	895b      	ldrh	r3, [r3, #10]
 80014b6:	461a      	mov	r2, r3
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <Check_USB_Details+0xcc>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	fb02 f303 	mul.w	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f961 	bl	8000788 <__aeabi_ui2d>
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b14      	ldr	r3, [pc, #80]	; (800151c <Check_USB_Details+0xd4>)
 80014cc:	f7fe fef0 	bl	80002b0 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff f9d0 	bl	800087c <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <Check_USB_Details+0xe0>)
 80014e0:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80014e2:	201e      	movs	r0, #30
 80014e4:	f00d f842 	bl	800e56c <malloc>
 80014e8:	4603      	mov	r3, r0
 80014ea:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <Check_USB_Details+0xe0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <Check_USB_Details+0xe4>)
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f00d f8f5 	bl	800e6e4 <siprintf>
    Send_Uart(buf);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fb5c 	bl	8000bb8 <Send_Uart>
    free(buf);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f00d f83b 	bl	800e57c <free>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001cc 	.word	0x200001cc
 8001514:	200001d0 	.word	0x200001d0
 8001518:	0800f368 	.word	0x0800f368
 800151c:	3fe00000 	.word	0x3fe00000
 8001520:	200001d4 	.word	0x200001d4
 8001524:	0800f36c 	.word	0x0800f36c
 8001528:	200001d8 	.word	0x200001d8
 800152c:	0800f384 	.word	0x0800f384

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fa0c 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f80c 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 f89c 	bl	8001678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001540:	f000 f870 	bl	8001624 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001544:	f004 f994 	bl	8005870 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001548:	f00c fc84 	bl	800de54 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800154c:	f00c fca8 	bl	800dea0 <MX_USB_HOST_Process>
 8001550:	e7fc      	b.n	800154c <main+0x1c>
	...

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	2230      	movs	r2, #48	; 0x30
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00d f8de 	bl	800e724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <SystemClock_Config+0xc8>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	4a26      	ldr	r2, [pc, #152]	; (800161c <SystemClock_Config+0xc8>)
 8001582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001586:	6413      	str	r3, [r2, #64]	; 0x40
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <SystemClock_Config+0xc8>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <SystemClock_Config+0xcc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <SystemClock_Config+0xcc>)
 800159e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <SystemClock_Config+0xcc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80015c8:	2348      	movs	r3, #72	; 0x48
 80015ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015cc:	2302      	movs	r3, #2
 80015ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015d0:	2303      	movs	r3, #3
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 f909 	bl	80037f0 <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e4:	f000 f898 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2302      	movs	r3, #2
 80015ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2102      	movs	r1, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fb6b 	bl	8003ce0 <HAL_RCC_ClockConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001610:	f000 f882 	bl	8001718 <Error_Handler>
  }
}
 8001614:	bf00      	nop
 8001616:	3750      	adds	r7, #80	; 0x50
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40007000 	.word	0x40007000

08001624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_USART2_UART_Init+0x50>)
 800162c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 8001630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_USART2_UART_Init+0x4c>)
 800165c:	f002 fd60 	bl	8004120 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001666:	f000 f857 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001dc 	.word	0x200001dc
 8001674:	40004400 	.word	0x40004400

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_GPIO_Init+0x98>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <MX_GPIO_Init+0x98>)
 8001698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_GPIO_Init+0x98>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_GPIO_Init+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <MX_GPIO_Init+0x98>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_GPIO_Init+0x98>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_GPIO_Init+0x98>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <MX_GPIO_Init+0x98>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_GPIO_Init+0x98>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2101      	movs	r1, #1
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <MX_GPIO_Init+0x9c>)
 80016e8:	f000 fc5e 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ec:	2301      	movs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fc:	f107 030c 	add.w	r3, r7, #12
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_GPIO_Init+0x9c>)
 8001704:	f000 facc 	bl	8001ca0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020800 	.word	0x40020800

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_MspInit+0x4c>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <HAL_MspInit+0x4c>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_UART_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12b      	bne.n	80017ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x88>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_UART_MspInit+0x88>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ce:	230c      	movs	r3, #12
 80017d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017de:	2307      	movs	r3, #7
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <HAL_UART_MspInit+0x8c>)
 80017ea:	f000 fa59 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000

08001804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <NMI_Handler+0x4>

0800180a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180e:	e7fe      	b.n	800180e <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <MemManage_Handler+0x4>

08001816 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <BusFault_Handler+0x4>

0800181c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <UsageFault_Handler+0x4>

08001822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 f8d0 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}

08001858 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <OTG_FS_IRQHandler+0x10>)
 800185e:	f000 fe27 	bl	80024b0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20002b38 	.word	0x20002b38

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f00c ff5a 	bl	800e754 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20020000 	.word	0x20020000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	20000220 	.word	0x20000220
 80018d4:	20002f88 	.word	0x20002f88

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001902:	490e      	ldr	r1, [pc, #56]	; (800193c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001918:	4c0b      	ldr	r4, [pc, #44]	; (8001948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001926:	f7ff ffd7 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f00c ff19 	bl	800e760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fdff 	bl	8001530 <main>
  bx  lr    
 8001932:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800193c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001940:	0800f984 	.word	0x0800f984
  ldr r2, =_sbss
 8001944:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001948:	20002f84 	.word	0x20002f84

0800194c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_Init+0x40>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <HAL_Init+0x40>)
 800195a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_Init+0x40>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <HAL_Init+0x40>)
 8001966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x40>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x40>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f94f 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff fece 	bl	8001724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f967 	bl	8001c86 <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f92f 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_IncTick+0x20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x24>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <HAL_IncTick+0x24>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008
 8001a18:	20000224 	.word	0x20000224

08001a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <HAL_GetTick+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000224 	.word	0x20000224

08001a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a3c:	f7ff ffee 	bl	8001a1c <HAL_GetTick>
 8001a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d005      	beq.n	8001a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_Delay+0x44>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a5a:	bf00      	nop
 8001a5c:	f7ff ffde 	bl	8001a1c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d8f7      	bhi.n	8001a5c <HAL_Delay+0x28>
  {
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008

08001a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	60d3      	str	r3, [r2, #12]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <__NVIC_GetPriorityGrouping+0x18>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0a1b      	lsrs	r3, r3, #8
 8001ace:	f003 0307 	and.w	r3, r3, #7
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	db0b      	blt.n	8001b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	f003 021f 	and.w	r2, r3, #31
 8001af8:	4907      	ldr	r1, [pc, #28]	; (8001b18 <__NVIC_EnableIRQ+0x38>)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	2001      	movs	r0, #1
 8001b02:	fa00 f202 	lsl.w	r2, r0, r2
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000e100 	.word	0xe000e100

08001b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	db0a      	blt.n	8001b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <__NVIC_SetPriority+0x4c>)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b44:	e00a      	b.n	8001b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4908      	ldr	r1, [pc, #32]	; (8001b6c <__NVIC_SetPriority+0x50>)
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	3b04      	subs	r3, #4
 8001b54:	0112      	lsls	r2, r2, #4
 8001b56:	b2d2      	uxtb	r2, r2
 8001b58:	440b      	add	r3, r1
 8001b5a:	761a      	strb	r2, [r3, #24]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	f1c3 0307 	rsb	r3, r3, #7
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	bf28      	it	cs
 8001b8e:	2304      	movcs	r3, #4
 8001b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3304      	adds	r3, #4
 8001b96:	2b06      	cmp	r3, #6
 8001b98:	d902      	bls.n	8001ba0 <NVIC_EncodePriority+0x30>
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3b03      	subs	r3, #3
 8001b9e:	e000      	b.n	8001ba2 <NVIC_EncodePriority+0x32>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc8:	4313      	orrs	r3, r2
         );
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3724      	adds	r7, #36	; 0x24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff8e 	bl	8001b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff29 	bl	8001a7c <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff3e 	bl	8001ac4 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff8e 	bl	8001b70 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5d 	bl	8001b1c <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff31 	bl	8001ae0 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e159      	b.n	8001f70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	f040 8148 	bne.w	8001f6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d005      	beq.n	8001cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d130      	bne.n	8001d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 0201 	and.w	r2, r3, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d017      	beq.n	8001d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d123      	bne.n	8001de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	220f      	movs	r2, #15
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	69b9      	ldr	r1, [r7, #24]
 8001de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0203 	and.w	r2, r3, #3
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a2 	beq.w	8001f6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a56      	ldr	r2, [pc, #344]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b54      	ldr	r3, [pc, #336]	; (8001f88 <HAL_GPIO_Init+0x2e8>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e42:	4a52      	ldr	r2, [pc, #328]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x202>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a48      	ldr	r2, [pc, #288]	; (8001f94 <HAL_GPIO_Init+0x2f4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x1fe>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a47      	ldr	r2, [pc, #284]	; (8001f98 <HAL_GPIO_Init+0x2f8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x1fa>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a46      	ldr	r2, [pc, #280]	; (8001f9c <HAL_GPIO_Init+0x2fc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x1f6>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a45      	ldr	r2, [pc, #276]	; (8001fa0 <HAL_GPIO_Init+0x300>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x1f2>
 8001e8e:	2304      	movs	r3, #4
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e92:	2307      	movs	r3, #7
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x204>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb4:	4935      	ldr	r1, [pc, #212]	; (8001f8c <HAL_GPIO_Init+0x2ec>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee6:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f16:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f3a:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f64:	4a0f      	ldr	r2, [pc, #60]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f aea2 	bls.w	8001cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40013800 	.word	0x40013800
 8001f90:	40020000 	.word	0x40020000
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020c00 	.word	0x40020c00
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40013c00 	.word	0x40013c00

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	619a      	str	r2, [r3, #24]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fdc:	b08f      	sub	sp, #60	; 0x3c
 8001fde:	af0a      	add	r7, sp, #40	; 0x28
 8001fe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e054      	b.n	8002096 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f00b ffc4 	bl	800df94 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2203      	movs	r2, #3
 8002010:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4618      	mov	r0, r3
 800202c:	f002 fcac 	bl	8004988 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	687e      	ldr	r6, [r7, #4]
 8002038:	466d      	mov	r5, sp
 800203a:	f106 0410 	add.w	r4, r6, #16
 800203e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800204a:	e885 0003 	stmia.w	r5, {r0, r1}
 800204e:	1d33      	adds	r3, r6, #4
 8002050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002052:	6838      	ldr	r0, [r7, #0]
 8002054:	f002 fc26 	bl	80048a4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	4618      	mov	r0, r3
 8002060:	f002 fca3 	bl	80049aa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	687e      	ldr	r6, [r7, #4]
 800206c:	466d      	mov	r5, sp
 800206e:	f106 0410 	add.w	r4, r6, #16
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800207e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002082:	1d33      	adds	r3, r6, #4
 8002084:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002086:	6838      	ldr	r0, [r7, #0]
 8002088:	f002 fe2c 	bl	8004ce4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800209e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800209e:	b590      	push	{r4, r7, lr}
 80020a0:	b089      	sub	sp, #36	; 0x24
 80020a2:	af04      	add	r7, sp, #16
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	4608      	mov	r0, r1
 80020a8:	4611      	mov	r1, r2
 80020aa:	461a      	mov	r2, r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	70fb      	strb	r3, [r7, #3]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70bb      	strb	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d101      	bne.n	80020c6 <HAL_HCD_HC_Init+0x28>
 80020c2:	2302      	movs	r3, #2
 80020c4:	e076      	b.n	80021b4 <HAL_HCD_HC_Init+0x116>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	333d      	adds	r3, #61	; 0x3d
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3338      	adds	r3, #56	; 0x38
 80020ee:	787a      	ldrb	r2, [r7, #1]
 80020f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3340      	adds	r3, #64	; 0x40
 8002100:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002102:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3339      	adds	r3, #57	; 0x39
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	212c      	movs	r1, #44	; 0x2c
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	4413      	add	r3, r2
 8002122:	333f      	adds	r3, #63	; 0x3f
 8002124:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002128:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	78ba      	ldrb	r2, [r7, #2]
 800212e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002132:	b2d0      	uxtb	r0, r2
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	333a      	adds	r3, #58	; 0x3a
 8002140:	4602      	mov	r2, r0
 8002142:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002144:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da09      	bge.n	8002160 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	333b      	adds	r3, #59	; 0x3b
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]
 800215e:	e008      	b.n	8002172 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	333b      	adds	r3, #59	; 0x3b
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002172:	78fb      	ldrb	r3, [r7, #3]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333c      	adds	r3, #60	; 0x3c
 8002180:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002184:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	787c      	ldrb	r4, [r7, #1]
 800218c:	78ba      	ldrb	r2, [r7, #2]
 800218e:	78f9      	ldrb	r1, [r7, #3]
 8002190:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002192:	9302      	str	r3, [sp, #8]
 8002194:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4623      	mov	r3, r4
 80021a2:	f002 ff25 	bl	8004ff0 <USB_HC_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd90      	pop	{r4, r7, pc}

080021bc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_HCD_HC_Halt+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e00f      	b.n	80021fa <HAL_HCD_HC_Halt+0x3e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f975 	bl	80054da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	70fb      	strb	r3, [r7, #3]
 8002216:	460b      	mov	r3, r1
 8002218:	70bb      	strb	r3, [r7, #2]
 800221a:	4613      	mov	r3, r2
 800221c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	212c      	movs	r1, #44	; 0x2c
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	333b      	adds	r3, #59	; 0x3b
 800222c:	78ba      	ldrb	r2, [r7, #2]
 800222e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	333f      	adds	r3, #63	; 0x3f
 800223e:	787a      	ldrb	r2, [r7, #1]
 8002240:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002242:	7c3b      	ldrb	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d112      	bne.n	800226e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3342      	adds	r3, #66	; 0x42
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	333d      	adds	r3, #61	; 0x3d
 8002268:	7f3a      	ldrb	r2, [r7, #28]
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e008      	b.n	8002280 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3342      	adds	r3, #66	; 0x42
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b03      	cmp	r3, #3
 8002284:	f200 80c6 	bhi.w	8002414 <HAL_HCD_HC_SubmitRequest+0x210>
 8002288:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800228a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228e:	bf00      	nop
 8002290:	080022a1 	.word	0x080022a1
 8002294:	08002401 	.word	0x08002401
 8002298:	08002305 	.word	0x08002305
 800229c:	08002383 	.word	0x08002383
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022a0:	7c3b      	ldrb	r3, [r7, #16]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 80b8 	bne.w	8002418 <HAL_HCD_HC_SubmitRequest+0x214>
 80022a8:	78bb      	ldrb	r3, [r7, #2]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80b4 	bne.w	8002418 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80022b0:	8b3b      	ldrh	r3, [r7, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3355      	adds	r3, #85	; 0x55
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3355      	adds	r3, #85	; 0x55
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d109      	bne.n	80022f0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	3342      	adds	r3, #66	; 0x42
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022ee:	e093      	b.n	8002418 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3342      	adds	r3, #66	; 0x42
 80022fe:	2202      	movs	r2, #2
 8002300:	701a      	strb	r2, [r3, #0]
      break;
 8002302:	e089      	b.n	8002418 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002304:	78bb      	ldrb	r3, [r7, #2]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d11d      	bne.n	8002346 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800230a:	78fb      	ldrb	r3, [r7, #3]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3355      	adds	r3, #85	; 0x55
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3342      	adds	r3, #66	; 0x42
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002330:	e073      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3342      	adds	r3, #66	; 0x42
 8002340:	2202      	movs	r2, #2
 8002342:	701a      	strb	r2, [r3, #0]
      break;
 8002344:	e069      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3354      	adds	r3, #84	; 0x54
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3342      	adds	r3, #66	; 0x42
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
      break;
 800236c:	e055      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3342      	adds	r3, #66	; 0x42
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
      break;
 8002380:	e04b      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002382:	78bb      	ldrb	r3, [r7, #2]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3355      	adds	r3, #85	; 0x55
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3342      	adds	r3, #66	; 0x42
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ae:	e034      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	212c      	movs	r1, #44	; 0x2c
 80023b6:	fb01 f303 	mul.w	r3, r1, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	3342      	adds	r3, #66	; 0x42
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e02a      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	212c      	movs	r1, #44	; 0x2c
 80023ca:	fb01 f303 	mul.w	r3, r1, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	3354      	adds	r3, #84	; 0x54
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d109      	bne.n	80023ec <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3342      	adds	r3, #66	; 0x42
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
      break;
 80023ea:	e016      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	212c      	movs	r1, #44	; 0x2c
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	4413      	add	r3, r2
 80023f8:	3342      	adds	r3, #66	; 0x42
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
      break;
 80023fe:	e00c      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	212c      	movs	r1, #44	; 0x2c
 8002406:	fb01 f303 	mul.w	r3, r1, r3
 800240a:	4413      	add	r3, r2
 800240c:	3342      	adds	r3, #66	; 0x42
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
      break;
 8002412:	e002      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002418:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	212c      	movs	r1, #44	; 0x2c
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3344      	adds	r3, #68	; 0x44
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	8b3a      	ldrh	r2, [r7, #24]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	fb00 f303 	mul.w	r3, r0, r3
 8002438:	440b      	add	r3, r1
 800243a:	334c      	adds	r3, #76	; 0x4c
 800243c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800243e:	78fb      	ldrb	r3, [r7, #3]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	212c      	movs	r1, #44	; 0x2c
 8002456:	fb01 f303 	mul.w	r3, r1, r3
 800245a:	4413      	add	r3, r2
 800245c:	3350      	adds	r3, #80	; 0x50
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3339      	adds	r3, #57	; 0x39
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	222c      	movs	r2, #44	; 0x2c
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	3338      	adds	r3, #56	; 0x38
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	18d1      	adds	r1, r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	f002 fec8 	bl	8005234 <USB_HC_StartXfer>
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop

080024b0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fbc9 	bl	8004c5e <USB_GetMode>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 80f6 	bne.w	80026c0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 fbad 	bl	8004c38 <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80ec 	beq.w	80026be <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f002 fba4 	bl	8004c38 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024fa:	d104      	bne.n	8002506 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002504:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fb94 	bl	8004c38 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800251a:	d104      	bne.n	8002526 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002524:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 fb84 	bl	8004c38 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800253a:	d104      	bne.n	8002546 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f002 fb74 	bl	8004c38 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d103      	bne.n	8002562 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2202      	movs	r2, #2
 8002560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f002 fb66 	bl	8004c38 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002572:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002576:	d11c      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002580:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002592:	2110      	movs	r1, #16
 8002594:	6938      	ldr	r0, [r7, #16]
 8002596:	f002 fa55 	bl	8004a44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800259a:	6938      	ldr	r0, [r7, #16]
 800259c:	f002 fa86 	bl	8004aac <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fc5c 	bl	8004e64 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f00b fd6f 	bl	800e090 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 fb3e 	bl	8004c38 <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c6:	d102      	bne.n	80025ce <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f001 f89e 	bl	800370a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f002 fb30 	bl	8004c38 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d106      	bne.n	80025f0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f00b fd38 	bl	800e058 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2208      	movs	r2, #8
 80025ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fb1f 	bl	8004c38 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f003 0310 	and.w	r3, r3, #16
 8002600:	2b10      	cmp	r3, #16
 8002602:	d101      	bne.n	8002608 <HAL_HCD_IRQHandler+0x158>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <HAL_HCD_IRQHandler+0x15a>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0210 	bic.w	r2, r2, #16
 800261c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 ffa1 	bl	8003566 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0210 	orr.w	r2, r2, #16
 8002632:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fafd 	bl	8004c38 <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002648:	d13a      	bne.n	80026c0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f002 ff32 	bl	80054b8 <USB_HC_ReadInterrupt>
 8002654:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e025      	b.n	80026a8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d018      	beq.n	80026a2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002686:	d106      	bne.n	8002696 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	b2db      	uxtb	r3, r3
 800268c:	4619      	mov	r1, r3
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8ab 	bl	80027ea <HCD_HC_IN_IRQHandler>
 8002694:	e005      	b.n	80026a2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 fbf9 	bl	8002e94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d3d4      	bcc.n	800265c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	e000      	b.n	80026c0 <HAL_HCD_IRQHandler+0x210>
      return;
 80026be:	bf00      	nop
    }
  }
}
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_HCD_Start+0x16>
 80026d8:	2302      	movs	r3, #2
 80026da:	e013      	b.n	8002704 <HAL_HCD_Start+0x3e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2101      	movs	r1, #1
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fc1e 	bl	8004f2c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 f936 	bl	8004966 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_HCD_Stop+0x16>
 800271e:	2302      	movs	r3, #2
 8002720:	e00d      	b.n	800273e <HAL_HCD_Stop+0x32>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 f80c 	bl	800574c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fbc0 	bl	8004ed8 <USB_ResetPort>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	781b      	ldrb	r3, [r3, #0]
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3350      	adds	r3, #80	; 0x50
 80027a4:	681b      	ldr	r3, [r3, #0]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 fc04 	bl	8004fcc <USB_GetCurrentFrame>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fbdf 	bl	8004f9e <USB_GetHostSpeed>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d11a      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	461a      	mov	r2, r3
 8002828:	2304      	movs	r3, #4
 800282a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3361      	adds	r3, #97	; 0x61
 800283a:	2206      	movs	r2, #6
 800283c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fe46 	bl	80054da <USB_HC_Halt>
 800284e:	e0af      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002866:	d11b      	bne.n	80028a0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	461a      	mov	r2, r3
 8002876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800287a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	212c      	movs	r1, #44	; 0x2c
 8002882:	fb01 f303 	mul.w	r3, r1, r3
 8002886:	4413      	add	r3, r2
 8002888:	3361      	adds	r3, #97	; 0x61
 800288a:	2207      	movs	r2, #7
 800288c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fe1e 	bl	80054da <USB_HC_Halt>
 800289e:	e087      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d109      	bne.n	80028ca <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2320      	movs	r3, #32
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	e072      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d11a      	bne.n	8002916 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2308      	movs	r3, #8
 80028f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3361      	adds	r3, #97	; 0x61
 8002900:	2205      	movs	r2, #5
 8002902:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f002 fde3 	bl	80054da <USB_HC_Halt>
 8002914:	e04c      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292c:	d11b      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002940:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	212c      	movs	r1, #44	; 0x2c
 8002948:	fb01 f303 	mul.w	r3, r1, r3
 800294c:	4413      	add	r3, r2
 800294e:	3361      	adds	r3, #97	; 0x61
 8002950:	2208      	movs	r2, #8
 8002952:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f002 fdbb 	bl	80054da <USB_HC_Halt>
 8002964:	e024      	b.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	015a      	lsls	r2, r3, #5
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	4413      	add	r3, r2
 800296e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d119      	bne.n	80029b0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2206      	movs	r2, #6
 800299e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f002 fd95 	bl	80054da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c6:	d112      	bne.n	80029ee <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	4611      	mov	r1, r2
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fd81 	bl	80054da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	015a      	lsls	r2, r3, #5
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4413      	add	r3, r2
 80029e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e4:	461a      	mov	r2, r3
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80029ec:	e24e      	b.n	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	f040 80df 	bne.w	8002bc4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	3348      	adds	r3, #72	; 0x48
 8002a1c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	0159      	lsls	r1, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	440b      	add	r3, r1
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	202c      	movs	r0, #44	; 0x2c
 8002a38:	fb00 f303 	mul.w	r3, r0, r3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3350      	adds	r3, #80	; 0x50
 8002a40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3361      	adds	r3, #97	; 0x61
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	335c      	adds	r3, #92	; 0x5c
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	333f      	adds	r3, #63	; 0x3f
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d009      	beq.n	8002aa0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	333f      	adds	r3, #63	; 0x3f
 8002a9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d111      	bne.n	8002ac4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fd15 	bl	80054da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	2310      	movs	r3, #16
 8002ac0:	6093      	str	r3, [r2, #8]
 8002ac2:	e03a      	b.n	8002b3a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	333f      	adds	r3, #63	; 0x3f
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d009      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d126      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	0151      	lsls	r1, r2, #5
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	440a      	add	r2, r1
 8002b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	212c      	movs	r1, #44	; 0x2c
 8002b12:	fb01 f303 	mul.w	r3, r1, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	b2d9      	uxtb	r1, r3
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	202c      	movs	r0, #44	; 0x2c
 8002b28:	fb00 f303 	mul.w	r3, r0, r3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3360      	adds	r3, #96	; 0x60
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f00b fab9 	bl	800e0ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12b      	bne.n	8002b9a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3348      	adds	r3, #72	; 0x48
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f202 	mul.w	r2, r0, r2
 8002b5c:	440a      	add	r2, r1
 8002b5e:	3240      	adds	r2, #64	; 0x40
 8002b60:	8812      	ldrh	r2, [r2, #0]
 8002b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 818e 	beq.w	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	212c      	movs	r1, #44	; 0x2c
 8002b76:	fb01 f303 	mul.w	r3, r1, r3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3354      	adds	r3, #84	; 0x54
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	f083 0301 	eor.w	r3, r3, #1
 8002b84:	b2d8      	uxtb	r0, r3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	212c      	movs	r1, #44	; 0x2c
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	4413      	add	r3, r2
 8002b92:	3354      	adds	r3, #84	; 0x54
 8002b94:	4602      	mov	r2, r0
 8002b96:	701a      	strb	r2, [r3, #0]
}
 8002b98:	e178      	b.n	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3354      	adds	r3, #84	; 0x54
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3354      	adds	r3, #84	; 0x54
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	701a      	strb	r2, [r3, #0]
}
 8002bc2:	e163      	b.n	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	015a      	lsls	r2, r3, #5
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	f040 80f6 	bne.w	8002dc8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d109      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3360      	adds	r3, #96	; 0x60
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e0c9      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3361      	adds	r3, #97	; 0x61
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d109      	bne.n	8002c2c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	2205      	movs	r2, #5
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e0b5      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d009      	beq.n	8002c54 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d150      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	335c      	adds	r3, #92	; 0x5c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	202c      	movs	r0, #44	; 0x2c
 8002c6c:	fb00 f303 	mul.w	r3, r0, r3
 8002c70:	440b      	add	r3, r1
 8002c72:	335c      	adds	r3, #92	; 0x5c
 8002c74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	335c      	adds	r3, #92	; 0x5c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d912      	bls.n	8002cb0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2204      	movs	r2, #4
 8002cac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cae:	e073      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cf4:	e050      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	212c      	movs	r1, #44	; 0x2c
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	4413      	add	r3, r2
 8002d02:	3361      	adds	r3, #97	; 0x61
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d122      	bne.n	8002d50 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	2202      	movs	r2, #2
 8002d1a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d32:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d3a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	461a      	mov	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e023      	b.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	212c      	movs	r1, #44	; 0x2c
 8002d56:	fb01 f303 	mul.w	r3, r1, r3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3361      	adds	r3, #97	; 0x61
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b07      	cmp	r3, #7
 8002d62:	d119      	bne.n	8002d98 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	212c      	movs	r1, #44	; 0x2c
 8002d6a:	fb01 f303 	mul.w	r3, r1, r3
 8002d6e:	4413      	add	r3, r2
 8002d70:	335c      	adds	r3, #92	; 0x5c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	202c      	movs	r0, #44	; 0x2c
 8002d7c:	fb00 f303 	mul.w	r3, r0, r3
 8002d80:	440b      	add	r3, r1
 8002d82:	335c      	adds	r3, #92	; 0x5c
 8002d84:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	2204      	movs	r2, #4
 8002d96:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da4:	461a      	mov	r2, r3
 8002da6:	2302      	movs	r3, #2
 8002da8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	b2d9      	uxtb	r1, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	202c      	movs	r0, #44	; 0x2c
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3360      	adds	r3, #96	; 0x60
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f00b f973 	bl	800e0ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002dc6:	e061      	b.n	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d156      	bne.n	8002e8c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	212c      	movs	r1, #44	; 0x2c
 8002de4:	fb01 f303 	mul.w	r3, r1, r3
 8002de8:	4413      	add	r3, r2
 8002dea:	333f      	adds	r3, #63	; 0x3f
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d111      	bne.n	8002e16 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	335c      	adds	r3, #92	; 0x5c
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fb63 	bl	80054da <USB_HC_Halt>
 8002e14:	e031      	b.n	8002e7a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	212c      	movs	r1, #44	; 0x2c
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	333f      	adds	r3, #63	; 0x3f
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	333f      	adds	r3, #63	; 0x3f
 8002e38:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d11d      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	212c      	movs	r1, #44	; 0x2c
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	4413      	add	r3, r2
 8002e4a:	335c      	adds	r3, #92	; 0x5c
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d110      	bne.n	8002e7a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3361      	adds	r3, #97	; 0x61
 8002e66:	2203      	movs	r2, #3
 8002e68:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 fb30 	bl	80054da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e86:	461a      	mov	r2, r3
 8002e88:	2310      	movs	r3, #16
 8002e8a:	6093      	str	r3, [r2, #8]
}
 8002e8c:	bf00      	nop
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d11a      	bne.n	8002efa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3361      	adds	r3, #97	; 0x61
 8002ee4:	2206      	movs	r2, #6
 8002ee6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 faf1 	bl	80054da <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002ef8:	e331      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d12e      	bne.n	8002f6e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2320      	movs	r3, #32
 8002f20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	333d      	adds	r3, #61	; 0x3d
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 8313 	bne.w	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	333d      	adds	r3, #61	; 0x3d
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3360      	adds	r3, #96	; 0x60
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f002 fab7 	bl	80054da <USB_HC_Halt>
}
 8002f6c:	e2f7      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f84:	d112      	bne.n	8002fac <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f98:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fa98 	bl	80054da <USB_HC_Halt>
}
 8002faa:	e2d8      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d140      	bne.n	8003044 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe6:	2b40      	cmp	r3, #64	; 0x40
 8002fe8:	d111      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	333d      	adds	r3, #61	; 0x3d
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	2340      	movs	r3, #64	; 0x40
 800300c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	461a      	mov	r2, r3
 800301c:	2301      	movs	r3, #1
 800301e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3361      	adds	r3, #97	; 0x61
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fa4c 	bl	80054da <USB_HC_Halt>
}
 8003042:	e28c      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d12c      	bne.n	80030b4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3361      	adds	r3, #97	; 0x61
 8003068:	2204      	movs	r2, #4
 800306a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	333d      	adds	r3, #61	; 0x3d
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f002 fa1d 	bl	80054da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2340      	movs	r3, #64	; 0x40
 80030b0:	6093      	str	r3, [r2, #8]
}
 80030b2:	e254      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d11a      	bne.n	8003100 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	2308      	movs	r3, #8
 80030da:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	2205      	movs	r2, #5
 80030ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 f9ee 	bl	80054da <USB_HC_Halt>
}
 80030fe:	e22e      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d140      	bne.n	8003198 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	335c      	adds	r3, #92	; 0x5c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3361      	adds	r3, #97	; 0x61
 8003136:	2203      	movs	r2, #3
 8003138:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	333d      	adds	r3, #61	; 0x3d
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d112      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333c      	adds	r3, #60	; 0x3c
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	333d      	adds	r3, #61	; 0x3d
 8003170:	2201      	movs	r2, #1
 8003172:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f002 f9ab 	bl	80054da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	461a      	mov	r2, r3
 8003192:	2310      	movs	r3, #16
 8003194:	6093      	str	r3, [r2, #8]
}
 8003196:	e1e2      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b80      	cmp	r3, #128	; 0x80
 80031ac:	d164      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d111      	bne.n	80031da <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3361      	adds	r3, #97	; 0x61
 80031c4:	2206      	movs	r2, #6
 80031c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f002 f981 	bl	80054da <USB_HC_Halt>
 80031d8:	e044      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	335c      	adds	r3, #92	; 0x5c
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	202c      	movs	r0, #44	; 0x2c
 80031f2:	fb00 f303 	mul.w	r3, r0, r3
 80031f6:	440b      	add	r3, r1
 80031f8:	335c      	adds	r3, #92	; 0x5c
 80031fa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	335c      	adds	r3, #92	; 0x5c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d920      	bls.n	8003252 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	335c      	adds	r3, #92	; 0x5c
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3360      	adds	r3, #96	; 0x60
 8003230:	2204      	movs	r2, #4
 8003232:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	b2d9      	uxtb	r1, r3
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	202c      	movs	r0, #44	; 0x2c
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	4413      	add	r3, r2
 8003244:	3360      	adds	r3, #96	; 0x60
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f00a ff2e 	bl	800e0ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8003250:	e008      	b.n	8003264 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	212c      	movs	r1, #44	; 0x2c
 8003258:	fb01 f303 	mul.w	r3, r1, r3
 800325c:	4413      	add	r3, r2
 800325e:	3360      	adds	r3, #96	; 0x60
 8003260:	2202      	movs	r2, #2
 8003262:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	4413      	add	r3, r2
 800326c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003270:	461a      	mov	r2, r3
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	6093      	str	r3, [r2, #8]
}
 8003276:	e172      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	4413      	add	r3, r2
 8003280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328e:	d11b      	bne.n	80032c8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	2208      	movs	r2, #8
 80032a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 f914 	bl	80054da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c4:	6093      	str	r3, [r2, #8]
}
 80032c6:	e14a      	b.n	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b02      	cmp	r3, #2
 80032dc:	f040 813f 	bne.w	800355e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3361      	adds	r3, #97	; 0x61
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d17d      	bne.n	80033f0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	212c      	movs	r1, #44	; 0x2c
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	4413      	add	r3, r2
 8003300:	3360      	adds	r3, #96	; 0x60
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	333f      	adds	r3, #63	; 0x3f
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d00a      	beq.n	8003330 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	333f      	adds	r3, #63	; 0x3f
 8003328:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800332a:	2b03      	cmp	r3, #3
 800332c:	f040 8100 	bne.w	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	212c      	movs	r1, #44	; 0x2c
 800333e:	fb01 f303 	mul.w	r3, r1, r3
 8003342:	4413      	add	r3, r2
 8003344:	3355      	adds	r3, #85	; 0x55
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2d8      	uxtb	r0, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3355      	adds	r3, #85	; 0x55
 800335c:	4602      	mov	r2, r0
 800335e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 80e3 	bne.w	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	212c      	movs	r1, #44	; 0x2c
 8003370:	fb01 f303 	mul.w	r3, r1, r3
 8003374:	4413      	add	r3, r2
 8003376:	334c      	adds	r3, #76	; 0x4c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80d8 	beq.w	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	212c      	movs	r1, #44	; 0x2c
 8003386:	fb01 f303 	mul.w	r3, r1, r3
 800338a:	4413      	add	r3, r2
 800338c:	334c      	adds	r3, #76	; 0x4c
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	202c      	movs	r0, #44	; 0x2c
 8003396:	fb00 f202 	mul.w	r2, r0, r2
 800339a:	440a      	add	r2, r1
 800339c:	3240      	adds	r2, #64	; 0x40
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	4413      	add	r3, r2
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	202c      	movs	r0, #44	; 0x2c
 80033aa:	fb00 f202 	mul.w	r2, r0, r2
 80033ae:	440a      	add	r2, r1
 80033b0:	3240      	adds	r2, #64	; 0x40
 80033b2:	8812      	ldrh	r2, [r2, #0]
 80033b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80b5 	beq.w	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3355      	adds	r3, #85	; 0x55
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2d8      	uxtb	r0, r3
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	212c      	movs	r1, #44	; 0x2c
 80033e2:	fb01 f303 	mul.w	r3, r1, r3
 80033e6:	4413      	add	r3, r2
 80033e8:	3355      	adds	r3, #85	; 0x55
 80033ea:	4602      	mov	r2, r0
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e09f      	b.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	212c      	movs	r1, #44	; 0x2c
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	4413      	add	r3, r2
 80033fc:	3361      	adds	r3, #97	; 0x61
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b03      	cmp	r3, #3
 8003402:	d109      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	3360      	adds	r3, #96	; 0x60
 8003412:	2202      	movs	r2, #2
 8003414:	701a      	strb	r2, [r3, #0]
 8003416:	e08b      	b.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	3361      	adds	r3, #97	; 0x61
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d109      	bne.n	8003440 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	212c      	movs	r1, #44	; 0x2c
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	4413      	add	r3, r2
 8003438:	3360      	adds	r3, #96	; 0x60
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e077      	b.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3361      	adds	r3, #97	; 0x61
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d109      	bne.n	8003468 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	212c      	movs	r1, #44	; 0x2c
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	3360      	adds	r3, #96	; 0x60
 8003462:	2205      	movs	r2, #5
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e063      	b.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3361      	adds	r3, #97	; 0x61
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d009      	beq.n	8003490 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	212c      	movs	r1, #44	; 0x2c
 8003482:	fb01 f303 	mul.w	r3, r1, r3
 8003486:	4413      	add	r3, r2
 8003488:	3361      	adds	r3, #97	; 0x61
 800348a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800348c:	2b08      	cmp	r3, #8
 800348e:	d14f      	bne.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	335c      	adds	r3, #92	; 0x5c
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	202c      	movs	r0, #44	; 0x2c
 80034a8:	fb00 f303 	mul.w	r3, r0, r3
 80034ac:	440b      	add	r3, r1
 80034ae:	335c      	adds	r3, #92	; 0x5c
 80034b0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d912      	bls.n	80034ec <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3360      	adds	r3, #96	; 0x60
 80034e6:	2204      	movs	r2, #4
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e021      	b.n	8003530 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	212c      	movs	r1, #44	; 0x2c
 80034f2:	fb01 f303 	mul.w	r3, r1, r3
 80034f6:	4413      	add	r3, r2
 80034f8:	3360      	adds	r3, #96	; 0x60
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003514:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800351c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	4413      	add	r3, r2
 8003526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352a:	461a      	mov	r2, r3
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	2302      	movs	r3, #2
 8003540:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	b2d9      	uxtb	r1, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	202c      	movs	r0, #44	; 0x2c
 800354c:	fb00 f303 	mul.w	r3, r0, r3
 8003550:	4413      	add	r3, r2
 8003552:	3360      	adds	r3, #96	; 0x60
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f00a fda7 	bl	800e0ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800355e:	bf00      	nop
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08a      	sub	sp, #40	; 0x28
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	0c5b      	lsrs	r3, r3, #17
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d004      	beq.n	80035ac <HCD_RXQLVL_IRQHandler+0x46>
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	f000 80a9 	beq.w	80036fc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035aa:	e0aa      	b.n	8003702 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3344      	adds	r3, #68	; 0x44
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 809b 	beq.w	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	212c      	movs	r1, #44	; 0x2c
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	3350      	adds	r3, #80	; 0x50
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	441a      	add	r2, r3
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	202c      	movs	r0, #44	; 0x2c
 80035e4:	fb00 f303 	mul.w	r3, r0, r3
 80035e8:	440b      	add	r3, r1
 80035ea:	334c      	adds	r3, #76	; 0x4c
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d87a      	bhi.n	80036e8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	212c      	movs	r1, #44	; 0x2c
 80035fc:	fb01 f303 	mul.w	r3, r1, r3
 8003600:	4413      	add	r3, r2
 8003602:	3344      	adds	r3, #68	; 0x44
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	b292      	uxth	r2, r2
 800360a:	4619      	mov	r1, r3
 800360c:	f001 fabc 	bl	8004b88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	212c      	movs	r1, #44	; 0x2c
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3344      	adds	r3, #68	; 0x44
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	441a      	add	r2, r3
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	202c      	movs	r0, #44	; 0x2c
 800362a:	fb00 f303 	mul.w	r3, r0, r3
 800362e:	440b      	add	r3, r1
 8003630:	3344      	adds	r3, #68	; 0x44
 8003632:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	fb01 f303 	mul.w	r3, r1, r3
 800363e:	4413      	add	r3, r2
 8003640:	3350      	adds	r3, #80	; 0x50
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	441a      	add	r2, r3
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	202c      	movs	r0, #44	; 0x2c
 800364e:	fb00 f303 	mul.w	r3, r0, r3
 8003652:	440b      	add	r3, r1
 8003654:	3350      	adds	r3, #80	; 0x50
 8003656:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	0cdb      	lsrs	r3, r3, #19
 8003668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800366c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	212c      	movs	r1, #44	; 0x2c
 8003674:	fb01 f303 	mul.w	r3, r1, r3
 8003678:	4413      	add	r3, r2
 800367a:	3340      	adds	r3, #64	; 0x40
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4293      	cmp	r3, r2
 8003684:	d13c      	bne.n	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d039      	beq.n	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	4413      	add	r3, r2
 8003694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b8:	461a      	mov	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3354      	adds	r3, #84	; 0x54
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2d8      	uxtb	r0, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3354      	adds	r3, #84	; 0x54
 80036e2:	4602      	mov	r2, r0
 80036e4:	701a      	strb	r2, [r3, #0]
      break;
 80036e6:	e00b      	b.n	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3360      	adds	r3, #96	; 0x60
 80036f6:	2204      	movs	r2, #4
 80036f8:	701a      	strb	r2, [r3, #0]
      break;
 80036fa:	e001      	b.n	8003700 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003700:	bf00      	nop
  }
}
 8003702:	bf00      	nop
 8003704:	3728      	adds	r7, #40	; 0x28
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b086      	sub	sp, #24
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003736:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d10b      	bne.n	800375a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b01      	cmp	r3, #1
 800374a:	d102      	bne.n	8003752 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f00a fc91 	bl	800e074 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f043 0302 	orr.w	r3, r3, #2
 8003758:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d132      	bne.n	80037ca <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f043 0308 	orr.w	r3, r3, #8
 800376a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d126      	bne.n	80037c4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d113      	bne.n	80037a6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003784:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003788:	d106      	bne.n	8003798 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2102      	movs	r1, #2
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fb67 	bl	8004e64 <USB_InitFSLSPClkSel>
 8003796:	e011      	b.n	80037bc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2101      	movs	r1, #1
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fb60 	bl	8004e64 <USB_InitFSLSPClkSel>
 80037a4:	e00a      	b.n	80037bc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d106      	bne.n	80037bc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037b4:	461a      	mov	r2, r3
 80037b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037ba:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f00a fc83 	bl	800e0c8 <HAL_HCD_PortEnabled_Callback>
 80037c2:	e002      	b.n	80037ca <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f00a fc8d 	bl	800e0e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d103      	bne.n	80037dc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f043 0320 	orr.w	r3, r3, #32
 80037da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e267      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d075      	beq.n	80038fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b85      	ldr	r3, [pc, #532]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003822:	2b08      	cmp	r3, #8
 8003824:	d112      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b82      	ldr	r3, [pc, #520]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b7e      	ldr	r3, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05b      	beq.n	80038f8 <HAL_RCC_OscConfig+0x108>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d157      	bne.n	80038f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e242      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x74>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x98>
 800386e:	4b70      	ldr	r3, [pc, #448]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6f      	ldr	r2, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b6d      	ldr	r3, [pc, #436]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6c      	ldr	r2, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xb0>
 8003888:	4b69      	ldr	r3, [pc, #420]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a68      	ldr	r2, [pc, #416]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b66      	ldr	r3, [pc, #408]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a65      	ldr	r2, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fe f8b8 	bl	8001a1c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fe f8b4 	bl	8001a1c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e207      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b5b      	ldr	r3, [pc, #364]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xc0>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fe f8a4 	bl	8001a1c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fe f8a0 	bl	8001a1c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	; 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e1f3      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b51      	ldr	r3, [pc, #324]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0xe8>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d063      	beq.n	80039ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00b      	beq.n	800392a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800391a:	2b08      	cmp	r3, #8
 800391c:	d11c      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800391e:	4b44      	ldr	r3, [pc, #272]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d116      	bne.n	8003958 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d001      	beq.n	8003942 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1c7      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003942:	4b3b      	ldr	r3, [pc, #236]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4937      	ldr	r1, [pc, #220]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003952:	4313      	orrs	r3, r2
 8003954:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003956:	e03a      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d020      	beq.n	80039a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 8003962:	2201      	movs	r2, #1
 8003964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe f859 	bl	8001a1c <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe f855 	bl	8001a1c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1a8      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	4b2b      	ldr	r3, [pc, #172]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800398c:	4b28      	ldr	r3, [pc, #160]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 800399c:	4313      	orrs	r3, r2
 800399e:	600b      	str	r3, [r1, #0]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039a2:	4b24      	ldr	r3, [pc, #144]	; (8003a34 <HAL_RCC_OscConfig+0x244>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe f838 	bl	8001a1c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe f834 	bl	8001a1c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e187      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d036      	beq.n	8003a48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe f818 	bl	8001a1c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fe f814 	bl	8001a1c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e167      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_OscConfig+0x240>)
 8003a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x200>
 8003a0e:	e01b      	b.n	8003a48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x248>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe f801 	bl	8001a1c <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00e      	b.n	8003a3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fd fffd 	bl	8001a1c <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d907      	bls.n	8003a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e150      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003a30:	40023800 	.word	0x40023800
 8003a34:	42470000 	.word	0x42470000
 8003a38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1ea      	bne.n	8003a1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8097 	beq.w	8003b84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b7d      	ldr	r3, [pc, #500]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	4a7c      	ldr	r2, [pc, #496]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6413      	str	r3, [r2, #64]	; 0x40
 8003a76:	4b7a      	ldr	r3, [pc, #488]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a82:	2301      	movs	r3, #1
 8003a84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a86:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a92:	4b74      	ldr	r3, [pc, #464]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a73      	ldr	r2, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9e:	f7fd ffbd 	bl	8001a1c <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa6:	f7fd ffb9 	bl	8001a1c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e10c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x474>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x2ea>
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4a63      	ldr	r2, [pc, #396]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad8:	e01c      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b05      	cmp	r3, #5
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x30c>
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6713      	str	r3, [r2, #112]	; 0x70
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af2:	4a5b      	ldr	r2, [pc, #364]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	6713      	str	r3, [r2, #112]	; 0x70
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0x324>
 8003afc:	4b58      	ldr	r3, [pc, #352]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	4a57      	ldr	r2, [pc, #348]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	6713      	str	r3, [r2, #112]	; 0x70
 8003b08:	4b55      	ldr	r3, [pc, #340]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0c:	4a54      	ldr	r2, [pc, #336]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d015      	beq.n	8003b48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fd ff7e 	bl	8001a1c <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fd ff7a 	bl	8001a1c <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0cb      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	4b49      	ldr	r3, [pc, #292]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <HAL_RCC_OscConfig+0x334>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b48:	f7fd ff68 	bl	8001a1c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b50:	f7fd ff64 	bl	8001a1c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e0b5      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	4b3e      	ldr	r3, [pc, #248]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1ee      	bne.n	8003b50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b39      	ldr	r3, [pc, #228]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4a38      	ldr	r2, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 80a1 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8e:	4b34      	ldr	r3, [pc, #208]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d05c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d141      	bne.n	8003c26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b31      	ldr	r3, [pc, #196]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd ff38 	bl	8001a1c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fd ff34 	bl	8001a1c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e087      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	019b      	lsls	r3, r3, #6
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	491b      	ldr	r1, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fd ff0d 	bl	8001a1c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd ff09 	bl	8001a1c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e05c      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x416>
 8003c24:	e054      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c26:	4b10      	ldr	r3, [pc, #64]	; (8003c68 <HAL_RCC_OscConfig+0x478>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fef6 	bl	8001a1c <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c34:	f7fd fef2 	bl	8001a1c <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b02      	cmp	r3, #2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e045      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <HAL_RCC_OscConfig+0x470>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f0      	bne.n	8003c34 <HAL_RCC_OscConfig+0x444>
 8003c52:	e03d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e038      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
 8003c60:	40023800 	.word	0x40023800
 8003c64:	40007000 	.word	0x40007000
 8003c68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d028      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d121      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d11a      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ca2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d111      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d107      	bne.n	8003ccc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40023800 	.word	0x40023800

08003ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cc      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90c      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b8      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d044      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4934      	ldr	r1, [pc, #208]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd fe24 	bl	8001a1c <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fd fe20 	bl	8001a1c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 020c 	and.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d1eb      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20c      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4916      	ldr	r1, [pc, #88]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	490e      	ldr	r1, [pc, #56]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e66:	f000 f821 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fd84 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0800f4d4 	.word	0x0800f4d4
 8003ea4:	20000000 	.word	0x20000000
 8003ea8:	20000004 	.word	0x20000004

08003eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb0:	b094      	sub	sp, #80	; 0x50
 8003eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb8:	2300      	movs	r3, #0
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ec4:	4b79      	ldr	r3, [pc, #484]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 030c 	and.w	r3, r3, #12
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d00d      	beq.n	8003eec <HAL_RCC_GetSysClockFreq+0x40>
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	f200 80e1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ede:	e0db      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ee0:	4b73      	ldr	r3, [pc, #460]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ee4:	e0db      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ee6:	4b73      	ldr	r3, [pc, #460]	; (80040b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ee8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003eea:	e0d8      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eec:	4b6f      	ldr	r3, [pc, #444]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f02:	4b6a      	ldr	r3, [pc, #424]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	2200      	movs	r2, #0
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f14:	633b      	str	r3, [r7, #48]	; 0x30
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	f04f 0000 	mov.w	r0, #0
 8003f26:	f04f 0100 	mov.w	r1, #0
 8003f2a:	0159      	lsls	r1, r3, #5
 8003f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f30:	0150      	lsls	r0, r2, #5
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4621      	mov	r1, r4
 8003f38:	1a51      	subs	r1, r2, r1
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	018b      	lsls	r3, r1, #6
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	018a      	lsls	r2, r1, #6
 8003f5e:	4651      	mov	r1, sl
 8003f60:	ebb2 0801 	subs.w	r8, r2, r1
 8003f64:	4659      	mov	r1, fp
 8003f66:	eb63 0901 	sbc.w	r9, r3, r1
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f7e:	4690      	mov	r8, r2
 8003f80:	4699      	mov	r9, r3
 8003f82:	4623      	mov	r3, r4
 8003f84:	eb18 0303 	adds.w	r3, r8, r3
 8003f88:	60bb      	str	r3, [r7, #8]
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	eb49 0303 	adc.w	r3, r9, r3
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	024b      	lsls	r3, r1, #9
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fa8:	4621      	mov	r1, r4
 8003faa:	024a      	lsls	r2, r1, #9
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fbc:	f7fc fc7e 	bl	80008bc <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	e058      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4b38      	ldr	r3, [pc, #224]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	099b      	lsrs	r3, r3, #6
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fe4:	4642      	mov	r2, r8
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	f04f 0000 	mov.w	r0, #0
 8003fec:	f04f 0100 	mov.w	r1, #0
 8003ff0:	0159      	lsls	r1, r3, #5
 8003ff2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff6:	0150      	lsls	r0, r2, #5
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004002:	4649      	mov	r1, r9
 8004004:	eb63 0b01 	sbc.w	fp, r3, r1
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004014:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004018:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800401c:	ebb2 040a 	subs.w	r4, r2, sl
 8004020:	eb63 050b 	sbc.w	r5, r3, fp
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	00eb      	lsls	r3, r5, #3
 800402e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004032:	00e2      	lsls	r2, r4, #3
 8004034:	4614      	mov	r4, r2
 8004036:	461d      	mov	r5, r3
 8004038:	4643      	mov	r3, r8
 800403a:	18e3      	adds	r3, r4, r3
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	464b      	mov	r3, r9
 8004040:	eb45 0303 	adc.w	r3, r5, r3
 8004044:	607b      	str	r3, [r7, #4]
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004052:	4629      	mov	r1, r5
 8004054:	028b      	lsls	r3, r1, #10
 8004056:	4621      	mov	r1, r4
 8004058:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800405c:	4621      	mov	r1, r4
 800405e:	028a      	lsls	r2, r1, #10
 8004060:	4610      	mov	r0, r2
 8004062:	4619      	mov	r1, r3
 8004064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	61fa      	str	r2, [r7, #28]
 800406c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004070:	f7fc fc24 	bl	80008bc <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4613      	mov	r3, r2
 800407a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_GetSysClockFreq+0x200>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	3301      	adds	r3, #1
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800408c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800408e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004096:	e002      	b.n	800409e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800409a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800409c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3750      	adds	r7, #80	; 0x50
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	00f42400 	.word	0x00f42400
 80040b4:	007a1200 	.word	0x007a1200

080040b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <HAL_RCC_GetHCLKFreq+0x14>)
 80040be:	681b      	ldr	r3, [r3, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000000 	.word	0x20000000

080040d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040d4:	f7ff fff0 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0a9b      	lsrs	r3, r3, #10
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4903      	ldr	r1, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040e6:	5ccb      	ldrb	r3, [r1, r3]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	0800f4e4 	.word	0x0800f4e4

080040f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040fc:	f7ff ffdc 	bl	80040b8 <HAL_RCC_GetHCLKFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	0b5b      	lsrs	r3, r3, #13
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	4903      	ldr	r1, [pc, #12]	; (800411c <HAL_RCC_GetPCLK2Freq+0x24>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004114:	4618      	mov	r0, r3
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40023800 	.word	0x40023800
 800411c:	0800f4e4 	.word	0x0800f4e4

08004120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e03f      	b.n	80041b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fd fb14 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2224      	movs	r2, #36	; 0x24
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f929 	bl	80043bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b08a      	sub	sp, #40	; 0x28
 80041be:	af02      	add	r7, sp, #8
 80041c0:	60f8      	str	r0, [r7, #12]
 80041c2:	60b9      	str	r1, [r7, #8]
 80041c4:	603b      	str	r3, [r7, #0]
 80041c6:	4613      	mov	r3, r2
 80041c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d17c      	bne.n	80042d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <HAL_UART_Transmit+0x2c>
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e075      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d101      	bne.n	80041f8 <HAL_UART_Transmit+0x3e>
 80041f4:	2302      	movs	r3, #2
 80041f6:	e06e      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2221      	movs	r2, #33	; 0x21
 800420a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800420e:	f7fd fc05 	bl	8001a1c <HAL_GetTick>
 8004212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004228:	d108      	bne.n	800423c <HAL_UART_Transmit+0x82>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e003      	b.n	8004244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800424c:	e02a      	b.n	80042a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2200      	movs	r2, #0
 8004256:	2180      	movs	r1, #128	; 0x80
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f840 	bl	80042de <UART_WaitOnFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e036      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	3302      	adds	r3, #2
 8004282:	61bb      	str	r3, [r7, #24]
 8004284:	e007      	b.n	8004296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	3301      	adds	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1cf      	bne.n	800424e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2140      	movs	r1, #64	; 0x40
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f810 	bl	80042de <UART_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e006      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b090      	sub	sp, #64	; 0x40
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	603b      	str	r3, [r7, #0]
 80042ea:	4613      	mov	r3, r2
 80042ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	e050      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f6:	d04c      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <UART_WaitOnFlagUntilTimeout+0x30>
 80042fe:	f7fd fb8d 	bl	8001a1c <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800430a:	429a      	cmp	r2, r3
 800430c:	d241      	bcs.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800432e:	637a      	str	r2, [r7, #52]	; 0x34
 8004330:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e5      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3314      	adds	r3, #20
 8004348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	e853 3f00 	ldrex	r3, [r3]
 8004350:	613b      	str	r3, [r7, #16]
   return(result);
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004362:	623a      	str	r2, [r7, #32]
 8004364:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004366:	69f9      	ldr	r1, [r7, #28]
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	e841 2300 	strex	r3, r2, [r1]
 800436e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1e5      	bne.n	8004342 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2220      	movs	r2, #32
 800437a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	bf0c      	ite	eq
 80043a2:	2301      	moveq	r3, #1
 80043a4:	2300      	movne	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d09f      	beq.n	80042f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3740      	adds	r7, #64	; 0x40
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c0:	b0c0      	sub	sp, #256	; 0x100
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d8:	68d9      	ldr	r1, [r3, #12]
 80043da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	ea40 0301 	orr.w	r3, r0, r1
 80043e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004414:	f021 010c 	bic.w	r1, r1, #12
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004422:	430b      	orrs	r3, r1
 8004424:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	6999      	ldr	r1, [r3, #24]
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	ea40 0301 	orr.w	r3, r0, r1
 8004442:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b8f      	ldr	r3, [pc, #572]	; (8004688 <UART_SetConfig+0x2cc>)
 800444c:	429a      	cmp	r2, r3
 800444e:	d005      	beq.n	800445c <UART_SetConfig+0xa0>
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b8d      	ldr	r3, [pc, #564]	; (800468c <UART_SetConfig+0x2d0>)
 8004458:	429a      	cmp	r2, r3
 800445a:	d104      	bne.n	8004466 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800445c:	f7ff fe4c 	bl	80040f8 <HAL_RCC_GetPCLK2Freq>
 8004460:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004464:	e003      	b.n	800446e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004466:	f7ff fe33 	bl	80040d0 <HAL_RCC_GetPCLK1Freq>
 800446a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004478:	f040 810c 	bne.w	8004694 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800447c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004486:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800448a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800448e:	4622      	mov	r2, r4
 8004490:	462b      	mov	r3, r5
 8004492:	1891      	adds	r1, r2, r2
 8004494:	65b9      	str	r1, [r7, #88]	; 0x58
 8004496:	415b      	adcs	r3, r3
 8004498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800449a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800449e:	4621      	mov	r1, r4
 80044a0:	eb12 0801 	adds.w	r8, r2, r1
 80044a4:	4629      	mov	r1, r5
 80044a6:	eb43 0901 	adc.w	r9, r3, r1
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044be:	4690      	mov	r8, r2
 80044c0:	4699      	mov	r9, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	eb18 0303 	adds.w	r3, r8, r3
 80044c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044cc:	462b      	mov	r3, r5
 80044ce:	eb49 0303 	adc.w	r3, r9, r3
 80044d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ea:	460b      	mov	r3, r1
 80044ec:	18db      	adds	r3, r3, r3
 80044ee:	653b      	str	r3, [r7, #80]	; 0x50
 80044f0:	4613      	mov	r3, r2
 80044f2:	eb42 0303 	adc.w	r3, r2, r3
 80044f6:	657b      	str	r3, [r7, #84]	; 0x54
 80044f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004500:	f7fc f9dc 	bl	80008bc <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4b61      	ldr	r3, [pc, #388]	; (8004690 <UART_SetConfig+0x2d4>)
 800450a:	fba3 2302 	umull	r2, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	011c      	lsls	r4, r3, #4
 8004512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800451c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004520:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004524:	4642      	mov	r2, r8
 8004526:	464b      	mov	r3, r9
 8004528:	1891      	adds	r1, r2, r2
 800452a:	64b9      	str	r1, [r7, #72]	; 0x48
 800452c:	415b      	adcs	r3, r3
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004530:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004534:	4641      	mov	r1, r8
 8004536:	eb12 0a01 	adds.w	sl, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb43 0b01 	adc.w	fp, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800454c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004554:	4692      	mov	sl, r2
 8004556:	469b      	mov	fp, r3
 8004558:	4643      	mov	r3, r8
 800455a:	eb1a 0303 	adds.w	r3, sl, r3
 800455e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004562:	464b      	mov	r3, r9
 8004564:	eb4b 0303 	adc.w	r3, fp, r3
 8004568:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004578:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800457c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004580:	460b      	mov	r3, r1
 8004582:	18db      	adds	r3, r3, r3
 8004584:	643b      	str	r3, [r7, #64]	; 0x40
 8004586:	4613      	mov	r3, r2
 8004588:	eb42 0303 	adc.w	r3, r2, r3
 800458c:	647b      	str	r3, [r7, #68]	; 0x44
 800458e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004592:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004596:	f7fc f991 	bl	80008bc <__aeabi_uldivmod>
 800459a:	4602      	mov	r2, r0
 800459c:	460b      	mov	r3, r1
 800459e:	4611      	mov	r1, r2
 80045a0:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <UART_SetConfig+0x2d4>)
 80045a2:	fba3 2301 	umull	r2, r3, r3, r1
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2264      	movs	r2, #100	; 0x64
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	1acb      	subs	r3, r1, r3
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <UART_SetConfig+0x2d4>)
 80045b8:	fba3 2302 	umull	r2, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045c4:	441c      	add	r4, r3
 80045c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	1891      	adds	r1, r2, r2
 80045de:	63b9      	str	r1, [r7, #56]	; 0x38
 80045e0:	415b      	adcs	r3, r3
 80045e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045e8:	4641      	mov	r1, r8
 80045ea:	1851      	adds	r1, r2, r1
 80045ec:	6339      	str	r1, [r7, #48]	; 0x30
 80045ee:	4649      	mov	r1, r9
 80045f0:	414b      	adcs	r3, r1
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004600:	4659      	mov	r1, fp
 8004602:	00cb      	lsls	r3, r1, #3
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460a:	4651      	mov	r1, sl
 800460c:	00ca      	lsls	r2, r1, #3
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	4603      	mov	r3, r0
 8004614:	4642      	mov	r2, r8
 8004616:	189b      	adds	r3, r3, r2
 8004618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800461c:	464b      	mov	r3, r9
 800461e:	460a      	mov	r2, r1
 8004620:	eb42 0303 	adc.w	r3, r2, r3
 8004624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004634:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004638:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800463c:	460b      	mov	r3, r1
 800463e:	18db      	adds	r3, r3, r3
 8004640:	62bb      	str	r3, [r7, #40]	; 0x28
 8004642:	4613      	mov	r3, r2
 8004644:	eb42 0303 	adc.w	r3, r2, r3
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800464a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800464e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004652:	f7fc f933 	bl	80008bc <__aeabi_uldivmod>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <UART_SetConfig+0x2d4>)
 800465c:	fba3 1302 	umull	r1, r3, r3, r2
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	2164      	movs	r1, #100	; 0x64
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	3332      	adds	r3, #50	; 0x32
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <UART_SetConfig+0x2d4>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	f003 0207 	and.w	r2, r3, #7
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4422      	add	r2, r4
 8004682:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004684:	e106      	b.n	8004894 <UART_SetConfig+0x4d8>
 8004686:	bf00      	nop
 8004688:	40011000 	.word	0x40011000
 800468c:	40011400 	.word	0x40011400
 8004690:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004698:	2200      	movs	r2, #0
 800469a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800469e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046a6:	4642      	mov	r2, r8
 80046a8:	464b      	mov	r3, r9
 80046aa:	1891      	adds	r1, r2, r2
 80046ac:	6239      	str	r1, [r7, #32]
 80046ae:	415b      	adcs	r3, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
 80046b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046b6:	4641      	mov	r1, r8
 80046b8:	1854      	adds	r4, r2, r1
 80046ba:	4649      	mov	r1, r9
 80046bc:	eb43 0501 	adc.w	r5, r3, r1
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	00eb      	lsls	r3, r5, #3
 80046ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046ce:	00e2      	lsls	r2, r4, #3
 80046d0:	4614      	mov	r4, r2
 80046d2:	461d      	mov	r5, r3
 80046d4:	4643      	mov	r3, r8
 80046d6:	18e3      	adds	r3, r4, r3
 80046d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046dc:	464b      	mov	r3, r9
 80046de:	eb45 0303 	adc.w	r3, r5, r3
 80046e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004702:	4629      	mov	r1, r5
 8004704:	008b      	lsls	r3, r1, #2
 8004706:	4621      	mov	r1, r4
 8004708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470c:	4621      	mov	r1, r4
 800470e:	008a      	lsls	r2, r1, #2
 8004710:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004714:	f7fc f8d2 	bl	80008bc <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4b60      	ldr	r3, [pc, #384]	; (80048a0 <UART_SetConfig+0x4e4>)
 800471e:	fba3 2302 	umull	r2, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	011c      	lsls	r4, r3, #4
 8004726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800472a:	2200      	movs	r2, #0
 800472c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004730:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004734:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004738:	4642      	mov	r2, r8
 800473a:	464b      	mov	r3, r9
 800473c:	1891      	adds	r1, r2, r2
 800473e:	61b9      	str	r1, [r7, #24]
 8004740:	415b      	adcs	r3, r3
 8004742:	61fb      	str	r3, [r7, #28]
 8004744:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004748:	4641      	mov	r1, r8
 800474a:	1851      	adds	r1, r2, r1
 800474c:	6139      	str	r1, [r7, #16]
 800474e:	4649      	mov	r1, r9
 8004750:	414b      	adcs	r3, r1
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004760:	4659      	mov	r1, fp
 8004762:	00cb      	lsls	r3, r1, #3
 8004764:	4651      	mov	r1, sl
 8004766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800476a:	4651      	mov	r1, sl
 800476c:	00ca      	lsls	r2, r1, #3
 800476e:	4610      	mov	r0, r2
 8004770:	4619      	mov	r1, r3
 8004772:	4603      	mov	r3, r0
 8004774:	4642      	mov	r2, r8
 8004776:	189b      	adds	r3, r3, r2
 8004778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800477c:	464b      	mov	r3, r9
 800477e:	460a      	mov	r2, r1
 8004780:	eb42 0303 	adc.w	r3, r2, r3
 8004784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	67bb      	str	r3, [r7, #120]	; 0x78
 8004792:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047a0:	4649      	mov	r1, r9
 80047a2:	008b      	lsls	r3, r1, #2
 80047a4:	4641      	mov	r1, r8
 80047a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047aa:	4641      	mov	r1, r8
 80047ac:	008a      	lsls	r2, r1, #2
 80047ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047b2:	f7fc f883 	bl	80008bc <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	4b38      	ldr	r3, [pc, #224]	; (80048a0 <UART_SetConfig+0x4e4>)
 80047be:	fba3 2301 	umull	r2, r3, r3, r1
 80047c2:	095b      	lsrs	r3, r3, #5
 80047c4:	2264      	movs	r2, #100	; 0x64
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	1acb      	subs	r3, r1, r3
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	3332      	adds	r3, #50	; 0x32
 80047d0:	4a33      	ldr	r2, [pc, #204]	; (80048a0 <UART_SetConfig+0x4e4>)
 80047d2:	fba2 2303 	umull	r2, r3, r2, r3
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047dc:	441c      	add	r4, r3
 80047de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047e2:	2200      	movs	r2, #0
 80047e4:	673b      	str	r3, [r7, #112]	; 0x70
 80047e6:	677a      	str	r2, [r7, #116]	; 0x74
 80047e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047ec:	4642      	mov	r2, r8
 80047ee:	464b      	mov	r3, r9
 80047f0:	1891      	adds	r1, r2, r2
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047fc:	4641      	mov	r1, r8
 80047fe:	1851      	adds	r1, r2, r1
 8004800:	6039      	str	r1, [r7, #0]
 8004802:	4649      	mov	r1, r9
 8004804:	414b      	adcs	r3, r1
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004814:	4659      	mov	r1, fp
 8004816:	00cb      	lsls	r3, r1, #3
 8004818:	4651      	mov	r1, sl
 800481a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800481e:	4651      	mov	r1, sl
 8004820:	00ca      	lsls	r2, r1, #3
 8004822:	4610      	mov	r0, r2
 8004824:	4619      	mov	r1, r3
 8004826:	4603      	mov	r3, r0
 8004828:	4642      	mov	r2, r8
 800482a:	189b      	adds	r3, r3, r2
 800482c:	66bb      	str	r3, [r7, #104]	; 0x68
 800482e:	464b      	mov	r3, r9
 8004830:	460a      	mov	r2, r1
 8004832:	eb42 0303 	adc.w	r3, r2, r3
 8004836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	663b      	str	r3, [r7, #96]	; 0x60
 8004842:	667a      	str	r2, [r7, #100]	; 0x64
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004850:	4649      	mov	r1, r9
 8004852:	008b      	lsls	r3, r1, #2
 8004854:	4641      	mov	r1, r8
 8004856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800485a:	4641      	mov	r1, r8
 800485c:	008a      	lsls	r2, r1, #2
 800485e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004862:	f7fc f82b 	bl	80008bc <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <UART_SetConfig+0x4e4>)
 800486c:	fba3 1302 	umull	r1, r3, r3, r2
 8004870:	095b      	lsrs	r3, r3, #5
 8004872:	2164      	movs	r1, #100	; 0x64
 8004874:	fb01 f303 	mul.w	r3, r1, r3
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	3332      	adds	r3, #50	; 0x32
 800487e:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <UART_SetConfig+0x4e4>)
 8004880:	fba2 2303 	umull	r2, r3, r2, r3
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	f003 020f 	and.w	r2, r3, #15
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4422      	add	r2, r4
 8004892:	609a      	str	r2, [r3, #8]
}
 8004894:	bf00      	nop
 8004896:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800489a:	46bd      	mov	sp, r7
 800489c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a0:	51eb851f 	.word	0x51eb851f

080048a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048a4:	b084      	sub	sp, #16
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	f107 001c 	add.w	r0, r7, #28
 80048b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d122      	bne.n	8004902 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d105      	bne.n	80048f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9c0 	bl	8004c7c <USB_CoreReset>
 80048fc:	4603      	mov	r3, r0
 80048fe:	73fb      	strb	r3, [r7, #15]
 8004900:	e01a      	b.n	8004938 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f9b4 	bl	8004c7c <USB_CoreReset>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
 800492a:	e005      	b.n	8004938 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	2b01      	cmp	r3, #1
 800493c:	d10b      	bne.n	8004956 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f043 0206 	orr.w	r2, r3, #6
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f043 0220 	orr.w	r2, r3, #32
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004962:	b004      	add	sp, #16
 8004964:	4770      	bx	lr

08004966 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 0201 	bic.w	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	460b      	mov	r3, r1
 80049b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049c6:	78fb      	ldrb	r3, [r7, #3]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d115      	bne.n	80049f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049d8:	2001      	movs	r0, #1
 80049da:	f7fd f82b 	bl	8001a34 <HAL_Delay>
      ms++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f93a 	bl	8004c5e <USB_GetMode>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d01e      	beq.n	8004a2e <USB_SetCurrentMode+0x84>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2b31      	cmp	r3, #49	; 0x31
 80049f4:	d9f0      	bls.n	80049d8 <USB_SetCurrentMode+0x2e>
 80049f6:	e01a      	b.n	8004a2e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d115      	bne.n	8004a2a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	f7fd f812 	bl	8001a34 <HAL_Delay>
      ms++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f921 	bl	8004c5e <USB_GetMode>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <USB_SetCurrentMode+0x84>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b31      	cmp	r3, #49	; 0x31
 8004a26:	d9f0      	bls.n	8004a0a <USB_SetCurrentMode+0x60>
 8004a28:	e001      	b.n	8004a2e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e005      	b.n	8004a3a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b32      	cmp	r3, #50	; 0x32
 8004a32:	d101      	bne.n	8004a38 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e000      	b.n	8004a3a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <USB_FlushTxFifo+0x64>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e01b      	b.n	8004a9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	daf2      	bge.n	8004a52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	019b      	lsls	r3, r3, #6
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <USB_FlushTxFifo+0x64>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e006      	b.n	8004a9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d0f0      	beq.n	8004a7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	00030d40 	.word	0x00030d40

08004aac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a11      	ldr	r2, [pc, #68]	; (8004b08 <USB_FlushRxFifo+0x5c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e018      	b.n	8004afc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	daf2      	bge.n	8004ab8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <USB_FlushRxFifo+0x5c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e006      	b.n	8004afc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	2b10      	cmp	r3, #16
 8004af8:	d0f0      	beq.n	8004adc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	00030d40 	.word	0x00030d40

08004b0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4611      	mov	r1, r2
 8004b18:	461a      	mov	r2, r3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	71fb      	strb	r3, [r7, #7]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d123      	bne.n	8004b7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b32:	88bb      	ldrh	r3, [r7, #4]
 8004b34:	3303      	adds	r3, #3
 8004b36:	089b      	lsrs	r3, r3, #2
 8004b38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	e018      	b.n	8004b72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	031a      	lsls	r2, r3, #12
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	3301      	adds	r3, #1
 8004b58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	3301      	adds	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d3e2      	bcc.n	8004b40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3724      	adds	r7, #36	; 0x24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b08b      	sub	sp, #44	; 0x2c
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	e014      	b.n	8004bde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	601a      	str	r2, [r3, #0]
    pDest++;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	3301      	adds	r3, #1
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	3301      	adds	r3, #1
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	6a3a      	ldr	r2, [r7, #32]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d3e6      	bcc.n	8004bb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004be6:	8bfb      	ldrh	r3, [r7, #30]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01e      	beq.n	8004c2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f107 0310 	add.w	r3, r7, #16
 8004bfc:	6812      	ldr	r2, [r2, #0]
 8004bfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	701a      	strb	r2, [r3, #0]
      i++;
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	3301      	adds	r3, #1
 8004c16:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004c1e:	8bfb      	ldrh	r3, [r7, #30]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c24:	8bfb      	ldrh	r3, [r7, #30]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1ea      	bne.n	8004c00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	372c      	adds	r7, #44	; 0x2c
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c50:	68fb      	ldr	r3, [r7, #12]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <USB_CoreReset+0x64>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d901      	bls.n	8004c9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e01b      	b.n	8004cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	daf2      	bge.n	8004c88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <USB_CoreReset+0x64>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e006      	b.n	8004cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d0f0      	beq.n	8004cb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	00030d40 	.word	0x00030d40

08004ce4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d04:	461a      	mov	r2, r3
 8004d06:	2300      	movs	r3, #0
 8004d08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d018      	beq.n	8004d6c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d10a      	bne.n	8004d56 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	e014      	b.n	8004d80 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e009      	b.n	8004d80 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004d7a:	f023 0304 	bic.w	r3, r3, #4
 8004d7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d80:	2110      	movs	r1, #16
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fe5e 	bl	8004a44 <USB_FlushTxFifo>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fe8a 	bl	8004aac <USB_FlushRxFifo>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	e015      	b.n	8004dd4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db4:	461a      	mov	r2, r3
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d3e5      	bcc.n	8004da8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f04f 32ff 	mov.w	r2, #4294967295
 8004de8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <USB_HostInit+0x16c>)
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a13      	ldr	r2, [pc, #76]	; (8004e54 <USB_HostInit+0x170>)
 8004e08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004e0c:	e009      	b.n	8004e22 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2280      	movs	r2, #128	; 0x80
 8004e12:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <USB_HostInit+0x174>)
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0f      	ldr	r2, [pc, #60]	; (8004e5c <USB_HostInit+0x178>)
 8004e1e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f043 0210 	orr.w	r2, r3, #16
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699a      	ldr	r2, [r3, #24]
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <USB_HostInit+0x17c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e4c:	b004      	add	sp, #16
 8004e4e:	4770      	bx	lr
 8004e50:	01000200 	.word	0x01000200
 8004e54:	00e00300 	.word	0x00e00300
 8004e58:	00600080 	.word	0x00600080
 8004e5c:	004000e0 	.word	0x004000e0
 8004e60:	a3200008 	.word	0xa3200008

08004e64 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	68f9      	ldr	r1, [r7, #12]
 8004e98:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ea0:	78fb      	ldrb	r3, [r7, #3]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d107      	bne.n	8004eb6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eac:	461a      	mov	r2, r3
 8004eae:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004eb2:	6053      	str	r3, [r2, #4]
 8004eb4:	e009      	b.n	8004eca <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d106      	bne.n	8004eca <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ec8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3714      	adds	r7, #20
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ef8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f06:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004f08:	2064      	movs	r0, #100	; 0x64
 8004f0a:	f7fc fd93 	bl	8001a34 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f1a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f1c:	200a      	movs	r0, #10
 8004f1e:	f7fc fd89 	bl	8001a34 <HAL_Delay>

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f50:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d109      	bne.n	8004f70 <USB_DriveVbus+0x44>
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d106      	bne.n	8004f70 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f6e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	d109      	bne.n	8004f90 <USB_DriveVbus+0x64>
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f8e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b085      	sub	sp, #20
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	0c5b      	lsrs	r3, r3, #17
 8004fbc:	f003 0303 	and.w	r3, r3, #3
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	b29b      	uxth	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
	...

08004ff0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	70fb      	strb	r3, [r7, #3]
 8005002:	460b      	mov	r3, r1
 8005004:	70bb      	strb	r3, [r7, #2]
 8005006:	4613      	mov	r3, r2
 8005008:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800500a:	2300      	movs	r3, #0
 800500c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005012:	78fb      	ldrb	r3, [r7, #3]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	4413      	add	r3, r2
 800501a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800501e:	461a      	mov	r2, r3
 8005020:	f04f 33ff 	mov.w	r3, #4294967295
 8005024:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005026:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800502a:	2b03      	cmp	r3, #3
 800502c:	d87e      	bhi.n	800512c <USB_HC_Init+0x13c>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <USB_HC_Init+0x44>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005045 	.word	0x08005045
 8005038:	080050ef 	.word	0x080050ef
 800503c:	08005045 	.word	0x08005045
 8005040:	080050b1 	.word	0x080050b1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	461a      	mov	r2, r3
 8005052:	f240 439d 	movw	r3, #1181	; 0x49d
 8005056:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005058:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800505c:	2b00      	cmp	r3, #0
 800505e:	da10      	bge.n	8005082 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4413      	add	r3, r2
 8005068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	440a      	add	r2, r1
 8005076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800507e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005080:	e057      	b.n	8005132 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d051      	beq.n	8005132 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80050ac:	60d3      	str	r3, [r2, #12]
      break;
 80050ae:	e040      	b.n	8005132 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	461a      	mov	r2, r3
 80050be:	f240 639d 	movw	r3, #1693	; 0x69d
 80050c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80050c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da34      	bge.n	8005136 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	60d3      	str	r3, [r2, #12]
      }

      break;
 80050ec:	e023      	b.n	8005136 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fa:	461a      	mov	r2, r3
 80050fc:	f240 2325 	movw	r3, #549	; 0x225
 8005100:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005102:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da17      	bge.n	800513a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	440a      	add	r2, r1
 8005120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005124:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005128:	60d3      	str	r3, [r2, #12]
      }
      break;
 800512a:	e006      	b.n	800513a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	77fb      	strb	r3, [r7, #31]
      break;
 8005130:	e004      	b.n	800513c <USB_HC_Init+0x14c>
      break;
 8005132:	bf00      	nop
 8005134:	e002      	b.n	800513c <USB_HC_Init+0x14c>
      break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <USB_HC_Init+0x14c>
      break;
 800513a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	440a      	add	r2, r1
 8005152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005156:	f043 0302 	orr.w	r3, r3, #2
 800515a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 030f 	and.w	r3, r3, #15
 800516a:	2101      	movs	r1, #1
 800516c:	fa01 f303 	lsl.w	r3, r1, r3
 8005170:	6939      	ldr	r1, [r7, #16]
 8005172:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005176:	4313      	orrs	r3, r2
 8005178:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005186:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800518a:	2b00      	cmp	r3, #0
 800518c:	da03      	bge.n	8005196 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e001      	b.n	800519a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7ff feff 	bl	8004f9e <USB_GetHostSpeed>
 80051a0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80051a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d106      	bne.n	80051b8 <USB_HC_Init+0x1c8>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d003      	beq.n	80051b8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80051b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	e001      	b.n	80051bc <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051bc:	787b      	ldrb	r3, [r7, #1]
 80051be:	059b      	lsls	r3, r3, #22
 80051c0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80051c4:	78bb      	ldrb	r3, [r7, #2]
 80051c6:	02db      	lsls	r3, r3, #11
 80051c8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051cc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80051ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051d2:	049b      	lsls	r3, r3, #18
 80051d4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80051d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80051dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80051e0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	0159      	lsls	r1, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	440b      	add	r3, r1
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80051f8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80051fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d003      	beq.n	800520a <USB_HC_Init+0x21a>
 8005202:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10f      	bne.n	800522a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	78fa      	ldrb	r2, [r7, #3]
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	440a      	add	r2, r1
 8005220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005228:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800522a:	7ffb      	ldrb	r3, [r7, #31]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	; 0x30
 8005238:	af02      	add	r7, sp, #8
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800524c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005250:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d02d      	beq.n	80052ba <USB_HC_StartXfer+0x86>
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	791b      	ldrb	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d129      	bne.n	80052ba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d117      	bne.n	800529c <USB_HC_StartXfer+0x68>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	79db      	ldrb	r3, [r3, #7]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <USB_HC_StartXfer+0x48>
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	79db      	ldrb	r3, [r3, #7]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d10f      	bne.n	800529c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	4413      	add	r3, r2
 8005284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	6a3a      	ldr	r2, [r7, #32]
 8005290:	440a      	add	r2, r1
 8005292:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <USB_HC_StartXfer+0x86>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	795b      	ldrb	r3, [r3, #5]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d107      	bne.n	80052ba <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	4619      	mov	r1, r3
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fa0f 	bl	80056d4 <USB_DoPing>
      return HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	e0f8      	b.n	80054ac <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d018      	beq.n	80052f4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	8912      	ldrh	r2, [r2, #8]
 80052ca:	4413      	add	r3, r2
 80052cc:	3b01      	subs	r3, #1
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	8912      	ldrh	r2, [r2, #8]
 80052d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80052d6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80052d8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d90b      	bls.n	80052f8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80052e0:	8b7b      	ldrh	r3, [r7, #26]
 80052e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80052e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	8912      	ldrh	r2, [r2, #8]
 80052ea:	fb03 f202 	mul.w	r2, r3, r2
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	611a      	str	r2, [r3, #16]
 80052f2:	e001      	b.n	80052f8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80052f4:	2301      	movs	r3, #1
 80052f6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	78db      	ldrb	r3, [r3, #3]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005300:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	8912      	ldrh	r2, [r2, #8]
 8005306:	fb03 f202 	mul.w	r2, r3, r2
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	611a      	str	r2, [r3, #16]
 800530e:	e003      	b.n	8005318 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005322:	04d9      	lsls	r1, r3, #19
 8005324:	4b63      	ldr	r3, [pc, #396]	; (80054b4 <USB_HC_StartXfer+0x280>)
 8005326:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005328:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	7a9b      	ldrb	r3, [r3, #10]
 800532e:	075b      	lsls	r3, r3, #29
 8005330:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005334:	69f9      	ldr	r1, [r7, #28]
 8005336:	0148      	lsls	r0, r1, #5
 8005338:	6a39      	ldr	r1, [r7, #32]
 800533a:	4401      	add	r1, r0
 800533c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005340:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005342:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	68d9      	ldr	r1, [r3, #12]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	460a      	mov	r2, r1
 800535c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	6a3a      	ldr	r2, [r7, #32]
 800538a:	440a      	add	r2, r1
 800538c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005390:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005394:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	7e7b      	ldrb	r3, [r7, #25]
 80053a6:	075b      	lsls	r3, r3, #29
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	0148      	lsls	r0, r1, #5
 80053ac:	6a39      	ldr	r1, [r7, #32]
 80053ae:	4401      	add	r1, r0
 80053b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053ce:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	78db      	ldrb	r3, [r3, #3]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	e003      	b.n	80053ea <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	461a      	mov	r2, r3
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e04e      	b.n	80054ac <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d149      	bne.n	80054aa <USB_HC_StartXfer+0x276>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d045      	beq.n	80054aa <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	79db      	ldrb	r3, [r3, #7]
 8005422:	2b03      	cmp	r3, #3
 8005424:	d830      	bhi.n	8005488 <USB_HC_StartXfer+0x254>
 8005426:	a201      	add	r2, pc, #4	; (adr r2, 800542c <USB_HC_StartXfer+0x1f8>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	0800543d 	.word	0x0800543d
 8005430:	08005461 	.word	0x08005461
 8005434:	0800543d 	.word	0x0800543d
 8005438:	08005461 	.word	0x08005461
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	3303      	adds	r3, #3
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005446:	8afa      	ldrh	r2, [r7, #22]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	b29b      	uxth	r3, r3
 800544e:	429a      	cmp	r2, r3
 8005450:	d91c      	bls.n	800548c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	619a      	str	r2, [r3, #24]
        }
        break;
 800545e:	e015      	b.n	800548c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	3303      	adds	r3, #3
 8005466:	089b      	lsrs	r3, r3, #2
 8005468:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800546a:	8afa      	ldrh	r2, [r7, #22]
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	b29b      	uxth	r3, r3
 8005476:	429a      	cmp	r2, r3
 8005478:	d90a      	bls.n	8005490 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	619a      	str	r2, [r3, #24]
        }
        break;
 8005486:	e003      	b.n	8005490 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005488:	bf00      	nop
 800548a:	e002      	b.n	8005492 <USB_HC_StartXfer+0x25e>
        break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <USB_HC_StartXfer+0x25e>
        break;
 8005490:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	68d9      	ldr	r1, [r3, #12]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	785a      	ldrb	r2, [r3, #1]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2000      	movs	r0, #0
 80054a2:	9000      	str	r0, [sp, #0]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fb31 	bl	8004b0c <USB_WritePacket>
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3728      	adds	r7, #40	; 0x28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	1ff80000 	.word	0x1ff80000

080054b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	b29b      	uxth	r3, r3
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80054da:	b480      	push	{r7}
 80054dc:	b089      	sub	sp, #36	; 0x24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	0c9b      	lsrs	r3, r3, #18
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	0fdb      	lsrs	r3, r3, #31
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d104      	bne.n	8005534 <USB_HC_Halt+0x5a>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e0c8      	b.n	80056c6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d002      	beq.n	8005540 <USB_HC_Halt+0x66>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d163      	bne.n	8005608 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0151      	lsls	r1, r2, #5
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	440a      	add	r2, r1
 8005556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800555a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800555e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0320 	and.w	r3, r3, #32
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 80ab 	bne.w	80056c4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d133      	bne.n	80055e2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005598:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	0151      	lsls	r1, r2, #5
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	440a      	add	r2, r1
 80055b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055b8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c6:	d81d      	bhi.n	8005604 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055de:	d0ec      	beq.n	80055ba <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055e0:	e070      	b.n	80056c4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	69fa      	ldr	r2, [r7, #28]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005600:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005602:	e05f      	b.n	80056c4 <USB_HC_Halt+0x1ea>
            break;
 8005604:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005606:	e05d      	b.n	80056c4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	440a      	add	r2, r1
 800561e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005626:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562e:	691b      	ldr	r3, [r3, #16]
 8005630:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d133      	bne.n	80056a0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	440a      	add	r2, r1
 800564e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005656:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005676:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3301      	adds	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005684:	d81d      	bhi.n	80056c2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569c:	d0ec      	beq.n	8005678 <USB_HC_Halt+0x19e>
 800569e:	e011      	b.n	80056c4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e000      	b.n	80056c4 <USB_HC_Halt+0x1ea>
          break;
 80056c2:	bf00      	nop
    }
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3724      	adds	r7, #36	; 0x24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
	...

080056d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80056e4:	78fb      	ldrb	r3, [r7, #3]
 80056e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80056e8:	2301      	movs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	04da      	lsls	r2, r3, #19
 80056f0:	4b15      	ldr	r3, [pc, #84]	; (8005748 <USB_DoPing+0x74>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005704:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800571c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005724:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005732:	461a      	mov	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	1ff80000 	.word	0x1ff80000

0800574c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff f911 	bl	8004988 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005766:	2110      	movs	r1, #16
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff f96b 	bl	8004a44 <USB_FlushTxFifo>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff f997 	bl	8004aac <USB_FlushRxFifo>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	e01f      	b.n	80057ce <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c2:	461a      	mov	r2, r3
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	3301      	adds	r3, #1
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b0f      	cmp	r3, #15
 80057d2:	d9dc      	bls.n	800578e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e034      	b.n	8005844 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057f0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005800:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	461a      	mov	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3301      	adds	r3, #1
 8005818:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005820:	d80c      	bhi.n	800583c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005838:	d0ec      	beq.n	8005814 <USB_StopHost+0xc8>
 800583a:	e000      	b.n	800583e <USB_StopHost+0xf2>
        break;
 800583c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3301      	adds	r3, #1
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	2b0f      	cmp	r3, #15
 8005848:	d9c7      	bls.n	80057da <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005850:	461a      	mov	r2, r3
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f04f 32ff 	mov.w	r2, #4294967295
 800585e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff f880 	bl	8004966 <USB_EnableGlobalInt>

  return ret;
 8005866:	7ffb      	ldrb	r3, [r7, #31]
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005874:	4904      	ldr	r1, [pc, #16]	; (8005888 <MX_FATFS_Init+0x18>)
 8005876:	4805      	ldr	r0, [pc, #20]	; (800588c <MX_FATFS_Init+0x1c>)
 8005878:	f008 fa16 	bl	800dca8 <FATFS_LinkDriver>
 800587c:	4603      	mov	r3, r0
 800587e:	461a      	mov	r2, r3
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <MX_FATFS_Init+0x20>)
 8005882:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005884:	bf00      	nop
 8005886:	bd80      	pop	{r7, pc}
 8005888:	2000022c 	.word	0x2000022c
 800588c:	0800f4ec 	.word	0x0800f4ec
 8005890:	20000228 	.word	0x20000228

08005894 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005898:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800589a:	4618      	mov	r0, r3
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	4603      	mov	r3, r0
 80058c4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4808      	ldr	r0, [pc, #32]	; (80058f0 <USBH_status+0x34>)
 80058d0:	f000 fe32 	bl	8006538 <USBH_MSC_UnitIsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <USBH_status+0x24>
  {
    res = RES_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
 80058de:	e001      	b.n	80058e4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80058e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000275c 	.word	0x2000275c

080058f4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b094      	sub	sp, #80	; 0x50
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4603      	mov	r3, r0
 8005902:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800590a:	7bf9      	ldrb	r1, [r7, #15]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	4813      	ldr	r0, [pc, #76]	; (8005964 <USBH_read+0x70>)
 8005916:	f000 fe59 	bl	80065cc <USBH_MSC_Read>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <USBH_read+0x34>
  {
    res = RES_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005926:	e017      	b.n	8005958 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005928:	f107 0210 	add.w	r2, r7, #16
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	4619      	mov	r1, r3
 8005930:	480c      	ldr	r0, [pc, #48]	; (8005964 <USBH_read+0x70>)
 8005932:	f000 fe27 	bl	8006584 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005936:	7f7b      	ldrb	r3, [r7, #29]
 8005938:	2b3a      	cmp	r3, #58	; 0x3a
 800593a:	d005      	beq.n	8005948 <USBH_read+0x54>
 800593c:	2b3a      	cmp	r3, #58	; 0x3a
 800593e:	dc07      	bgt.n	8005950 <USBH_read+0x5c>
 8005940:	2b04      	cmp	r3, #4
 8005942:	d001      	beq.n	8005948 <USBH_read+0x54>
 8005944:	2b28      	cmp	r3, #40	; 0x28
 8005946:	d103      	bne.n	8005950 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005948:	2303      	movs	r3, #3
 800594a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800594e:	e003      	b.n	8005958 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005956:	bf00      	nop
    }
  }

  return res;
 8005958:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800595c:	4618      	mov	r0, r3
 800595e:	3748      	adds	r7, #72	; 0x48
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	2000275c 	.word	0x2000275c

08005968 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b094      	sub	sp, #80	; 0x50
 800596c:	af02      	add	r7, sp, #8
 800596e:	60b9      	str	r1, [r7, #8]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	4603      	mov	r3, r0
 8005976:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800597e:	7bf9      	ldrb	r1, [r7, #15]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4817      	ldr	r0, [pc, #92]	; (80059e8 <USBH_write+0x80>)
 800598a:	f000 fe88 	bl	800669e <USBH_MSC_Write>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <USBH_write+0x34>
  {
    res = RES_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800599a:	e01f      	b.n	80059dc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800599c:	f107 0210 	add.w	r2, r7, #16
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4810      	ldr	r0, [pc, #64]	; (80059e8 <USBH_write+0x80>)
 80059a6:	f000 fded 	bl	8006584 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80059aa:	7f7b      	ldrb	r3, [r7, #29]
 80059ac:	2b3a      	cmp	r3, #58	; 0x3a
 80059ae:	d00d      	beq.n	80059cc <USBH_write+0x64>
 80059b0:	2b3a      	cmp	r3, #58	; 0x3a
 80059b2:	dc0f      	bgt.n	80059d4 <USBH_write+0x6c>
 80059b4:	2b28      	cmp	r3, #40	; 0x28
 80059b6:	d009      	beq.n	80059cc <USBH_write+0x64>
 80059b8:	2b28      	cmp	r3, #40	; 0x28
 80059ba:	dc0b      	bgt.n	80059d4 <USBH_write+0x6c>
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d005      	beq.n	80059cc <USBH_write+0x64>
 80059c0:	2b27      	cmp	r3, #39	; 0x27
 80059c2:	d107      	bne.n	80059d4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059ca:	e007      	b.n	80059dc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 80059cc:	2303      	movs	r3, #3
 80059ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059d2:	e003      	b.n	80059dc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80059da:	bf00      	nop
    }
  }

  return res;
 80059dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3748      	adds	r7, #72	; 0x48
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	2000275c 	.word	0x2000275c

080059ec <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b090      	sub	sp, #64	; 0x40
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	603a      	str	r2, [r7, #0]
 80059f6:	71fb      	strb	r3, [r7, #7]
 80059f8:	460b      	mov	r3, r1
 80059fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005a02:	79bb      	ldrb	r3, [r7, #6]
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d852      	bhi.n	8005aae <USBH_ioctl+0xc2>
 8005a08:	a201      	add	r2, pc, #4	; (adr r2, 8005a10 <USBH_ioctl+0x24>)
 8005a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0e:	bf00      	nop
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a29 	.word	0x08005a29
 8005a18:	08005a53 	.word	0x08005a53
 8005a1c:	08005a7f 	.word	0x08005a7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a26:	e045      	b.n	8005ab4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a28:	f107 0208 	add.w	r2, r7, #8
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4823      	ldr	r0, [pc, #140]	; (8005ac0 <USBH_ioctl+0xd4>)
 8005a32:	f000 fda7 	bl	8006584 <USBH_MSC_GetLUNInfo>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a48:	e034      	b.n	8005ab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a50:	e030      	b.n	8005ab4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a52:	f107 0208 	add.w	r2, r7, #8
 8005a56:	79fb      	ldrb	r3, [r7, #7]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4819      	ldr	r0, [pc, #100]	; (8005ac0 <USBH_ioctl+0xd4>)
 8005a5c:	f000 fd92 	bl	8006584 <USBH_MSC_GetLUNInfo>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005a66:	8a3b      	ldrh	r3, [r7, #16]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005a74:	e01e      	b.n	8005ab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005a7c:	e01a      	b.n	8005ab4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005a7e:	f107 0208 	add.w	r2, r7, #8
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	4619      	mov	r1, r3
 8005a86:	480e      	ldr	r0, [pc, #56]	; (8005ac0 <USBH_ioctl+0xd4>)
 8005a88:	f000 fd7c 	bl	8006584 <USBH_MSC_GetLUNInfo>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d109      	bne.n	8005aa6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005a92:	8a3b      	ldrh	r3, [r7, #16]
 8005a94:	0a5b      	lsrs	r3, r3, #9
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005aa4:	e006      	b.n	8005ab4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005aac:	e002      	b.n	8005ab4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005aae:	2304      	movs	r3, #4
 8005ab0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3740      	adds	r7, #64	; 0x40
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	2000275c 	.word	0x2000275c

08005ac4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ad2:	7919      	ldrb	r1, [r3, #4]
 8005ad4:	2350      	movs	r3, #80	; 0x50
 8005ad6:	2206      	movs	r2, #6
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fc6b 	bl	80073b4 <USBH_FindInterface>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005ae2:	7bfb      	ldrb	r3, [r7, #15]
 8005ae4:	2bff      	cmp	r3, #255	; 0xff
 8005ae6:	d002      	beq.n	8005aee <USBH_MSC_InterfaceInit+0x2a>
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d901      	bls.n	8005af2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005aee:	2302      	movs	r3, #2
 8005af0:	e106      	b.n	8005d00 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 fc40 	bl	800737c <USBH_SelectInterface>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005b06:	2302      	movs	r3, #2
 8005b08:	e0fa      	b.n	8005d00 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005b10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005b14:	f008 fd2a 	bl	800e56c <malloc>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e0e7      	b.n	8005d00 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005b30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b34:	2100      	movs	r1, #0
 8005b36:	68b8      	ldr	r0, [r7, #8]
 8005b38:	f008 fdf4 	bl	800e724 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	211a      	movs	r1, #26
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	b25b      	sxtb	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da16      	bge.n	8005b82 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	211a      	movs	r1, #26
 8005b5a:	fb01 f303 	mul.w	r3, r1, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	211a      	movs	r1, #26
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b7a:	881a      	ldrh	r2, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	815a      	strh	r2, [r3, #10]
 8005b80:	e015      	b.n	8005bae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	211a      	movs	r1, #26
 8005b88:	fb01 f303 	mul.w	r3, r1, r3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b92:	781a      	ldrb	r2, [r3, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	211a      	movs	r1, #26
 8005b9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ba8:	881a      	ldrh	r2, [r3, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005bae:	7bfb      	ldrb	r3, [r7, #15]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	211a      	movs	r1, #26
 8005bb4:	fb01 f303 	mul.w	r3, r1, r3
 8005bb8:	4413      	add	r3, r2
 8005bba:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	b25b      	sxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	da16      	bge.n	8005bf4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	211a      	movs	r1, #26
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	211a      	movs	r1, #26
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bec:	881a      	ldrh	r2, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	815a      	strh	r2, [r3, #10]
 8005bf2:	e015      	b.n	8005c20 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	211a      	movs	r1, #26
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c04:	781a      	ldrb	r2, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	211a      	movs	r1, #26
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005c1a:	881a      	ldrh	r2, [r3, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	799b      	ldrb	r3, [r3, #6]
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f002 fed8 	bl	80089ee <USBH_AllocPipe>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	461a      	mov	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	79db      	ldrb	r3, [r3, #7]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f002 fece 	bl	80089ee <USBH_AllocPipe>
 8005c52:	4603      	mov	r3, r0
 8005c54:	461a      	mov	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 fdc4 	bl	80067e8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	799b      	ldrb	r3, [r3, #6]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01e      	beq.n	8005ca6 <USBH_MSC_InterfaceInit+0x1e2>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	891b      	ldrh	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01a      	beq.n	8005ca6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	7959      	ldrb	r1, [r3, #5]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	7998      	ldrb	r0, [r3, #6]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	8912      	ldrh	r2, [r2, #8]
 8005c88:	9202      	str	r2, [sp, #8]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	9201      	str	r2, [sp, #4]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4623      	mov	r3, r4
 8005c92:	4602      	mov	r2, r0
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f002 fe7b 	bl	8008990 <USBH_OpenPipe>
 8005c9a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	79db      	ldrb	r3, [r3, #7]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02c      	beq.n	8005cfe <USBH_MSC_InterfaceInit+0x23a>
 8005ca4:	e001      	b.n	8005caa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e02a      	b.n	8005d00 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	895b      	ldrh	r3, [r3, #10]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d025      	beq.n	8005cfe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	7919      	ldrb	r1, [r3, #4]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	79d8      	ldrb	r0, [r3, #7]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	8952      	ldrh	r2, [r2, #10]
 8005cca:	9202      	str	r2, [sp, #8]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	9201      	str	r2, [sp, #4]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f002 fe5a 	bl	8008990 <USBH_OpenPipe>
 8005cdc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	791b      	ldrb	r3, [r3, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f008 fb8c 	bl	800e404 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	795b      	ldrb	r3, [r3, #5]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f008 fb85 	bl	800e404 <USBH_LL_SetToggle>

  return USBH_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e000      	b.n	8005d00 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8005cfe:	2303      	movs	r3, #3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd90      	pop	{r4, r7, pc}

08005d08 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	795b      	ldrb	r3, [r3, #5]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00e      	beq.n	8005d40 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	795b      	ldrb	r3, [r3, #5]
 8005d26:	4619      	mov	r1, r3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f002 fe50 	bl	80089ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	795b      	ldrb	r3, [r3, #5]
 8005d32:	4619      	mov	r1, r3
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f002 fe7b 	bl	8008a30 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	791b      	ldrb	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	791b      	ldrb	r3, [r3, #4]
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f002 fe3d 	bl	80089ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	791b      	ldrb	r3, [r3, #4]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f002 fe68 	bl	8008a30 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f008 fbfe 	bl	800e57c <free>
    phost->pActiveClass->pData = 0U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005da6:	2301      	movs	r3, #1
 8005da8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	7b9b      	ldrb	r3, [r3, #14]
 8005dae:	2b03      	cmp	r3, #3
 8005db0:	d041      	beq.n	8005e36 <USBH_MSC_ClassRequest+0xa2>
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	dc4b      	bgt.n	8005e4e <USBH_MSC_ClassRequest+0xba>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <USBH_MSC_ClassRequest+0x2a>
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d147      	bne.n	8005e4e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcf1 	bl	80067aa <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d104      	bne.n	8005ddc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d137      	bne.n	8005e52 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d804      	bhi.n	8005df4 <USBH_MSC_ClassRequest+0x60>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	e000      	b.n	8005df6 <USBH_MSC_ClassRequest+0x62>
 8005df4:	2202      	movs	r2, #2
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73bb      	strb	r3, [r7, #14]
 8005dfe:	e014      	b.n	8005e2a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	2134      	movs	r1, #52	; 0x34
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3392      	adds	r3, #146	; 0x92
 8005e0e:	2202      	movs	r2, #2
 8005e10:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005e12:	7bbb      	ldrb	r3, [r7, #14]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	2134      	movs	r1, #52	; 0x34
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	33c1      	adds	r3, #193	; 0xc1
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005e24:	7bbb      	ldrb	r3, [r7, #14]
 8005e26:	3301      	adds	r3, #1
 8005e28:	73bb      	strb	r3, [r7, #14]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	7bba      	ldrb	r2, [r7, #14]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d3e5      	bcc.n	8005e00 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8005e34:	e00d      	b.n	8005e52 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005e36:	2100      	movs	r1, #0
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f002 f888 	bl	8007f4e <USBH_ClrFeature>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d108      	bne.n	8005e56 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	7bda      	ldrb	r2, [r3, #15]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8005e4c:	e003      	b.n	8005e56 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8005e4e:	bf00      	nop
 8005e50:	e002      	b.n	8005e58 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005e52:	bf00      	nop
 8005e54:	e000      	b.n	8005e58 <USBH_MSC_ClassRequest+0xc4>
      break;
 8005e56:	bf00      	nop
  }

  return status;
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005e76:	2301      	movs	r3, #1
 8005e78:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	7b1b      	ldrb	r3, [r3, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <USBH_MSC_Process+0x2e>
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f000 8271 	beq.w	8006372 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8005e90:	e272      	b.n	8006378 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	f080 824f 	bcs.w	8006342 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005eaa:	4619      	mov	r1, r3
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	2334      	movs	r3, #52	; 0x34
 8005eb0:	fb01 f303 	mul.w	r3, r1, r3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3391      	adds	r3, #145	; 0x91
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	2334      	movs	r3, #52	; 0x34
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	3390      	adds	r3, #144	; 0x90
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	f200 8243 	bhi.w	800635e <USBH_MSC_Process+0x4fa>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <USBH_MSC_Process+0x7c>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	0800635f 	.word	0x0800635f
 8005ee8:	08005fcd 	.word	0x08005fcd
 8005eec:	08006151 	.word	0x08006151
 8005ef0:	08005f2b 	.word	0x08005f2b
 8005ef4:	0800621d 	.word	0x0800621d
 8005ef8:	0800635f 	.word	0x0800635f
 8005efc:	0800635f 	.word	0x0800635f
 8005f00:	08006331 	.word	0x08006331
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	2334      	movs	r3, #52	; 0x34
 8005f10:	fb01 f303 	mul.w	r3, r1, r3
 8005f14:	4413      	add	r3, r2
 8005f16:	3390      	adds	r3, #144	; 0x90
 8005f18:	2204      	movs	r2, #4
 8005f1a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8005f28:	e222      	b.n	8006370 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f30:	b2d9      	uxtb	r1, r3
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2334      	movs	r3, #52	; 0x34
 8005f3c:	fb02 f303 	mul.w	r3, r2, r3
 8005f40:	3398      	adds	r3, #152	; 0x98
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	3307      	adds	r3, #7
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 ff6a 	bl	8006e24 <USBH_MSC_SCSI_Inquiry>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f60:	4619      	mov	r1, r3
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	2334      	movs	r3, #52	; 0x34
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	4413      	add	r3, r2
 8005f6c:	3390      	adds	r3, #144	; 0x90
 8005f6e:	2202      	movs	r2, #2
 8005f70:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d10c      	bne.n	8005f92 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005f7e:	4619      	mov	r1, r3
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	2334      	movs	r3, #52	; 0x34
 8005f84:	fb01 f303 	mul.w	r3, r1, r3
 8005f88:	4413      	add	r3, r2
 8005f8a:	3390      	adds	r3, #144	; 0x90
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	701a      	strb	r2, [r3, #0]
            break;
 8005f90:	e1e7      	b.n	8006362 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	f040 81e4 	bne.w	8006362 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	2334      	movs	r3, #52	; 0x34
 8005fa6:	fb01 f303 	mul.w	r3, r1, r3
 8005faa:	4413      	add	r3, r2
 8005fac:	3390      	adds	r3, #144	; 0x90
 8005fae:	2201      	movs	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fb8:	4619      	mov	r1, r3
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	2334      	movs	r3, #52	; 0x34
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3391      	adds	r3, #145	; 0x91
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]
            break;
 8005fca:	e1ca      	b.n	8006362 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fe66 	bl	8006ca8 <USBH_MSC_SCSI_TestUnitReady>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d149      	bne.n	800607a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8005fec:	4619      	mov	r1, r3
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	2334      	movs	r3, #52	; 0x34
 8005ff2:	fb01 f303 	mul.w	r3, r1, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3392      	adds	r3, #146	; 0x92
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00c      	beq.n	800601a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006006:	4619      	mov	r1, r3
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	2334      	movs	r3, #52	; 0x34
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	33c1      	adds	r3, #193	; 0xc1
 8006014:	2201      	movs	r2, #1
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e00b      	b.n	8006032 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006020:	4619      	mov	r1, r3
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	2334      	movs	r3, #52	; 0x34
 8006026:	fb01 f303 	mul.w	r3, r1, r3
 800602a:	4413      	add	r3, r2
 800602c:	33c1      	adds	r3, #193	; 0xc1
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006038:	4619      	mov	r1, r3
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	2334      	movs	r3, #52	; 0x34
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3390      	adds	r3, #144	; 0x90
 8006046:	2203      	movs	r2, #3
 8006048:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006050:	4619      	mov	r1, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	2334      	movs	r3, #52	; 0x34
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	4413      	add	r3, r2
 800605c:	3391      	adds	r3, #145	; 0x91
 800605e:	2200      	movs	r2, #0
 8006060:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006068:	4619      	mov	r1, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	2334      	movs	r3, #52	; 0x34
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	3392      	adds	r3, #146	; 0x92
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b02      	cmp	r3, #2
 800607e:	d14a      	bne.n	8006116 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006086:	4619      	mov	r1, r3
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	2334      	movs	r3, #52	; 0x34
 800608c:	fb01 f303 	mul.w	r3, r1, r3
 8006090:	4413      	add	r3, r2
 8006092:	3392      	adds	r3, #146	; 0x92
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d00c      	beq.n	80060b4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a0:	4619      	mov	r1, r3
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	2334      	movs	r3, #52	; 0x34
 80060a6:	fb01 f303 	mul.w	r3, r1, r3
 80060aa:	4413      	add	r3, r2
 80060ac:	33c1      	adds	r3, #193	; 0xc1
 80060ae:	2201      	movs	r2, #1
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e00b      	b.n	80060cc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ba:	4619      	mov	r1, r3
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	2334      	movs	r3, #52	; 0x34
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	33c1      	adds	r3, #193	; 0xc1
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d2:	4619      	mov	r1, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	2334      	movs	r3, #52	; 0x34
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	4413      	add	r3, r2
 80060de:	3390      	adds	r3, #144	; 0x90
 80060e0:	2205      	movs	r2, #5
 80060e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ea:	4619      	mov	r1, r3
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	2334      	movs	r3, #52	; 0x34
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	4413      	add	r3, r2
 80060f6:	3391      	adds	r3, #145	; 0x91
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006102:	4619      	mov	r1, r3
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	2334      	movs	r3, #52	; 0x34
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	3392      	adds	r3, #146	; 0x92
 8006110:	2202      	movs	r2, #2
 8006112:	701a      	strb	r2, [r3, #0]
            break;
 8006114:	e127      	b.n	8006366 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006116:	7bbb      	ldrb	r3, [r7, #14]
 8006118:	2b04      	cmp	r3, #4
 800611a:	f040 8124 	bne.w	8006366 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006124:	4619      	mov	r1, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	2334      	movs	r3, #52	; 0x34
 800612a:	fb01 f303 	mul.w	r3, r1, r3
 800612e:	4413      	add	r3, r2
 8006130:	3390      	adds	r3, #144	; 0x90
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800613c:	4619      	mov	r1, r3
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	2334      	movs	r3, #52	; 0x34
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	3391      	adds	r3, #145	; 0x91
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
            break;
 800614e:	e10a      	b.n	8006366 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006156:	b2d9      	uxtb	r1, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800615e:	461a      	mov	r2, r3
 8006160:	2334      	movs	r3, #52	; 0x34
 8006162:	fb02 f303 	mul.w	r3, r2, r3
 8006166:	3390      	adds	r3, #144	; 0x90
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	3304      	adds	r3, #4
 800616e:	461a      	mov	r2, r3
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 fddc 	bl	8006d2e <USBH_MSC_SCSI_ReadCapacity>
 8006176:	4603      	mov	r3, r0
 8006178:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d120      	bne.n	80061c2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006186:	4619      	mov	r1, r3
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	2334      	movs	r3, #52	; 0x34
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	4413      	add	r3, r2
 8006192:	3390      	adds	r3, #144	; 0x90
 8006194:	2201      	movs	r2, #1
 8006196:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800619e:	4619      	mov	r1, r3
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	2334      	movs	r3, #52	; 0x34
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	3391      	adds	r3, #145	; 0x91
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061b6:	3301      	adds	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80061c0:	e0d3      	b.n	800636a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d10c      	bne.n	80061e2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061ce:	4619      	mov	r1, r3
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	2334      	movs	r3, #52	; 0x34
 80061d4:	fb01 f303 	mul.w	r3, r1, r3
 80061d8:	4413      	add	r3, r2
 80061da:	3390      	adds	r3, #144	; 0x90
 80061dc:	2205      	movs	r2, #5
 80061de:	701a      	strb	r2, [r3, #0]
            break;
 80061e0:	e0c3      	b.n	800636a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	f040 80c0 	bne.w	800636a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061f0:	4619      	mov	r1, r3
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	2334      	movs	r3, #52	; 0x34
 80061f6:	fb01 f303 	mul.w	r3, r1, r3
 80061fa:	4413      	add	r3, r2
 80061fc:	3390      	adds	r3, #144	; 0x90
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006208:	4619      	mov	r1, r3
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	2334      	movs	r3, #52	; 0x34
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	4413      	add	r3, r2
 8006214:	3391      	adds	r3, #145	; 0x91
 8006216:	2202      	movs	r2, #2
 8006218:	701a      	strb	r2, [r3, #0]
            break;
 800621a:	e0a6      	b.n	800636a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006222:	b2d9      	uxtb	r1, r3
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800622a:	461a      	mov	r2, r3
 800622c:	2334      	movs	r3, #52	; 0x34
 800622e:	fb02 f303 	mul.w	r3, r2, r3
 8006232:	3398      	adds	r3, #152	; 0x98
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	461a      	mov	r2, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 fe96 	bl	8006f6e <USBH_MSC_SCSI_RequestSense>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d145      	bne.n	80062d8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006252:	4619      	mov	r1, r3
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	2334      	movs	r3, #52	; 0x34
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	339c      	adds	r3, #156	; 0x9c
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b06      	cmp	r3, #6
 8006264:	d00c      	beq.n	8006280 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800626c:	4619      	mov	r1, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	2334      	movs	r3, #52	; 0x34
 8006272:	fb01 f303 	mul.w	r3, r1, r3
 8006276:	4413      	add	r3, r2
 8006278:	339c      	adds	r3, #156	; 0x9c
 800627a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800627c:	2b02      	cmp	r3, #2
 800627e:	d117      	bne.n	80062b0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	f242 720f 	movw	r2, #9999	; 0x270f
 8006292:	4293      	cmp	r3, r2
 8006294:	d80c      	bhi.n	80062b0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800629c:	4619      	mov	r1, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	2334      	movs	r3, #52	; 0x34
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	3390      	adds	r3, #144	; 0x90
 80062aa:	2202      	movs	r2, #2
 80062ac:	701a      	strb	r2, [r3, #0]
                  break;
 80062ae:	e05f      	b.n	8006370 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062b6:	4619      	mov	r1, r3
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	2334      	movs	r3, #52	; 0x34
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	3390      	adds	r3, #144	; 0x90
 80062c4:	2201      	movs	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ce:	3301      	adds	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d10c      	bne.n	80062f8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062e4:	4619      	mov	r1, r3
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	2334      	movs	r3, #52	; 0x34
 80062ea:	fb01 f303 	mul.w	r3, r1, r3
 80062ee:	4413      	add	r3, r2
 80062f0:	3390      	adds	r3, #144	; 0x90
 80062f2:	2208      	movs	r2, #8
 80062f4:	701a      	strb	r2, [r3, #0]
            break;
 80062f6:	e03a      	b.n	800636e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d137      	bne.n	800636e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006304:	4619      	mov	r1, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	2334      	movs	r3, #52	; 0x34
 800630a:	fb01 f303 	mul.w	r3, r1, r3
 800630e:	4413      	add	r3, r2
 8006310:	3390      	adds	r3, #144	; 0x90
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800631c:	4619      	mov	r1, r3
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	2334      	movs	r3, #52	; 0x34
 8006322:	fb01 f303 	mul.w	r3, r1, r3
 8006326:	4413      	add	r3, r2
 8006328:	3391      	adds	r3, #145	; 0x91
 800632a:	2202      	movs	r2, #2
 800632c:	701a      	strb	r2, [r3, #0]
            break;
 800632e:	e01e      	b.n	800636e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006336:	3301      	adds	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006340:	e016      	b.n	8006370 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2200      	movs	r2, #0
 8006346:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2201      	movs	r2, #1
 800634e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006356:	2102      	movs	r1, #2
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      break;
 800635c:	e00c      	b.n	8006378 <USBH_MSC_Process+0x514>
            break;
 800635e:	bf00      	nop
 8006360:	e00a      	b.n	8006378 <USBH_MSC_Process+0x514>
            break;
 8006362:	bf00      	nop
 8006364:	e008      	b.n	8006378 <USBH_MSC_Process+0x514>
            break;
 8006366:	bf00      	nop
 8006368:	e006      	b.n	8006378 <USBH_MSC_Process+0x514>
            break;
 800636a:	bf00      	nop
 800636c:	e004      	b.n	8006378 <USBH_MSC_Process+0x514>
            break;
 800636e:	bf00      	nop
      break;
 8006370:	e002      	b.n	8006378 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]
      break;
 8006376:	bf00      	nop
  }
  return error;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3718      	adds	r7, #24
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop

08006384 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b088      	sub	sp, #32
 800639e:	af02      	add	r7, sp, #8
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	460b      	mov	r3, r1
 80063a4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	2134      	movs	r1, #52	; 0x34
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	3390      	adds	r3, #144	; 0x90
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b07      	cmp	r3, #7
 80063ca:	d03c      	beq.n	8006446 <USBH_MSC_RdWrProcess+0xac>
 80063cc:	2b07      	cmp	r3, #7
 80063ce:	f300 80a7 	bgt.w	8006520 <USBH_MSC_RdWrProcess+0x186>
 80063d2:	2b05      	cmp	r3, #5
 80063d4:	d06c      	beq.n	80064b0 <USBH_MSC_RdWrProcess+0x116>
 80063d6:	2b06      	cmp	r3, #6
 80063d8:	f040 80a2 	bne.w	8006520 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80063dc:	78f9      	ldrb	r1, [r7, #3]
 80063de:	2300      	movs	r3, #0
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2300      	movs	r3, #0
 80063e4:	2200      	movs	r2, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fea5 	bl	8007136 <USBH_MSC_SCSI_Read>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	2134      	movs	r1, #52	; 0x34
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	3390      	adds	r3, #144	; 0x90
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800640c:	e08a      	b.n	8006524 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d109      	bne.n	8006428 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	2134      	movs	r1, #52	; 0x34
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	4413      	add	r3, r2
 8006420:	3390      	adds	r3, #144	; 0x90
 8006422:	2205      	movs	r2, #5
 8006424:	701a      	strb	r2, [r3, #0]
      break;
 8006426:	e07d      	b.n	8006524 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d17a      	bne.n	8006524 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	2134      	movs	r1, #52	; 0x34
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	3390      	adds	r3, #144	; 0x90
 800643c:	2208      	movs	r2, #8
 800643e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006440:	2302      	movs	r3, #2
 8006442:	75fb      	strb	r3, [r7, #23]
      break;
 8006444:	e06e      	b.n	8006524 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006446:	78f9      	ldrb	r1, [r7, #3]
 8006448:	2300      	movs	r3, #0
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	2300      	movs	r3, #0
 800644e:	2200      	movs	r2, #0
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fe05 	bl	8007060 <USBH_MSC_SCSI_Write>
 8006456:	4603      	mov	r3, r0
 8006458:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006460:	78fb      	ldrb	r3, [r7, #3]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	2134      	movs	r1, #52	; 0x34
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	4413      	add	r3, r2
 800646c:	3390      	adds	r3, #144	; 0x90
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006476:	e057      	b.n	8006528 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d109      	bne.n	8006492 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800647e:	78fb      	ldrb	r3, [r7, #3]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	2134      	movs	r1, #52	; 0x34
 8006484:	fb01 f303 	mul.w	r3, r1, r3
 8006488:	4413      	add	r3, r2
 800648a:	3390      	adds	r3, #144	; 0x90
 800648c:	2205      	movs	r2, #5
 800648e:	701a      	strb	r2, [r3, #0]
      break;
 8006490:	e04a      	b.n	8006528 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	2b04      	cmp	r3, #4
 8006496:	d147      	bne.n	8006528 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	2134      	movs	r1, #52	; 0x34
 800649e:	fb01 f303 	mul.w	r3, r1, r3
 80064a2:	4413      	add	r3, r2
 80064a4:	3390      	adds	r3, #144	; 0x90
 80064a6:	2208      	movs	r2, #8
 80064a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80064aa:	2302      	movs	r3, #2
 80064ac:	75fb      	strb	r3, [r7, #23]
      break;
 80064ae:	e03b      	b.n	8006528 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80064b0:	78fb      	ldrb	r3, [r7, #3]
 80064b2:	2234      	movs	r2, #52	; 0x34
 80064b4:	fb02 f303 	mul.w	r3, r2, r3
 80064b8:	3398      	adds	r3, #152	; 0x98
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	78fb      	ldrb	r3, [r7, #3]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fd52 	bl	8006f6e <USBH_MSC_SCSI_RequestSense>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d113      	bne.n	80064fc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	2134      	movs	r1, #52	; 0x34
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3390      	adds	r3, #144	; 0x90
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	2134      	movs	r1, #52	; 0x34
 80064ec:	fb01 f303 	mul.w	r3, r1, r3
 80064f0:	4413      	add	r3, r2
 80064f2:	3391      	adds	r3, #145	; 0x91
 80064f4:	2202      	movs	r2, #2
 80064f6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80064f8:	2302      	movs	r3, #2
 80064fa:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d014      	beq.n	800652c <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b04      	cmp	r3, #4
 8006506:	d111      	bne.n	800652c <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	2134      	movs	r1, #52	; 0x34
 800650e:	fb01 f303 	mul.w	r3, r1, r3
 8006512:	4413      	add	r3, r2
 8006514:	3390      	adds	r3, #144	; 0x90
 8006516:	2208      	movs	r2, #8
 8006518:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800651a:	2302      	movs	r3, #2
 800651c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800651e:	e005      	b.n	800652c <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8006520:	bf00      	nop
 8006522:	e004      	b.n	800652e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006524:	bf00      	nop
 8006526:	e002      	b.n	800652e <USBH_MSC_RdWrProcess+0x194>
      break;
 8006528:	bf00      	nop
 800652a:	e000      	b.n	800652e <USBH_MSC_RdWrProcess+0x194>
      break;
 800652c:	bf00      	nop

  }
  return error;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3718      	adds	r7, #24
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b0b      	cmp	r3, #11
 8006556:	d10c      	bne.n	8006572 <USBH_MSC_UnitIsReady+0x3a>
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	2134      	movs	r1, #52	; 0x34
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	3391      	adds	r3, #145	; 0x91
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800656c:	2301      	movs	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	e001      	b.n	8006576 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	460b      	mov	r3, r1
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b0b      	cmp	r3, #11
 80065a4:	d10d      	bne.n	80065c2 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80065a6:	7afb      	ldrb	r3, [r7, #11]
 80065a8:	2234      	movs	r2, #52	; 0x34
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	3390      	adds	r3, #144	; 0x90
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	2234      	movs	r2, #52	; 0x34
 80065b6:	4619      	mov	r1, r3
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f008 f8f7 	bl	800e7ac <memcpy>
    return USBH_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	e000      	b.n	80065c4 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80065c2:	2302      	movs	r3, #2
  }
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b088      	sub	sp, #32
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	607a      	str	r2, [r7, #4]
 80065d6:	603b      	str	r3, [r7, #0]
 80065d8:	460b      	mov	r3, r1
 80065da:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00e      	beq.n	8006610 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80065f8:	2b0b      	cmp	r3, #11
 80065fa:	d109      	bne.n	8006610 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	2134      	movs	r1, #52	; 0x34
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4413      	add	r3, r2
 8006608:	3390      	adds	r3, #144	; 0x90
 800660a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800660c:	2b01      	cmp	r3, #1
 800660e:	d001      	beq.n	8006614 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006610:	2302      	movs	r3, #2
 8006612:	e040      	b.n	8006696 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2206      	movs	r2, #6
 8006618:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	2134      	movs	r1, #52	; 0x34
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	3390      	adds	r3, #144	; 0x90
 8006628:	2206      	movs	r2, #6
 800662a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800662c:	7afb      	ldrb	r3, [r7, #11]
 800662e:	b29a      	uxth	r2, r3
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006636:	7af9      	ldrb	r1, [r7, #11]
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 fd78 	bl	8007136 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800664c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800664e:	e016      	b.n	800667e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad2      	subs	r2, r2, r3
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	f242 7110 	movw	r1, #10000	; 0x2710
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	429a      	cmp	r2, r3
 8006666:	d805      	bhi.n	8006674 <USBH_MSC_Read+0xa8>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	2201      	movs	r2, #1
 8006678:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800667a:	2302      	movs	r3, #2
 800667c:	e00b      	b.n	8006696 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800667e:	7afb      	ldrb	r3, [r7, #11]
 8006680:	4619      	mov	r1, r3
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f7ff fe89 	bl	800639a <USBH_MSC_RdWrProcess>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d0e0      	beq.n	8006650 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2201      	movs	r2, #1
 8006692:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b088      	sub	sp, #32
 80066a2:	af02      	add	r7, sp, #8
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	460b      	mov	r3, r1
 80066ac:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80066ca:	2b0b      	cmp	r3, #11
 80066cc:	d109      	bne.n	80066e2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80066ce:	7afb      	ldrb	r3, [r7, #11]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	2134      	movs	r1, #52	; 0x34
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	4413      	add	r3, r2
 80066da:	3390      	adds	r3, #144	; 0x90
 80066dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80066e2:	2302      	movs	r3, #2
 80066e4:	e040      	b.n	8006768 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2207      	movs	r2, #7
 80066ea:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	2134      	movs	r1, #52	; 0x34
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	4413      	add	r3, r2
 80066f8:	3390      	adds	r3, #144	; 0x90
 80066fa:	2207      	movs	r2, #7
 80066fc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8006708:	7af9      	ldrb	r1, [r7, #11]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fca4 	bl	8007060 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800671e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006720:	e016      	b.n	8006750 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	f242 7110 	movw	r1, #10000	; 0x2710
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	429a      	cmp	r2, r3
 8006738:	d805      	bhi.n	8006746 <USBH_MSC_Write+0xa8>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d104      	bne.n	8006750 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2201      	movs	r2, #1
 800674a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800674c:	2302      	movs	r3, #2
 800674e:	e00b      	b.n	8006768 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	4619      	mov	r1, r3
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fe20 	bl	800639a <USBH_MSC_RdWrProcess>
 800675a:	4603      	mov	r3, r0
 800675c:	2b01      	cmp	r3, #1
 800675e:	d0e0      	beq.n	8006722 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2201      	movs	r2, #1
 8006764:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2221      	movs	r2, #33	; 0x21
 800677c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	22ff      	movs	r2, #255	; 0xff
 8006782:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fea6 	bl	80084ec <USBH_CtlReq>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b082      	sub	sp, #8
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	22a1      	movs	r2, #161	; 0xa1
 80067b8:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	22fe      	movs	r2, #254	; 0xfe
 80067be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80067d2:	2201      	movs	r2, #1
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fe88 	bl	80084ec <USBH_CtlReq>
 80067dc:	4603      	mov	r3, r0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	4a09      	ldr	r2, [pc, #36]	; (8006824 <USBH_MSC_BOT_Init+0x3c>)
 80067fe:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <USBH_MSC_BOT_Init+0x40>)
 8006804:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	43425355 	.word	0x43425355
 8006828:	20304050 	.word	0x20304050

0800682c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8006838:	2301      	movs	r3, #1
 800683a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800683c:	2301      	movs	r3, #1
 800683e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8006840:	2301      	movs	r3, #1
 8006842:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006844:	2300      	movs	r3, #0
 8006846:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800685c:	3b01      	subs	r3, #1
 800685e:	2b0a      	cmp	r3, #10
 8006860:	f200 819e 	bhi.w	8006ba0 <USBH_MSC_BOT_Process+0x374>
 8006864:	a201      	add	r2, pc, #4	; (adr r2, 800686c <USBH_MSC_BOT_Process+0x40>)
 8006866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686a:	bf00      	nop
 800686c:	08006899 	.word	0x08006899
 8006870:	080068c1 	.word	0x080068c1
 8006874:	0800692b 	.word	0x0800692b
 8006878:	08006949 	.word	0x08006949
 800687c:	080069cd 	.word	0x080069cd
 8006880:	080069ef 	.word	0x080069ef
 8006884:	08006a87 	.word	0x08006a87
 8006888:	08006aa3 	.word	0x08006aa3
 800688c:	08006af5 	.word	0x08006af5
 8006890:	08006b25 	.word	0x08006b25
 8006894:	08006b87 	.word	0x08006b87
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	78fa      	ldrb	r2, [r7, #3]
 800689c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	795b      	ldrb	r3, [r3, #5]
 80068b2:	2201      	movs	r2, #1
 80068b4:	9200      	str	r2, [sp, #0]
 80068b6:	221f      	movs	r2, #31
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f826 	bl	800890a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80068be:	e17e      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	795b      	ldrb	r3, [r3, #5]
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f007 fd60 	bl	800e38c <USBH_LL_GetURBState>
 80068cc:	4603      	mov	r3, r0
 80068ce:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80068d0:	7d3b      	ldrb	r3, [r7, #20]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d118      	bne.n	8006908 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00f      	beq.n	80068fe <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80068e4:	b25b      	sxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da04      	bge.n	80068f4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	2203      	movs	r2, #3
 80068ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80068f2:	e157      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2205      	movs	r2, #5
 80068f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80068fc:	e152      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2207      	movs	r2, #7
 8006902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006906:	e14d      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006908:	7d3b      	ldrb	r3, [r7, #20]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d104      	bne.n	8006918 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006916:	e145      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8006918:	7d3b      	ldrb	r3, [r7, #20]
 800691a:	2b05      	cmp	r3, #5
 800691c:	f040 8142 	bne.w	8006ba4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	220a      	movs	r2, #10
 8006924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006928:	e13c      	b.n	8006ba4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	895a      	ldrh	r2, [r3, #10]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	791b      	ldrb	r3, [r3, #4]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f80b 	bl	8008954 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2204      	movs	r2, #4
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006946:	e13a      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	791b      	ldrb	r3, [r3, #4]
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f007 fd1c 	bl	800e38c <USBH_LL_GetURBState>
 8006954:	4603      	mov	r3, r0
 8006956:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006958:	7d3b      	ldrb	r3, [r7, #20]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d12d      	bne.n	80069ba <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	8952      	ldrh	r2, [r2, #10]
 8006966:	4293      	cmp	r3, r2
 8006968:	d910      	bls.n	800698c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	8952      	ldrh	r2, [r2, #10]
 8006974:	441a      	add	r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	8952      	ldrh	r2, [r2, #10]
 8006984:	1a9a      	subs	r2, r3, r2
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	65da      	str	r2, [r3, #92]	; 0x5c
 800698a:	e002      	b.n	8006992 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2200      	movs	r2, #0
 8006990:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	895a      	ldrh	r2, [r3, #10]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	791b      	ldrb	r3, [r3, #4]
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f001 ffd3 	bl	8008954 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80069ae:	e0fb      	b.n	8006ba8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	2207      	movs	r2, #7
 80069b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069b8:	e0f6      	b.n	8006ba8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80069ba:	7d3b      	ldrb	r3, [r7, #20]
 80069bc:	2b05      	cmp	r3, #5
 80069be:	f040 80f3 	bne.w	8006ba8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	2209      	movs	r2, #9
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069ca:	e0ed      	b.n	8006ba8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	891a      	ldrh	r2, [r3, #8]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	795b      	ldrb	r3, [r3, #5]
 80069da:	2001      	movs	r0, #1
 80069dc:	9000      	str	r0, [sp, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f001 ff93 	bl	800890a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	2206      	movs	r2, #6
 80069e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80069ec:	e0e7      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	795b      	ldrb	r3, [r3, #5]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f007 fcc9 	bl	800e38c <USBH_LL_GetURBState>
 80069fa:	4603      	mov	r3, r0
 80069fc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80069fe:	7d3b      	ldrb	r3, [r7, #20]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d12f      	bne.n	8006a64 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	8912      	ldrh	r2, [r2, #8]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d910      	bls.n	8006a32 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	8912      	ldrh	r2, [r2, #8]
 8006a1a:	441a      	add	r2, r3
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a26:	693a      	ldr	r2, [r7, #16]
 8006a28:	8912      	ldrh	r2, [r2, #8]
 8006a2a:	1a9a      	subs	r2, r3, r2
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a30:	e002      	b.n	8006a38 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2200      	movs	r2, #0
 8006a36:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	891a      	ldrh	r2, [r3, #8]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	795b      	ldrb	r3, [r3, #5]
 8006a4e:	2001      	movs	r0, #1
 8006a50:	9000      	str	r0, [sp, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 ff59 	bl	800890a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006a58:	e0a8      	b.n	8006bac <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2207      	movs	r2, #7
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a62:	e0a3      	b.n	8006bac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a64:	7d3b      	ldrb	r3, [r7, #20]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d104      	bne.n	8006a74 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a72:	e09b      	b.n	8006bac <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8006a74:	7d3b      	ldrb	r3, [r7, #20]
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	f040 8098 	bne.w	8006bac <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	220a      	movs	r2, #10
 8006a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a84:	e092      	b.n	8006bac <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	791b      	ldrb	r3, [r3, #4]
 8006a90:	220d      	movs	r2, #13
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 ff5e 	bl	8008954 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006aa0:	e08d      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f007 fc6f 	bl	800e38c <USBH_LL_GetURBState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006ab2:	7d3b      	ldrb	r3, [r7, #20]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d115      	bne.n	8006ae4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f8a9 	bl	8006c20 <USBH_MSC_DecodeCSW>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006ad2:	7d7b      	ldrb	r3, [r7, #21]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006adc:	e068      	b.n	8006bb0 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae2:	e065      	b.n	8006bb0 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8006ae4:	7d3b      	ldrb	r3, [r7, #20]
 8006ae6:	2b05      	cmp	r3, #5
 8006ae8:	d162      	bne.n	8006bb0 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2209      	movs	r2, #9
 8006aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006af2:	e05d      	b.n	8006bb0 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	2200      	movs	r2, #0
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f864 	bl	8006bc8 <USBH_MSC_BOT_Abort>
 8006b00:	4603      	mov	r3, r0
 8006b02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006b04:	7dbb      	ldrb	r3, [r7, #22]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d104      	bne.n	8006b14 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006b12:	e04f      	b.n	8006bb4 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006b14:	7dbb      	ldrb	r3, [r7, #22]
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d14c      	bne.n	8006bb4 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	220b      	movs	r2, #11
 8006b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b22:	e047      	b.n	8006bb4 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	2201      	movs	r2, #1
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f84c 	bl	8006bc8 <USBH_MSC_BOT_Abort>
 8006b30:	4603      	mov	r3, r0
 8006b32:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006b34:	7dbb      	ldrb	r3, [r7, #22]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d11d      	bne.n	8006b76 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	795b      	ldrb	r3, [r3, #5]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f007 fc8f 	bl	800e464 <USBH_LL_GetToggle>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	7959      	ldrb	r1, [r3, #5]
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	f1c3 0301 	rsb	r3, r3, #1
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f007 fc53 	bl	800e404 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	791b      	ldrb	r3, [r3, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f007 fc4c 	bl	800e404 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2209      	movs	r2, #9
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006b74:	e020      	b.n	8006bb8 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8006b76:	7dbb      	ldrb	r3, [r7, #22]
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	d11d      	bne.n	8006bb8 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	220b      	movs	r2, #11
 8006b80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b84:	e018      	b.n	8006bb8 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fdf2 	bl	8006770 <USBH_MSC_BOT_REQ_Reset>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d112      	bne.n	8006bbc <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006b9e:	e00d      	b.n	8006bbc <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8006ba0:	bf00      	nop
 8006ba2:	e00c      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006ba4:	bf00      	nop
 8006ba6:	e00a      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006ba8:	bf00      	nop
 8006baa:	e008      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006bac:	bf00      	nop
 8006bae:	e006      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006bb0:	bf00      	nop
 8006bb2:	e004      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006bb4:	bf00      	nop
 8006bb6:	e002      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006bb8:	bf00      	nop
 8006bba:	e000      	b.n	8006bbe <USBH_MSC_BOT_Process+0x392>
      break;
 8006bbc:	bf00      	nop
  }
  return status;
 8006bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3718      	adds	r7, #24
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	70fb      	strb	r3, [r7, #3]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006be6:	78bb      	ldrb	r3, [r7, #2]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <USBH_MSC_BOT_Abort+0x2a>
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d009      	beq.n	8006c04 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006bf0:	e011      	b.n	8006c16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	79db      	ldrb	r3, [r3, #7]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f9a8 	bl	8007f4e <USBH_ClrFeature>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
      break;
 8006c02:	e008      	b.n	8006c16 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	799b      	ldrb	r3, [r3, #6]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 f99f 	bl	8007f4e <USBH_ClrFeature>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
      break;
 8006c14:	bf00      	nop
  }
  return status;
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	791b      	ldrb	r3, [r3, #4]
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f007 fb13 	bl	800e268 <USBH_LL_GetLastXferSize>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b0d      	cmp	r3, #13
 8006c46:	d002      	beq.n	8006c4e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e024      	b.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c52:	4a14      	ldr	r2, [pc, #80]	; (8006ca4 <USBH_MSC_DecodeCSW+0x84>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d11d      	bne.n	8006c94 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d119      	bne.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	73fb      	strb	r3, [r7, #15]
 8006c72:	e011      	b.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
 8006c82:	e009      	b.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d104      	bne.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	73fb      	strb	r3, [r7, #15]
 8006c92:	e001      	b.n	8006c98 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006c94:	2302      	movs	r3, #2
 8006c96:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	53425355 	.word	0x53425355

08006ca8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d021      	beq.n	8006d14 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006cd0:	e028      	b.n	8006d24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	220a      	movs	r2, #10
 8006ce4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3363      	adds	r3, #99	; 0x63
 8006cec:	2210      	movs	r2, #16
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f007 fd17 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	73fb      	strb	r3, [r7, #15]
      break;
 8006d12:	e007      	b.n	8006d24 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff fd87 	bl	800682c <USBH_MSC_BOT_Process>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]
      break;
 8006d22:	bf00      	nop
  }

  return error;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	460b      	mov	r3, r1
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d002      	beq.n	8006d5a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d027      	beq.n	8006da8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006d58:	e05f      	b.n	8006e1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2280      	movs	r2, #128	; 0x80
 8006d64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	3363      	adds	r3, #99	; 0x63
 8006d74:	2210      	movs	r2, #16
 8006d76:	2100      	movs	r1, #0
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f007 fcd3 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	2225      	movs	r2, #37	; 0x25
 8006d82:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f103 0210 	add.w	r2, r3, #16
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006da2:	2301      	movs	r3, #1
 8006da4:	75fb      	strb	r3, [r7, #23]
      break;
 8006da6:	e038      	b.n	8006e1a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006da8:	7afb      	ldrb	r3, [r7, #11]
 8006daa:	4619      	mov	r1, r3
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fd3d 	bl	800682c <USBH_MSC_BOT_Process>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d12d      	bne.n	8006e18 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc2:	3303      	adds	r3, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dce:	3302      	adds	r3, #2
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ddc:	3301      	adds	r3, #1
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006de2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	061b      	lsls	r3, r3, #24
 8006dee:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfa:	3307      	adds	r3, #7
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e06:	3306      	adds	r3, #6
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	809a      	strh	r2, [r3, #4]
      break;
 8006e18:	bf00      	nop
  }

  return error;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006e32:	2302      	movs	r3, #2
 8006e34:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d002      	beq.n	8006e50 <USBH_MSC_SCSI_Inquiry+0x2c>
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d03d      	beq.n	8006eca <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006e4e:	e089      	b.n	8006f64 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	2224      	movs	r2, #36	; 0x24
 8006e54:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2280      	movs	r2, #128	; 0x80
 8006e5a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	220a      	movs	r2, #10
 8006e62:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3363      	adds	r3, #99	; 0x63
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f007 fc58 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2212      	movs	r2, #18
 8006e78:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	015b      	lsls	r3, r3, #5
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2224      	movs	r2, #36	; 0x24
 8006e9c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f103 0210 	add.w	r2, r3, #16
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec8:	e04c      	b.n	8006f64 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fcac 	bl	800682c <USBH_MSC_BOT_Process>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d141      	bne.n	8006f62 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8006ede:	2222      	movs	r2, #34	; 0x22
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f007 fc1e 	bl	800e724 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 031f 	and.w	r3, r3, #31
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f10:	3301      	adds	r3, #1
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b25b      	sxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	da03      	bge.n	8006f22 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	709a      	strb	r2, [r3, #2]
 8006f20:	e002      	b.n	8006f28 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1cd8      	adds	r0, r3, #3
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f32:	3308      	adds	r3, #8
 8006f34:	2208      	movs	r2, #8
 8006f36:	4619      	mov	r1, r3
 8006f38:	f007 fc38 	bl	800e7ac <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 000c 	add.w	r0, r3, #12
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	3310      	adds	r3, #16
 8006f4a:	2210      	movs	r2, #16
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f007 fc2d 	bl	800e7ac <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	331d      	adds	r3, #29
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8006f5c:	3220      	adds	r2, #32
 8006f5e:	6812      	ldr	r2, [r2, #0]
 8006f60:	601a      	str	r2, [r3, #0]
      break;
 8006f62:	bf00      	nop
  }

  return error;
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b086      	sub	sp, #24
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	60f8      	str	r0, [r7, #12]
 8006f76:	460b      	mov	r3, r1
 8006f78:	607a      	str	r2, [r7, #4]
 8006f7a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d002      	beq.n	8006f9a <USBH_MSC_SCSI_RequestSense+0x2c>
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d03d      	beq.n	8007014 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8006f98:	e05d      	b.n	8007056 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	220e      	movs	r2, #14
 8006f9e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	220a      	movs	r2, #10
 8006fac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	3363      	adds	r3, #99	; 0x63
 8006fb4:	2210      	movs	r2, #16
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f007 fbb3 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2203      	movs	r2, #3
 8006fc2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	015b      	lsls	r3, r3, #5
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	220e      	movs	r2, #14
 8006fe6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f103 0210 	add.w	r2, r3, #16
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
      break;
 8007012:	e020      	b.n	8007056 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	4619      	mov	r1, r3
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff fc07 	bl	800682c <USBH_MSC_BOT_Process>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007022:	7dfb      	ldrb	r3, [r7, #23]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d115      	bne.n	8007054 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702e:	3302      	adds	r3, #2
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	b2da      	uxtb	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007042:	7b1a      	ldrb	r2, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800704e:	7b5a      	ldrb	r2, [r3, #13]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	709a      	strb	r2, [r3, #2]
      break;
 8007054:	bf00      	nop
  }

  return error;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3718      	adds	r7, #24
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007070:	2302      	movs	r3, #2
 8007072:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007084:	2b01      	cmp	r3, #1
 8007086:	d002      	beq.n	800708e <USBH_MSC_SCSI_Write+0x2e>
 8007088:	2b02      	cmp	r3, #2
 800708a:	d047      	beq.n	800711c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800708c:	e04e      	b.n	800712c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007094:	461a      	mov	r2, r3
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	fb03 f202 	mul.w	r2, r3, r2
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	220a      	movs	r2, #10
 80070ac:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	3363      	adds	r3, #99	; 0x63
 80070b4:	2210      	movs	r2, #16
 80070b6:	2100      	movs	r1, #0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f007 fb33 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	222a      	movs	r2, #42	; 0x2a
 80070c2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80070c6:	79fa      	ldrb	r2, [r7, #7]
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80070ce:	79ba      	ldrb	r2, [r7, #6]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80070d6:	797a      	ldrb	r2, [r7, #5]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	781a      	ldrb	r2, [r3, #0]
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80070e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80070f2:	f107 0320 	add.w	r3, r7, #32
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007116:	2301      	movs	r3, #1
 8007118:	75fb      	strb	r3, [r7, #23]
      break;
 800711a:	e007      	b.n	800712c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	4619      	mov	r1, r3
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fb83 	bl	800682c <USBH_MSC_BOT_Process>
 8007126:	4603      	mov	r3, r0
 8007128:	75fb      	strb	r3, [r7, #23]
      break;
 800712a:	bf00      	nop
  }

  return error;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	460b      	mov	r3, r1
 8007144:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007146:	2302      	movs	r3, #2
 8007148:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800715a:	2b01      	cmp	r3, #1
 800715c:	d002      	beq.n	8007164 <USBH_MSC_SCSI_Read+0x2e>
 800715e:	2b02      	cmp	r3, #2
 8007160:	d047      	beq.n	80071f2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007162:	e04e      	b.n	8007202 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800716a:	461a      	mov	r2, r3
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	fb03 f202 	mul.w	r2, r3, r2
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2280      	movs	r2, #128	; 0x80
 800717a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	220a      	movs	r2, #10
 8007182:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3363      	adds	r3, #99	; 0x63
 800718a:	2210      	movs	r2, #16
 800718c:	2100      	movs	r1, #0
 800718e:	4618      	mov	r0, r3
 8007190:	f007 fac8 	bl	800e724 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	2228      	movs	r2, #40	; 0x28
 8007198:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800719c:	79fa      	ldrb	r2, [r7, #7]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80071a4:	79ba      	ldrb	r2, [r7, #6]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80071ac:	797a      	ldrb	r2, [r7, #5]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80071b4:	1d3b      	adds	r3, r7, #4
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80071be:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80071c8:	f107 0320 	add.w	r3, r7, #32
 80071cc:	781a      	ldrb	r2, [r3, #0]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
      break;
 80071f0:	e007      	b.n	8007202 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f7ff fb18 	bl	800682c <USBH_MSC_BOT_Process>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007200:	bf00      	nop
  }

  return error;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	4613      	mov	r3, r2
 8007218:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007220:	2302      	movs	r3, #2
 8007222:	e029      	b.n	8007278 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	79fa      	ldrb	r2, [r7, #7]
 8007228:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f81f 	bl	8007280 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f006 ff45 	bl	800e100 <USBH_LL_Init>

  return USBH_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3710      	adds	r7, #16
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e009      	b.n	80072a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	33e0      	adds	r3, #224	; 0xe0
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2b0f      	cmp	r3, #15
 80072aa:	d9f2      	bls.n	8007292 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e009      	b.n	80072c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072cc:	d3f1      	bcc.n	80072b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2240      	movs	r2, #64	; 0x40
 80072f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d016      	beq.n	800736a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10e      	bne.n	8007364 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800734c:	1c59      	adds	r1, r3, #1
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	33de      	adds	r3, #222	; 0xde
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	e004      	b.n	800736e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007364:	2302      	movs	r3, #2
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e001      	b.n	800736e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800736a:	2302      	movs	r3, #2
 800736c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007388:	2300      	movs	r3, #0
 800738a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	429a      	cmp	r2, r3
 8007396:	d204      	bcs.n	80073a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	78fa      	ldrb	r2, [r7, #3]
 800739c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073a0:	e001      	b.n	80073a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073a2:	2302      	movs	r3, #2
 80073a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	4608      	mov	r0, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	461a      	mov	r2, r3
 80073c2:	4603      	mov	r3, r0
 80073c4:	70fb      	strb	r3, [r7, #3]
 80073c6:	460b      	mov	r3, r1
 80073c8:	70bb      	strb	r3, [r7, #2]
 80073ca:	4613      	mov	r3, r2
 80073cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80073dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80073de:	e025      	b.n	800742c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	221a      	movs	r2, #26
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
 80073e8:	3308      	adds	r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4413      	add	r3, r2
 80073ee:	3302      	adds	r3, #2
 80073f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	795b      	ldrb	r3, [r3, #5]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d002      	beq.n	8007402 <USBH_FindInterface+0x4e>
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	2bff      	cmp	r3, #255	; 0xff
 8007400:	d111      	bne.n	8007426 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007406:	78ba      	ldrb	r2, [r7, #2]
 8007408:	429a      	cmp	r2, r3
 800740a:	d002      	beq.n	8007412 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800740c:	78bb      	ldrb	r3, [r7, #2]
 800740e:	2bff      	cmp	r3, #255	; 0xff
 8007410:	d109      	bne.n	8007426 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007416:	787a      	ldrb	r2, [r7, #1]
 8007418:	429a      	cmp	r2, r3
 800741a:	d002      	beq.n	8007422 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800741c:	787b      	ldrb	r3, [r7, #1]
 800741e:	2bff      	cmp	r3, #255	; 0xff
 8007420:	d101      	bne.n	8007426 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	e006      	b.n	8007434 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	3301      	adds	r3, #1
 800742a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d9d6      	bls.n	80073e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007432:	23ff      	movs	r3, #255	; 0xff
}
 8007434:	4618      	mov	r0, r3
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f006 fe95 	bl	800e178 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800744e:	2101      	movs	r1, #1
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f006 ffaf 	bl	800e3b4 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af04      	add	r7, sp, #16
 8007466:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007468:	2302      	movs	r3, #2
 800746a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d102      	bne.n	8007482 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b0b      	cmp	r3, #11
 800748a:	f200 81be 	bhi.w	800780a <USBH_Process+0x3aa>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <USBH_Process+0x34>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074c5 	.word	0x080074c5
 8007498:	080074f7 	.word	0x080074f7
 800749c:	0800755f 	.word	0x0800755f
 80074a0:	080077a5 	.word	0x080077a5
 80074a4:	0800780b 	.word	0x0800780b
 80074a8:	08007603 	.word	0x08007603
 80074ac:	0800774b 	.word	0x0800774b
 80074b0:	08007639 	.word	0x08007639
 80074b4:	08007659 	.word	0x08007659
 80074b8:	08007679 	.word	0x08007679
 80074bc:	080076bd 	.word	0x080076bd
 80074c0:	0800778d 	.word	0x0800778d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 819e 	beq.w	800780e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80074d8:	20c8      	movs	r0, #200	; 0xc8
 80074da:	f006 fff3 	bl	800e4c4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f006 fea7 	bl	800e232 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80074f4:	e18b      	b.n	800780e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d107      	bne.n	8007510 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800750e:	e18d      	b.n	800782c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007516:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800751a:	d914      	bls.n	8007546 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007522:	3301      	adds	r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007532:	2b03      	cmp	r3, #3
 8007534:	d903      	bls.n	800753e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	220d      	movs	r2, #13
 800753a:	701a      	strb	r2, [r3, #0]
      break;
 800753c:	e176      	b.n	800782c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
      break;
 8007544:	e172      	b.n	800782c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800754c:	f103 020a 	add.w	r2, r3, #10
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007556:	200a      	movs	r0, #10
 8007558:	f006 ffb4 	bl	800e4c4 <USBH_Delay>
      break;
 800755c:	e166      	b.n	800782c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800756e:	2104      	movs	r1, #4
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007574:	2064      	movs	r0, #100	; 0x64
 8007576:	f006 ffa5 	bl	800e4c4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f006 fe32 	bl	800e1e4 <USBH_LL_GetSpeed>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2205      	movs	r2, #5
 800758e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007590:	2100      	movs	r1, #0
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f001 fa2b 	bl	80089ee <USBH_AllocPipe>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f001 fa23 	bl	80089ee <USBH_AllocPipe>
 80075a8:	4603      	mov	r3, r0
 80075aa:	461a      	mov	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	7919      	ldrb	r1, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80075c4:	b292      	uxth	r2, r2
 80075c6:	9202      	str	r2, [sp, #8]
 80075c8:	2200      	movs	r2, #0
 80075ca:	9201      	str	r2, [sp, #4]
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	4603      	mov	r3, r0
 80075d0:	2280      	movs	r2, #128	; 0x80
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f9dc 	bl	8008990 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	7959      	ldrb	r1, [r3, #5]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80075ec:	b292      	uxth	r2, r2
 80075ee:	9202      	str	r2, [sp, #8]
 80075f0:	2200      	movs	r2, #0
 80075f2:	9201      	str	r2, [sp, #4]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	4603      	mov	r3, r0
 80075f8:	2200      	movs	r2, #0
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f9c8 	bl	8008990 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007600:	e114      	b.n	800782c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f918 	bl	8007838 <USBH_HandleEnum>
 8007608:	4603      	mov	r3, r0
 800760a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 80fe 	bne.w	8007812 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007624:	2b01      	cmp	r3, #1
 8007626:	d103      	bne.n	8007630 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2208      	movs	r2, #8
 800762c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800762e:	e0f0      	b.n	8007812 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2207      	movs	r2, #7
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e0ec      	b.n	8007812 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 80e9 	beq.w	8007816 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800764a:	2101      	movs	r1, #1
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2208      	movs	r2, #8
 8007654:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007656:	e0de      	b.n	8007816 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800765e:	b29b      	uxth	r3, r3
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fc2c 	bl	8007ec0 <USBH_SetCfg>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f040 80d5 	bne.w	800781a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2209      	movs	r2, #9
 8007674:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007676:	e0d0      	b.n	800781a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007686:	2101      	movs	r1, #1
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc3c 	bl	8007f06 <USBH_SetFeature>
 800768e:	4603      	mov	r3, r0
 8007690:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	220a      	movs	r2, #10
 800769e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076a0:	e0bd      	b.n	800781e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	f040 80b9 	bne.w	800781e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	220a      	movs	r2, #10
 80076b0:	701a      	strb	r2, [r3, #0]
      break;
 80076b2:	e0b4      	b.n	800781e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	220a      	movs	r2, #10
 80076b8:	701a      	strb	r2, [r3, #0]
      break;
 80076ba:	e0b0      	b.n	800781e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f000 80ad 	beq.w	8007822 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	e016      	b.n	8007704 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80076d6:	7bfa      	ldrb	r2, [r7, #15]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	32de      	adds	r2, #222	; 0xde
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	791a      	ldrb	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d108      	bne.n	80076fe <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80076ec:	7bfa      	ldrb	r2, [r7, #15]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	32de      	adds	r2, #222	; 0xde
 80076f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80076fc:	e005      	b.n	800770a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
 8007700:	3301      	adds	r3, #1
 8007702:	73fb      	strb	r3, [r7, #15]
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0e5      	beq.n	80076d6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d016      	beq.n	8007742 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2206      	movs	r2, #6
 800772a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007732:	2103      	movs	r1, #3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007738:	e073      	b.n	8007822 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	220d      	movs	r2, #13
 800773e:	701a      	strb	r2, [r3, #0]
      break;
 8007740:	e06f      	b.n	8007822 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	220d      	movs	r2, #13
 8007746:	701a      	strb	r2, [r3, #0]
      break;
 8007748:	e06b      	b.n	8007822 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007750:	2b00      	cmp	r3, #0
 8007752:	d017      	beq.n	8007784 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
 8007760:	4603      	mov	r3, r0
 8007762:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d103      	bne.n	8007774 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	220b      	movs	r2, #11
 8007770:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007772:	e058      	b.n	8007826 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d154      	bne.n	8007826 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	220d      	movs	r2, #13
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e050      	b.n	8007826 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	220d      	movs	r2, #13
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e04c      	b.n	8007826 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d049      	beq.n	800782a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
      }
      break;
 80077a2:	e042      	b.n	800782a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7ff fd67 	bl	8007280 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d009      	beq.n	80077d0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d005      	beq.n	80077e6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077e0:	2105      	movs	r1, #5
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d107      	bne.n	8007802 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7ff fe20 	bl	8007440 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007800:	e014      	b.n	800782c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f006 fcb8 	bl	800e178 <USBH_LL_Start>
      break;
 8007808:	e010      	b.n	800782c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800780a:	bf00      	nop
 800780c:	e00e      	b.n	800782c <USBH_Process+0x3cc>
      break;
 800780e:	bf00      	nop
 8007810:	e00c      	b.n	800782c <USBH_Process+0x3cc>
      break;
 8007812:	bf00      	nop
 8007814:	e00a      	b.n	800782c <USBH_Process+0x3cc>
    break;
 8007816:	bf00      	nop
 8007818:	e008      	b.n	800782c <USBH_Process+0x3cc>
      break;
 800781a:	bf00      	nop
 800781c:	e006      	b.n	800782c <USBH_Process+0x3cc>
      break;
 800781e:	bf00      	nop
 8007820:	e004      	b.n	800782c <USBH_Process+0x3cc>
      break;
 8007822:	bf00      	nop
 8007824:	e002      	b.n	800782c <USBH_Process+0x3cc>
      break;
 8007826:	bf00      	nop
 8007828:	e000      	b.n	800782c <USBH_Process+0x3cc>
      break;
 800782a:	bf00      	nop
  }
  return USBH_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop

08007838 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b088      	sub	sp, #32
 800783c:	af04      	add	r7, sp, #16
 800783e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007840:	2301      	movs	r3, #1
 8007842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007844:	2301      	movs	r3, #1
 8007846:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b07      	cmp	r3, #7
 800784e:	f200 81c1 	bhi.w	8007bd4 <USBH_HandleEnum+0x39c>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <USBH_HandleEnum+0x20>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	08007879 	.word	0x08007879
 800785c:	08007937 	.word	0x08007937
 8007860:	080079a1 	.word	0x080079a1
 8007864:	08007a2f 	.word	0x08007a2f
 8007868:	08007a99 	.word	0x08007a99
 800786c:	08007b09 	.word	0x08007b09
 8007870:	08007b4f 	.word	0x08007b4f
 8007874:	08007b95 	.word	0x08007b95
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007878:	2108      	movs	r1, #8
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa50 	bl	8007d20 <USBH_Get_DevDesc>
 8007880:	4603      	mov	r3, r0
 8007882:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d130      	bne.n	80078ec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7919      	ldrb	r1, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80078ae:	b292      	uxth	r2, r2
 80078b0:	9202      	str	r2, [sp, #8]
 80078b2:	2200      	movs	r2, #0
 80078b4:	9201      	str	r2, [sp, #4]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	4603      	mov	r3, r0
 80078ba:	2280      	movs	r2, #128	; 0x80
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 f867 	bl	8008990 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7959      	ldrb	r1, [r3, #5]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80078d6:	b292      	uxth	r2, r2
 80078d8:	9202      	str	r2, [sp, #8]
 80078da:	2200      	movs	r2, #0
 80078dc:	9201      	str	r2, [sp, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	4603      	mov	r3, r0
 80078e2:	2200      	movs	r2, #0
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f853 	bl	8008990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80078ea:	e175      	b.n	8007bd8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	f040 8172 	bne.w	8007bd8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80078fa:	3301      	adds	r3, #1
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800790a:	2b03      	cmp	r3, #3
 800790c:	d903      	bls.n	8007916 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	220d      	movs	r2, #13
 8007912:	701a      	strb	r2, [r3, #0]
      break;
 8007914:	e160      	b.n	8007bd8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	795b      	ldrb	r3, [r3, #5]
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 f887 	bl	8008a30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	791b      	ldrb	r3, [r3, #4]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 f881 	bl	8008a30 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
      break;
 8007934:	e150      	b.n	8007bd8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007936:	2112      	movs	r1, #18
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f9f1 	bl	8007d20 <USBH_Get_DevDesc>
 800793e:	4603      	mov	r3, r0
 8007940:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d103      	bne.n	8007950 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800794e:	e145      	b.n	8007bdc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b03      	cmp	r3, #3
 8007954:	f040 8142 	bne.w	8007bdc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800795e:	3301      	adds	r3, #1
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800796e:	2b03      	cmp	r3, #3
 8007970:	d903      	bls.n	800797a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	220d      	movs	r2, #13
 8007976:	701a      	strb	r2, [r3, #0]
      break;
 8007978:	e130      	b.n	8007bdc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	795b      	ldrb	r3, [r3, #5]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f855 	bl	8008a30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	791b      	ldrb	r3, [r3, #4]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f84f 	bl	8008a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
      break;
 800799e:	e11d      	b.n	8007bdc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fa68 	bl	8007e78 <USBH_SetAddress>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d132      	bne.n	8007a18 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80079b2:	2002      	movs	r0, #2
 80079b4:	f006 fd86 	bl	800e4c4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2203      	movs	r2, #3
 80079c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7919      	ldrb	r1, [r3, #4]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80079da:	b292      	uxth	r2, r2
 80079dc:	9202      	str	r2, [sp, #8]
 80079de:	2200      	movs	r2, #0
 80079e0:	9201      	str	r2, [sp, #4]
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	4603      	mov	r3, r0
 80079e6:	2280      	movs	r2, #128	; 0x80
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 ffd1 	bl	8008990 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7959      	ldrb	r1, [r3, #5]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a02:	b292      	uxth	r2, r2
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	9201      	str	r2, [sp, #4]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 ffbd 	bl	8008990 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a16:	e0e3      	b.n	8007be0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	f040 80e0 	bne.w	8007be0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	220d      	movs	r2, #13
 8007a24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	705a      	strb	r2, [r3, #1]
      break;
 8007a2c:	e0d8      	b.n	8007be0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007a2e:	2109      	movs	r1, #9
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f99d 	bl	8007d70 <USBH_Get_CfgDesc>
 8007a36:	4603      	mov	r3, r0
 8007a38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d103      	bne.n	8007a48 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2204      	movs	r2, #4
 8007a44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a46:	e0cd      	b.n	8007be4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	f040 80ca 	bne.w	8007be4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a56:	3301      	adds	r3, #1
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d903      	bls.n	8007a72 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	220d      	movs	r2, #13
 8007a6e:	701a      	strb	r2, [r3, #0]
      break;
 8007a70:	e0b8      	b.n	8007be4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	795b      	ldrb	r3, [r3, #5]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 ffd9 	bl	8008a30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	791b      	ldrb	r3, [r3, #4]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 ffd3 	bl	8008a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
      break;
 8007a96:	e0a5      	b.n	8007be4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f965 	bl	8007d70 <USBH_Get_CfgDesc>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ab6:	e097      	b.n	8007be8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	f040 8094 	bne.w	8007be8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d903      	bls.n	8007ae2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	220d      	movs	r2, #13
 8007ade:	701a      	strb	r2, [r3, #0]
      break;
 8007ae0:	e082      	b.n	8007be8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	795b      	ldrb	r3, [r3, #5]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 ffa1 	bl	8008a30 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	791b      	ldrb	r3, [r3, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 ff9b 	bl	8008a30 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e06f      	b.n	8007be8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d019      	beq.n	8007b46 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b1e:	23ff      	movs	r3, #255	; 0xff
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f949 	bl	8007db8 <USBH_Get_StringDesc>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2206      	movs	r2, #6
 8007b34:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b36:	e059      	b.n	8007bec <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d156      	bne.n	8007bec <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2206      	movs	r2, #6
 8007b42:	705a      	strb	r2, [r3, #1]
      break;
 8007b44:	e052      	b.n	8007bec <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2206      	movs	r2, #6
 8007b4a:	705a      	strb	r2, [r3, #1]
      break;
 8007b4c:	e04e      	b.n	8007bec <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d019      	beq.n	8007b8c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b64:	23ff      	movs	r3, #255	; 0xff
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f926 	bl	8007db8 <USBH_Get_StringDesc>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d103      	bne.n	8007b7e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2207      	movs	r2, #7
 8007b7a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b7c:	e038      	b.n	8007bf0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d135      	bne.n	8007bf0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2207      	movs	r2, #7
 8007b88:	705a      	strb	r2, [r3, #1]
      break;
 8007b8a:	e031      	b.n	8007bf0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2207      	movs	r2, #7
 8007b90:	705a      	strb	r2, [r3, #1]
      break;
 8007b92:	e02d      	b.n	8007bf0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d017      	beq.n	8007bce <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007baa:	23ff      	movs	r3, #255	; 0xff
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f903 	bl	8007db8 <USBH_Get_StringDesc>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d102      	bne.n	8007bc2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007bc0:	e018      	b.n	8007bf4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d115      	bne.n	8007bf4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	73fb      	strb	r3, [r7, #15]
      break;
 8007bcc:	e012      	b.n	8007bf4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd2:	e00f      	b.n	8007bf4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007bd4:	bf00      	nop
 8007bd6:	e00e      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007bd8:	bf00      	nop
 8007bda:	e00c      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007bdc:	bf00      	nop
 8007bde:	e00a      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007be0:	bf00      	nop
 8007be2:	e008      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007be4:	bf00      	nop
 8007be6:	e006      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007be8:	bf00      	nop
 8007bea:	e004      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007bec:	bf00      	nop
 8007bee:	e002      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007bf0:	bf00      	nop
 8007bf2:	e000      	b.n	8007bf6 <USBH_HandleEnum+0x3be>
      break;
 8007bf4:	bf00      	nop
  }
  return Status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c12:	bf00      	nop
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f804 	bl	8007c42 <USBH_HandleSof>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b0b      	cmp	r3, #11
 8007c52:	d10a      	bne.n	8007c6a <USBH_HandleSof+0x28>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
  }
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c82:	bf00      	nop
}
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007c9e:	bf00      	nop
}
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f006 fa58 	bl	800e1ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	791b      	ldrb	r3, [r3, #4]
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fe93 	bl	8008a30 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fe8d 	bl	8008a30 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d3e:	2100      	movs	r1, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f864 	bl	8007e0e <USBH_GetDescriptor>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10a      	bne.n	8007d66 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	b292      	uxth	r2, r2
 8007d60:	4619      	mov	r1, r3
 8007d62:	f000 f919 	bl	8007f98 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	331c      	adds	r3, #28
 8007d80:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007d82:	887b      	ldrh	r3, [r7, #2]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f83d 	bl	8007e0e <USBH_GetDescriptor>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007d98:	7bfb      	ldrb	r3, [r7, #15]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d107      	bne.n	8007dae <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	461a      	mov	r2, r3
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f989 	bl	80080bc <USBH_ParseCfgDesc>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	72fb      	strb	r3, [r7, #11]
 8007dc8:	4613      	mov	r3, r2
 8007dca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007dd4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007ddc:	893b      	ldrh	r3, [r7, #8]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	460b      	mov	r3, r1
 8007de2:	2100      	movs	r1, #0
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f812 	bl	8007e0e <USBH_GetDescriptor>
 8007dea:	4603      	mov	r3, r0
 8007dec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007dee:	7dfb      	ldrb	r3, [r7, #23]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d107      	bne.n	8007e04 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dfa:	893a      	ldrh	r2, [r7, #8]
 8007dfc:	6879      	ldr	r1, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fb26 	bl	8008450 <USBH_ParseStringDesc>
  }

  return status;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	72fb      	strb	r3, [r7, #11]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	789b      	ldrb	r3, [r3, #2]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d11c      	bne.n	8007e62 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2206      	movs	r2, #6
 8007e38:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	893a      	ldrh	r2, [r7, #8]
 8007e3e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007e40:	893b      	ldrh	r3, [r7, #8]
 8007e42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e4a:	d104      	bne.n	8007e56 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f240 4209 	movw	r2, #1033	; 0x409
 8007e52:	829a      	strh	r2, [r3, #20]
 8007e54:	e002      	b.n	8007e5c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8b3a      	ldrh	r2, [r7, #24]
 8007e60:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007e62:	8b3b      	ldrh	r3, [r7, #24]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fb3f 	bl	80084ec <USBH_CtlReq>
 8007e6e:	4603      	mov	r3, r0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	789b      	ldrb	r3, [r3, #2]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d10f      	bne.n	8007eac <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2205      	movs	r2, #5
 8007e96:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007eac:	2200      	movs	r2, #0
 8007eae:	2100      	movs	r1, #0
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb1b 	bl	80084ec <USBH_CtlReq>
 8007eb6:	4603      	mov	r3, r0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	789b      	ldrb	r3, [r3, #2]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10e      	bne.n	8007ef2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2209      	movs	r2, #9
 8007ede:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	887a      	ldrh	r2, [r7, #2]
 8007ee4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 faf8 	bl	80084ec <USBH_CtlReq>
 8007efc:	4603      	mov	r3, r0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
 8007f0e:	460b      	mov	r3, r1
 8007f10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	789b      	ldrb	r3, [r3, #2]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d10f      	bne.n	8007f3a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2203      	movs	r2, #3
 8007f24:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f26:	78fb      	ldrb	r3, [r7, #3]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fad4 	bl	80084ec <USBH_CtlReq>
 8007f44:	4603      	mov	r3, r0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	460b      	mov	r3, r1
 8007f58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	789b      	ldrb	r3, [r3, #2]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10f      	bne.n	8007f82 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007f82:	2200      	movs	r2, #0
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fab0 	bl	80084ec <USBH_CtlReq>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
	...

08007f98 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	781a      	ldrb	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	785a      	ldrb	r2, [r3, #1]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3302      	adds	r3, #2
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	3303      	adds	r3, #3
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	021b      	lsls	r3, r3, #8
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	791a      	ldrb	r2, [r3, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	795a      	ldrb	r2, [r3, #5]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	799a      	ldrb	r2, [r3, #6]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	79da      	ldrb	r2, [r3, #7]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	79db      	ldrb	r3, [r3, #7]
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	dc0f      	bgt.n	800801a <USBH_ParseDevDesc+0x82>
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	db14      	blt.n	8008028 <USBH_ParseDevDesc+0x90>
 8007ffe:	3b08      	subs	r3, #8
 8008000:	4a2d      	ldr	r2, [pc, #180]	; (80080b8 <USBH_ParseDevDesc+0x120>)
 8008002:	fa22 f303 	lsr.w	r3, r2, r3
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2300      	moveq	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <USBH_ParseDevDesc+0x86>
 8008018:	e006      	b.n	8008028 <USBH_ParseDevDesc+0x90>
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d104      	bne.n	8008028 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	79da      	ldrb	r2, [r3, #7]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	71da      	strb	r2, [r3, #7]
      break;
 8008026:	e003      	b.n	8008030 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2240      	movs	r2, #64	; 0x40
 800802c:	71da      	strb	r2, [r3, #7]
      break;
 800802e:	bf00      	nop
  }

  if (length > 8U)
 8008030:	88fb      	ldrh	r3, [r7, #6]
 8008032:	2b08      	cmp	r3, #8
 8008034:	d939      	bls.n	80080aa <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	3308      	adds	r3, #8
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b29a      	uxth	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	3309      	adds	r3, #9
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b29b      	uxth	r3, r3
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	b29b      	uxth	r3, r3
 800804a:	4313      	orrs	r3, r2
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	330a      	adds	r3, #10
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b29a      	uxth	r2, r3
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	330b      	adds	r3, #11
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	b29b      	uxth	r3, r3
 8008062:	021b      	lsls	r3, r3, #8
 8008064:	b29b      	uxth	r3, r3
 8008066:	4313      	orrs	r3, r2
 8008068:	b29a      	uxth	r2, r3
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	330c      	adds	r3, #12
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	b29a      	uxth	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	330d      	adds	r3, #13
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	b29b      	uxth	r3, r3
 8008082:	4313      	orrs	r3, r2
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	7b9a      	ldrb	r2, [r3, #14]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	7bda      	ldrb	r2, [r3, #15]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	7c1a      	ldrb	r2, [r3, #16]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	7c5a      	ldrb	r2, [r3, #17]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	745a      	strb	r2, [r3, #17]
  }
}
 80080aa:	bf00      	nop
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	01000101 	.word	0x01000101

080080bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08c      	sub	sp, #48	; 0x30
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80080d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	785a      	ldrb	r2, [r3, #1]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	3302      	adds	r3, #2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b29a      	uxth	r2, r3
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	3303      	adds	r3, #3
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	b29b      	uxth	r3, r3
 8008110:	4313      	orrs	r3, r2
 8008112:	b29b      	uxth	r3, r3
 8008114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008118:	bf28      	it	cs
 800811a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800811e:	b29a      	uxth	r2, r3
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	791a      	ldrb	r2, [r3, #4]
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	795a      	ldrb	r2, [r3, #5]
 8008130:	6a3b      	ldr	r3, [r7, #32]
 8008132:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	799a      	ldrb	r2, [r3, #6]
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	79da      	ldrb	r2, [r3, #7]
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	7a1a      	ldrb	r2, [r3, #8]
 8008148:	6a3b      	ldr	r3, [r7, #32]
 800814a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	2b09      	cmp	r3, #9
 8008152:	d002      	beq.n	800815a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008154:	6a3b      	ldr	r3, [r7, #32]
 8008156:	2209      	movs	r2, #9
 8008158:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	2b09      	cmp	r3, #9
 800815e:	f240 809d 	bls.w	800829c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008162:	2309      	movs	r3, #9
 8008164:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800816a:	e081      	b.n	8008270 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800816c:	f107 0316 	add.w	r3, r7, #22
 8008170:	4619      	mov	r1, r3
 8008172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008174:	f000 f99f 	bl	80084b6 <USBH_GetNextDesc>
 8008178:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	785b      	ldrb	r3, [r3, #1]
 800817e:	2b04      	cmp	r3, #4
 8008180:	d176      	bne.n	8008270 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	2b09      	cmp	r3, #9
 8008188:	d002      	beq.n	8008190 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2209      	movs	r2, #9
 800818e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008190:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008194:	221a      	movs	r2, #26
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	3308      	adds	r3, #8
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	4413      	add	r3, r2
 80081a0:	3302      	adds	r3, #2
 80081a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80081a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a6:	69f8      	ldr	r0, [r7, #28]
 80081a8:	f000 f87e 	bl	80082a8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80081b6:	e043      	b.n	8008240 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081b8:	f107 0316 	add.w	r3, r7, #22
 80081bc:	4619      	mov	r1, r3
 80081be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c0:	f000 f979 	bl	80084b6 <USBH_GetNextDesc>
 80081c4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d138      	bne.n	8008240 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	795b      	ldrb	r3, [r3, #5]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10f      	bne.n	80081f6 <USBH_ParseCfgDesc+0x13a>
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	799b      	ldrb	r3, [r3, #6]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d10b      	bne.n	80081f6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	79db      	ldrb	r3, [r3, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10f      	bne.n	8008206 <USBH_ParseCfgDesc+0x14a>
 80081e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d00b      	beq.n	8008206 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	2209      	movs	r2, #9
 80081f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80081f4:	e007      	b.n	8008206 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b07      	cmp	r3, #7
 80081fc:	d004      	beq.n	8008208 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	2207      	movs	r2, #7
 8008202:	701a      	strb	r2, [r3, #0]
 8008204:	e000      	b.n	8008208 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008206:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800820c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008210:	3201      	adds	r2, #1
 8008212:	00d2      	lsls	r2, r2, #3
 8008214:	211a      	movs	r1, #26
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	4413      	add	r3, r2
 800821c:	3308      	adds	r3, #8
 800821e:	6a3a      	ldr	r2, [r7, #32]
 8008220:	4413      	add	r3, r2
 8008222:	3304      	adds	r3, #4
 8008224:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f86b 	bl	8008306 <USBH_ParseEPDesc>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008236:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800823a:	3301      	adds	r3, #1
 800823c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	791b      	ldrb	r3, [r3, #4]
 8008244:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008248:	429a      	cmp	r2, r3
 800824a:	d204      	bcs.n	8008256 <USBH_ParseCfgDesc+0x19a>
 800824c:	6a3b      	ldr	r3, [r7, #32]
 800824e:	885a      	ldrh	r2, [r3, #2]
 8008250:	8afb      	ldrh	r3, [r7, #22]
 8008252:	429a      	cmp	r2, r3
 8008254:	d8b0      	bhi.n	80081b8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	791b      	ldrb	r3, [r3, #4]
 800825a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800825e:	429a      	cmp	r2, r3
 8008260:	d201      	bcs.n	8008266 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008262:	2303      	movs	r3, #3
 8008264:	e01c      	b.n	80082a0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826a:	3301      	adds	r3, #1
 800826c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008274:	2b01      	cmp	r3, #1
 8008276:	d805      	bhi.n	8008284 <USBH_ParseCfgDesc+0x1c8>
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	885a      	ldrh	r2, [r3, #2]
 800827c:	8afb      	ldrh	r3, [r7, #22]
 800827e:	429a      	cmp	r2, r3
 8008280:	f63f af74 	bhi.w	800816c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	791b      	ldrb	r3, [r3, #4]
 8008288:	2b02      	cmp	r3, #2
 800828a:	bf28      	it	cs
 800828c:	2302      	movcs	r3, #2
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008294:	429a      	cmp	r2, r3
 8008296:	d201      	bcs.n	800829c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008298:	2303      	movs	r3, #3
 800829a:	e001      	b.n	80082a0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800829c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3730      	adds	r7, #48	; 0x30
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	785a      	ldrb	r2, [r3, #1]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	789a      	ldrb	r2, [r3, #2]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	78da      	ldrb	r2, [r3, #3]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	791a      	ldrb	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	795a      	ldrb	r2, [r3, #5]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	799a      	ldrb	r2, [r3, #6]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	79da      	ldrb	r2, [r3, #7]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	7a1a      	ldrb	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	721a      	strb	r2, [r3, #8]
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008306:	b480      	push	{r7}
 8008308:	b087      	sub	sp, #28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008312:	2300      	movs	r3, #0
 8008314:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	781a      	ldrb	r2, [r3, #0]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	785a      	ldrb	r2, [r3, #1]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	789a      	ldrb	r2, [r3, #2]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	78da      	ldrb	r2, [r3, #3]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3304      	adds	r3, #4
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	b29a      	uxth	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3305      	adds	r3, #5
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	021b      	lsls	r3, r3, #8
 8008348:	b29b      	uxth	r3, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	b29a      	uxth	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	799a      	ldrb	r2, [r3, #6]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	889b      	ldrh	r3, [r3, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008362:	2303      	movs	r3, #3
 8008364:	75fb      	strb	r3, [r7, #23]
 8008366:	e033      	b.n	80083d0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	889b      	ldrh	r3, [r3, #4]
 800836c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008370:	f023 0307 	bic.w	r3, r3, #7
 8008374:	b29a      	uxth	r2, r3
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	889b      	ldrh	r3, [r3, #4]
 800837e:	b21a      	sxth	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	b299      	uxth	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3305      	adds	r3, #5
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	b29b      	uxth	r3, r3
 8008394:	430b      	orrs	r3, r1
 8008396:	b29b      	uxth	r3, r3
 8008398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800839c:	2b00      	cmp	r3, #0
 800839e:	d110      	bne.n	80083c2 <USBH_ParseEPDesc+0xbc>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	3304      	adds	r3, #4
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b299      	uxth	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3305      	adds	r3, #5
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	430b      	orrs	r3, r1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	b21b      	sxth	r3, r3
 80083ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083be:	b21b      	sxth	r3, r3
 80083c0:	e001      	b.n	80083c6 <USBH_ParseEPDesc+0xc0>
 80083c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c6:	4313      	orrs	r3, r2
 80083c8:	b21b      	sxth	r3, r3
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d116      	bne.n	8008408 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	78db      	ldrb	r3, [r3, #3]
 80083de:	f003 0303 	and.w	r3, r3, #3
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d005      	beq.n	80083f2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	78db      	ldrb	r3, [r3, #3]
 80083ea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d127      	bne.n	8008442 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	799b      	ldrb	r3, [r3, #6]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <USBH_ParseEPDesc+0xfc>
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	799b      	ldrb	r3, [r3, #6]
 80083fe:	2b10      	cmp	r3, #16
 8008400:	d91f      	bls.n	8008442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008402:	2303      	movs	r3, #3
 8008404:	75fb      	strb	r3, [r7, #23]
 8008406:	e01c      	b.n	8008442 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	78db      	ldrb	r3, [r3, #3]
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	2b01      	cmp	r3, #1
 8008412:	d10a      	bne.n	800842a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	799b      	ldrb	r3, [r3, #6]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <USBH_ParseEPDesc+0x11e>
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	799b      	ldrb	r3, [r3, #6]
 8008420:	2b10      	cmp	r3, #16
 8008422:	d90e      	bls.n	8008442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	e00b      	b.n	8008442 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	78db      	ldrb	r3, [r3, #3]
 800842e:	f003 0303 	and.w	r3, r3, #3
 8008432:	2b03      	cmp	r3, #3
 8008434:	d105      	bne.n	8008442 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	799b      	ldrb	r3, [r3, #6]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800843e:	2303      	movs	r3, #3
 8008440:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
}
 8008444:	4618      	mov	r0, r3
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	4613      	mov	r3, r2
 800845c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3301      	adds	r3, #1
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d120      	bne.n	80084aa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	1e9a      	subs	r2, r3, #2
 800846e:	88fb      	ldrh	r3, [r7, #6]
 8008470:	4293      	cmp	r3, r2
 8008472:	bf28      	it	cs
 8008474:	4613      	movcs	r3, r2
 8008476:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3302      	adds	r3, #2
 800847c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800847e:	2300      	movs	r3, #0
 8008480:	82fb      	strh	r3, [r7, #22]
 8008482:	e00b      	b.n	800849c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008484:	8afb      	ldrh	r3, [r7, #22]
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	781a      	ldrb	r2, [r3, #0]
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3301      	adds	r3, #1
 8008494:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008496:	8afb      	ldrh	r3, [r7, #22]
 8008498:	3302      	adds	r3, #2
 800849a:	82fb      	strh	r3, [r7, #22]
 800849c:	8afa      	ldrh	r2, [r7, #22]
 800849e:	8abb      	ldrh	r3, [r7, #20]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3ef      	bcc.n	8008484 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
  }
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	881a      	ldrh	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	4413      	add	r3, r2
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4413      	add	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084de:	68fb      	ldr	r3, [r7, #12]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084fa:	2301      	movs	r3, #1
 80084fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	789b      	ldrb	r3, [r3, #2]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d002      	beq.n	800850c <USBH_CtlReq+0x20>
 8008506:	2b02      	cmp	r3, #2
 8008508:	d00f      	beq.n	800852a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800850a:	e027      	b.n	800855c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2201      	movs	r2, #1
 800851c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2202      	movs	r2, #2
 8008522:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008524:	2301      	movs	r3, #1
 8008526:	75fb      	strb	r3, [r7, #23]
      break;
 8008528:	e018      	b.n	800855c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f81c 	bl	8008568 <USBH_HandleControl>
 8008530:	4603      	mov	r3, r0
 8008532:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008534:	7dfb      	ldrb	r3, [r7, #23]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <USBH_CtlReq+0x54>
 800853a:	7dfb      	ldrb	r3, [r7, #23]
 800853c:	2b03      	cmp	r3, #3
 800853e:	d106      	bne.n	800854e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	761a      	strb	r2, [r3, #24]
      break;
 800854c:	e005      	b.n	800855a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800854e:	7dfb      	ldrb	r3, [r7, #23]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d102      	bne.n	800855a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	709a      	strb	r2, [r3, #2]
      break;
 800855a:	bf00      	nop
  }
  return status;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af02      	add	r7, sp, #8
 800856e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008574:	2300      	movs	r3, #0
 8008576:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7e1b      	ldrb	r3, [r3, #24]
 800857c:	3b01      	subs	r3, #1
 800857e:	2b0a      	cmp	r3, #10
 8008580:	f200 8156 	bhi.w	8008830 <USBH_HandleControl+0x2c8>
 8008584:	a201      	add	r2, pc, #4	; (adr r2, 800858c <USBH_HandleControl+0x24>)
 8008586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858a:	bf00      	nop
 800858c:	080085b9 	.word	0x080085b9
 8008590:	080085d3 	.word	0x080085d3
 8008594:	0800863d 	.word	0x0800863d
 8008598:	08008663 	.word	0x08008663
 800859c:	0800869b 	.word	0x0800869b
 80085a0:	080086c5 	.word	0x080086c5
 80085a4:	08008717 	.word	0x08008717
 80085a8:	08008739 	.word	0x08008739
 80085ac:	08008775 	.word	0x08008775
 80085b0:	0800879b 	.word	0x0800879b
 80085b4:	080087d9 	.word	0x080087d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 0110 	add.w	r1, r3, #16
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	795b      	ldrb	r3, [r3, #5]
 80085c2:	461a      	mov	r2, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f943 	bl	8008850 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2202      	movs	r2, #2
 80085ce:	761a      	strb	r2, [r3, #24]
      break;
 80085d0:	e139      	b.n	8008846 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	795b      	ldrb	r3, [r3, #5]
 80085d6:	4619      	mov	r1, r3
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f005 fed7 	bl	800e38c <USBH_LL_GetURBState>
 80085de:	4603      	mov	r3, r0
 80085e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d11e      	bne.n	8008626 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7c1b      	ldrb	r3, [r3, #16]
 80085ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	8adb      	ldrh	r3, [r3, #22]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085fa:	7b7b      	ldrb	r3, [r7, #13]
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d103      	bne.n	8008608 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2203      	movs	r2, #3
 8008604:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008606:	e115      	b.n	8008834 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2205      	movs	r2, #5
 800860c:	761a      	strb	r2, [r3, #24]
      break;
 800860e:	e111      	b.n	8008834 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008610:	7b7b      	ldrb	r3, [r7, #13]
 8008612:	2b80      	cmp	r3, #128	; 0x80
 8008614:	d103      	bne.n	800861e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2209      	movs	r2, #9
 800861a:	761a      	strb	r2, [r3, #24]
      break;
 800861c:	e10a      	b.n	8008834 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2207      	movs	r2, #7
 8008622:	761a      	strb	r2, [r3, #24]
      break;
 8008624:	e106      	b.n	8008834 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d003      	beq.n	8008634 <USBH_HandleControl+0xcc>
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b02      	cmp	r3, #2
 8008630:	f040 8100 	bne.w	8008834 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	220b      	movs	r2, #11
 8008638:	761a      	strb	r2, [r3, #24]
      break;
 800863a:	e0fb      	b.n	8008834 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008642:	b29a      	uxth	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6899      	ldr	r1, [r3, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	899a      	ldrh	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	791b      	ldrb	r3, [r3, #4]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f93a 	bl	80088ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2204      	movs	r2, #4
 800865e:	761a      	strb	r2, [r3, #24]
      break;
 8008660:	e0f1      	b.n	8008846 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	791b      	ldrb	r3, [r3, #4]
 8008666:	4619      	mov	r1, r3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f005 fe8f 	bl	800e38c <USBH_LL_GetURBState>
 800866e:	4603      	mov	r3, r0
 8008670:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008672:	7bbb      	ldrb	r3, [r7, #14]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d102      	bne.n	800867e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2209      	movs	r2, #9
 800867c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800867e:	7bbb      	ldrb	r3, [r7, #14]
 8008680:	2b05      	cmp	r3, #5
 8008682:	d102      	bne.n	800868a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008684:	2303      	movs	r3, #3
 8008686:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008688:	e0d6      	b.n	8008838 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	2b04      	cmp	r3, #4
 800868e:	f040 80d3 	bne.w	8008838 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220b      	movs	r2, #11
 8008696:	761a      	strb	r2, [r3, #24]
      break;
 8008698:	e0ce      	b.n	8008838 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6899      	ldr	r1, [r3, #8]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	899a      	ldrh	r2, [r3, #12]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	795b      	ldrb	r3, [r3, #5]
 80086a6:	2001      	movs	r0, #1
 80086a8:	9000      	str	r0, [sp, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f8ea 	bl	8008884 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2206      	movs	r2, #6
 80086c0:	761a      	strb	r2, [r3, #24]
      break;
 80086c2:	e0c0      	b.n	8008846 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	795b      	ldrb	r3, [r3, #5]
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f005 fe5e 	bl	800e38c <USBH_LL_GetURBState>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d103      	bne.n	80086e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2207      	movs	r2, #7
 80086de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086e0:	e0ac      	b.n	800883c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
 80086e4:	2b05      	cmp	r3, #5
 80086e6:	d105      	bne.n	80086f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	220c      	movs	r2, #12
 80086ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086ee:	2303      	movs	r3, #3
 80086f0:	73fb      	strb	r3, [r7, #15]
      break;
 80086f2:	e0a3      	b.n	800883c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d103      	bne.n	8008702 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2205      	movs	r2, #5
 80086fe:	761a      	strb	r2, [r3, #24]
      break;
 8008700:	e09c      	b.n	800883c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b04      	cmp	r3, #4
 8008706:	f040 8099 	bne.w	800883c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220b      	movs	r2, #11
 800870e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008710:	2302      	movs	r3, #2
 8008712:	73fb      	strb	r3, [r7, #15]
      break;
 8008714:	e092      	b.n	800883c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	2100      	movs	r1, #0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8d5 	bl	80088ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2208      	movs	r2, #8
 8008734:	761a      	strb	r2, [r3, #24]

      break;
 8008736:	e086      	b.n	8008846 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	791b      	ldrb	r3, [r3, #4]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f005 fe24 	bl	800e38c <USBH_LL_GetURBState>
 8008744:	4603      	mov	r3, r0
 8008746:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d105      	bne.n	800875a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	220d      	movs	r2, #13
 8008752:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008758:	e072      	b.n	8008840 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800875a:	7bbb      	ldrb	r3, [r7, #14]
 800875c:	2b04      	cmp	r3, #4
 800875e:	d103      	bne.n	8008768 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	220b      	movs	r2, #11
 8008764:	761a      	strb	r2, [r3, #24]
      break;
 8008766:	e06b      	b.n	8008840 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b05      	cmp	r3, #5
 800876c:	d168      	bne.n	8008840 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800876e:	2303      	movs	r3, #3
 8008770:	73fb      	strb	r3, [r7, #15]
      break;
 8008772:	e065      	b.n	8008840 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	795b      	ldrb	r3, [r3, #5]
 8008778:	2201      	movs	r2, #1
 800877a:	9200      	str	r2, [sp, #0]
 800877c:	2200      	movs	r2, #0
 800877e:	2100      	movs	r1, #0
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f87f 	bl	8008884 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	220a      	movs	r2, #10
 8008796:	761a      	strb	r2, [r3, #24]
      break;
 8008798:	e055      	b.n	8008846 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	795b      	ldrb	r3, [r3, #5]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f005 fdf3 	bl	800e38c <USBH_LL_GetURBState>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d105      	bne.n	80087bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80087b0:	2300      	movs	r3, #0
 80087b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	220d      	movs	r2, #13
 80087b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087ba:	e043      	b.n	8008844 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d103      	bne.n	80087ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2209      	movs	r2, #9
 80087c6:	761a      	strb	r2, [r3, #24]
      break;
 80087c8:	e03c      	b.n	8008844 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b04      	cmp	r3, #4
 80087ce:	d139      	bne.n	8008844 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	220b      	movs	r2, #11
 80087d4:	761a      	strb	r2, [r3, #24]
      break;
 80087d6:	e035      	b.n	8008844 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7e5b      	ldrb	r3, [r3, #25]
 80087dc:	3301      	adds	r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	765a      	strb	r2, [r3, #25]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	7e5b      	ldrb	r3, [r3, #25]
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d806      	bhi.n	80087fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087f8:	e025      	b.n	8008846 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008800:	2106      	movs	r1, #6
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	795b      	ldrb	r3, [r3, #5]
 8008810:	4619      	mov	r1, r3
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f90c 	bl	8008a30 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	791b      	ldrb	r3, [r3, #4]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 f906 	bl	8008a30 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	73fb      	strb	r3, [r7, #15]
      break;
 800882e:	e00a      	b.n	8008846 <USBH_HandleControl+0x2de>

    default:
      break;
 8008830:	bf00      	nop
 8008832:	e008      	b.n	8008846 <USBH_HandleControl+0x2de>
      break;
 8008834:	bf00      	nop
 8008836:	e006      	b.n	8008846 <USBH_HandleControl+0x2de>
      break;
 8008838:	bf00      	nop
 800883a:	e004      	b.n	8008846 <USBH_HandleControl+0x2de>
      break;
 800883c:	bf00      	nop
 800883e:	e002      	b.n	8008846 <USBH_HandleControl+0x2de>
      break;
 8008840:	bf00      	nop
 8008842:	e000      	b.n	8008846 <USBH_HandleControl+0x2de>
      break;
 8008844:	bf00      	nop
  }

  return status;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af04      	add	r7, sp, #16
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800885e:	79f9      	ldrb	r1, [r7, #7]
 8008860:	2300      	movs	r3, #0
 8008862:	9303      	str	r3, [sp, #12]
 8008864:	2308      	movs	r3, #8
 8008866:	9302      	str	r3, [sp, #8]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	2300      	movs	r3, #0
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	2300      	movs	r3, #0
 8008872:	2200      	movs	r2, #0
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f005 fd58 	bl	800e32a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af04      	add	r7, sp, #16
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4611      	mov	r1, r2
 8008890:	461a      	mov	r2, r3
 8008892:	460b      	mov	r3, r1
 8008894:	80fb      	strh	r3, [r7, #6]
 8008896:	4613      	mov	r3, r2
 8008898:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088a8:	7979      	ldrb	r1, [r7, #5]
 80088aa:	7e3b      	ldrb	r3, [r7, #24]
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	9302      	str	r3, [sp, #8]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	9301      	str	r3, [sp, #4]
 80088b6:	2301      	movs	r3, #1
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	2200      	movs	r2, #0
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f005 fd33 	bl	800e32a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b088      	sub	sp, #32
 80088d2:	af04      	add	r7, sp, #16
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	4611      	mov	r1, r2
 80088da:	461a      	mov	r2, r3
 80088dc:	460b      	mov	r3, r1
 80088de:	80fb      	strh	r3, [r7, #6]
 80088e0:	4613      	mov	r3, r2
 80088e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088e4:	7979      	ldrb	r1, [r7, #5]
 80088e6:	2300      	movs	r3, #0
 80088e8:	9303      	str	r3, [sp, #12]
 80088ea:	88fb      	ldrh	r3, [r7, #6]
 80088ec:	9302      	str	r3, [sp, #8]
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	9301      	str	r3, [sp, #4]
 80088f2:	2301      	movs	r3, #1
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	2300      	movs	r3, #0
 80088f8:	2201      	movs	r2, #1
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f005 fd15 	bl	800e32a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008900:	2300      	movs	r3, #0

}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b088      	sub	sp, #32
 800890e:	af04      	add	r7, sp, #16
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	60b9      	str	r1, [r7, #8]
 8008914:	4611      	mov	r1, r2
 8008916:	461a      	mov	r2, r3
 8008918:	460b      	mov	r3, r1
 800891a:	80fb      	strh	r3, [r7, #6]
 800891c:	4613      	mov	r3, r2
 800891e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800892e:	7979      	ldrb	r1, [r7, #5]
 8008930:	7e3b      	ldrb	r3, [r7, #24]
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	9301      	str	r3, [sp, #4]
 800893c:	2301      	movs	r3, #1
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	2302      	movs	r3, #2
 8008942:	2200      	movs	r2, #0
 8008944:	68f8      	ldr	r0, [r7, #12]
 8008946:	f005 fcf0 	bl	800e32a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800894a:	2300      	movs	r3, #0
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b088      	sub	sp, #32
 8008958:	af04      	add	r7, sp, #16
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	460b      	mov	r3, r1
 8008964:	80fb      	strh	r3, [r7, #6]
 8008966:	4613      	mov	r3, r2
 8008968:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800896a:	7979      	ldrb	r1, [r7, #5]
 800896c:	2300      	movs	r3, #0
 800896e:	9303      	str	r3, [sp, #12]
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	9302      	str	r3, [sp, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	9301      	str	r3, [sp, #4]
 8008978:	2301      	movs	r3, #1
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2302      	movs	r3, #2
 800897e:	2201      	movs	r2, #1
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f005 fcd2 	bl	800e32a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af04      	add	r7, sp, #16
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	4608      	mov	r0, r1
 800899a:	4611      	mov	r1, r2
 800899c:	461a      	mov	r2, r3
 800899e:	4603      	mov	r3, r0
 80089a0:	70fb      	strb	r3, [r7, #3]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70bb      	strb	r3, [r7, #2]
 80089a6:	4613      	mov	r3, r2
 80089a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089aa:	7878      	ldrb	r0, [r7, #1]
 80089ac:	78ba      	ldrb	r2, [r7, #2]
 80089ae:	78f9      	ldrb	r1, [r7, #3]
 80089b0:	8b3b      	ldrh	r3, [r7, #24]
 80089b2:	9302      	str	r3, [sp, #8]
 80089b4:	7d3b      	ldrb	r3, [r7, #20]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	7c3b      	ldrb	r3, [r7, #16]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	4603      	mov	r3, r0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f005 fc65 	bl	800e28e <USBH_LL_OpenPipe>

  return USBH_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3708      	adds	r7, #8
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b082      	sub	sp, #8
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
 80089d6:	460b      	mov	r3, r1
 80089d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f005 fc84 	bl	800e2ec <USBH_LL_ClosePipe>

  return USBH_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f836 	bl	8008a6c <USBH_GetFreePipe>
 8008a00:	4603      	mov	r3, r0
 8008a02:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a04:	89fb      	ldrh	r3, [r7, #14]
 8008a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00a      	beq.n	8008a24 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	89fb      	ldrh	r3, [r7, #14]
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	33e0      	adds	r3, #224	; 0xe0
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a24:	89fb      	ldrh	r3, [r7, #14]
 8008a26:	b2db      	uxtb	r3, r3
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	2b0f      	cmp	r3, #15
 8008a40:	d80d      	bhi.n	8008a5e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a42:	78fb      	ldrb	r3, [r7, #3]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	33e0      	adds	r3, #224	; 0xe0
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	33e0      	adds	r3, #224	; 0xe0
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
 8008a7c:	e00f      	b.n	8008a9e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	33e0      	adds	r3, #224	; 0xe0
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	b29b      	uxth	r3, r3
 8008a96:	e007      	b.n	8008aa8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	2b0f      	cmp	r3, #15
 8008aa2:	d9ec      	bls.n	8008a7e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	4a08      	ldr	r2, [pc, #32]	; (8008ae4 <disk_status+0x30>)
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	79fa      	ldrb	r2, [r7, #7]
 8008acc:	4905      	ldr	r1, [pc, #20]	; (8008ae4 <disk_status+0x30>)
 8008ace:	440a      	add	r2, r1
 8008ad0:	7a12      	ldrb	r2, [r2, #8]
 8008ad2:	4610      	mov	r0, r2
 8008ad4:	4798      	blx	r3
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	20002750 	.word	0x20002750

08008ae8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	4a0d      	ldr	r2, [pc, #52]	; (8008b30 <disk_initialize+0x48>)
 8008afa:	5cd3      	ldrb	r3, [r2, r3]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d111      	bne.n	8008b24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008b00:	79fb      	ldrb	r3, [r7, #7]
 8008b02:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <disk_initialize+0x48>)
 8008b04:	2101      	movs	r1, #1
 8008b06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <disk_initialize+0x48>)
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	79fa      	ldrb	r2, [r7, #7]
 8008b16:	4906      	ldr	r1, [pc, #24]	; (8008b30 <disk_initialize+0x48>)
 8008b18:	440a      	add	r2, r1
 8008b1a:	7a12      	ldrb	r2, [r2, #8]
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20002750 	.word	0x20002750

08008b34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4603      	mov	r3, r0
 8008b42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	4a0a      	ldr	r2, [pc, #40]	; (8008b70 <disk_read+0x3c>)
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	4413      	add	r3, r2
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	689c      	ldr	r4, [r3, #8]
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	4a07      	ldr	r2, [pc, #28]	; (8008b70 <disk_read+0x3c>)
 8008b54:	4413      	add	r3, r2
 8008b56:	7a18      	ldrb	r0, [r3, #8]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	47a0      	blx	r4
 8008b60:	4603      	mov	r3, r0
 8008b62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	20002750 	.word	0x20002750

08008b74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <disk_write+0x3c>)
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4413      	add	r3, r2
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	68dc      	ldr	r4, [r3, #12]
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	4a07      	ldr	r2, [pc, #28]	; (8008bb0 <disk_write+0x3c>)
 8008b94:	4413      	add	r3, r2
 8008b96:	7a18      	ldrb	r0, [r3, #8]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	47a0      	blx	r4
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd90      	pop	{r4, r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20002750 	.word	0x20002750

08008bb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	603a      	str	r2, [r7, #0]
 8008bbe:	71fb      	strb	r3, [r7, #7]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	4a09      	ldr	r2, [pc, #36]	; (8008bec <disk_ioctl+0x38>)
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	79fa      	ldrb	r2, [r7, #7]
 8008bd2:	4906      	ldr	r1, [pc, #24]	; (8008bec <disk_ioctl+0x38>)
 8008bd4:	440a      	add	r2, r1
 8008bd6:	7a10      	ldrb	r0, [r2, #8]
 8008bd8:	79b9      	ldrb	r1, [r7, #6]
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	4798      	blx	r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20002750 	.word	0x20002750

08008bf0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	021b      	lsls	r3, r3, #8
 8008c04:	b21a      	sxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	b21b      	sxth	r3, r3
 8008c10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008c12:	89fb      	ldrh	r3, [r7, #14]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3714      	adds	r7, #20
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3303      	adds	r3, #3
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	3202      	adds	r2, #2
 8008c38:	7812      	ldrb	r2, [r2, #0]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	3201      	adds	r2, #1
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	021b      	lsls	r3, r3, #8
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	7812      	ldrb	r2, [r2, #0]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]
	return rv;
 8008c58:	68fb      	ldr	r3, [r7, #12]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8008c66:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008c6a:	b09d      	sub	sp, #116	; 0x74
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8008c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c72:	3307      	adds	r3, #7
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2200      	movs	r2, #0
 8008c7a:	469a      	mov	sl, r3
 8008c7c:	4693      	mov	fp, r2
 8008c7e:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8008c82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008c86:	f04f 0000 	mov.w	r0, #0
 8008c8a:	f04f 0100 	mov.w	r1, #0
 8008c8e:	0219      	lsls	r1, r3, #8
 8008c90:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008c94:	0210      	lsls	r0, r2, #8
 8008c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c98:	3306      	adds	r3, #6
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	461c      	mov	r4, r3
 8008ca2:	4615      	mov	r5, r2
 8008ca4:	ea40 0804 	orr.w	r8, r0, r4
 8008ca8:	ea41 0905 	orr.w	r9, r1, r5
 8008cac:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8008cb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f04f 0100 	mov.w	r1, #0
 8008cbc:	0219      	lsls	r1, r3, #8
 8008cbe:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008cc2:	0210      	lsls	r0, r2, #8
 8008cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cc6:	3305      	adds	r3, #5
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	2200      	movs	r2, #0
 8008cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cd0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008cd2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	4303      	orrs	r3, r0
 8008cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cdc:	462b      	mov	r3, r5
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ce2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8008ce6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8008cea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008cee:	f04f 0000 	mov.w	r0, #0
 8008cf2:	f04f 0100 	mov.w	r1, #0
 8008cf6:	0219      	lsls	r1, r3, #8
 8008cf8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008cfc:	0210      	lsls	r0, r2, #8
 8008cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d00:	3304      	adds	r3, #4
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	2200      	movs	r2, #0
 8008d08:	653b      	str	r3, [r7, #80]	; 0x50
 8008d0a:	657a      	str	r2, [r7, #84]	; 0x54
 8008d0c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8008d10:	4623      	mov	r3, r4
 8008d12:	4303      	orrs	r3, r0
 8008d14:	623b      	str	r3, [r7, #32]
 8008d16:	462b      	mov	r3, r5
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008d20:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8008d24:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	0219      	lsls	r1, r3, #8
 8008d32:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008d36:	0210      	lsls	r0, r2, #8
 8008d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d3a:	3303      	adds	r3, #3
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2200      	movs	r2, #0
 8008d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d44:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d46:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	4303      	orrs	r3, r0
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	462b      	mov	r3, r5
 8008d52:	430b      	orrs	r3, r1
 8008d54:	61fb      	str	r3, [r7, #28]
 8008d56:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008d5a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8008d5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008d62:	f04f 0000 	mov.w	r0, #0
 8008d66:	f04f 0100 	mov.w	r1, #0
 8008d6a:	0219      	lsls	r1, r3, #8
 8008d6c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8008d70:	0210      	lsls	r0, r2, #8
 8008d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d74:	3302      	adds	r3, #2
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d7e:	647a      	str	r2, [r7, #68]	; 0x44
 8008d80:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8008d84:	4623      	mov	r3, r4
 8008d86:	4303      	orrs	r3, r0
 8008d88:	613b      	str	r3, [r7, #16]
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008d94:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8008d98:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d9c:	f04f 0200 	mov.w	r2, #0
 8008da0:	f04f 0300 	mov.w	r3, #0
 8008da4:	020b      	lsls	r3, r1, #8
 8008da6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008daa:	0202      	lsls	r2, r0, #8
 8008dac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dae:	3101      	adds	r1, #1
 8008db0:	7809      	ldrb	r1, [r1, #0]
 8008db2:	b2c9      	uxtb	r1, r1
 8008db4:	2000      	movs	r0, #0
 8008db6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008db8:	63f8      	str	r0, [r7, #60]	; 0x3c
 8008dba:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4311      	orrs	r1, r2
 8008dc2:	60b9      	str	r1, [r7, #8]
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4319      	orrs	r1, r3
 8008dc8:	60f9      	str	r1, [r7, #12]
 8008dca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008dce:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8008dd2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	f04f 0300 	mov.w	r3, #0
 8008dde:	020b      	lsls	r3, r1, #8
 8008de0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008de4:	0202      	lsls	r2, r0, #8
 8008de6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008de8:	7809      	ldrb	r1, [r1, #0]
 8008dea:	b2c9      	uxtb	r1, r1
 8008dec:	2000      	movs	r0, #0
 8008dee:	6339      	str	r1, [r7, #48]	; 0x30
 8008df0:	6378      	str	r0, [r7, #52]	; 0x34
 8008df2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008df6:	4621      	mov	r1, r4
 8008df8:	4311      	orrs	r1, r2
 8008dfa:	6039      	str	r1, [r7, #0]
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4319      	orrs	r1, r3
 8008e00:	6079      	str	r1, [r7, #4]
 8008e02:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008e06:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8008e0a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	3774      	adds	r7, #116	; 0x74
 8008e14:	46bd      	mov	sp, r7
 8008e16:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008e1a:	4770      	bx	lr

08008e1c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	887a      	ldrh	r2, [r7, #2]
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]
 8008e34:	887b      	ldrh	r3, [r7, #2]
 8008e36:	0a1b      	lsrs	r3, r3, #8
 8008e38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	1c5a      	adds	r2, r3, #1
 8008e3e:	607a      	str	r2, [r7, #4]
 8008e40:	887a      	ldrh	r2, [r7, #2]
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	607a      	str	r2, [r7, #4]
 8008e62:	683a      	ldr	r2, [r7, #0]
 8008e64:	b2d2      	uxtb	r2, r2
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	1c5a      	adds	r2, r3, #1
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	683a      	ldr	r2, [r7, #0]
 8008e76:	b2d2      	uxtb	r2, r2
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	0a1b      	lsrs	r3, r3, #8
 8008e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	b2d2      	uxtb	r2, r2
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	0a1b      	lsrs	r3, r3, #8
 8008e90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	701a      	strb	r2, [r3, #0]
}
 8008e9e:	bf00      	nop
 8008ea0:	370c      	adds	r7, #12
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b085      	sub	sp, #20
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	60fa      	str	r2, [r7, #12]
 8008ebc:	783a      	ldrb	r2, [r7, #0]
 8008ebe:	701a      	strb	r2, [r3, #0]
 8008ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	0a02      	lsrs	r2, r0, #8
 8008ece:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ed2:	0a0b      	lsrs	r3, r1, #8
 8008ed4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	1c5a      	adds	r2, r3, #1
 8008edc:	60fa      	str	r2, [r7, #12]
 8008ede:	783a      	ldrb	r2, [r7, #0]
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ee6:	f04f 0200 	mov.w	r2, #0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	0a02      	lsrs	r2, r0, #8
 8008ef0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008ef4:	0a0b      	lsrs	r3, r1, #8
 8008ef6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	60fa      	str	r2, [r7, #12]
 8008f00:	783a      	ldrb	r2, [r7, #0]
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	f04f 0300 	mov.w	r3, #0
 8008f10:	0a02      	lsrs	r2, r0, #8
 8008f12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f16:	0a0b      	lsrs	r3, r1, #8
 8008f18:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	60fa      	str	r2, [r7, #12]
 8008f22:	783a      	ldrb	r2, [r7, #0]
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f2a:	f04f 0200 	mov.w	r2, #0
 8008f2e:	f04f 0300 	mov.w	r3, #0
 8008f32:	0a02      	lsrs	r2, r0, #8
 8008f34:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f38:	0a0b      	lsrs	r3, r1, #8
 8008f3a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	60fa      	str	r2, [r7, #12]
 8008f44:	783a      	ldrb	r2, [r7, #0]
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	0a02      	lsrs	r2, r0, #8
 8008f56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f5a:	0a0b      	lsrs	r3, r1, #8
 8008f5c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	60fa      	str	r2, [r7, #12]
 8008f66:	783a      	ldrb	r2, [r7, #0]
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f04f 0300 	mov.w	r3, #0
 8008f76:	0a02      	lsrs	r2, r0, #8
 8008f78:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f7c:	0a0b      	lsrs	r3, r1, #8
 8008f7e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	60fa      	str	r2, [r7, #12]
 8008f88:	783a      	ldrb	r2, [r7, #0]
 8008f8a:	701a      	strb	r2, [r3, #0]
 8008f8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	0a02      	lsrs	r2, r0, #8
 8008f9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008f9e:	0a0b      	lsrs	r3, r1, #8
 8008fa0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	1c5a      	adds	r2, r3, #1
 8008fa8:	60fa      	str	r2, [r7, #12]
 8008faa:	783a      	ldrb	r2, [r7, #0]
 8008fac:	701a      	strb	r2, [r3, #0]
}
 8008fae:	bf00      	nop
 8008fb0:	3714      	adds	r7, #20
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr

08008fba <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fba:	b480      	push	{r7}
 8008fbc:	b087      	sub	sp, #28
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	60f8      	str	r0, [r7, #12]
 8008fc2:	60b9      	str	r1, [r7, #8]
 8008fc4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00d      	beq.n	8008ff0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	1c53      	adds	r3, r2, #1
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	1c59      	adds	r1, r3, #1
 8008fde:	6179      	str	r1, [r7, #20]
 8008fe0:	7812      	ldrb	r2, [r2, #0]
 8008fe2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1f1      	bne.n	8008fd4 <mem_cpy+0x1a>
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	617a      	str	r2, [r7, #20]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	3b01      	subs	r3, #1
 800901c:	607b      	str	r3, [r7, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1f3      	bne.n	800900c <mem_set+0x10>
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009032:	b480      	push	{r7}
 8009034:	b089      	sub	sp, #36	; 0x24
 8009036:	af00      	add	r7, sp, #0
 8009038:	60f8      	str	r0, [r7, #12]
 800903a:	60b9      	str	r1, [r7, #8]
 800903c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	61fa      	str	r2, [r7, #28]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	4619      	mov	r1, r3
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	61ba      	str	r2, [r7, #24]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	1acb      	subs	r3, r1, r3
 800905e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	3b01      	subs	r3, #1
 8009064:	607b      	str	r3, [r7, #4]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <mem_cmp+0x40>
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0eb      	beq.n	800904a <mem_cmp+0x18>

	return r;
 8009072:	697b      	ldr	r3, [r7, #20]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3724      	adds	r7, #36	; 0x24
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800908a:	e002      	b.n	8009092 <chk_chr+0x12>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3301      	adds	r3, #1
 8009090:	607b      	str	r3, [r7, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d005      	beq.n	80090a6 <chk_chr+0x26>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	461a      	mov	r2, r3
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d1f2      	bne.n	800908c <chk_chr+0xc>
	return *str;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	781b      	ldrb	r3, [r3, #0]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
	...

080090b8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80090c2:	2300      	movs	r3, #0
 80090c4:	60bb      	str	r3, [r7, #8]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	e029      	b.n	8009120 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80090cc:	4a27      	ldr	r2, [pc, #156]	; (800916c <chk_lock+0xb4>)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	4413      	add	r3, r2
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01d      	beq.n	8009116 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090da:	4a24      	ldr	r2, [pc, #144]	; (800916c <chk_lock+0xb4>)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d116      	bne.n	800911a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80090ec:	4a1f      	ldr	r2, [pc, #124]	; (800916c <chk_lock+0xb4>)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	011b      	lsls	r3, r3, #4
 80090f2:	4413      	add	r3, r2
 80090f4:	3304      	adds	r3, #4
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d10c      	bne.n	800911a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009100:	4a1a      	ldr	r2, [pc, #104]	; (800916c <chk_lock+0xb4>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	011b      	lsls	r3, r3, #4
 8009106:	4413      	add	r3, r2
 8009108:	3308      	adds	r3, #8
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009110:	429a      	cmp	r2, r3
 8009112:	d102      	bne.n	800911a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009114:	e007      	b.n	8009126 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009116:	2301      	movs	r3, #1
 8009118:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d9d2      	bls.n	80090cc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d109      	bne.n	8009140 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d102      	bne.n	8009138 <chk_lock+0x80>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2b02      	cmp	r3, #2
 8009136:	d101      	bne.n	800913c <chk_lock+0x84>
 8009138:	2300      	movs	r3, #0
 800913a:	e010      	b.n	800915e <chk_lock+0xa6>
 800913c:	2312      	movs	r3, #18
 800913e:	e00e      	b.n	800915e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d108      	bne.n	8009158 <chk_lock+0xa0>
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <chk_lock+0xb4>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	4413      	add	r3, r2
 800914e:	330c      	adds	r3, #12
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009156:	d101      	bne.n	800915c <chk_lock+0xa4>
 8009158:	2310      	movs	r3, #16
 800915a:	e000      	b.n	800915e <chk_lock+0xa6>
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	200022d0 	.word	0x200022d0

08009170 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e002      	b.n	8009182 <enq_lock+0x12>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3301      	adds	r3, #1
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d806      	bhi.n	8009196 <enq_lock+0x26>
 8009188:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <enq_lock+0x40>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	011b      	lsls	r3, r3, #4
 800918e:	4413      	add	r3, r2
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1f2      	bne.n	800917c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2b02      	cmp	r3, #2
 800919a:	bf14      	ite	ne
 800919c:	2301      	movne	r3, #1
 800919e:	2300      	moveq	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	370c      	adds	r7, #12
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	200022d0 	.word	0x200022d0

080091b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
 80091c2:	e01f      	b.n	8009204 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80091c4:	4a41      	ldr	r2, [pc, #260]	; (80092cc <inc_lock+0x118>)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	011b      	lsls	r3, r3, #4
 80091ca:	4413      	add	r3, r2
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d113      	bne.n	80091fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80091d6:	4a3d      	ldr	r2, [pc, #244]	; (80092cc <inc_lock+0x118>)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	011b      	lsls	r3, r3, #4
 80091dc:	4413      	add	r3, r2
 80091de:	3304      	adds	r3, #4
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d109      	bne.n	80091fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80091ea:	4a38      	ldr	r2, [pc, #224]	; (80092cc <inc_lock+0x118>)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	4413      	add	r3, r2
 80091f2:	3308      	adds	r3, #8
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d006      	beq.n	800920c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3301      	adds	r3, #1
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d9dc      	bls.n	80091c4 <inc_lock+0x10>
 800920a:	e000      	b.n	800920e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800920c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d132      	bne.n	800927a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e002      	b.n	8009220 <inc_lock+0x6c>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3301      	adds	r3, #1
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d806      	bhi.n	8009234 <inc_lock+0x80>
 8009226:	4a29      	ldr	r2, [pc, #164]	; (80092cc <inc_lock+0x118>)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	011b      	lsls	r3, r3, #4
 800922c:	4413      	add	r3, r2
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1f2      	bne.n	800921a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d101      	bne.n	800923e <inc_lock+0x8a>
 800923a:	2300      	movs	r3, #0
 800923c:	e040      	b.n	80092c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	4922      	ldr	r1, [pc, #136]	; (80092cc <inc_lock+0x118>)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	440b      	add	r3, r1
 800924a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	491e      	ldr	r1, [pc, #120]	; (80092cc <inc_lock+0x118>)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	440b      	add	r3, r1
 8009258:	3304      	adds	r3, #4
 800925a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009260:	491a      	ldr	r1, [pc, #104]	; (80092cc <inc_lock+0x118>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	440b      	add	r3, r1
 8009268:	3308      	adds	r3, #8
 800926a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800926c:	4a17      	ldr	r2, [pc, #92]	; (80092cc <inc_lock+0x118>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	011b      	lsls	r3, r3, #4
 8009272:	4413      	add	r3, r2
 8009274:	330c      	adds	r3, #12
 8009276:	2200      	movs	r2, #0
 8009278:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <inc_lock+0xe0>
 8009280:	4a12      	ldr	r2, [pc, #72]	; (80092cc <inc_lock+0x118>)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	011b      	lsls	r3, r3, #4
 8009286:	4413      	add	r3, r2
 8009288:	330c      	adds	r3, #12
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <inc_lock+0xe0>
 8009290:	2300      	movs	r3, #0
 8009292:	e015      	b.n	80092c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d108      	bne.n	80092ac <inc_lock+0xf8>
 800929a:	4a0c      	ldr	r2, [pc, #48]	; (80092cc <inc_lock+0x118>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	4413      	add	r3, r2
 80092a2:	330c      	adds	r3, #12
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	3301      	adds	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	e001      	b.n	80092b0 <inc_lock+0xfc>
 80092ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092b0:	4906      	ldr	r1, [pc, #24]	; (80092cc <inc_lock+0x118>)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	011b      	lsls	r3, r3, #4
 80092b6:	440b      	add	r3, r1
 80092b8:	330c      	adds	r3, #12
 80092ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	200022d0 	.word	0x200022d0

080092d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	3b01      	subs	r3, #1
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d825      	bhi.n	8009330 <dec_lock+0x60>
		n = Files[i].ctr;
 80092e4:	4a17      	ldr	r2, [pc, #92]	; (8009344 <dec_lock+0x74>)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	4413      	add	r3, r2
 80092ec:	330c      	adds	r3, #12
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80092f2:	89fb      	ldrh	r3, [r7, #14]
 80092f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f8:	d101      	bne.n	80092fe <dec_lock+0x2e>
 80092fa:	2300      	movs	r3, #0
 80092fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80092fe:	89fb      	ldrh	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d002      	beq.n	800930a <dec_lock+0x3a>
 8009304:	89fb      	ldrh	r3, [r7, #14]
 8009306:	3b01      	subs	r3, #1
 8009308:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800930a:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <dec_lock+0x74>)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	4413      	add	r3, r2
 8009312:	330c      	adds	r3, #12
 8009314:	89fa      	ldrh	r2, [r7, #14]
 8009316:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009318:	89fb      	ldrh	r3, [r7, #14]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <dec_lock+0x5a>
 800931e:	4a09      	ldr	r2, [pc, #36]	; (8009344 <dec_lock+0x74>)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	4413      	add	r3, r2
 8009326:	2200      	movs	r2, #0
 8009328:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800932a:	2300      	movs	r3, #0
 800932c:	737b      	strb	r3, [r7, #13]
 800932e:	e001      	b.n	8009334 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009330:	2302      	movs	r3, #2
 8009332:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009334:	7b7b      	ldrb	r3, [r7, #13]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	200022d0 	.word	0x200022d0

08009348 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e010      	b.n	8009378 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009356:	4a0d      	ldr	r2, [pc, #52]	; (800938c <clear_lock+0x44>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4413      	add	r3, r2
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d105      	bne.n	8009372 <clear_lock+0x2a>
 8009366:	4a09      	ldr	r2, [pc, #36]	; (800938c <clear_lock+0x44>)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	011b      	lsls	r3, r3, #4
 800936c:	4413      	add	r3, r2
 800936e:	2200      	movs	r2, #0
 8009370:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d9eb      	bls.n	8009356 <clear_lock+0xe>
	}
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	200022d0 	.word	0x200022d0

08009390 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	78db      	ldrb	r3, [r3, #3]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d034      	beq.n	800940e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	7858      	ldrb	r0, [r3, #1]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80093b4:	2301      	movs	r3, #1
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	f7ff fbdc 	bl	8008b74 <disk_write>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
 80093c6:	e022      	b.n	800940e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	1ad2      	subs	r2, r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	429a      	cmp	r2, r3
 80093dc:	d217      	bcs.n	800940e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	789b      	ldrb	r3, [r3, #2]
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	e010      	b.n	8009408 <sync_window+0x78>
					wsect += fs->fsize;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	4413      	add	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7858      	ldrb	r0, [r3, #1]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80093fa:	2301      	movs	r3, #1
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	f7ff fbb9 	bl	8008b74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	3b01      	subs	r3, #1
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d8eb      	bhi.n	80093e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d01b      	beq.n	8009468 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff ffad 	bl	8009390 <sync_window>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d113      	bne.n	8009468 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	7858      	ldrb	r0, [r3, #1]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800944a:	2301      	movs	r3, #1
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	f7ff fb71 	bl	8008b34 <disk_read>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009458:	f04f 33ff 	mov.w	r3, #4294967295
 800945c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8009468:	7bfb      	ldrb	r3, [r7, #15]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff87 	bl	8009390 <sync_window>
 8009482:	4603      	mov	r3, r0
 8009484:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009486:	7bfb      	ldrb	r3, [r7, #15]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d159      	bne.n	8009540 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	2b03      	cmp	r3, #3
 8009492:	d149      	bne.n	8009528 <sync_fs+0xb4>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	791b      	ldrb	r3, [r3, #4]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d145      	bne.n	8009528 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	899b      	ldrh	r3, [r3, #12]
 80094a6:	461a      	mov	r2, r3
 80094a8:	2100      	movs	r1, #0
 80094aa:	f7ff fda7 	bl	8008ffc <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	333c      	adds	r3, #60	; 0x3c
 80094b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80094b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fcae 	bl	8008e1c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	333c      	adds	r3, #60	; 0x3c
 80094c4:	4921      	ldr	r1, [pc, #132]	; (800954c <sync_fs+0xd8>)
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7ff fcc3 	bl	8008e52 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	333c      	adds	r3, #60	; 0x3c
 80094d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80094d4:	491e      	ldr	r1, [pc, #120]	; (8009550 <sync_fs+0xdc>)
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff fcbb 	bl	8008e52 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	333c      	adds	r3, #60	; 0x3c
 80094e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	69db      	ldr	r3, [r3, #28]
 80094e8:	4619      	mov	r1, r3
 80094ea:	4610      	mov	r0, r2
 80094ec:	f7ff fcb1 	bl	8008e52 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	333c      	adds	r3, #60	; 0x3c
 80094f4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	4619      	mov	r1, r3
 80094fe:	4610      	mov	r0, r2
 8009500:	f7ff fca7 	bl	8008e52 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7858      	ldrb	r0, [r3, #1]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951c:	2301      	movs	r3, #1
 800951e:	f7ff fb29 	bl	8008b74 <disk_write>
			fs->fsi_flag = 0;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fb3f 	bl	8008bb4 <disk_ioctl>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <sync_fs+0xcc>
 800953c:	2301      	movs	r3, #1
 800953e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	41615252 	.word	0x41615252
 8009550:	61417272 	.word	0x61417272

08009554 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	3b02      	subs	r3, #2
 8009562:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	3b02      	subs	r3, #2
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d301      	bcc.n	8009574 <clust2sect+0x20>
 8009570:	2300      	movs	r3, #0
 8009572:	e008      	b.n	8009586 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	895b      	ldrh	r3, [r3, #10]
 8009578:	461a      	mov	r2, r3
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	fb03 f202 	mul.w	r2, r3, r2
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009584:	4413      	add	r3, r2
}
 8009586:	4618      	mov	r0, r3
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d904      	bls.n	80095b6 <get_fat+0x22>
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <get_fat+0x28>
		val = 1;	/* Internal error */
 80095b6:	2301      	movs	r3, #1
 80095b8:	61fb      	str	r3, [r7, #28]
 80095ba:	e13a      	b.n	8009832 <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80095bc:	f04f 33ff 	mov.w	r3, #4294967295
 80095c0:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	2b03      	cmp	r3, #3
 80095ca:	f200 8126 	bhi.w	800981a <get_fat+0x286>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <get_fat+0x40>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095e5 	.word	0x080095e5
 80095d8:	08009693 	.word	0x08009693
 80095dc:	080096df 	.word	0x080096df
 80095e0:	0800972f 	.word	0x0800972f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	60fb      	str	r3, [r7, #12]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	085b      	lsrs	r3, r3, #1
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	899b      	ldrh	r3, [r3, #12]
 80095fa:	4619      	mov	r1, r3
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009602:	4413      	add	r3, r2
 8009604:	4619      	mov	r1, r3
 8009606:	69b8      	ldr	r0, [r7, #24]
 8009608:	f7ff ff06 	bl	8009418 <move_window>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	f040 8106 	bne.w	8009820 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	60fa      	str	r2, [r7, #12]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	8992      	ldrh	r2, [r2, #12]
 800961e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009622:	fb01 f202 	mul.w	r2, r1, r2
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	4413      	add	r3, r2
 800962c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009630:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	4619      	mov	r1, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009642:	4413      	add	r3, r2
 8009644:	4619      	mov	r1, r3
 8009646:	69b8      	ldr	r0, [r7, #24]
 8009648:	f7ff fee6 	bl	8009418 <move_window>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	f040 80e8 	bne.w	8009824 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	899b      	ldrh	r3, [r3, #12]
 8009658:	461a      	mov	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009660:	fb01 f202 	mul.w	r2, r1, r2
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	4413      	add	r3, r2
 800966a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	461a      	mov	r2, r3
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4313      	orrs	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <get_fat+0xf4>
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	091b      	lsrs	r3, r3, #4
 8009686:	e002      	b.n	800968e <get_fat+0xfa>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800968e:	61fb      	str	r3, [r7, #28]
			break;
 8009690:	e0cf      	b.n	8009832 <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	899b      	ldrh	r3, [r3, #12]
 800969a:	085b      	lsrs	r3, r3, #1
 800969c:	b29b      	uxth	r3, r3
 800969e:	4619      	mov	r1, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80096a6:	4413      	add	r3, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	69b8      	ldr	r0, [r7, #24]
 80096ac:	f7ff feb4 	bl	8009418 <move_window>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f040 80b8 	bne.w	8009828 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	8992      	ldrh	r2, [r2, #12]
 80096c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80096ca:	fb00 f202 	mul.w	r2, r0, r2
 80096ce:	1a9b      	subs	r3, r3, r2
 80096d0:	440b      	add	r3, r1
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fa8c 	bl	8008bf0 <ld_word>
 80096d8:	4603      	mov	r3, r0
 80096da:	61fb      	str	r3, [r7, #28]
			break;
 80096dc:	e0a9      	b.n	8009832 <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	899b      	ldrh	r3, [r3, #12]
 80096e6:	089b      	lsrs	r3, r3, #2
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	4619      	mov	r1, r3
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f2:	4413      	add	r3, r2
 80096f4:	4619      	mov	r1, r3
 80096f6:	69b8      	ldr	r0, [r7, #24]
 80096f8:	f7ff fe8e 	bl	8009418 <move_window>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 8094 	bne.w	800982c <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	8992      	ldrh	r2, [r2, #12]
 8009712:	fbb3 f0f2 	udiv	r0, r3, r2
 8009716:	fb00 f202 	mul.w	r2, r0, r2
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	440b      	add	r3, r1
 800971e:	4618      	mov	r0, r3
 8009720:	f7ff fa7e 	bl	8008c20 <ld_dword>
 8009724:	4603      	mov	r3, r0
 8009726:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800972a:	61fb      	str	r3, [r7, #28]
			break;
 800972c:	e081      	b.n	8009832 <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009734:	4313      	orrs	r3, r2
 8009736:	d070      	beq.n	800981a <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009748:	1e54      	subs	r4, r2, #1
 800974a:	f143 35ff 	adc.w	r5, r3, #4294967295
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	899b      	ldrh	r3, [r3, #12]
 8009752:	b29b      	uxth	r3, r3
 8009754:	2200      	movs	r2, #0
 8009756:	4698      	mov	r8, r3
 8009758:	4691      	mov	r9, r2
 800975a:	4642      	mov	r2, r8
 800975c:	464b      	mov	r3, r9
 800975e:	4620      	mov	r0, r4
 8009760:	4629      	mov	r1, r5
 8009762:	f7f7 f8ab 	bl	80008bc <__aeabi_uldivmod>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	895b      	ldrh	r3, [r3, #10]
 800976e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009772:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	79db      	ldrb	r3, [r3, #7]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d10e      	bne.n	800979a <get_fat+0x206>
					if (cofs <= clen) {
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d80a      	bhi.n	800979a <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	429a      	cmp	r2, r3
 800978a:	d002      	beq.n	8009792 <get_fat+0x1fe>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	3301      	adds	r3, #1
 8009790:	e001      	b.n	8009796 <get_fat+0x202>
 8009792:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009796:	61fb      	str	r3, [r7, #28]
						break;
 8009798:	e04b      	b.n	8009832 <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	79db      	ldrb	r3, [r3, #7]
 800979e:	2b03      	cmp	r3, #3
 80097a0:	d108      	bne.n	80097b4 <get_fat+0x220>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	697a      	ldr	r2, [r7, #20]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d203      	bcs.n	80097b4 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	3301      	adds	r3, #1
 80097b0:	61fb      	str	r3, [r7, #28]
					break;
 80097b2:	e03e      	b.n	8009832 <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	79db      	ldrb	r3, [r3, #7]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d02e      	beq.n	800981a <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80097c4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80097c8:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80097ca:	e032      	b.n	8009832 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	899b      	ldrh	r3, [r3, #12]
 80097d4:	089b      	lsrs	r3, r3, #2
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	4619      	mov	r1, r3
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e0:	4413      	add	r3, r2
 80097e2:	4619      	mov	r1, r3
 80097e4:	69b8      	ldr	r0, [r7, #24]
 80097e6:	f7ff fe17 	bl	8009418 <move_window>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d11f      	bne.n	8009830 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	8992      	ldrh	r2, [r2, #12]
 80097fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009802:	fb00 f202 	mul.w	r2, r0, r2
 8009806:	1a9b      	subs	r3, r3, r2
 8009808:	440b      	add	r3, r1
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fa08 	bl	8008c20 <ld_dword>
 8009810:	4603      	mov	r3, r0
 8009812:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009816:	61fb      	str	r3, [r7, #28]
					break;
 8009818:	e00b      	b.n	8009832 <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800981a:	2301      	movs	r3, #1
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	e008      	b.n	8009832 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009820:	bf00      	nop
 8009822:	e006      	b.n	8009832 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009824:	bf00      	nop
 8009826:	e004      	b.n	8009832 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009828:	bf00      	nop
 800982a:	e002      	b.n	8009832 <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800982c:	bf00      	nop
 800982e:	e000      	b.n	8009832 <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009830:	bf00      	nop
		}
	}

	return val;
 8009832:	69fb      	ldr	r3, [r7, #28]
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800983e:	bf00      	nop

08009840 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b089      	sub	sp, #36	; 0x24
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800984c:	2302      	movs	r3, #2
 800984e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2b01      	cmp	r3, #1
 8009854:	f240 810d 	bls.w	8009a72 <put_fat+0x232>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	429a      	cmp	r2, r3
 8009860:	f080 8107 	bcs.w	8009a72 <put_fat+0x232>
		switch (fs->fs_type) {
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	2b04      	cmp	r3, #4
 800986a:	f300 8102 	bgt.w	8009a72 <put_fat+0x232>
 800986e:	2b03      	cmp	r3, #3
 8009870:	f280 80b3 	bge.w	80099da <put_fat+0x19a>
 8009874:	2b01      	cmp	r3, #1
 8009876:	d003      	beq.n	8009880 <put_fat+0x40>
 8009878:	2b02      	cmp	r3, #2
 800987a:	f000 8083 	beq.w	8009984 <put_fat+0x144>
 800987e:	e0f8      	b.n	8009a72 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	61bb      	str	r3, [r7, #24]
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	69ba      	ldr	r2, [r7, #24]
 800988a:	4413      	add	r3, r2
 800988c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	899b      	ldrh	r3, [r3, #12]
 8009896:	4619      	mov	r1, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	fbb3 f3f1 	udiv	r3, r3, r1
 800989e:	4413      	add	r3, r2
 80098a0:	4619      	mov	r1, r3
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff fdb8 	bl	8009418 <move_window>
 80098a8:	4603      	mov	r3, r0
 80098aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098ac:	7ffb      	ldrb	r3, [r7, #31]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 80d8 	bne.w	8009a64 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	61ba      	str	r2, [r7, #24]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	8992      	ldrh	r2, [r2, #12]
 80098c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80098c8:	fb00 f202 	mul.w	r2, r0, r2
 80098cc:	1a9b      	subs	r3, r3, r2
 80098ce:	440b      	add	r3, r1
 80098d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <put_fat+0xb8>
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	b25b      	sxtb	r3, r3
 80098e2:	f003 030f 	and.w	r3, r3, #15
 80098e6:	b25a      	sxtb	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	b25b      	sxtb	r3, r3
 80098f0:	4313      	orrs	r3, r2
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	e001      	b.n	80098fc <put_fat+0xbc>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	899b      	ldrh	r3, [r3, #12]
 800990e:	4619      	mov	r1, r3
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	fbb3 f3f1 	udiv	r3, r3, r1
 8009916:	4413      	add	r3, r2
 8009918:	4619      	mov	r1, r3
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fd7c 	bl	8009418 <move_window>
 8009920:	4603      	mov	r3, r0
 8009922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009924:	7ffb      	ldrb	r3, [r7, #31]
 8009926:	2b00      	cmp	r3, #0
 8009928:	f040 809e 	bne.w	8009a68 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	461a      	mov	r2, r3
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	fbb3 f0f2 	udiv	r0, r3, r2
 800993e:	fb00 f202 	mul.w	r2, r0, r2
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	440b      	add	r3, r1
 8009946:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <put_fat+0x11a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	091b      	lsrs	r3, r3, #4
 8009956:	b2db      	uxtb	r3, r3
 8009958:	e00e      	b.n	8009978 <put_fat+0x138>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b25b      	sxtb	r3, r3
 8009960:	f023 030f 	bic.w	r3, r3, #15
 8009964:	b25a      	sxtb	r2, r3
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	0a1b      	lsrs	r3, r3, #8
 800996a:	b25b      	sxtb	r3, r3
 800996c:	f003 030f 	and.w	r3, r3, #15
 8009970:	b25b      	sxtb	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b25b      	sxtb	r3, r3
 8009976:	b2db      	uxtb	r3, r3
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2201      	movs	r2, #1
 8009980:	70da      	strb	r2, [r3, #3]
			break;
 8009982:	e076      	b.n	8009a72 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	899b      	ldrh	r3, [r3, #12]
 800998c:	085b      	lsrs	r3, r3, #1
 800998e:	b29b      	uxth	r3, r3
 8009990:	4619      	mov	r1, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	fbb3 f3f1 	udiv	r3, r3, r1
 8009998:	4413      	add	r3, r2
 800999a:	4619      	mov	r1, r3
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fd3b 	bl	8009418 <move_window>
 80099a2:	4603      	mov	r3, r0
 80099a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d15f      	bne.n	8009a6c <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	8992      	ldrh	r2, [r2, #12]
 80099ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80099be:	fb00 f202 	mul.w	r2, r0, r2
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	440b      	add	r3, r1
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	b292      	uxth	r2, r2
 80099ca:	4611      	mov	r1, r2
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fa25 	bl	8008e1c <st_word>
			fs->wflag = 1;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	70da      	strb	r2, [r3, #3]
			break;
 80099d8:	e04b      	b.n	8009a72 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	899b      	ldrh	r3, [r3, #12]
 80099e2:	089b      	lsrs	r3, r3, #2
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4619      	mov	r1, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80099ee:	4413      	add	r3, r2
 80099f0:	4619      	mov	r1, r3
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fd10 	bl	8009418 <move_window>
 80099f8:	4603      	mov	r3, r0
 80099fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099fc:	7ffb      	ldrb	r3, [r7, #31]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d136      	bne.n	8009a70 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d017      	beq.n	8009a3a <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	8992      	ldrh	r2, [r2, #12]
 8009a1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a22:	fb00 f202 	mul.w	r2, r0, r2
 8009a26:	1a9b      	subs	r3, r3, r2
 8009a28:	440b      	add	r3, r1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff f8f8 	bl	8008c20 <ld_dword>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a36:	4323      	orrs	r3, r4
 8009a38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	8992      	ldrh	r2, [r2, #12]
 8009a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a4c:	fb00 f202 	mul.w	r2, r0, r2
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	440b      	add	r3, r1
 8009a54:	6879      	ldr	r1, [r7, #4]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff f9fb 	bl	8008e52 <st_dword>
			fs->wflag = 1;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	70da      	strb	r2, [r3, #3]
			break;
 8009a62:	e006      	b.n	8009a72 <put_fat+0x232>
			if (res != FR_OK) break;
 8009a64:	bf00      	nop
 8009a66:	e004      	b.n	8009a72 <put_fat+0x232>
			if (res != FR_OK) break;
 8009a68:	bf00      	nop
 8009a6a:	e002      	b.n	8009a72 <put_fat+0x232>
			if (res != FR_OK) break;
 8009a6c:	bf00      	nop
 8009a6e:	e000      	b.n	8009a72 <put_fat+0x232>
			if (res != FR_OK) break;
 8009a70:	bf00      	nop
		}
	}
	return res;
 8009a72:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3724      	adds	r7, #36	; 0x24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd90      	pop	{r4, r7, pc}

08009a7c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b08a      	sub	sp, #40	; 0x28
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60f8      	str	r0, [r7, #12]
 8009a84:	60b9      	str	r1, [r7, #8]
 8009a86:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3b02      	subs	r3, #2
 8009a8c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	3b02      	subs	r3, #2
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d301      	bcc.n	8009a9e <find_bitmap+0x22>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	61fb      	str	r3, [r7, #28]
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	61bb      	str	r3, [r7, #24]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	08db      	lsrs	r3, r3, #3
 8009ab2:	68f9      	ldr	r1, [r7, #12]
 8009ab4:	8989      	ldrh	r1, [r1, #12]
 8009ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009aba:	4413      	add	r3, r2
 8009abc:	4619      	mov	r1, r3
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fcaa 	bl	8009418 <move_window>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d002      	beq.n	8009ad0 <find_bitmap+0x54>
 8009aca:	f04f 33ff 	mov.w	r3, #4294967295
 8009ace:	e058      	b.n	8009b82 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	8992      	ldrh	r2, [r2, #12]
 8009ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009adc:	fb01 f202 	mul.w	r2, r1, r2
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	623b      	str	r3, [r7, #32]
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	2201      	movs	r2, #1
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	4413      	add	r3, r2
 8009afa:	333c      	adds	r3, #60	; 0x3c
 8009afc:	781a      	ldrb	r2, [r3, #0]
 8009afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b02:	4013      	ands	r3, r2
 8009b04:	74fb      	strb	r3, [r7, #19]
 8009b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	3301      	adds	r3, #1
 8009b14:	61fb      	str	r3, [r7, #28]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	3b02      	subs	r3, #2
 8009b1c:	69fa      	ldr	r2, [r7, #28]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d307      	bcc.n	8009b32 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	2300      	movs	r3, #0
 8009b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	899b      	ldrh	r3, [r3, #12]
 8009b30:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8009b32:	7cfb      	ldrb	r3, [r7, #19]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d109      	bne.n	8009b4c <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	617b      	str	r3, [r7, #20]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d106      	bne.n	8009b54 <find_bitmap+0xd8>
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	3302      	adds	r3, #2
 8009b4a:	e01a      	b.n	8009b82 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	61bb      	str	r3, [r7, #24]
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d101      	bne.n	8009b60 <find_bitmap+0xe4>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e010      	b.n	8009b82 <find_bitmap+0x106>
			} while (bm);
 8009b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1c5      	bne.n	8009af4 <find_bitmap+0x78>
			bm = 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	3301      	adds	r3, #1
 8009b72:	623b      	str	r3, [r7, #32]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	899b      	ldrh	r3, [r3, #12]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d3b9      	bcc.n	8009af4 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8009b80:	e793      	b.n	8009aaa <find_bitmap+0x2e>
	}
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3728      	adds	r7, #40	; 0x28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b088      	sub	sp, #32
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	3b02      	subs	r3, #2
 8009b9c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	68f9      	ldr	r1, [r7, #12]
 8009ba8:	8989      	ldrh	r1, [r1, #12]
 8009baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8009bae:	4413      	add	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	08db      	lsrs	r3, r3, #3
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	8992      	ldrh	r2, [r2, #12]
 8009bba:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bbe:	fb01 f202 	mul.w	r2, r1, r2
 8009bc2:	1a9b      	subs	r3, r3, r2
 8009bc4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f003 0307 	and.w	r3, r3, #7
 8009bcc:	2201      	movs	r2, #1
 8009bce:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	617a      	str	r2, [r7, #20]
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fc1b 	bl	8009418 <move_window>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <change_bitmap+0x62>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e03f      	b.n	8009c6c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	333c      	adds	r3, #60	; 0x3c
 8009bf4:	781a      	ldrb	r2, [r3, #0]
 8009bf6:	7ffb      	ldrb	r3, [r7, #31]
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	bf14      	ite	ne
 8009c00:	2301      	movne	r3, #1
 8009c02:	2300      	moveq	r3, #0
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	461a      	mov	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d101      	bne.n	8009c12 <change_bitmap+0x88>
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e02c      	b.n	8009c6c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8009c12:	68fa      	ldr	r2, [r7, #12]
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	4413      	add	r3, r2
 8009c18:	333c      	adds	r3, #60	; 0x3c
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	7ffb      	ldrb	r3, [r7, #31]
 8009c1e:	4053      	eors	r3, r2
 8009c20:	b2d9      	uxtb	r1, r3
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	4413      	add	r3, r2
 8009c28:	333c      	adds	r3, #60	; 0x3c
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	607b      	str	r3, [r7, #4]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <change_bitmap+0xba>
 8009c40:	2300      	movs	r3, #0
 8009c42:	e013      	b.n	8009c6c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8009c44:	7ffb      	ldrb	r3, [r7, #31]
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	77fb      	strb	r3, [r7, #31]
 8009c4a:	7ffb      	ldrb	r3, [r7, #31]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1cd      	bne.n	8009bec <change_bitmap+0x62>
			bm = 1;
 8009c50:	2301      	movs	r3, #1
 8009c52:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	3301      	adds	r3, #1
 8009c58:	61bb      	str	r3, [r7, #24]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	899b      	ldrh	r3, [r3, #12]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d3c2      	bcc.n	8009bec <change_bitmap+0x62>
		i = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8009c6a:	e7b3      	b.n	8009bd4 <change_bitmap+0x4a>
	}
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3720      	adds	r7, #32
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	79db      	ldrb	r3, [r3, #7]
 8009c80:	2b03      	cmp	r3, #3
 8009c82:	d121      	bne.n	8009cc8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	617b      	str	r3, [r7, #20]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	e014      	b.n	8009cbc <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6818      	ldr	r0, [r3, #0]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6979      	ldr	r1, [r7, #20]
 8009c9e:	f7ff fdcf 	bl	8009840 <put_fat>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <fill_first_frag+0x3c>
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	e00c      	b.n	8009cca <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	613b      	str	r3, [r7, #16]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e7      	bne.n	8009c92 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	60b9      	str	r1, [r7, #8]
 8009cdc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009cde:	e020      	b.n	8009d22 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	69db      	ldr	r3, [r3, #28]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	1c59      	adds	r1, r3, #1
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	69db      	ldr	r3, [r3, #28]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d905      	bls.n	8009d02 <fill_last_frag+0x30>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	3302      	adds	r3, #2
 8009d00:	e000      	b.n	8009d04 <fill_last_frag+0x32>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	461a      	mov	r2, r3
 8009d06:	f7ff fd9b 	bl	8009840 <put_fat>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <fill_last_frag+0x46>
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	e009      	b.n	8009d2c <fill_last_frag+0x5a>
		obj->n_frag--;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	1e5a      	subs	r2, r3, #1
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1da      	bne.n	8009ce0 <fill_last_frag+0xe>
	}
	return FR_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3718      	adds	r7, #24
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b08a      	sub	sp, #40	; 0x28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d904      	bls.n	8009d62 <remove_chain+0x2e>
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d301      	bcc.n	8009d66 <remove_chain+0x32>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e096      	b.n	8009e94 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d014      	beq.n	8009d96 <remove_chain+0x62>
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	d103      	bne.n	8009d7c <remove_chain+0x48>
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	79db      	ldrb	r3, [r3, #7]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d00c      	beq.n	8009d96 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d80:	6879      	ldr	r1, [r7, #4]
 8009d82:	69b8      	ldr	r0, [r7, #24]
 8009d84:	f7ff fd5c 	bl	8009840 <put_fat>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009d8c:	7ffb      	ldrb	r3, [r7, #31]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <remove_chain+0x62>
 8009d92:	7ffb      	ldrb	r3, [r7, #31]
 8009d94:	e07e      	b.n	8009e94 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009d96:	68b9      	ldr	r1, [r7, #8]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff fbfb 	bl	8009594 <get_fat>
 8009d9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d055      	beq.n	8009e52 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <remove_chain+0x7c>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e071      	b.n	8009e94 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d101      	bne.n	8009dbc <remove_chain+0x88>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e06b      	b.n	8009e94 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d00b      	beq.n	8009ddc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	68b9      	ldr	r1, [r7, #8]
 8009dc8:	69b8      	ldr	r0, [r7, #24]
 8009dca:	f7ff fd39 	bl	8009840 <put_fat>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009dd2:	7ffb      	ldrb	r3, [r7, #31]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <remove_chain+0xa8>
 8009dd8:	7ffb      	ldrb	r3, [r7, #31]
 8009dda:	e05b      	b.n	8009e94 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	69da      	ldr	r2, [r3, #28]
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	3b02      	subs	r3, #2
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d20b      	bcs.n	8009e02 <remove_chain+0xce>
			fs->free_clst++;
 8009dea:	69bb      	ldr	r3, [r7, #24]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	791b      	ldrb	r3, [r3, #4]
 8009df8:	f043 0301 	orr.w	r3, r3, #1
 8009dfc:	b2da      	uxtb	r2, r3
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	3301      	adds	r3, #1
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d102      	bne.n	8009e12 <remove_chain+0xde>
			ecl = nxt;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	623b      	str	r3, [r7, #32]
 8009e10:	e017      	b.n	8009e42 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d10f      	bne.n	8009e3a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8009e1a:	6a3a      	ldr	r2, [r7, #32]
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	1c5a      	adds	r2, r3, #1
 8009e22:	2300      	movs	r3, #0
 8009e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e26:	69b8      	ldr	r0, [r7, #24]
 8009e28:	f7ff feaf 	bl	8009b8a <change_bitmap>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8009e30:	7ffb      	ldrb	r3, [r7, #31]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <remove_chain+0x106>
 8009e36:	7ffb      	ldrb	r3, [r7, #31]
 8009e38:	e02c      	b.n	8009e94 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	623b      	str	r3, [r7, #32]
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d3a2      	bcc.n	8009d96 <remove_chain+0x62>
 8009e50:	e000      	b.n	8009e54 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8009e52:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8009e54:	69bb      	ldr	r3, [r7, #24]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	2b04      	cmp	r3, #4
 8009e5a:	d11a      	bne.n	8009e92 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d103      	bne.n	8009e6a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	71da      	strb	r2, [r3, #7]
 8009e68:	e013      	b.n	8009e92 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	79db      	ldrb	r3, [r3, #7]
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d10f      	bne.n	8009e92 <remove_chain+0x15e>
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d30a      	bcc.n	8009e92 <remove_chain+0x15e>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	4413      	add	r3, r2
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d802      	bhi.n	8009e92 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2202      	movs	r2, #2
 8009e90:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3728      	adds	r7, #40	; 0x28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b088      	sub	sp, #32
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10d      	bne.n	8009ece <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <create_chain+0x2c>
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	69ba      	ldr	r2, [r7, #24]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d31b      	bcc.n	8009f00 <create_chain+0x64>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	61bb      	str	r3, [r7, #24]
 8009ecc:	e018      	b.n	8009f00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff fb5f 	bl	8009594 <get_fat>
 8009ed6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d801      	bhi.n	8009ee2 <create_chain+0x46>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0d9      	b.n	800a096 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee8:	d101      	bne.n	8009eee <create_chain+0x52>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	e0d3      	b.n	800a096 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d201      	bcs.n	8009efc <create_chain+0x60>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	e0cc      	b.n	800a096 <create_chain+0x1fa>
		scl = clst;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d164      	bne.n	8009fd2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8009f08:	2201      	movs	r2, #1
 8009f0a:	69b9      	ldr	r1, [r7, #24]
 8009f0c:	6938      	ldr	r0, [r7, #16]
 8009f0e:	f7ff fdb5 	bl	8009a7c <find_bitmap>
 8009f12:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d003      	beq.n	8009f22 <create_chain+0x86>
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f20:	d101      	bne.n	8009f26 <create_chain+0x8a>
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	e0b7      	b.n	800a096 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8009f26:	2301      	movs	r3, #1
 8009f28:	2201      	movs	r2, #1
 8009f2a:	69f9      	ldr	r1, [r7, #28]
 8009f2c:	6938      	ldr	r0, [r7, #16]
 8009f2e:	f7ff fe2c 	bl	8009b8a <change_bitmap>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d101      	bne.n	8009f40 <create_chain+0xa4>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e0aa      	b.n	800a096 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8009f40:	7dfb      	ldrb	r3, [r7, #23]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d102      	bne.n	8009f4c <create_chain+0xb0>
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	e0a4      	b.n	800a096 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d103      	bne.n	8009f5a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	71da      	strb	r2, [r3, #7]
 8009f58:	e011      	b.n	8009f7e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	79db      	ldrb	r3, [r3, #7]
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d10d      	bne.n	8009f7e <create_chain+0xe2>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	3301      	adds	r3, #1
 8009f66:	69fa      	ldr	r2, [r7, #28]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d008      	beq.n	8009f7e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	1ad2      	subs	r2, r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	79db      	ldrb	r3, [r3, #7]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d064      	beq.n	800a050 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	69fa      	ldr	r2, [r7, #28]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d10b      	bne.n	8009fa8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <create_chain+0x104>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	69db      	ldr	r3, [r3, #28]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	e000      	b.n	8009fa2 <create_chain+0x106>
 8009fa0:	2302      	movs	r3, #2
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	61d3      	str	r3, [r2, #28]
 8009fa6:	e053      	b.n	800a050 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d102      	bne.n	8009fb6 <create_chain+0x11a>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff fe89 	bl	8009cd2 <fill_last_frag>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d142      	bne.n	800a050 <create_chain+0x1b4>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	61da      	str	r2, [r3, #28]
 8009fd0:	e03e      	b.n	800a050 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	6a1b      	ldr	r3, [r3, #32]
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d307      	bcc.n	8009ff6 <create_chain+0x15a>
				ncl = 2;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009fea:	69fa      	ldr	r2, [r7, #28]
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d901      	bls.n	8009ff6 <create_chain+0x15a>
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	e04f      	b.n	800a096 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009ff6:	69f9      	ldr	r1, [r7, #28]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f7ff facb 	bl	8009594 <get_fat>
 8009ffe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00e      	beq.n	800a024 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d003      	beq.n	800a014 <create_chain+0x178>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d101      	bne.n	800a018 <create_chain+0x17c>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	e03e      	b.n	800a096 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800a018:	69fa      	ldr	r2, [r7, #28]
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d1da      	bne.n	8009fd6 <create_chain+0x13a>
 800a020:	2300      	movs	r3, #0
 800a022:	e038      	b.n	800a096 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800a024:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a026:	f04f 32ff 	mov.w	r2, #4294967295
 800a02a:	69f9      	ldr	r1, [r7, #28]
 800a02c:	6938      	ldr	r0, [r7, #16]
 800a02e:	f7ff fc07 	bl	8009840 <put_fat>
 800a032:	4603      	mov	r3, r0
 800a034:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d109      	bne.n	800a050 <create_chain+0x1b4>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d006      	beq.n	800a050 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6938      	ldr	r0, [r7, #16]
 800a048:	f7ff fbfa 	bl	8009840 <put_fat>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d116      	bne.n	800a084 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	69da      	ldr	r2, [r3, #28]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	3b02      	subs	r3, #2
 800a066:	429a      	cmp	r2, r3
 800a068:	d804      	bhi.n	800a074 <create_chain+0x1d8>
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	1e5a      	subs	r2, r3, #1
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	711a      	strb	r2, [r3, #4]
 800a082:	e007      	b.n	800a094 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d102      	bne.n	800a090 <create_chain+0x1f4>
 800a08a:	f04f 33ff 	mov.w	r3, #4294967295
 800a08e:	e000      	b.n	800a092 <create_chain+0x1f6>
 800a090:	2301      	movs	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a094:	69fb      	ldr	r3, [r7, #28]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3720      	adds	r7, #32
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a09e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0b6:	3304      	adds	r3, #4
 800a0b8:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	899b      	ldrh	r3, [r3, #12]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	4698      	mov	r8, r3
 800a0c4:	4691      	mov	r9, r2
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a0ce:	f7f6 fbf5 	bl	80008bc <__aeabi_uldivmod>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	4619      	mov	r1, r3
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	895b      	ldrh	r3, [r3, #10]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	f7f6 fbe7 	bl	80008bc <__aeabi_uldivmod>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	1d1a      	adds	r2, r3, #4
 800a0fa:	61ba      	str	r2, [r7, #24]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <clmt_clust+0x6c>
 800a106:	2300      	movs	r3, #0
 800a108:	e010      	b.n	800a12c <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800a10a:	69fa      	ldr	r2, [r7, #28]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d307      	bcc.n	800a122 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800a112:	69fa      	ldr	r2, [r7, #28]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	61fb      	str	r3, [r7, #28]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	3304      	adds	r3, #4
 800a11e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a120:	e7e9      	b.n	800a0f6 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800a122:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	4413      	add	r3, r2
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a136 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b086      	sub	sp, #24
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d102      	bne.n	800a154 <dir_sdi+0x1e>
 800a14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a152:	e001      	b.n	800a158 <dir_sdi+0x22>
 800a154:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d904      	bls.n	800a168 <dir_sdi+0x32>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f003 031f 	and.w	r3, r3, #31
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <dir_sdi+0x36>
		return FR_INT_ERR;
 800a168:	2302      	movs	r3, #2
 800a16a:	e074      	b.n	800a256 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <dir_sdi+0x5c>
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d905      	bls.n	800a192 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10c      	bne.n	800a1b2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	095b      	lsrs	r3, r3, #5
 800a19c:	693a      	ldr	r2, [r7, #16]
 800a19e:	8912      	ldrh	r2, [r2, #8]
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d301      	bcc.n	800a1a8 <dir_sdi+0x72>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e056      	b.n	800a256 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	639a      	str	r2, [r3, #56]	; 0x38
 800a1b0:	e02d      	b.n	800a20e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	895b      	ldrh	r3, [r3, #10]
 800a1b6:	461a      	mov	r2, r3
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	899b      	ldrh	r3, [r3, #12]
 800a1bc:	fb02 f303 	mul.w	r3, r2, r3
 800a1c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a1c2:	e019      	b.n	800a1f8 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6979      	ldr	r1, [r7, #20]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff f9e3 	bl	8009594 <get_fat>
 800a1ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d6:	d101      	bne.n	800a1dc <dir_sdi+0xa6>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e03c      	b.n	800a256 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d904      	bls.n	800a1ec <dir_sdi+0xb6>
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d301      	bcc.n	800a1f0 <dir_sdi+0xba>
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	e032      	b.n	800a256 <dir_sdi+0x120>
			ofs -= csz;
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d2e1      	bcs.n	800a1c4 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800a200:	6979      	ldr	r1, [r7, #20]
 800a202:	6938      	ldr	r0, [r7, #16]
 800a204:	f7ff f9a6 	bl	8009554 <clust2sect>
 800a208:	4602      	mov	r2, r0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	697a      	ldr	r2, [r7, #20]
 800a212:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <dir_sdi+0xea>
 800a21c:	2302      	movs	r3, #2
 800a21e:	e01a      	b.n	800a256 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	899b      	ldrh	r3, [r3, #12]
 800a228:	4619      	mov	r1, r3
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	fbb3 f3f1 	udiv	r3, r3, r1
 800a230:	441a      	add	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	461a      	mov	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	fbb3 f0f2 	udiv	r0, r3, r2
 800a248:	fb00 f202 	mul.w	r2, r0, r2
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	18ca      	adds	r2, r1, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3718      	adds	r7, #24
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}

0800a25e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b086      	sub	sp, #24
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a272:	3320      	adds	r3, #32
 800a274:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <dir_next+0x38>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d102      	bne.n	800a28c <dir_next+0x2e>
 800a286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a28a:	e001      	b.n	800a290 <dir_next+0x32>
 800a28c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	429a      	cmp	r2, r3
 800a294:	d801      	bhi.n	800a29a <dir_next+0x3c>
 800a296:	2304      	movs	r3, #4
 800a298:	e0c3      	b.n	800a422 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	899b      	ldrh	r3, [r3, #12]
 800a29e:	461a      	mov	r2, r3
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2a6:	fb01 f202 	mul.w	r2, r1, r2
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f040 80a5 	bne.w	800a3fc <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	1c5a      	adds	r2, r3, #1
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d10b      	bne.n	800a2dc <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	095b      	lsrs	r3, r3, #5
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	8912      	ldrh	r2, [r2, #8]
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	f0c0 8095 	bcc.w	800a3fc <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	639a      	str	r2, [r3, #56]	; 0x38
 800a2d8:	2304      	movs	r3, #4
 800a2da:	e0a2      	b.n	800a422 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	899b      	ldrh	r3, [r3, #12]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	8952      	ldrh	r2, [r2, #10]
 800a2ec:	3a01      	subs	r2, #1
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	f040 8083 	bne.w	800a3fc <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7ff f948 	bl	8009594 <get_fat>
 800a304:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d801      	bhi.n	800a310 <dir_next+0xb2>
 800a30c:	2302      	movs	r3, #2
 800a30e:	e088      	b.n	800a422 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a316:	d101      	bne.n	800a31c <dir_next+0xbe>
 800a318:	2301      	movs	r3, #1
 800a31a:	e082      	b.n	800a422 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	429a      	cmp	r2, r3
 800a324:	d360      	bcc.n	800a3e8 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d104      	bne.n	800a336 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	639a      	str	r2, [r3, #56]	; 0x38
 800a332:	2304      	movs	r3, #4
 800a334:	e075      	b.n	800a422 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7ff fdac 	bl	8009e9c <create_chain>
 800a344:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <dir_next+0xf2>
 800a34c:	2307      	movs	r3, #7
 800a34e:	e068      	b.n	800a422 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d101      	bne.n	800a35a <dir_next+0xfc>
 800a356:	2302      	movs	r3, #2
 800a358:	e063      	b.n	800a422 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a360:	d101      	bne.n	800a366 <dir_next+0x108>
 800a362:	2301      	movs	r3, #1
 800a364:	e05d      	b.n	800a422 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	79db      	ldrb	r3, [r3, #7]
 800a36a:	f043 0304 	orr.w	r3, r3, #4
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a374:	68f8      	ldr	r0, [r7, #12]
 800a376:	f7ff f80b 	bl	8009390 <sync_window>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <dir_next+0x126>
 800a380:	2301      	movs	r3, #1
 800a382:	e04e      	b.n	800a422 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	899b      	ldrh	r3, [r3, #12]
 800a38e:	461a      	mov	r2, r3
 800a390:	2100      	movs	r1, #0
 800a392:	f7fe fe33 	bl	8008ffc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a396:	2300      	movs	r3, #0
 800a398:	613b      	str	r3, [r7, #16]
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f7ff f8d9 	bl	8009554 <clust2sect>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	639a      	str	r2, [r3, #56]	; 0x38
 800a3a8:	e012      	b.n	800a3d0 <dir_next+0x172>
						fs->wflag = 1;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	f7fe ffed 	bl	8009390 <sync_window>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <dir_next+0x162>
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e030      	b.n	800a422 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	613b      	str	r3, [r7, #16]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	639a      	str	r2, [r3, #56]	; 0x38
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	895b      	ldrh	r3, [r3, #10]
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d3e6      	bcc.n	800a3aa <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	1ad2      	subs	r2, r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff f8af 	bl	8009554 <clust2sect>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	899b      	ldrh	r3, [r3, #12]
 800a40c:	461a      	mov	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	fbb3 f0f2 	udiv	r0, r3, r2
 800a414:	fb00 f202 	mul.w	r2, r0, r2
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	18ca      	adds	r2, r1, r3
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3718      	adds	r7, #24
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a43a:	2100      	movs	r1, #0
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fe7a 	bl	800a136 <dir_sdi>
 800a442:	4603      	mov	r3, r0
 800a444:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d140      	bne.n	800a4ce <dir_alloc+0xa4>
		n = 0;
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a454:	4619      	mov	r1, r3
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f7fe ffde 	bl	8009418 <move_window>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d132      	bne.n	800a4cc <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	d108      	bne.n	800a480 <dir_alloc+0x56>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	b25b      	sxtb	r3, r3
 800a476:	43db      	mvns	r3, r3
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	09db      	lsrs	r3, r3, #7
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	e00f      	b.n	800a4a0 <dir_alloc+0x76>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2be5      	cmp	r3, #229	; 0xe5
 800a488:	d004      	beq.n	800a494 <dir_alloc+0x6a>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d101      	bne.n	800a498 <dir_alloc+0x6e>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <dir_alloc+0x70>
 800a498:	2300      	movs	r3, #0
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	613b      	str	r3, [r7, #16]
 800a4aa:	693a      	ldr	r2, [r7, #16]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d102      	bne.n	800a4b8 <dir_alloc+0x8e>
 800a4b2:	e00c      	b.n	800a4ce <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f7ff fecf 	bl	800a25e <dir_next>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0c2      	beq.n	800a450 <dir_alloc+0x26>
 800a4ca:	e000      	b.n	800a4ce <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800a4cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	2b04      	cmp	r3, #4
 800a4d2:	d101      	bne.n	800a4d8 <dir_alloc+0xae>
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	75fb      	strb	r3, [r7, #23]
	return res;
 800a4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
 800a4ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	331a      	adds	r3, #26
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe fb7d 	bl	8008bf0 <ld_word>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d109      	bne.n	800a516 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	3314      	adds	r3, #20
 800a506:	4618      	mov	r0, r3
 800a508:	f7fe fb72 	bl	8008bf0 <ld_word>
 800a50c:	4603      	mov	r3, r0
 800a50e:	041b      	lsls	r3, r3, #16
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a516:	68fb      	ldr	r3, [r7, #12]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	331a      	adds	r3, #26
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	b292      	uxth	r2, r2
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fc70 	bl	8008e1c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b03      	cmp	r3, #3
 800a542:	d109      	bne.n	800a558 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	f103 0214 	add.w	r2, r3, #20
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	0c1b      	lsrs	r3, r3, #16
 800a54e:	b29b      	uxth	r3, r3
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7fe fc62 	bl	8008e1c <st_word>
	}
}
 800a558:	bf00      	nop
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a560:	b590      	push	{r4, r7, lr}
 800a562:	b087      	sub	sp, #28
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
 800a568:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	331a      	adds	r3, #26
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fb3e 	bl	8008bf0 <ld_word>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <cmp_lfn+0x1e>
 800a57a:	2300      	movs	r3, #0
 800a57c:	e059      	b.n	800a632 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	4613      	mov	r3, r2
 800a58a:	005b      	lsls	r3, r3, #1
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a594:	2301      	movs	r3, #1
 800a596:	81fb      	strh	r3, [r7, #14]
 800a598:	2300      	movs	r3, #0
 800a59a:	613b      	str	r3, [r7, #16]
 800a59c:	e033      	b.n	800a606 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a59e:	4a27      	ldr	r2, [pc, #156]	; (800a63c <cmp_lfn+0xdc>)
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7fe fb1f 	bl	8008bf0 <ld_word>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a5b6:	89fb      	ldrh	r3, [r7, #14]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01a      	beq.n	800a5f2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2bfe      	cmp	r3, #254	; 0xfe
 800a5c0:	d812      	bhi.n	800a5e8 <cmp_lfn+0x88>
 800a5c2:	89bb      	ldrh	r3, [r7, #12]
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f003 fbbb 	bl	800dd40 <ff_wtoupper>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	461c      	mov	r4, r3
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	1c5a      	adds	r2, r3, #1
 800a5d2:	617a      	str	r2, [r7, #20]
 800a5d4:	005b      	lsls	r3, r3, #1
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	4413      	add	r3, r2
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f003 fbaf 	bl	800dd40 <ff_wtoupper>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d001      	beq.n	800a5ec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	e022      	b.n	800a632 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a5ec:	89bb      	ldrh	r3, [r7, #12]
 800a5ee:	81fb      	strh	r3, [r7, #14]
 800a5f0:	e006      	b.n	800a600 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a5f2:	89bb      	ldrh	r3, [r7, #12]
 800a5f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d001      	beq.n	800a600 <cmp_lfn+0xa0>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	e018      	b.n	800a632 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	3301      	adds	r3, #1
 800a604:	613b      	str	r3, [r7, #16]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	2b0c      	cmp	r3, #12
 800a60a:	d9c8      	bls.n	800a59e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <cmp_lfn+0xd0>
 800a618:	89fb      	ldrh	r3, [r7, #14]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d008      	beq.n	800a630 <cmp_lfn+0xd0>
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	005b      	lsls	r3, r3, #1
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	4413      	add	r3, r2
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <cmp_lfn+0xd0>
 800a62c:	2300      	movs	r3, #0
 800a62e:	e000      	b.n	800a632 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a630:	2301      	movs	r3, #1
}
 800a632:	4618      	mov	r0, r3
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	bd90      	pop	{r4, r7, pc}
 800a63a:	bf00      	nop
 800a63c:	0800f580 	.word	0x0800f580

0800a640 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
 800a648:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	331a      	adds	r3, #26
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fe face 	bl	8008bf0 <ld_word>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <pick_lfn+0x1e>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e04d      	b.n	800a6fa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a666:	1e5a      	subs	r2, r3, #1
 800a668:	4613      	mov	r3, r2
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a674:	2301      	movs	r3, #1
 800a676:	81fb      	strh	r3, [r7, #14]
 800a678:	2300      	movs	r3, #0
 800a67a:	613b      	str	r3, [r7, #16]
 800a67c:	e028      	b.n	800a6d0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a67e:	4a21      	ldr	r2, [pc, #132]	; (800a704 <pick_lfn+0xc4>)
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	4413      	add	r3, r2
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	4413      	add	r3, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe faaf 	bl	8008bf0 <ld_word>
 800a692:	4603      	mov	r3, r0
 800a694:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a696:	89fb      	ldrh	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00f      	beq.n	800a6bc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2bfe      	cmp	r3, #254	; 0xfe
 800a6a0:	d901      	bls.n	800a6a6 <pick_lfn+0x66>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e029      	b.n	800a6fa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a6a6:	89bb      	ldrh	r3, [r7, #12]
 800a6a8:	81fb      	strh	r3, [r7, #14]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	617a      	str	r2, [r7, #20]
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	89fa      	ldrh	r2, [r7, #14]
 800a6b8:	801a      	strh	r2, [r3, #0]
 800a6ba:	e006      	b.n	800a6ca <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a6bc:	89bb      	ldrh	r3, [r7, #12]
 800a6be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d001      	beq.n	800a6ca <pick_lfn+0x8a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e017      	b.n	800a6fa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	613b      	str	r3, [r7, #16]
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d9d3      	bls.n	800a67e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00a      	beq.n	800a6f8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2bfe      	cmp	r3, #254	; 0xfe
 800a6e6:	d901      	bls.n	800a6ec <pick_lfn+0xac>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	e006      	b.n	800a6fa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a6f8:	2301      	movs	r3, #1
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3718      	adds	r7, #24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	0800f580 	.word	0x0800f580

0800a708 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4611      	mov	r1, r2
 800a714:	461a      	mov	r2, r3
 800a716:	460b      	mov	r3, r1
 800a718:	71fb      	strb	r3, [r7, #7]
 800a71a:	4613      	mov	r3, r2
 800a71c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	330d      	adds	r3, #13
 800a722:	79ba      	ldrb	r2, [r7, #6]
 800a724:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	330b      	adds	r3, #11
 800a72a:	220f      	movs	r2, #15
 800a72c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	330c      	adds	r3, #12
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	331a      	adds	r3, #26
 800a73a:	2100      	movs	r1, #0
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fb6d 	bl	8008e1c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a742:	79fb      	ldrb	r3, [r7, #7]
 800a744:	1e5a      	subs	r2, r3, #1
 800a746:	4613      	mov	r3, r2
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	4413      	add	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	82fb      	strh	r3, [r7, #22]
 800a756:	2300      	movs	r3, #0
 800a758:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a75a:	8afb      	ldrh	r3, [r7, #22]
 800a75c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a760:	4293      	cmp	r3, r2
 800a762:	d007      	beq.n	800a774 <put_lfn+0x6c>
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	61fa      	str	r2, [r7, #28]
 800a76a:	005b      	lsls	r3, r3, #1
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4413      	add	r3, r2
 800a770:	881b      	ldrh	r3, [r3, #0]
 800a772:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a774:	4a17      	ldr	r2, [pc, #92]	; (800a7d4 <put_lfn+0xcc>)
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	4413      	add	r3, r2
 800a77a:	781b      	ldrb	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	4413      	add	r3, r2
 800a782:	8afa      	ldrh	r2, [r7, #22]
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fb48 	bl	8008e1c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a78c:	8afb      	ldrh	r3, [r7, #22]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <put_lfn+0x90>
 800a792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a796:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	3301      	adds	r3, #1
 800a79c:	61bb      	str	r3, [r7, #24]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b0c      	cmp	r3, #12
 800a7a2:	d9da      	bls.n	800a75a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800a7a4:	8afb      	ldrh	r3, [r7, #22]
 800a7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d006      	beq.n	800a7bc <put_lfn+0xb4>
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4413      	add	r3, r2
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <put_lfn+0xbc>
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7c2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	79fa      	ldrb	r2, [r7, #7]
 800a7c8:	701a      	strb	r2, [r3, #0]
}
 800a7ca:	bf00      	nop
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800f580 	.word	0x0800f580

0800a7d8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08c      	sub	sp, #48	; 0x30
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a7e6:	220b      	movs	r2, #11
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7fe fbe5 	bl	8008fba <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b05      	cmp	r3, #5
 800a7f4:	d92b      	bls.n	800a84e <gen_numname+0x76>
		sr = seq;
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a7fa:	e022      	b.n	800a842 <gen_numname+0x6a>
			wc = *lfn++;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	1c9a      	adds	r2, r3, #2
 800a800:	607a      	str	r2, [r7, #4]
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a806:	2300      	movs	r3, #0
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
 800a80a:	e017      	b.n	800a83c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	005a      	lsls	r2, r3, #1
 800a810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a812:	f003 0301 	and.w	r3, r3, #1
 800a816:	4413      	add	r3, r2
 800a818:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a81a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a81c:	085b      	lsrs	r3, r3, #1
 800a81e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d005      	beq.n	800a836 <gen_numname+0x5e>
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a830:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a834:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	3301      	adds	r3, #1
 800a83a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	2b0f      	cmp	r3, #15
 800a840:	d9e4      	bls.n	800a80c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d1d8      	bne.n	800a7fc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a84e:	2307      	movs	r3, #7
 800a850:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 030f 	and.w	r3, r3, #15
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	3330      	adds	r3, #48	; 0x30
 800a85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a866:	2b39      	cmp	r3, #57	; 0x39
 800a868:	d904      	bls.n	800a874 <gen_numname+0x9c>
 800a86a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a86e:	3307      	adds	r3, #7
 800a870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	1e5a      	subs	r2, r3, #1
 800a878:	62ba      	str	r2, [r7, #40]	; 0x28
 800a87a:	3330      	adds	r3, #48	; 0x30
 800a87c:	443b      	add	r3, r7
 800a87e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a882:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	091b      	lsrs	r3, r3, #4
 800a88a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d1df      	bne.n	800a852 <gen_numname+0x7a>
	ns[i] = '~';
 800a892:	f107 0214 	add.w	r2, r7, #20
 800a896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a898:	4413      	add	r3, r2
 800a89a:	227e      	movs	r2, #126	; 0x7e
 800a89c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a89e:	2300      	movs	r3, #0
 800a8a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8a2:	e002      	b.n	800a8aa <gen_numname+0xd2>
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a8aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d205      	bcs.n	800a8be <gen_numname+0xe6>
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	4413      	add	r3, r2
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b20      	cmp	r3, #32
 800a8bc:	d1f2      	bne.n	800a8a4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	2b07      	cmp	r3, #7
 800a8c2:	d807      	bhi.n	800a8d4 <gen_numname+0xfc>
 800a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	62ba      	str	r2, [r7, #40]	; 0x28
 800a8ca:	3330      	adds	r3, #48	; 0x30
 800a8cc:	443b      	add	r3, r7
 800a8ce:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a8d2:	e000      	b.n	800a8d6 <gen_numname+0xfe>
 800a8d4:	2120      	movs	r1, #32
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	1c5a      	adds	r2, r3, #1
 800a8da:	627a      	str	r2, [r7, #36]	; 0x24
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	460a      	mov	r2, r1
 800a8e2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e6:	2b07      	cmp	r3, #7
 800a8e8:	d9e9      	bls.n	800a8be <gen_numname+0xe6>
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	3730      	adds	r7, #48	; 0x30
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a900:	230b      	movs	r3, #11
 800a902:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800a904:	7bfb      	ldrb	r3, [r7, #15]
 800a906:	b2da      	uxtb	r2, r3
 800a908:	0852      	lsrs	r2, r2, #1
 800a90a:	01db      	lsls	r3, r3, #7
 800a90c:	4313      	orrs	r3, r2
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	1c59      	adds	r1, r3, #1
 800a914:	6079      	str	r1, [r7, #4]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	4413      	add	r3, r2
 800a91a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	3b01      	subs	r3, #1
 800a920:	60bb      	str	r3, [r7, #8]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1ed      	bne.n	800a904 <sum_sfn+0x10>
	return sum;
 800a928:	7bfb      	ldrb	r3, [r7, #15]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3714      	adds	r7, #20
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800a936:	b480      	push	{r7}
 800a938:	b087      	sub	sp, #28
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3301      	adds	r3, #1
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	015b      	lsls	r3, r3, #5
 800a948:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800a94a:	2300      	movs	r3, #0
 800a94c:	827b      	strh	r3, [r7, #18]
 800a94e:	2300      	movs	r3, #0
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	e018      	b.n	800a986 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b02      	cmp	r3, #2
 800a958:	d103      	bne.n	800a962 <xdir_sum+0x2c>
			i++;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	3301      	adds	r3, #1
 800a95e:	617b      	str	r3, [r7, #20]
 800a960:	e00e      	b.n	800a980 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800a962:	8a7b      	ldrh	r3, [r7, #18]
 800a964:	03db      	lsls	r3, r3, #15
 800a966:	b29a      	uxth	r2, r3
 800a968:	8a7b      	ldrh	r3, [r7, #18]
 800a96a:	085b      	lsrs	r3, r3, #1
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4413      	add	r3, r2
 800a970:	b29a      	uxth	r2, r3
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	440b      	add	r3, r1
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4413      	add	r3, r2
 800a97e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	3301      	adds	r3, #1
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d3e2      	bcc.n	800a954 <xdir_sum+0x1e>
		}
	}
	return sum;
 800a98e:	8a7b      	ldrh	r3, [r7, #18]
}
 800a990:	4618      	mov	r0, r3
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800a9a8:	e01f      	b.n	800a9ea <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800a9aa:	89bb      	ldrh	r3, [r7, #12]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f003 f9c7 	bl	800dd40 <ff_wtoupper>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800a9b6:	89fb      	ldrh	r3, [r7, #14]
 800a9b8:	03db      	lsls	r3, r3, #15
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	89fb      	ldrh	r3, [r7, #14]
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	4413      	add	r3, r2
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	89bb      	ldrh	r3, [r7, #12]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	4413      	add	r3, r2
 800a9ce:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800a9d0:	89fb      	ldrh	r3, [r7, #14]
 800a9d2:	03db      	lsls	r3, r3, #15
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	89fb      	ldrh	r3, [r7, #14]
 800a9d8:	085b      	lsrs	r3, r3, #1
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	4413      	add	r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	89bb      	ldrh	r3, [r7, #12]
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	4413      	add	r3, r2
 800a9e8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	1c9a      	adds	r2, r3, #2
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	81bb      	strh	r3, [r7, #12]
 800a9f4:	89bb      	ldrh	r3, [r7, #12]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d1d7      	bne.n	800a9aa <xname_sum+0xe>
	}
	return sum;
 800a9fa:	89fb      	ldrh	r3, [r7, #14]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800aa12:	2340      	movs	r3, #64	; 0x40
 800aa14:	613b      	str	r3, [r7, #16]
 800aa16:	2300      	movs	r3, #0
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	e02c      	b.n	800aa76 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	f003 031f 	and.w	r3, r3, #31
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d102      	bne.n	800aa2c <get_xdir_info+0x28>
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3302      	adds	r3, #2
 800aa2a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	4413      	add	r3, r2
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fe f8dc 	bl	8008bf0 <ld_word>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f003 f943 	bl	800dcc8 <ff_convert>
 800aa42:	4603      	mov	r3, r0
 800aa44:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800aa46:	897b      	ldrh	r3, [r7, #10]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <get_xdir_info+0x4e>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2bfe      	cmp	r3, #254	; 0xfe
 800aa50:	d902      	bls.n	800aa58 <get_xdir_info+0x54>
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
 800aa56:	e015      	b.n	800aa84 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	1c5a      	adds	r2, r3, #1
 800aa5c:	617a      	str	r2, [r7, #20]
 800aa5e:	897a      	ldrh	r2, [r7, #10]
 800aa60:	b2d1      	uxtb	r1, r2
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	460a      	mov	r2, r1
 800aa68:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	3302      	adds	r3, #2
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	3323      	adds	r3, #35	; 0x23
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d3cb      	bcc.n	800aa1c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <get_xdir_info+0x94>
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	617a      	str	r2, [r7, #20]
 800aa90:	683a      	ldr	r2, [r7, #0]
 800aa92:	4413      	add	r3, r2
 800aa94:	223f      	movs	r2, #63	; 0x3f
 800aa96:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	331a      	adds	r3, #26
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	791a      	ldrb	r2, [r3, #4]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	7b1b      	ldrb	r3, [r3, #12]
 800aab6:	f003 0310 	and.w	r3, r3, #16
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d107      	bne.n	800aace <get_xdir_info+0xca>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	3338      	adds	r3, #56	; 0x38
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f8cf 	bl	8008c66 <ld_qword>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	e003      	b.n	800aad6 <get_xdir_info+0xd2>
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	f04f 0300 	mov.w	r3, #0
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	330c      	adds	r3, #12
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7fe f885 	bl	8008bf0 <ld_word>
 800aae6:	4603      	mov	r3, r0
 800aae8:	461a      	mov	r2, r3
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	330e      	adds	r3, #14
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe f87c 	bl	8008bf0 <ld_word>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461a      	mov	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	811a      	strh	r2, [r3, #8]
}
 800ab00:	bf00      	nop
 800ab02:	3718      	adds	r7, #24
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ab08:	b590      	push	{r4, r7, lr}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	695b      	ldr	r3, [r3, #20]
 800ab16:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	4619      	mov	r1, r3
 800ab22:	4610      	mov	r0, r2
 800ab24:	f7fe fc78 	bl	8009418 <move_window>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <load_xdir+0x2e>
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
 800ab34:	e09f      	b.n	800ac76 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	2b85      	cmp	r3, #133	; 0x85
 800ab3e:	d001      	beq.n	800ab44 <load_xdir+0x3c>
 800ab40:	2302      	movs	r3, #2
 800ab42:	e098      	b.n	800ac76 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	2220      	movs	r2, #32
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	6938      	ldr	r0, [r7, #16]
 800ab4e:	f7fe fa34 	bl	8008fba <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	3301      	adds	r3, #1
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	015b      	lsls	r3, r3, #5
 800ab5c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b5f      	cmp	r3, #95	; 0x5f
 800ab62:	d903      	bls.n	800ab6c <load_xdir+0x64>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ab6a:	d901      	bls.n	800ab70 <load_xdir+0x68>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e082      	b.n	800ac76 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800ab70:	2100      	movs	r1, #0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff fb73 	bl	800a25e <dir_next>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <load_xdir+0x7e>
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	e077      	b.n	800ac76 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4610      	mov	r0, r2
 800ab92:	f7fe fc41 	bl	8009418 <move_window>
 800ab96:	4603      	mov	r3, r0
 800ab98:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ab9a:	7bfb      	ldrb	r3, [r7, #15]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <load_xdir+0x9c>
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	e068      	b.n	800ac76 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2bc0      	cmp	r3, #192	; 0xc0
 800abac:	d001      	beq.n	800abb2 <load_xdir+0xaa>
 800abae:	2302      	movs	r3, #2
 800abb0:	e061      	b.n	800ac76 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f103 0020 	add.w	r0, r3, #32
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbc:	2220      	movs	r2, #32
 800abbe:	4619      	mov	r1, r3
 800abc0:	f7fe f9fb 	bl	8008fba <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	3323      	adds	r3, #35	; 0x23
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	332c      	adds	r3, #44	; 0x2c
 800abcc:	4a2c      	ldr	r2, [pc, #176]	; (800ac80 <load_xdir+0x178>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	08db      	lsrs	r3, r3, #3
 800abd4:	015b      	lsls	r3, r3, #5
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d201      	bcs.n	800abe0 <load_xdir+0xd8>
 800abdc:	2302      	movs	r3, #2
 800abde:	e04a      	b.n	800ac76 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800abe0:	2340      	movs	r3, #64	; 0x40
 800abe2:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800abe4:	2100      	movs	r1, #0
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f7ff fb39 	bl	800a25e <dir_next>
 800abec:	4603      	mov	r3, r0
 800abee:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <load_xdir+0xf2>
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	e03d      	b.n	800ac76 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac02:	4619      	mov	r1, r3
 800ac04:	4610      	mov	r0, r2
 800ac06:	f7fe fc07 	bl	8009418 <move_window>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <load_xdir+0x110>
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	e02e      	b.n	800ac76 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2bc1      	cmp	r3, #193	; 0xc1
 800ac20:	d001      	beq.n	800ac26 <load_xdir+0x11e>
 800ac22:	2302      	movs	r3, #2
 800ac24:	e027      	b.n	800ac76 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ac2c:	d208      	bcs.n	800ac40 <load_xdir+0x138>
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	18d0      	adds	r0, r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	2220      	movs	r2, #32
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	f7fe f9bd 	bl	8008fba <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	3320      	adds	r3, #32
 800ac44:	617b      	str	r3, [r7, #20]
 800ac46:	697a      	ldr	r2, [r7, #20]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d3ca      	bcc.n	800abe4 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800ac54:	d80e      	bhi.n	800ac74 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800ac56:	6938      	ldr	r0, [r7, #16]
 800ac58:	f7ff fe6d 	bl	800a936 <xdir_sum>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	461c      	mov	r4, r3
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3302      	adds	r3, #2
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fd ffc3 	bl	8008bf0 <ld_word>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	d001      	beq.n	800ac74 <load_xdir+0x16c>
 800ac70:	2302      	movs	r3, #2
 800ac72:	e000      	b.n	800ac76 <load_xdir+0x16e>
	}
	return FR_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	371c      	adds	r7, #28
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd90      	pop	{r4, r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	88888889 	.word	0x88888889

0800ac84 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ac84:	b5b0      	push	{r4, r5, r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6808      	ldr	r0, [r1, #0]
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6a08      	ldr	r0, [r1, #32]
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800aca2:	b2c8      	uxtb	r0, r1
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800acac:	2000      	movs	r0, #0
 800acae:	460c      	mov	r4, r1
 800acb0:	4605      	mov	r5, r0
 800acb2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800acb6:	2300      	movs	r3, #0
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	4619      	mov	r1, r3
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fa32 	bl	800a136 <dir_sdi>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d104      	bne.n	800ace6 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ff13 	bl	800ab08 <load_xdir>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bdb0      	pop	{r4, r5, r7, pc}

0800acf0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	695b      	ldr	r3, [r3, #20]
 800acfe:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	1c9c      	adds	r4, r3, #2
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f7ff fe16 	bl	800a936 <xdir_sum>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f7fe f884 	bl	8008e1c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3301      	adds	r3, #1
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7ff fa06 	bl	800a136 <dir_sdi>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ad2e:	e026      	b.n	800ad7e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	4619      	mov	r1, r3
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	f7fe fb6c 	bl	8009418 <move_window>
 800ad40:	4603      	mov	r3, r0
 800ad42:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d11d      	bne.n	800ad86 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	2220      	movs	r2, #32
 800ad50:	68f9      	ldr	r1, [r7, #12]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe f931 	bl	8008fba <mem_cpy>
		dp->obj.fs->wflag = 1;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	3b01      	subs	r3, #1
 800ad64:	613b      	str	r3, [r7, #16]
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00e      	beq.n	800ad8a <store_xdir+0x9a>
		dirb += SZDIRE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	3320      	adds	r3, #32
 800ad70:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800ad72:	2100      	movs	r1, #0
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fa72 	bl	800a25e <dir_next>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0d5      	beq.n	800ad30 <store_xdir+0x40>
 800ad84:	e002      	b.n	800ad8c <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ad86:	bf00      	nop
 800ad88:	e000      	b.n	800ad8c <store_xdir+0x9c>
		if (--nent == 0) break;
 800ad8a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <store_xdir+0xa8>
 800ad92:	7dfb      	ldrb	r3, [r7, #23]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <store_xdir+0xac>
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	e000      	b.n	800ad9e <store_xdir+0xae>
 800ad9c:	2302      	movs	r3, #2
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd90      	pop	{r4, r7, pc}

0800ada6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ada6:	b590      	push	{r4, r7, lr}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]
 800adae:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800adb0:	2240      	movs	r2, #64	; 0x40
 800adb2:	2100      	movs	r1, #0
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fe f921 	bl	8008ffc <mem_set>
	dirb[XDIR_Type] = 0x85;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2285      	movs	r2, #133	; 0x85
 800adbe:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	3320      	adds	r3, #32
 800adc4:	22c0      	movs	r2, #192	; 0xc0
 800adc6:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800adc8:	2300      	movs	r3, #0
 800adca:	72bb      	strb	r3, [r7, #10]
 800adcc:	2301      	movs	r3, #1
 800adce:	72fb      	strb	r3, [r7, #11]
 800add0:	2301      	movs	r3, #1
 800add2:	813b      	strh	r3, [r7, #8]
 800add4:	2340      	movs	r3, #64	; 0x40
 800add6:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	60fa      	str	r2, [r7, #12]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	4413      	add	r3, r2
 800ade2:	22c1      	movs	r2, #193	; 0xc1
 800ade4:	701a      	strb	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	60fa      	str	r2, [r7, #12]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	4413      	add	r3, r2
 800adf0:	2200      	movs	r2, #0
 800adf2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800adf4:	893b      	ldrh	r3, [r7, #8]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00b      	beq.n	800ae12 <create_xdir+0x6c>
 800adfa:	7abb      	ldrb	r3, [r7, #10]
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	4413      	add	r3, r2
 800ae02:	881b      	ldrh	r3, [r3, #0]
 800ae04:	813b      	strh	r3, [r7, #8]
 800ae06:	893b      	ldrh	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <create_xdir+0x6c>
 800ae0c:	7abb      	ldrb	r3, [r7, #10]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	893a      	ldrh	r2, [r7, #8]
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7fd fffd 	bl	8008e1c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3302      	adds	r3, #2
 800ae26:	60fb      	str	r3, [r7, #12]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f003 031f 	and.w	r3, r3, #31
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1e0      	bne.n	800adf4 <create_xdir+0x4e>
		nb++;
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	3301      	adds	r3, #1
 800ae36:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800ae38:	7abb      	ldrb	r3, [r7, #10]
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	4413      	add	r3, r2
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1c8      	bne.n	800add8 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3323      	adds	r3, #35	; 0x23
 800ae4a:	7aba      	ldrb	r2, [r7, #10]
 800ae4c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3301      	adds	r3, #1
 800ae52:	7afa      	ldrb	r2, [r7, #11]
 800ae54:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800ae5c:	6838      	ldr	r0, [r7, #0]
 800ae5e:	f7ff fd9d 	bl	800a99c <xname_sum>
 800ae62:	4603      	mov	r3, r0
 800ae64:	4619      	mov	r1, r3
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7fd ffd8 	bl	8008e1c <st_word>
}
 800ae6c:	bf00      	nop
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd90      	pop	{r4, r7, pc}

0800ae74 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ae7e:	2304      	movs	r3, #4
 800ae80:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800ae88:	23ff      	movs	r3, #255	; 0xff
 800ae8a:	757b      	strb	r3, [r7, #21]
 800ae8c:	23ff      	movs	r3, #255	; 0xff
 800ae8e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800ae90:	e09f      	b.n	800afd2 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae96:	4619      	mov	r1, r3
 800ae98:	6938      	ldr	r0, [r7, #16]
 800ae9a:	f7fe fabd 	bl	8009418 <move_window>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f040 809a 	bne.w	800afde <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800aeb2:	7dbb      	ldrb	r3, [r7, #22]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d102      	bne.n	800aebe <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800aeb8:	2304      	movs	r3, #4
 800aeba:	75fb      	strb	r3, [r7, #23]
 800aebc:	e096      	b.n	800afec <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d118      	bne.n	800aef8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800aec6:	7dbb      	ldrb	r3, [r7, #22]
 800aec8:	2b85      	cmp	r3, #133	; 0x85
 800aeca:	d179      	bne.n	800afc0 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fe17 	bl	800ab08 <load_xdir>
 800aeda:	4603      	mov	r3, r0
 800aedc:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800aede:	7dfb      	ldrb	r3, [r7, #23]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d17e      	bne.n	800afe2 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	3304      	adds	r3, #4
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	719a      	strb	r2, [r3, #6]
					}
					break;
 800aef6:	e074      	b.n	800afe2 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aefc:	330b      	adds	r3, #11
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af04:	73fb      	strb	r3, [r7, #15]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	7bfa      	ldrb	r2, [r7, #15]
 800af0a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800af0c:	7dbb      	ldrb	r3, [r7, #22]
 800af0e:	2be5      	cmp	r3, #229	; 0xe5
 800af10:	d00e      	beq.n	800af30 <dir_read+0xbc>
 800af12:	7dbb      	ldrb	r3, [r7, #22]
 800af14:	2b2e      	cmp	r3, #46	; 0x2e
 800af16:	d00b      	beq.n	800af30 <dir_read+0xbc>
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	f023 0320 	bic.w	r3, r3, #32
 800af1e:	2b08      	cmp	r3, #8
 800af20:	bf0c      	ite	eq
 800af22:	2301      	moveq	r3, #1
 800af24:	2300      	movne	r3, #0
 800af26:	b2db      	uxtb	r3, r3
 800af28:	461a      	mov	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d002      	beq.n	800af36 <dir_read+0xc2>
				ord = 0xFF;
 800af30:	23ff      	movs	r3, #255	; 0xff
 800af32:	757b      	strb	r3, [r7, #21]
 800af34:	e044      	b.n	800afc0 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2b0f      	cmp	r3, #15
 800af3a:	d12f      	bne.n	800af9c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800af3c:	7dbb      	ldrb	r3, [r7, #22]
 800af3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00d      	beq.n	800af62 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af4a:	7b5b      	ldrb	r3, [r3, #13]
 800af4c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800af4e:	7dbb      	ldrb	r3, [r7, #22]
 800af50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af54:	75bb      	strb	r3, [r7, #22]
 800af56:	7dbb      	ldrb	r3, [r7, #22]
 800af58:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800af62:	7dba      	ldrb	r2, [r7, #22]
 800af64:	7d7b      	ldrb	r3, [r7, #21]
 800af66:	429a      	cmp	r2, r3
 800af68:	d115      	bne.n	800af96 <dir_read+0x122>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6e:	330d      	adds	r3, #13
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	7d3a      	ldrb	r2, [r7, #20]
 800af74:	429a      	cmp	r2, r3
 800af76:	d10e      	bne.n	800af96 <dir_read+0x122>
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	691a      	ldr	r2, [r3, #16]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af80:	4619      	mov	r1, r3
 800af82:	4610      	mov	r0, r2
 800af84:	f7ff fb5c 	bl	800a640 <pick_lfn>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <dir_read+0x122>
 800af8e:	7d7b      	ldrb	r3, [r7, #21]
 800af90:	3b01      	subs	r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	e000      	b.n	800af98 <dir_read+0x124>
 800af96:	23ff      	movs	r3, #255	; 0xff
 800af98:	757b      	strb	r3, [r7, #21]
 800af9a:	e011      	b.n	800afc0 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800af9c:	7d7b      	ldrb	r3, [r7, #21]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d109      	bne.n	800afb6 <dir_read+0x142>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fca4 	bl	800a8f4 <sum_sfn>
 800afac:	4603      	mov	r3, r0
 800afae:	461a      	mov	r2, r3
 800afb0:	7d3b      	ldrb	r3, [r7, #20]
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d017      	beq.n	800afe6 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f04f 32ff 	mov.w	r2, #4294967295
 800afbc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800afbe:	e012      	b.n	800afe6 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800afc0:	2100      	movs	r1, #0
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff f94b 	bl	800a25e <dir_next>
 800afc8:	4603      	mov	r3, r0
 800afca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10b      	bne.n	800afea <dir_read+0x176>
	while (dp->sect) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f47f af5b 	bne.w	800ae92 <dir_read+0x1e>
 800afdc:	e006      	b.n	800afec <dir_read+0x178>
		if (res != FR_OK) break;
 800afde:	bf00      	nop
 800afe0:	e004      	b.n	800afec <dir_read+0x178>
					break;
 800afe2:	bf00      	nop
 800afe4:	e002      	b.n	800afec <dir_read+0x178>
					break;
 800afe6:	bf00      	nop
 800afe8:	e000      	b.n	800afec <dir_read+0x178>
		if (res != FR_OK) break;
 800afea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800afec:	7dfb      	ldrb	r3, [r7, #23]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <dir_read+0x184>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800aff8:	7dfb      	ldrb	r3, [r7, #23]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b002:	b590      	push	{r4, r7, lr}
 800b004:	b089      	sub	sp, #36	; 0x24
 800b006:	af00      	add	r7, sp, #0
 800b008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b010:	2100      	movs	r1, #0
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7ff f88f 	bl	800a136 <dir_sdi>
 800b018:	4603      	mov	r3, r0
 800b01a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800b01c:	7ffb      	ldrb	r3, [r7, #31]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <dir_find+0x24>
 800b022:	7ffb      	ldrb	r3, [r7, #31]
 800b024:	e112      	b.n	800b24c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d164      	bne.n	800b0f8 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff fcb2 	bl	800a99c <xname_sum>
 800b038:	4603      	mov	r3, r0
 800b03a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b03c:	e04f      	b.n	800b0de <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	695b      	ldr	r3, [r3, #20]
 800b042:	3324      	adds	r3, #36	; 0x24
 800b044:	4618      	mov	r0, r3
 800b046:	f7fd fdd3 	bl	8008bf0 <ld_word>
 800b04a:	4603      	mov	r3, r0
 800b04c:	461a      	mov	r2, r3
 800b04e:	893b      	ldrh	r3, [r7, #8]
 800b050:	4293      	cmp	r3, r2
 800b052:	d000      	beq.n	800b056 <dir_find+0x54>
 800b054:	e043      	b.n	800b0de <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	695b      	ldr	r3, [r3, #20]
 800b05a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b05e:	76fb      	strb	r3, [r7, #27]
 800b060:	2340      	movs	r3, #64	; 0x40
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	2300      	movs	r3, #0
 800b066:	613b      	str	r3, [r7, #16]
 800b068:	e029      	b.n	800b0be <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f003 031f 	and.w	r3, r3, #31
 800b070:	2b00      	cmp	r3, #0
 800b072:	d102      	bne.n	800b07a <dir_find+0x78>
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	3302      	adds	r3, #2
 800b078:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	695a      	ldr	r2, [r3, #20]
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	4413      	add	r3, r2
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd fdb4 	bl	8008bf0 <ld_word>
 800b088:	4603      	mov	r3, r0
 800b08a:	4618      	mov	r0, r3
 800b08c:	f002 fe58 	bl	800dd40 <ff_wtoupper>
 800b090:	4603      	mov	r3, r0
 800b092:	461c      	mov	r4, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	005b      	lsls	r3, r3, #1
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f002 fe4d 	bl	800dd40 <ff_wtoupper>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	429c      	cmp	r4, r3
 800b0aa:	d10c      	bne.n	800b0c6 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800b0ac:	7efb      	ldrb	r3, [r7, #27]
 800b0ae:	3b01      	subs	r3, #1
 800b0b0:	76fb      	strb	r3, [r7, #27]
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	3302      	adds	r3, #2
 800b0b6:	617b      	str	r3, [r7, #20]
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	7efb      	ldrb	r3, [r7, #27]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1d2      	bne.n	800b06a <dir_find+0x68>
 800b0c4:	e000      	b.n	800b0c8 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800b0c6:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b0c8:	7efb      	ldrb	r3, [r7, #27]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d107      	bne.n	800b0de <dir_find+0xdc>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	4413      	add	r3, r2
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d009      	beq.n	800b0f2 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fec7 	bl	800ae74 <dir_read>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	77fb      	strb	r3, [r7, #31]
 800b0ea:	7ffb      	ldrb	r3, [r7, #31]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0a6      	beq.n	800b03e <dir_find+0x3c>
 800b0f0:	e000      	b.n	800b0f4 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800b0f2:	bf00      	nop
		}
		return res;
 800b0f4:	7ffb      	ldrb	r3, [r7, #31]
 800b0f6:	e0a9      	b.n	800b24c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b0f8:	23ff      	movs	r3, #255	; 0xff
 800b0fa:	773b      	strb	r3, [r7, #28]
 800b0fc:	7f3b      	ldrb	r3, [r7, #28]
 800b0fe:	777b      	strb	r3, [r7, #29]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f04f 32ff 	mov.w	r2, #4294967295
 800b106:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b10c:	4619      	mov	r1, r3
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7fe f982 	bl	8009418 <move_window>
 800b114:	4603      	mov	r3, r0
 800b116:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800b118:	7ffb      	ldrb	r3, [r7, #31]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f040 8090 	bne.w	800b240 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b128:	7fbb      	ldrb	r3, [r7, #30]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d102      	bne.n	800b134 <dir_find+0x132>
 800b12e:	2304      	movs	r3, #4
 800b130:	77fb      	strb	r3, [r7, #31]
 800b132:	e08a      	b.n	800b24a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b138:	330b      	adds	r3, #11
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b140:	72fb      	strb	r3, [r7, #11]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7afa      	ldrb	r2, [r7, #11]
 800b146:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b148:	7fbb      	ldrb	r3, [r7, #30]
 800b14a:	2be5      	cmp	r3, #229	; 0xe5
 800b14c:	d007      	beq.n	800b15e <dir_find+0x15c>
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	2b00      	cmp	r3, #0
 800b156:	d009      	beq.n	800b16c <dir_find+0x16a>
 800b158:	7afb      	ldrb	r3, [r7, #11]
 800b15a:	2b0f      	cmp	r3, #15
 800b15c:	d006      	beq.n	800b16c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b15e:	23ff      	movs	r3, #255	; 0xff
 800b160:	777b      	strb	r3, [r7, #29]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f04f 32ff 	mov.w	r2, #4294967295
 800b168:	64da      	str	r2, [r3, #76]	; 0x4c
 800b16a:	e05e      	b.n	800b22a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	2b0f      	cmp	r3, #15
 800b170:	d136      	bne.n	800b1e0 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d154      	bne.n	800b22a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b180:	7fbb      	ldrb	r3, [r7, #30]
 800b182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00d      	beq.n	800b1a6 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18e:	7b5b      	ldrb	r3, [r3, #13]
 800b190:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b192:	7fbb      	ldrb	r3, [r7, #30]
 800b194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b198:	77bb      	strb	r3, [r7, #30]
 800b19a:	7fbb      	ldrb	r3, [r7, #30]
 800b19c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b1a6:	7fba      	ldrb	r2, [r7, #30]
 800b1a8:	7f7b      	ldrb	r3, [r7, #29]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d115      	bne.n	800b1da <dir_find+0x1d8>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b2:	330d      	adds	r3, #13
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	7f3a      	ldrb	r2, [r7, #28]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d10e      	bne.n	800b1da <dir_find+0x1d8>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	691a      	ldr	r2, [r3, #16]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f7ff f9ca 	bl	800a560 <cmp_lfn>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d003      	beq.n	800b1da <dir_find+0x1d8>
 800b1d2:	7f7b      	ldrb	r3, [r7, #29]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	e000      	b.n	800b1dc <dir_find+0x1da>
 800b1da:	23ff      	movs	r3, #255	; 0xff
 800b1dc:	777b      	strb	r3, [r7, #29]
 800b1de:	e024      	b.n	800b22a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b1e0:	7f7b      	ldrb	r3, [r7, #29]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d109      	bne.n	800b1fa <dir_find+0x1f8>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fb82 	bl	800a8f4 <sum_sfn>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	7f3b      	ldrb	r3, [r7, #28]
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d024      	beq.n	800b244 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <dir_find+0x21c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3340      	adds	r3, #64	; 0x40
 800b210:	220b      	movs	r2, #11
 800b212:	4619      	mov	r1, r3
 800b214:	f7fd ff0d 	bl	8009032 <mem_cmp>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d014      	beq.n	800b248 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b21e:	23ff      	movs	r3, #255	; 0xff
 800b220:	777b      	strb	r3, [r7, #29]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f04f 32ff 	mov.w	r2, #4294967295
 800b228:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b22a:	2100      	movs	r1, #0
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff f816 	bl	800a25e <dir_next>
 800b232:	4603      	mov	r3, r0
 800b234:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800b236:	7ffb      	ldrb	r3, [r7, #31]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f43f af65 	beq.w	800b108 <dir_find+0x106>
 800b23e:	e004      	b.n	800b24a <dir_find+0x248>
		if (res != FR_OK) break;
 800b240:	bf00      	nop
 800b242:	e002      	b.n	800b24a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b244:	bf00      	nop
 800b246:	e000      	b.n	800b24a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b248:	bf00      	nop

	return res;
 800b24a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3724      	adds	r7, #36	; 0x24
 800b250:	46bd      	mov	sp, r7
 800b252:	bd90      	pop	{r4, r7, pc}

0800b254 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b254:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b258:	b0a0      	sub	sp, #128	; 0x80
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800b26a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d001      	beq.n	800b276 <dir_register+0x22>
 800b272:	2306      	movs	r3, #6
 800b274:	e192      	b.n	800b59c <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b276:	2300      	movs	r3, #0
 800b278:	677b      	str	r3, [r7, #116]	; 0x74
 800b27a:	e002      	b.n	800b282 <dir_register+0x2e>
 800b27c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b27e:	3301      	adds	r3, #1
 800b280:	677b      	str	r3, [r7, #116]	; 0x74
 800b282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b284:	691a      	ldr	r2, [r3, #16]
 800b286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	4413      	add	r3, r2
 800b28c:	881b      	ldrh	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f4      	bne.n	800b27c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b04      	cmp	r3, #4
 800b298:	f040 80a3 	bne.w	800b3e2 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800b29c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b29e:	330e      	adds	r3, #14
 800b2a0:	4aa4      	ldr	r2, [pc, #656]	; (800b534 <dir_register+0x2e0>)
 800b2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a6:	08db      	lsrs	r3, r3, #3
 800b2a8:	3302      	adds	r3, #2
 800b2aa:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800b2ac:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f7ff f8bb 	bl	800a42a <dir_alloc>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800b2ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <dir_register+0x74>
 800b2c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b2c6:	e169      	b.n	800b59c <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	015b      	lsls	r3, r3, #5
 800b2d2:	1ad2      	subs	r2, r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d076      	beq.n	800b3ce <dir_register+0x17a>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	79db      	ldrb	r3, [r3, #7]
 800b2e4:	f003 0304 	and.w	r3, r3, #4
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d070      	beq.n	800b3ce <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b2f2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b2f4:	8949      	ldrh	r1, [r1, #10]
 800b2f6:	4608      	mov	r0, r1
 800b2f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b2fa:	8989      	ldrh	r1, [r1, #12]
 800b2fc:	fb00 f101 	mul.w	r1, r0, r1
 800b300:	2000      	movs	r0, #0
 800b302:	460c      	mov	r4, r1
 800b304:	4605      	mov	r5, r0
 800b306:	eb12 0804 	adds.w	r8, r2, r4
 800b30a:	eb43 0905 	adc.w	r9, r3, r5
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fcac 	bl	8009c74 <fill_first_frag>
 800b31c:	4603      	mov	r3, r0
 800b31e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b322:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <dir_register+0xdc>
 800b32a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b32e:	e135      	b.n	800b59c <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b336:	f04f 32ff 	mov.w	r2, #4294967295
 800b33a:	4619      	mov	r1, r3
 800b33c:	f7fe fcc9 	bl	8009cd2 <fill_last_frag>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b346:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <dir_register+0x100>
 800b34e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b352:	e123      	b.n	800b59c <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	f107 0308 	add.w	r3, r7, #8
 800b35a:	4611      	mov	r1, r2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7ff fc91 	bl	800ac84 <load_obj_dir>
 800b362:	4603      	mov	r3, r0
 800b364:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b368:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <dir_register+0x122>
 800b370:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b374:	e112      	b.n	800b59c <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800b376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b378:	695b      	ldr	r3, [r3, #20]
 800b37a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b384:	4608      	mov	r0, r1
 800b386:	f7fd fd90 	bl	8008eaa <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800b38a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b398:	4608      	mov	r0, r1
 800b39a:	f7fd fd86 	bl	8008eaa <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	79da      	ldrb	r2, [r3, #7]
 800b3a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	3321      	adds	r3, #33	; 0x21
 800b3a8:	f042 0201 	orr.w	r2, r2, #1
 800b3ac:	b2d2      	uxtb	r2, r2
 800b3ae:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800b3b0:	f107 0308 	add.w	r3, r7, #8
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff fc9b 	bl	800acf0 <store_xdir>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800b3c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <dir_register+0x17a>
 800b3c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b3cc:	e0e6      	b.n	800b59c <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800b3ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d0:	695a      	ldr	r2, [r3, #20]
 800b3d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	4610      	mov	r0, r2
 800b3da:	f7ff fce4 	bl	800ada6 <create_xdir>
		return FR_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e0dc      	b.n	800b59c <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800b3e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b3ec:	220c      	movs	r2, #12
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fd fde3 	bl	8008fba <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b3f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d033      	beq.n	800b468 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2240      	movs	r2, #64	; 0x40
 800b404:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800b408:	2301      	movs	r3, #1
 800b40a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b40c:	e016      	b.n	800b43c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b416:	691a      	ldr	r2, [r3, #16]
 800b418:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800b41c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b41e:	f7ff f9db 	bl	800a7d8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff fded 	bl	800b002 <dir_find>
 800b428:	4603      	mov	r3, r0
 800b42a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800b42e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b432:	2b00      	cmp	r3, #0
 800b434:	d106      	bne.n	800b444 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800b436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b438:	3301      	adds	r3, #1
 800b43a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b43c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b43e:	2b63      	cmp	r3, #99	; 0x63
 800b440:	d9e5      	bls.n	800b40e <dir_register+0x1ba>
 800b442:	e000      	b.n	800b446 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800b444:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b448:	2b64      	cmp	r3, #100	; 0x64
 800b44a:	d101      	bne.n	800b450 <dir_register+0x1fc>
 800b44c:	2307      	movs	r3, #7
 800b44e:	e0a5      	b.n	800b59c <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b450:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b454:	2b04      	cmp	r3, #4
 800b456:	d002      	beq.n	800b45e <dir_register+0x20a>
 800b458:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b45c:	e09e      	b.n	800b59c <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b45e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b468:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b46c:	f003 0302 	and.w	r3, r3, #2
 800b470:	2b00      	cmp	r3, #0
 800b472:	d007      	beq.n	800b484 <dir_register+0x230>
 800b474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b476:	330c      	adds	r3, #12
 800b478:	4a2f      	ldr	r2, [pc, #188]	; (800b538 <dir_register+0x2e4>)
 800b47a:	fba2 2303 	umull	r2, r3, r2, r3
 800b47e:	089b      	lsrs	r3, r3, #2
 800b480:	3301      	adds	r3, #1
 800b482:	e000      	b.n	800b486 <dir_register+0x232>
 800b484:	2301      	movs	r3, #1
 800b486:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b488:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7fe ffcd 	bl	800a42a <dir_alloc>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b496:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d14f      	bne.n	800b53e <dir_register+0x2ea>
 800b49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	673b      	str	r3, [r7, #112]	; 0x70
 800b4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d049      	beq.n	800b53e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4b0:	015b      	lsls	r3, r3, #5
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7fe fe3d 	bl	800a136 <dir_sdi>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b4c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d139      	bne.n	800b53e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3340      	adds	r3, #64	; 0x40
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff fa10 	bl	800a8f4 <sum_sfn>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b4e2:	f7fd ff99 	bl	8009418 <move_window>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800b4ec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d123      	bne.n	800b53c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4f6:	6918      	ldr	r0, [r3, #16]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b4fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800b504:	f7ff f900 	bl	800a708 <put_lfn>
				fs->wflag = 1;
 800b508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b50a:	2201      	movs	r2, #1
 800b50c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b50e:	2100      	movs	r1, #0
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7fe fea4 	bl	800a25e <dir_next>
 800b516:	4603      	mov	r3, r0
 800b518:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800b51c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b520:	2b00      	cmp	r3, #0
 800b522:	d10c      	bne.n	800b53e <dir_register+0x2ea>
 800b524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b526:	3b01      	subs	r3, #1
 800b528:	673b      	str	r3, [r7, #112]	; 0x70
 800b52a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1d4      	bne.n	800b4da <dir_register+0x286>
 800b530:	e005      	b.n	800b53e <dir_register+0x2ea>
 800b532:	bf00      	nop
 800b534:	88888889 	.word	0x88888889
 800b538:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800b53c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b53e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b542:	2b00      	cmp	r3, #0
 800b544:	d128      	bne.n	800b598 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54a:	4619      	mov	r1, r3
 800b54c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b54e:	f7fd ff63 	bl	8009418 <move_window>
 800b552:	4603      	mov	r3, r0
 800b554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800b558:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d11b      	bne.n	800b598 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b564:	2220      	movs	r2, #32
 800b566:	2100      	movs	r1, #0
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fd fd47 	bl	8008ffc <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3340      	adds	r3, #64	; 0x40
 800b576:	220b      	movs	r2, #11
 800b578:	4619      	mov	r1, r3
 800b57a:	f7fd fd1e 	bl	8008fba <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b588:	330c      	adds	r3, #12
 800b58a:	f002 0218 	and.w	r2, r2, #24
 800b58e:	b2d2      	uxtb	r2, r2
 800b590:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b594:	2201      	movs	r2, #1
 800b596:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b598:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3780      	adds	r7, #128	; 0x80
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b5a6:	bf00      	nop

0800b5a8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b5a8:	b5b0      	push	{r4, r5, r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 80d8 	beq.w	800b778 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	d106      	bne.n	800b5de <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7ff fa14 	bl	800aa04 <get_xdir_info>
		return;
 800b5dc:	e0cd      	b.n	800b77a <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5e6:	d032      	beq.n	800b64e <get_fileinfo+0xa6>
			i = j = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	61bb      	str	r3, [r7, #24]
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b5f0:	e01b      	b.n	800b62a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b5f2:	89fb      	ldrh	r3, [r7, #14]
 800b5f4:	2100      	movs	r1, #0
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f002 fb66 	bl	800dcc8 <ff_convert>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b600:	89fb      	ldrh	r3, [r7, #14]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d102      	bne.n	800b60c <get_fileinfo+0x64>
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	e01a      	b.n	800b642 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2bfe      	cmp	r3, #254	; 0xfe
 800b610:	d902      	bls.n	800b618 <get_fileinfo+0x70>
 800b612:	2300      	movs	r3, #0
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	e014      	b.n	800b642 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	1c5a      	adds	r2, r3, #1
 800b61c:	61fa      	str	r2, [r7, #28]
 800b61e:	89fa      	ldrh	r2, [r7, #14]
 800b620:	b2d1      	uxtb	r1, r2
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	4413      	add	r3, r2
 800b626:	460a      	mov	r2, r1
 800b628:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	691a      	ldr	r2, [r3, #16]
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	1c59      	adds	r1, r3, #1
 800b632:	61b9      	str	r1, [r7, #24]
 800b634:	005b      	lsls	r3, r3, #1
 800b636:	4413      	add	r3, r2
 800b638:	881b      	ldrh	r3, [r3, #0]
 800b63a:	81fb      	strh	r3, [r7, #14]
 800b63c:	89fb      	ldrh	r3, [r7, #14]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d1d7      	bne.n	800b5f2 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	4413      	add	r3, r2
 800b648:	331a      	adds	r3, #26
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	61bb      	str	r3, [r7, #24]
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	4413      	add	r3, r2
 800b65c:	331a      	adds	r3, #26
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b662:	e04c      	b.n	800b6fe <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	61f9      	str	r1, [r7, #28]
 800b66e:	4413      	add	r3, r2
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b674:	7dfb      	ldrb	r3, [r7, #23]
 800b676:	2b20      	cmp	r3, #32
 800b678:	d100      	bne.n	800b67c <get_fileinfo+0xd4>
 800b67a:	e040      	b.n	800b6fe <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d101      	bne.n	800b686 <get_fileinfo+0xde>
 800b682:	23e5      	movs	r3, #229	; 0xe5
 800b684:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	2b09      	cmp	r3, #9
 800b68a:	d10f      	bne.n	800b6ac <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800b68c:	89bb      	ldrh	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d105      	bne.n	800b69e <get_fileinfo+0xf6>
 800b692:	683a      	ldr	r2, [r7, #0]
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	4413      	add	r3, r2
 800b698:	331a      	adds	r3, #26
 800b69a:	222e      	movs	r2, #46	; 0x2e
 800b69c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	61ba      	str	r2, [r7, #24]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	222e      	movs	r2, #46	; 0x2e
 800b6aa:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	330d      	adds	r3, #13
 800b6b4:	7dfa      	ldrb	r2, [r7, #23]
 800b6b6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b6b8:	89bb      	ldrh	r3, [r7, #12]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d11c      	bne.n	800b6f8 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
 800b6c0:	2b40      	cmp	r3, #64	; 0x40
 800b6c2:	d913      	bls.n	800b6ec <get_fileinfo+0x144>
 800b6c4:	7dfb      	ldrb	r3, [r7, #23]
 800b6c6:	2b5a      	cmp	r3, #90	; 0x5a
 800b6c8:	d810      	bhi.n	800b6ec <get_fileinfo+0x144>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	2b08      	cmp	r3, #8
 800b6d8:	d901      	bls.n	800b6de <get_fileinfo+0x136>
 800b6da:	2310      	movs	r3, #16
 800b6dc:	e000      	b.n	800b6e0 <get_fileinfo+0x138>
 800b6de:	2308      	movs	r3, #8
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	3320      	adds	r3, #32
 800b6ea:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	331a      	adds	r3, #26
 800b6f4:	7dfa      	ldrb	r2, [r7, #23]
 800b6f6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	2b0a      	cmp	r3, #10
 800b702:	d9af      	bls.n	800b664 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800b704:	89bb      	ldrh	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10d      	bne.n	800b726 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	4413      	add	r3, r2
 800b710:	331a      	adds	r3, #26
 800b712:	2200      	movs	r2, #0
 800b714:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71a:	330c      	adds	r3, #12
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <get_fileinfo+0x17e>
 800b722:	2300      	movs	r3, #0
 800b724:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b726:	683a      	ldr	r2, [r7, #0]
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	4413      	add	r3, r2
 800b72c:	330d      	adds	r3, #13
 800b72e:	2200      	movs	r2, #0
 800b730:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b736:	7ada      	ldrb	r2, [r3, #11]
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b740:	331c      	adds	r3, #28
 800b742:	4618      	mov	r0, r3
 800b744:	f7fd fa6c 	bl	8008c20 <ld_dword>
 800b748:	4603      	mov	r3, r0
 800b74a:	2200      	movs	r2, #0
 800b74c:	461c      	mov	r4, r3
 800b74e:	4615      	mov	r5, r2
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75a:	3316      	adds	r3, #22
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fd fa5f 	bl	8008c20 <ld_dword>
 800b762:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	b29a      	uxth	r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	815a      	strh	r2, [r3, #10]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	0c1b      	lsrs	r3, r3, #16
 800b770:	b29a      	uxth	r2, r3
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	811a      	strh	r2, [r3, #8]
 800b776:	e000      	b.n	800b77a <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b778:	bf00      	nop
}
 800b77a:	3720      	adds	r7, #32
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bdb0      	pop	{r4, r5, r7, pc}

0800b780 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	; 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	613b      	str	r3, [r7, #16]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	2300      	movs	r3, #0
 800b79a:	617b      	str	r3, [r7, #20]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b7a0:	69bb      	ldr	r3, [r7, #24]
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	61ba      	str	r2, [r7, #24]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b7ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7b0:	2b1f      	cmp	r3, #31
 800b7b2:	d940      	bls.n	800b836 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b7b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7b6:	2b2f      	cmp	r3, #47	; 0x2f
 800b7b8:	d006      	beq.n	800b7c8 <create_name+0x48>
 800b7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7bc:	2b5c      	cmp	r3, #92	; 0x5c
 800b7be:	d110      	bne.n	800b7e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b7c0:	e002      	b.n	800b7c8 <create_name+0x48>
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	61bb      	str	r3, [r7, #24]
 800b7c8:	693a      	ldr	r2, [r7, #16]
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b2f      	cmp	r3, #47	; 0x2f
 800b7d2:	d0f6      	beq.n	800b7c2 <create_name+0x42>
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	4413      	add	r3, r2
 800b7da:	781b      	ldrb	r3, [r3, #0]
 800b7dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b7de:	d0f0      	beq.n	800b7c2 <create_name+0x42>
			break;
 800b7e0:	e02a      	b.n	800b838 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	2bfe      	cmp	r3, #254	; 0xfe
 800b7e6:	d901      	bls.n	800b7ec <create_name+0x6c>
 800b7e8:	2306      	movs	r3, #6
 800b7ea:	e17d      	b.n	800bae8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b7f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7f4:	2101      	movs	r1, #1
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f002 fa66 	bl	800dcc8 <ff_convert>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <create_name+0x8a>
 800b806:	2306      	movs	r3, #6
 800b808:	e16e      	b.n	800bae8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b80a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80c:	2b7f      	cmp	r3, #127	; 0x7f
 800b80e:	d809      	bhi.n	800b824 <create_name+0xa4>
 800b810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b812:	4619      	mov	r1, r3
 800b814:	488d      	ldr	r0, [pc, #564]	; (800ba4c <create_name+0x2cc>)
 800b816:	f7fd fc33 	bl	8009080 <chk_chr>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <create_name+0xa4>
 800b820:	2306      	movs	r3, #6
 800b822:	e161      	b.n	800bae8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	1c5a      	adds	r2, r3, #1
 800b828:	617a      	str	r2, [r7, #20]
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	68fa      	ldr	r2, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b832:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b834:	e7b4      	b.n	800b7a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b836:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	441a      	add	r2, r3
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b844:	2b1f      	cmp	r3, #31
 800b846:	d801      	bhi.n	800b84c <create_name+0xcc>
 800b848:	2304      	movs	r3, #4
 800b84a:	e000      	b.n	800b84e <create_name+0xce>
 800b84c:	2300      	movs	r3, #0
 800b84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b852:	e011      	b.n	800b878 <create_name+0xf8>
		w = lfn[di - 1];
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b85a:	3b01      	subs	r3, #1
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	4413      	add	r3, r2
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b868:	2b20      	cmp	r3, #32
 800b86a:	d002      	beq.n	800b872 <create_name+0xf2>
 800b86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b86e:	2b2e      	cmp	r3, #46	; 0x2e
 800b870:	d106      	bne.n	800b880 <create_name+0x100>
		di--;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	3b01      	subs	r3, #1
 800b876:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1ea      	bne.n	800b854 <create_name+0xd4>
 800b87e:	e000      	b.n	800b882 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b880:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	2200      	movs	r2, #0
 800b88c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <create_name+0x118>
 800b894:	2306      	movs	r3, #6
 800b896:	e127      	b.n	800bae8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	3340      	adds	r3, #64	; 0x40
 800b89c:	220b      	movs	r2, #11
 800b89e:	2120      	movs	r1, #32
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fd fbab 	bl	8008ffc <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	e002      	b.n	800b8b2 <create_name+0x132>
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	61bb      	str	r3, [r7, #24]
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	005b      	lsls	r3, r3, #1
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	881b      	ldrh	r3, [r3, #0]
 800b8bc:	2b20      	cmp	r3, #32
 800b8be:	d0f5      	beq.n	800b8ac <create_name+0x12c>
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b8cc:	d0ee      	beq.n	800b8ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d009      	beq.n	800b8e8 <create_name+0x168>
 800b8d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d8:	f043 0303 	orr.w	r3, r3, #3
 800b8dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b8e0:	e002      	b.n	800b8e8 <create_name+0x168>
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d009      	beq.n	800b902 <create_name+0x182>
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	005b      	lsls	r3, r3, #1
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b900:	d1ef      	bne.n	800b8e2 <create_name+0x162>

	i = b = 0; ni = 8;
 800b902:	2300      	movs	r3, #0
 800b904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b908:	2300      	movs	r3, #0
 800b90a:	623b      	str	r3, [r7, #32]
 800b90c:	2308      	movs	r3, #8
 800b90e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	61ba      	str	r2, [r7, #24]
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4413      	add	r3, r2
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 8090 	beq.w	800ba48 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	d006      	beq.n	800b93c <create_name+0x1bc>
 800b92e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b930:	2b2e      	cmp	r3, #46	; 0x2e
 800b932:	d10a      	bne.n	800b94a <create_name+0x1ca>
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d006      	beq.n	800b94a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b93c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b940:	f043 0303 	orr.w	r3, r3, #3
 800b944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b948:	e07d      	b.n	800ba46 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b94a:	6a3a      	ldr	r2, [r7, #32]
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d203      	bcs.n	800b95a <create_name+0x1da>
 800b952:	69ba      	ldr	r2, [r7, #24]
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	429a      	cmp	r2, r3
 800b958:	d123      	bne.n	800b9a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	2b0b      	cmp	r3, #11
 800b95e:	d106      	bne.n	800b96e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b964:	f043 0303 	orr.w	r3, r3, #3
 800b968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b96c:	e075      	b.n	800ba5a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b96e:	69ba      	ldr	r2, [r7, #24]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	429a      	cmp	r2, r3
 800b974:	d005      	beq.n	800b982 <create_name+0x202>
 800b976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97a:	f043 0303 	orr.w	r3, r3, #3
 800b97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	429a      	cmp	r2, r3
 800b988:	d866      	bhi.n	800ba58 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	61bb      	str	r3, [r7, #24]
 800b98e:	2308      	movs	r3, #8
 800b990:	623b      	str	r3, [r7, #32]
 800b992:	230b      	movs	r3, #11
 800b994:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b9a0:	e051      	b.n	800ba46 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b9a6:	d914      	bls.n	800b9d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b9a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f002 f98b 	bl	800dcc8 <ff_convert>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b9b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <create_name+0x246>
 800b9bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9be:	3b80      	subs	r3, #128	; 0x80
 800b9c0:	4a23      	ldr	r2, [pc, #140]	; (800ba50 <create_name+0x2d0>)
 800b9c2:	5cd3      	ldrb	r3, [r2, r3]
 800b9c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ca:	f043 0302 	orr.w	r3, r3, #2
 800b9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b9d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d007      	beq.n	800b9e8 <create_name+0x268>
 800b9d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9da:	4619      	mov	r1, r3
 800b9dc:	481d      	ldr	r0, [pc, #116]	; (800ba54 <create_name+0x2d4>)
 800b9de:	f7fd fb4f 	bl	8009080 <chk_chr>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d008      	beq.n	800b9fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b9e8:	235f      	movs	r3, #95	; 0x5f
 800b9ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9f0:	f043 0303 	orr.w	r3, r3, #3
 800b9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b9f8:	e01b      	b.n	800ba32 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b9fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9fc:	2b40      	cmp	r3, #64	; 0x40
 800b9fe:	d909      	bls.n	800ba14 <create_name+0x294>
 800ba00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba02:	2b5a      	cmp	r3, #90	; 0x5a
 800ba04:	d806      	bhi.n	800ba14 <create_name+0x294>
					b |= 2;
 800ba06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba0a:	f043 0302 	orr.w	r3, r3, #2
 800ba0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba12:	e00e      	b.n	800ba32 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ba14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba16:	2b60      	cmp	r3, #96	; 0x60
 800ba18:	d90b      	bls.n	800ba32 <create_name+0x2b2>
 800ba1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba1c:	2b7a      	cmp	r3, #122	; 0x7a
 800ba1e:	d808      	bhi.n	800ba32 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ba20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba24:	f043 0301 	orr.w	r3, r3, #1
 800ba28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ba2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba2e:	3b20      	subs	r3, #32
 800ba30:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	1c5a      	adds	r2, r3, #1
 800ba36:	623a      	str	r2, [r7, #32]
 800ba38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ba3a:	b2d1      	uxtb	r1, r2
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	4413      	add	r3, r2
 800ba40:	460a      	mov	r2, r1
 800ba42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800ba46:	e763      	b.n	800b910 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ba48:	bf00      	nop
 800ba4a:	e006      	b.n	800ba5a <create_name+0x2da>
 800ba4c:	0800f3a0 	.word	0x0800f3a0
 800ba50:	0800f500 	.word	0x0800f500
 800ba54:	0800f3ac 	.word	0x0800f3ac
			if (si > di) break;			/* No extension */
 800ba58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba60:	2be5      	cmp	r3, #229	; 0xe5
 800ba62:	d103      	bne.n	800ba6c <create_name+0x2ec>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2205      	movs	r2, #5
 800ba68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	2b08      	cmp	r3, #8
 800ba70:	d104      	bne.n	800ba7c <create_name+0x2fc>
 800ba72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ba7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba80:	f003 030c 	and.w	r3, r3, #12
 800ba84:	2b0c      	cmp	r3, #12
 800ba86:	d005      	beq.n	800ba94 <create_name+0x314>
 800ba88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba8c:	f003 0303 	and.w	r3, r3, #3
 800ba90:	2b03      	cmp	r3, #3
 800ba92:	d105      	bne.n	800baa0 <create_name+0x320>
 800ba94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba98:	f043 0302 	orr.w	r3, r3, #2
 800ba9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800baa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d117      	bne.n	800badc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800baac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d105      	bne.n	800bac4 <create_name+0x344>
 800bab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800babc:	f043 0310 	orr.w	r3, r3, #16
 800bac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bac8:	f003 030c 	and.w	r3, r3, #12
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d105      	bne.n	800badc <create_name+0x35c>
 800bad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad4:	f043 0308 	orr.w	r3, r3, #8
 800bad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bae2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800bae6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3728      	adds	r7, #40	; 0x28
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bb04:	e002      	b.n	800bb0c <follow_path+0x1c>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	603b      	str	r3, [r7, #0]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	2b2f      	cmp	r3, #47	; 0x2f
 800bb12:	d0f8      	beq.n	800bb06 <follow_path+0x16>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b5c      	cmp	r3, #92	; 0x5c
 800bb1a:	d0f4      	beq.n	800bb06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2200      	movs	r2, #0
 800bb26:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	2b1f      	cmp	r3, #31
 800bb2e:	d80a      	bhi.n	800bb46 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2280      	movs	r2, #128	; 0x80
 800bb34:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800bb38:	2100      	movs	r1, #0
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f7fe fafb 	bl	800a136 <dir_sdi>
 800bb40:	4603      	mov	r3, r0
 800bb42:	75fb      	strb	r3, [r7, #23]
 800bb44:	e07d      	b.n	800bc42 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bb46:	463b      	mov	r3, r7
 800bb48:	4619      	mov	r1, r3
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f7ff fe18 	bl	800b780 <create_name>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb54:	7dfb      	ldrb	r3, [r7, #23]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d16e      	bne.n	800bc38 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff fa51 	bl	800b002 <dir_find>
 800bb60:	4603      	mov	r3, r0
 800bb62:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800bb6a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	d161      	bne.n	800bc3c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bb78:	7afb      	ldrb	r3, [r7, #11]
 800bb7a:	f003 0304 	and.w	r3, r3, #4
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d15c      	bne.n	800bc3c <follow_path+0x14c>
 800bb82:	2305      	movs	r3, #5
 800bb84:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bb86:	e059      	b.n	800bc3c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bb88:	7afb      	ldrb	r3, [r7, #11]
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d156      	bne.n	800bc40 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	799b      	ldrb	r3, [r3, #6]
 800bb96:	f003 0310 	and.w	r3, r3, #16
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d102      	bne.n	800bba4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800bb9e:	2305      	movs	r3, #5
 800bba0:	75fb      	strb	r3, [r7, #23]
 800bba2:	e04e      	b.n	800bc42 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b04      	cmp	r3, #4
 800bbaa:	d130      	bne.n	800bc0e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	689a      	ldr	r2, [r3, #8]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bbba:	4613      	mov	r3, r2
 800bbbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	79d2      	ldrb	r2, [r2, #7]
 800bbc4:	431a      	orrs	r2, r3
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	3334      	adds	r3, #52	; 0x34
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7fd f821 	bl	8008c20 <ld_dword>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	695b      	ldr	r3, [r3, #20]
 800bbe8:	3321      	adds	r3, #33	; 0x21
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f003 0302 	and.w	r3, r3, #2
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	695b      	ldr	r3, [r3, #20]
 800bbfa:	3338      	adds	r3, #56	; 0x38
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fd f832 	bl	8008c66 <ld_qword>
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	6939      	ldr	r1, [r7, #16]
 800bc08:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800bc0c:	e79b      	b.n	800bb46 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	8992      	ldrh	r2, [r2, #12]
 800bc1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc20:	fb00 f202 	mul.w	r2, r0, r2
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	440b      	add	r3, r1
 800bc28:	4619      	mov	r1, r3
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f7fe fc59 	bl	800a4e2 <ld_clust>
 800bc30:	4602      	mov	r2, r0
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bc36:	e786      	b.n	800bb46 <follow_path+0x56>
			if (res != FR_OK) break;
 800bc38:	bf00      	nop
 800bc3a:	e002      	b.n	800bc42 <follow_path+0x152>
				break;
 800bc3c:	bf00      	nop
 800bc3e:	e000      	b.n	800bc42 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bc40:	bf00      	nop
			}
		}
	}

	return res;
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b087      	sub	sp, #28
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bc54:	f04f 33ff 	mov.w	r3, #4294967295
 800bc58:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d031      	beq.n	800bcc6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	e002      	b.n	800bc70 <get_ldnumber+0x24>
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b1f      	cmp	r3, #31
 800bc76:	d903      	bls.n	800bc80 <get_ldnumber+0x34>
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b3a      	cmp	r3, #58	; 0x3a
 800bc7e:	d1f4      	bne.n	800bc6a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b3a      	cmp	r3, #58	; 0x3a
 800bc86:	d11c      	bne.n	800bcc2 <get_ldnumber+0x76>
			tp = *path;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	1c5a      	adds	r2, r3, #1
 800bc92:	60fa      	str	r2, [r7, #12]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	3b30      	subs	r3, #48	; 0x30
 800bc98:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b09      	cmp	r3, #9
 800bc9e:	d80e      	bhi.n	800bcbe <get_ldnumber+0x72>
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d10a      	bne.n	800bcbe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d107      	bne.n	800bcbe <get_ldnumber+0x72>
					vol = (int)i;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	e002      	b.n	800bcc8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bcc6:	693b      	ldr	r3, [r7, #16]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	371c      	adds	r7, #28
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	70da      	strb	r2, [r3, #3]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7fd fb92 	bl	8009418 <move_window>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <check_fs+0x2a>
 800bcfa:	2304      	movs	r3, #4
 800bcfc:	e044      	b.n	800bd88 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	333c      	adds	r3, #60	; 0x3c
 800bd02:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fc ff72 	bl	8008bf0 <ld_word>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	461a      	mov	r2, r3
 800bd10:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d001      	beq.n	800bd1c <check_fs+0x48>
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e035      	b.n	800bd88 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd22:	2be9      	cmp	r3, #233	; 0xe9
 800bd24:	d009      	beq.n	800bd3a <check_fs+0x66>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd2c:	2beb      	cmp	r3, #235	; 0xeb
 800bd2e:	d11e      	bne.n	800bd6e <check_fs+0x9a>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd36:	2b90      	cmp	r3, #144	; 0x90
 800bd38:	d119      	bne.n	800bd6e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	333c      	adds	r3, #60	; 0x3c
 800bd3e:	3336      	adds	r3, #54	; 0x36
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7fc ff6d 	bl	8008c20 <ld_dword>
 800bd46:	4603      	mov	r3, r0
 800bd48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bd4c:	4a10      	ldr	r2, [pc, #64]	; (800bd90 <check_fs+0xbc>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d101      	bne.n	800bd56 <check_fs+0x82>
 800bd52:	2300      	movs	r3, #0
 800bd54:	e018      	b.n	800bd88 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	333c      	adds	r3, #60	; 0x3c
 800bd5a:	3352      	adds	r3, #82	; 0x52
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fc ff5f 	bl	8008c20 <ld_dword>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4a0b      	ldr	r2, [pc, #44]	; (800bd94 <check_fs+0xc0>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d101      	bne.n	800bd6e <check_fs+0x9a>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e00c      	b.n	800bd88 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	333c      	adds	r3, #60	; 0x3c
 800bd72:	220b      	movs	r2, #11
 800bd74:	4908      	ldr	r1, [pc, #32]	; (800bd98 <check_fs+0xc4>)
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fd f95b 	bl	8009032 <mem_cmp>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d101      	bne.n	800bd86 <check_fs+0xb2>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <check_fs+0xb4>
#endif
	return 2;
 800bd86:	2302      	movs	r3, #2
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	00544146 	.word	0x00544146
 800bd94:	33544146 	.word	0x33544146
 800bd98:	0800f3b4 	.word	0x0800f3b4

0800bd9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bd9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bda0:	b09c      	sub	sp, #112	; 0x70
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	61f8      	str	r0, [r7, #28]
 800bda6:	61b9      	str	r1, [r7, #24]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bdb2:	69f8      	ldr	r0, [r7, #28]
 800bdb4:	f7ff ff4a 	bl	800bc4c <get_ldnumber>
 800bdb8:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800bdba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da01      	bge.n	800bdc4 <find_volume+0x28>
 800bdc0:	230b      	movs	r3, #11
 800bdc2:	e376      	b.n	800c4b2 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bdc4:	4aa6      	ldr	r2, [pc, #664]	; (800c060 <find_volume+0x2c4>)
 800bdc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bdc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdcc:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bdce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <find_volume+0x3c>
 800bdd4:	230c      	movs	r3, #12
 800bdd6:	e36c      	b.n	800c4b2 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bddc:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bdde:	7dfb      	ldrb	r3, [r7, #23]
 800bde0:	f023 0301 	bic.w	r3, r3, #1
 800bde4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bde6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01a      	beq.n	800be24 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800bdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf0:	785b      	ldrb	r3, [r3, #1]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fc fe5e 	bl	8008ab4 <disk_status>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bdfe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be02:	f003 0301 	and.w	r3, r3, #1
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10c      	bne.n	800be24 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800be0a:	7dfb      	ldrb	r3, [r7, #23]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d007      	beq.n	800be20 <find_volume+0x84>
 800be10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800be1c:	230a      	movs	r3, #10
 800be1e:	e348      	b.n	800c4b2 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800be20:	2300      	movs	r3, #0
 800be22:	e346      	b.n	800c4b2 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800be24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be26:	2200      	movs	r2, #0
 800be28:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800be2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be30:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800be32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	4618      	mov	r0, r3
 800be38:	f7fc fe56 	bl	8008ae8 <disk_initialize>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800be42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d001      	beq.n	800be52 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800be4e:	2303      	movs	r3, #3
 800be50:	e32f      	b.n	800c4b2 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d007      	beq.n	800be68 <find_volume+0xcc>
 800be58:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800be64:	230a      	movs	r3, #10
 800be66:	e324      	b.n	800c4b2 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800be68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6a:	7858      	ldrb	r0, [r3, #1]
 800be6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be6e:	330c      	adds	r3, #12
 800be70:	461a      	mov	r2, r3
 800be72:	2102      	movs	r1, #2
 800be74:	f7fc fe9e 	bl	8008bb4 <disk_ioctl>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <find_volume+0xe6>
 800be7e:	2301      	movs	r3, #1
 800be80:	e317      	b.n	800c4b2 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800be82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be84:	899b      	ldrh	r3, [r3, #12]
 800be86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be8a:	d80d      	bhi.n	800bea8 <find_volume+0x10c>
 800be8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be8e:	899b      	ldrh	r3, [r3, #12]
 800be90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be94:	d308      	bcc.n	800bea8 <find_volume+0x10c>
 800be96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be98:	899b      	ldrh	r3, [r3, #12]
 800be9a:	461a      	mov	r2, r3
 800be9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9e:	899b      	ldrh	r3, [r3, #12]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	4013      	ands	r3, r2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <find_volume+0x110>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e302      	b.n	800c4b2 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800beac:	2300      	movs	r3, #0
 800beae:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800beb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800beb2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800beb4:	f7ff ff0e 	bl	800bcd4 <check_fs>
 800beb8:	4603      	mov	r3, r0
 800beba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bec2:	2b02      	cmp	r3, #2
 800bec4:	d14d      	bne.n	800bf62 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bec6:	2300      	movs	r3, #0
 800bec8:	65bb      	str	r3, [r7, #88]	; 0x58
 800beca:	e020      	b.n	800bf0e <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bed4:	011b      	lsls	r3, r3, #4
 800bed6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800beda:	4413      	add	r3, r2
 800bedc:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bee0:	3304      	adds	r3, #4
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d006      	beq.n	800bef6 <find_volume+0x15a>
 800bee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beea:	3308      	adds	r3, #8
 800beec:	4618      	mov	r0, r3
 800beee:	f7fc fe97 	bl	8008c20 <ld_dword>
 800bef2:	4602      	mov	r2, r0
 800bef4:	e000      	b.n	800bef8 <find_volume+0x15c>
 800bef6:	2200      	movs	r2, #0
 800bef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	3360      	adds	r3, #96	; 0x60
 800befe:	f107 0110 	add.w	r1, r7, #16
 800bf02:	440b      	add	r3, r1
 800bf04:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bf08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d9db      	bls.n	800becc <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bf14:	2300      	movs	r3, #0
 800bf16:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800bf18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <find_volume+0x188>
 800bf1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf20:	3b01      	subs	r3, #1
 800bf22:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bf24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	3360      	adds	r3, #96	; 0x60
 800bf2a:	f107 0210 	add.w	r2, r7, #16
 800bf2e:	4413      	add	r3, r2
 800bf30:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800bf34:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bf36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <find_volume+0x1ac>
 800bf3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf3e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bf40:	f7ff fec8 	bl	800bcd4 <check_fs>
 800bf44:	4603      	mov	r3, r0
 800bf46:	e000      	b.n	800bf4a <find_volume+0x1ae>
 800bf48:	2303      	movs	r3, #3
 800bf4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bf4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf52:	2b01      	cmp	r3, #1
 800bf54:	d905      	bls.n	800bf62 <find_volume+0x1c6>
 800bf56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf58:	3301      	adds	r3, #1
 800bf5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	d9e0      	bls.n	800bf24 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bf62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d101      	bne.n	800bf6e <find_volume+0x1d2>
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e2a1      	b.n	800c4b2 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bf6e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d901      	bls.n	800bf7a <find_volume+0x1de>
 800bf76:	230d      	movs	r3, #13
 800bf78:	e29b      	b.n	800c4b2 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800bf7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	f040 8101 	bne.w	800c186 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800bf84:	230b      	movs	r3, #11
 800bf86:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf88:	e002      	b.n	800bf90 <find_volume+0x1f4>
 800bf8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bf90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf92:	2b3f      	cmp	r3, #63	; 0x3f
 800bf94:	d806      	bhi.n	800bfa4 <find_volume+0x208>
 800bf96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf9a:	4413      	add	r3, r2
 800bf9c:	333c      	adds	r3, #60	; 0x3c
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0f2      	beq.n	800bf8a <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800bfa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfa6:	2b3f      	cmp	r3, #63	; 0x3f
 800bfa8:	d801      	bhi.n	800bfae <find_volume+0x212>
 800bfaa:	230d      	movs	r3, #13
 800bfac:	e281      	b.n	800c4b2 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800bfae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb0:	333c      	adds	r3, #60	; 0x3c
 800bfb2:	3368      	adds	r3, #104	; 0x68
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fc fe1b 	bl	8008bf0 <ld_word>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc0:	d001      	beq.n	800bfc6 <find_volume+0x22a>
 800bfc2:	230d      	movs	r3, #13
 800bfc4:	e275      	b.n	800c4b2 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800bfcc:	461a      	mov	r2, r3
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4093      	lsls	r3, r2
 800bfd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bfd4:	8992      	ldrh	r2, [r2, #12]
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d001      	beq.n	800bfde <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800bfda:	230d      	movs	r3, #13
 800bfdc:	e269      	b.n	800c4b2 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800bfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe0:	333c      	adds	r3, #60	; 0x3c
 800bfe2:	3348      	adds	r3, #72	; 0x48
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fc fe3e 	bl	8008c66 <ld_qword>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bff0:	2000      	movs	r0, #0
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	60f8      	str	r0, [r7, #12]
 800bff6:	68b9      	ldr	r1, [r7, #8]
 800bff8:	1851      	adds	r1, r2, r1
 800bffa:	6039      	str	r1, [r7, #0]
 800bffc:	68f9      	ldr	r1, [r7, #12]
 800bffe:	eb43 0101 	adc.w	r1, r3, r1
 800c002:	6079      	str	r1, [r7, #4]
 800c004:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c008:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800c00c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c010:	2b01      	cmp	r3, #1
 800c012:	d301      	bcc.n	800c018 <find_volume+0x27c>
 800c014:	230d      	movs	r3, #13
 800c016:	e24c      	b.n	800c4b2 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800c018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01a:	333c      	adds	r3, #60	; 0x3c
 800c01c:	3354      	adds	r3, #84	; 0x54
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fc fdfe 	bl	8008c20 <ld_dword>
 800c024:	4602      	mov	r2, r0
 800c026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c028:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800c02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c02c:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800c030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c032:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800c034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c036:	789b      	ldrb	r3, [r3, #2]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d001      	beq.n	800c040 <find_volume+0x2a4>
 800c03c:	230d      	movs	r3, #13
 800c03e:	e238      	b.n	800c4b2 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800c040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c042:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800c046:	461a      	mov	r2, r3
 800c048:	2301      	movs	r3, #1
 800c04a:	4093      	lsls	r3, r2
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c050:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800c052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c054:	895b      	ldrh	r3, [r3, #10]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d104      	bne.n	800c064 <find_volume+0x2c8>
 800c05a:	230d      	movs	r3, #13
 800c05c:	e229      	b.n	800c4b2 <find_volume+0x716>
 800c05e:	bf00      	nop
 800c060:	200022c8 	.word	0x200022c8

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800c064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c066:	333c      	adds	r3, #60	; 0x3c
 800c068:	335c      	adds	r3, #92	; 0x5c
 800c06a:	4618      	mov	r0, r3
 800c06c:	f7fc fdd8 	bl	8008c20 <ld_dword>
 800c070:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800c072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c074:	4a99      	ldr	r2, [pc, #612]	; (800c2dc <find_volume+0x540>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d901      	bls.n	800c07e <find_volume+0x2e2>
 800c07a:	230d      	movs	r3, #13
 800c07c:	e219      	b.n	800c4b2 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c080:	1c9a      	adds	r2, r3, #2
 800c082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c084:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800c086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c088:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c08a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800c08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c08e:	333c      	adds	r3, #60	; 0x3c
 800c090:	3358      	adds	r3, #88	; 0x58
 800c092:	4618      	mov	r0, r3
 800c094:	f7fc fdc4 	bl	8008c20 <ld_dword>
 800c098:	4602      	mov	r2, r0
 800c09a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c09c:	441a      	add	r2, r3
 800c09e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a0:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800c0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a4:	333c      	adds	r3, #60	; 0x3c
 800c0a6:	3350      	adds	r3, #80	; 0x50
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fc fdb9 	bl	8008c20 <ld_dword>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0b2:	441a      	add	r2, r3
 800c0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0b6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800c0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0bc:	2200      	movs	r2, #0
 800c0be:	469a      	mov	sl, r3
 800c0c0:	4693      	mov	fp, r2
 800c0c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0c4:	895b      	ldrh	r3, [r3, #10]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ca:	fb02 f303 	mul.w	r3, r2, r3
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4698      	mov	r8, r3
 800c0d2:	4691      	mov	r9, r2
 800c0d4:	eb1a 0408 	adds.w	r4, sl, r8
 800c0d8:	eb4b 0509 	adc.w	r5, fp, r9
 800c0dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c0e0:	42a2      	cmp	r2, r4
 800c0e2:	41ab      	sbcs	r3, r5
 800c0e4:	d201      	bcs.n	800c0ea <find_volume+0x34e>
 800c0e6:	230d      	movs	r3, #13
 800c0e8:	e1e3      	b.n	800c4b2 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ec:	333c      	adds	r3, #60	; 0x3c
 800c0ee:	3360      	adds	r3, #96	; 0x60
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fc fd95 	bl	8008c20 <ld_dword>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800c0fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c100:	4619      	mov	r1, r3
 800c102:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c104:	f7fd fa26 	bl	8009554 <clust2sect>
 800c108:	4603      	mov	r3, r0
 800c10a:	4619      	mov	r1, r3
 800c10c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c10e:	f7fd f983 	bl	8009418 <move_window>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <find_volume+0x380>
 800c118:	2301      	movs	r3, #1
 800c11a:	e1ca      	b.n	800c4b2 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c11c:	2300      	movs	r3, #0
 800c11e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c120:	e015      	b.n	800c14e <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c122:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c126:	4413      	add	r3, r2
 800c128:	333c      	adds	r3, #60	; 0x3c
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b81      	cmp	r3, #129	; 0x81
 800c12e:	d10b      	bne.n	800c148 <find_volume+0x3ac>
 800c130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c132:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800c136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c138:	3314      	adds	r3, #20
 800c13a:	4413      	add	r3, r2
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7fc fd6f 	bl	8008c20 <ld_dword>
 800c142:	4603      	mov	r3, r0
 800c144:	2b02      	cmp	r3, #2
 800c146:	d009      	beq.n	800c15c <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800c148:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c14a:	3320      	adds	r3, #32
 800c14c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c14e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c150:	899b      	ldrh	r3, [r3, #12]
 800c152:	461a      	mov	r2, r3
 800c154:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c156:	4293      	cmp	r3, r2
 800c158:	d3e3      	bcc.n	800c122 <find_volume+0x386>
 800c15a:	e000      	b.n	800c15e <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800c15c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800c15e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c160:	899b      	ldrh	r3, [r3, #12]
 800c162:	461a      	mov	r2, r3
 800c164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c166:	4293      	cmp	r3, r2
 800c168:	d101      	bne.n	800c16e <find_volume+0x3d2>
 800c16a:	230d      	movs	r3, #13
 800c16c:	e1a1      	b.n	800c4b2 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c170:	f04f 32ff 	mov.w	r2, #4294967295
 800c174:	61da      	str	r2, [r3, #28]
 800c176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c178:	69da      	ldr	r2, [r3, #28]
 800c17a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c17c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800c17e:	2304      	movs	r3, #4
 800c180:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800c184:	e17d      	b.n	800c482 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c188:	333c      	adds	r3, #60	; 0x3c
 800c18a:	330b      	adds	r3, #11
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fc fd2f 	bl	8008bf0 <ld_word>
 800c192:	4603      	mov	r3, r0
 800c194:	461a      	mov	r2, r3
 800c196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c198:	899b      	ldrh	r3, [r3, #12]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d001      	beq.n	800c1a2 <find_volume+0x406>
 800c19e:	230d      	movs	r3, #13
 800c1a0:	e187      	b.n	800c4b2 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1a4:	333c      	adds	r3, #60	; 0x3c
 800c1a6:	3316      	adds	r3, #22
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7fc fd21 	bl	8008bf0 <ld_word>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c1b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <find_volume+0x42a>
 800c1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ba:	333c      	adds	r3, #60	; 0x3c
 800c1bc:	3324      	adds	r3, #36	; 0x24
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fc fd2e 	bl	8008c20 <ld_dword>
 800c1c4:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800c1c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1ca:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ce:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800c1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d8:	789b      	ldrb	r3, [r3, #2]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d005      	beq.n	800c1ea <find_volume+0x44e>
 800c1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1e0:	789b      	ldrb	r3, [r3, #2]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d001      	beq.n	800c1ea <find_volume+0x44e>
 800c1e6:	230d      	movs	r3, #13
 800c1e8:	e163      	b.n	800c4b2 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1ec:	789b      	ldrb	r3, [r3, #2]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1f2:	fb02 f303 	mul.w	r3, r2, r3
 800c1f6:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c1f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1fa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c202:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c206:	895b      	ldrh	r3, [r3, #10]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d008      	beq.n	800c21e <find_volume+0x482>
 800c20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c20e:	895b      	ldrh	r3, [r3, #10]
 800c210:	461a      	mov	r2, r3
 800c212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c214:	895b      	ldrh	r3, [r3, #10]
 800c216:	3b01      	subs	r3, #1
 800c218:	4013      	ands	r3, r2
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d001      	beq.n	800c222 <find_volume+0x486>
 800c21e:	230d      	movs	r3, #13
 800c220:	e147      	b.n	800c4b2 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c224:	333c      	adds	r3, #60	; 0x3c
 800c226:	3311      	adds	r3, #17
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fc fce1 	bl	8008bf0 <ld_word>
 800c22e:	4603      	mov	r3, r0
 800c230:	461a      	mov	r2, r3
 800c232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c234:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c238:	891b      	ldrh	r3, [r3, #8]
 800c23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c23c:	8992      	ldrh	r2, [r2, #12]
 800c23e:	0952      	lsrs	r2, r2, #5
 800c240:	b292      	uxth	r2, r2
 800c242:	fbb3 f1f2 	udiv	r1, r3, r2
 800c246:	fb01 f202 	mul.w	r2, r1, r2
 800c24a:	1a9b      	subs	r3, r3, r2
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <find_volume+0x4ba>
 800c252:	230d      	movs	r3, #13
 800c254:	e12d      	b.n	800c4b2 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c258:	333c      	adds	r3, #60	; 0x3c
 800c25a:	3313      	adds	r3, #19
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fc fcc7 	bl	8008bf0 <ld_word>
 800c262:	4603      	mov	r3, r0
 800c264:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <find_volume+0x4de>
 800c26c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c26e:	333c      	adds	r3, #60	; 0x3c
 800c270:	3320      	adds	r3, #32
 800c272:	4618      	mov	r0, r3
 800c274:	f7fc fcd4 	bl	8008c20 <ld_dword>
 800c278:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c27c:	333c      	adds	r3, #60	; 0x3c
 800c27e:	330e      	adds	r3, #14
 800c280:	4618      	mov	r0, r3
 800c282:	f7fc fcb5 	bl	8008bf0 <ld_word>
 800c286:	4603      	mov	r3, r0
 800c288:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c28c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <find_volume+0x4fc>
 800c294:	230d      	movs	r3, #13
 800c296:	e10c      	b.n	800c4b2 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c298:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c29c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c29e:	4413      	add	r3, r2
 800c2a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2a2:	8911      	ldrh	r1, [r2, #8]
 800c2a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2a6:	8992      	ldrh	r2, [r2, #12]
 800c2a8:	0952      	lsrs	r2, r2, #5
 800c2aa:	b292      	uxth	r2, r2
 800c2ac:	fbb1 f2f2 	udiv	r2, r1, r2
 800c2b0:	b292      	uxth	r2, r2
 800c2b2:	4413      	add	r3, r2
 800c2b4:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c2b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d201      	bcs.n	800c2c2 <find_volume+0x526>
 800c2be:	230d      	movs	r3, #13
 800c2c0:	e0f7      	b.n	800c4b2 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c2c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2c6:	1ad3      	subs	r3, r2, r3
 800c2c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2ca:	8952      	ldrh	r2, [r2, #10]
 800c2cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <find_volume+0x544>
 800c2d8:	230d      	movs	r3, #13
 800c2da:	e0ea      	b.n	800c4b2 <find_volume+0x716>
 800c2dc:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800c2e0:	2303      	movs	r3, #3
 800c2e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d802      	bhi.n	800c2f6 <find_volume+0x55a>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d802      	bhi.n	800c306 <find_volume+0x56a>
 800c300:	2301      	movs	r3, #1
 800c302:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c308:	1c9a      	adds	r2, r3, #2
 800c30a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c30c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800c30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c310:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c312:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c314:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800c318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c31a:	441a      	add	r2, r3
 800c31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c31e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800c320:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c324:	441a      	add	r2, r3
 800c326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c328:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800c32a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d11e      	bne.n	800c370 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c334:	333c      	adds	r3, #60	; 0x3c
 800c336:	332a      	adds	r3, #42	; 0x2a
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fc fc59 	bl	8008bf0 <ld_word>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <find_volume+0x5ac>
 800c344:	230d      	movs	r3, #13
 800c346:	e0b4      	b.n	800c4b2 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c34a:	891b      	ldrh	r3, [r3, #8]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <find_volume+0x5b8>
 800c350:	230d      	movs	r3, #13
 800c352:	e0ae      	b.n	800c4b2 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c356:	333c      	adds	r3, #60	; 0x3c
 800c358:	332c      	adds	r3, #44	; 0x2c
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fc fc60 	bl	8008c20 <ld_dword>
 800c360:	4602      	mov	r2, r0
 800c362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c364:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c36e:	e01f      	b.n	800c3b0 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c372:	891b      	ldrh	r3, [r3, #8]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <find_volume+0x5e0>
 800c378:	230d      	movs	r3, #13
 800c37a:	e09a      	b.n	800c4b2 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c382:	441a      	add	r2, r3
 800c384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c386:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c388:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c38c:	2b02      	cmp	r3, #2
 800c38e:	d103      	bne.n	800c398 <find_volume+0x5fc>
 800c390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c392:	6a1b      	ldr	r3, [r3, #32]
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	e00a      	b.n	800c3ae <find_volume+0x612>
 800c398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c39a:	6a1a      	ldr	r2, [r3, #32]
 800c39c:	4613      	mov	r3, r2
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	4413      	add	r3, r2
 800c3a2:	085a      	lsrs	r2, r3, #1
 800c3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	f003 0301 	and.w	r3, r3, #1
 800c3ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c3b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b6:	899b      	ldrh	r3, [r3, #12]
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c3bc:	440b      	add	r3, r1
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c3c2:	8989      	ldrh	r1, [r1, #12]
 800c3c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d201      	bcs.n	800c3d0 <find_volume+0x634>
 800c3cc:	230d      	movs	r3, #13
 800c3ce:	e070      	b.n	800c4b2 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d6:	61da      	str	r2, [r3, #28]
 800c3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3da:	69da      	ldr	r2, [r3, #28]
 800c3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3de:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800c3e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3e2:	2280      	movs	r2, #128	; 0x80
 800c3e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c3e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c3ea:	2b03      	cmp	r3, #3
 800c3ec:	d149      	bne.n	800c482 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3f0:	333c      	adds	r3, #60	; 0x3c
 800c3f2:	3330      	adds	r3, #48	; 0x30
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fc fbfb 	bl	8008bf0 <ld_word>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d140      	bne.n	800c482 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c402:	3301      	adds	r3, #1
 800c404:	4619      	mov	r1, r3
 800c406:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c408:	f7fd f806 	bl	8009418 <move_window>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d137      	bne.n	800c482 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800c412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c414:	2200      	movs	r2, #0
 800c416:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c41a:	333c      	adds	r3, #60	; 0x3c
 800c41c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c420:	4618      	mov	r0, r3
 800c422:	f7fc fbe5 	bl	8008bf0 <ld_word>
 800c426:	4603      	mov	r3, r0
 800c428:	461a      	mov	r2, r3
 800c42a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c42e:	429a      	cmp	r2, r3
 800c430:	d127      	bne.n	800c482 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c434:	333c      	adds	r3, #60	; 0x3c
 800c436:	4618      	mov	r0, r3
 800c438:	f7fc fbf2 	bl	8008c20 <ld_dword>
 800c43c:	4603      	mov	r3, r0
 800c43e:	4a1f      	ldr	r2, [pc, #124]	; (800c4bc <find_volume+0x720>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d11e      	bne.n	800c482 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c446:	333c      	adds	r3, #60	; 0x3c
 800c448:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fc fbe7 	bl	8008c20 <ld_dword>
 800c452:	4603      	mov	r3, r0
 800c454:	4a1a      	ldr	r2, [pc, #104]	; (800c4c0 <find_volume+0x724>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d113      	bne.n	800c482 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c45c:	333c      	adds	r3, #60	; 0x3c
 800c45e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c462:	4618      	mov	r0, r3
 800c464:	f7fc fbdc 	bl	8008c20 <ld_dword>
 800c468:	4602      	mov	r2, r0
 800c46a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c470:	333c      	adds	r3, #60	; 0x3c
 800c472:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c476:	4618      	mov	r0, r3
 800c478:	f7fc fbd2 	bl	8008c20 <ld_dword>
 800c47c:	4602      	mov	r2, r0
 800c47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c480:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c484:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800c488:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c48a:	4b0e      	ldr	r3, [pc, #56]	; (800c4c4 <find_volume+0x728>)
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	3301      	adds	r3, #1
 800c490:	b29a      	uxth	r2, r3
 800c492:	4b0c      	ldr	r3, [pc, #48]	; (800c4c4 <find_volume+0x728>)
 800c494:	801a      	strh	r2, [r3, #0]
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <find_volume+0x728>)
 800c498:	881a      	ldrh	r2, [r3, #0]
 800c49a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c49c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a0:	4a09      	ldr	r2, [pc, #36]	; (800c4c8 <find_volume+0x72c>)
 800c4a2:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800c4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4a6:	4a09      	ldr	r2, [pc, #36]	; (800c4cc <find_volume+0x730>)
 800c4a8:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c4aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c4ac:	f7fc ff4c 	bl	8009348 <clear_lock>
#endif
	return FR_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3770      	adds	r7, #112	; 0x70
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4bc:	41615252 	.word	0x41615252
 800c4c0:	61417272 	.word	0x61417272
 800c4c4:	200022cc 	.word	0x200022cc
 800c4c8:	20002550 	.word	0x20002550
 800c4cc:	200022f0 	.word	0x200022f0

0800c4d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c4da:	2309      	movs	r3, #9
 800c4dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01c      	beq.n	800c51e <validate+0x4e>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d018      	beq.n	800c51e <validate+0x4e>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d013      	beq.n	800c51e <validate+0x4e>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	889a      	ldrh	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	88db      	ldrh	r3, [r3, #6]
 800c500:	429a      	cmp	r2, r3
 800c502:	d10c      	bne.n	800c51e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fc fad2 	bl	8008ab4 <disk_status>
 800c510:	4603      	mov	r3, r0
 800c512:	f003 0301 	and.w	r3, r3, #1
 800c516:	2b00      	cmp	r3, #0
 800c518:	d101      	bne.n	800c51e <validate+0x4e>
			res = FR_OK;
 800c51a:	2300      	movs	r3, #0
 800c51c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d102      	bne.n	800c52a <validate+0x5a>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	e000      	b.n	800c52c <validate+0x5c>
 800c52a:	2300      	movs	r3, #0
 800c52c:	683a      	ldr	r2, [r7, #0]
 800c52e:	6013      	str	r3, [r2, #0]
	return res;
 800c530:	7bfb      	ldrb	r3, [r7, #15]
}
 800c532:	4618      	mov	r0, r3
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
	...

0800c53c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	4613      	mov	r3, r2
 800c548:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c54e:	f107 0310 	add.w	r3, r7, #16
 800c552:	4618      	mov	r0, r3
 800c554:	f7ff fb7a 	bl	800bc4c <get_ldnumber>
 800c558:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	da01      	bge.n	800c564 <f_mount+0x28>
 800c560:	230b      	movs	r3, #11
 800c562:	e02b      	b.n	800c5bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c564:	4a17      	ldr	r2, [pc, #92]	; (800c5c4 <f_mount+0x88>)
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d005      	beq.n	800c580 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c574:	69b8      	ldr	r0, [r7, #24]
 800c576:	f7fc fee7 	bl	8009348 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c57a:	69bb      	ldr	r3, [r7, #24]
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	490d      	ldr	r1, [pc, #52]	; (800c5c4 <f_mount+0x88>)
 800c590:	69fb      	ldr	r3, [r7, #28]
 800c592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <f_mount+0x66>
 800c59c:	79fb      	ldrb	r3, [r7, #7]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d001      	beq.n	800c5a6 <f_mount+0x6a>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e00a      	b.n	800c5bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c5a6:	f107 010c 	add.w	r1, r7, #12
 800c5aa:	f107 0308 	add.w	r3, r7, #8
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f7ff fbf3 	bl	800bd9c <find_volume>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3720      	adds	r7, #32
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	200022c8 	.word	0x200022c8

0800c5c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c5cc:	b0a8      	sub	sp, #160	; 0xa0
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6278      	str	r0, [r7, #36]	; 0x24
 800c5d2:	6239      	str	r1, [r7, #32]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <f_open+0x1a>
 800c5de:	2309      	movs	r3, #9
 800c5e0:	e2c0      	b.n	800cb64 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c5e2:	7ffb      	ldrb	r3, [r7, #31]
 800c5e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c5e8:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800c5ea:	7ffb      	ldrb	r3, [r7, #31]
 800c5ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800c5f0:	f107 0020 	add.w	r0, r7, #32
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f7ff fbd1 	bl	800bd9c <find_volume>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800c600:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 82a4 	bne.w	800cb52 <f_open+0x58a>
		dj.obj.fs = fs;
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800c614:	4619      	mov	r1, r3
 800c616:	4610      	mov	r0, r2
 800c618:	f7ff fa6a 	bl	800baf0 <follow_path>
 800c61c:	4603      	mov	r3, r0
 800c61e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c622:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c626:	2b00      	cmp	r3, #0
 800c628:	d11a      	bne.n	800c660 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c62a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800c62e:	b25b      	sxtb	r3, r3
 800c630:	2b00      	cmp	r3, #0
 800c632:	da03      	bge.n	800c63c <f_open+0x74>
				res = FR_INVALID_NAME;
 800c634:	2306      	movs	r3, #6
 800c636:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c63a:	e011      	b.n	800c660 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c63c:	7ffb      	ldrb	r3, [r7, #31]
 800c63e:	f023 0301 	bic.w	r3, r3, #1
 800c642:	2b00      	cmp	r3, #0
 800c644:	bf14      	ite	ne
 800c646:	2301      	movne	r3, #1
 800c648:	2300      	moveq	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	461a      	mov	r2, r3
 800c64e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7fc fd2f 	bl	80090b8 <chk_lock>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c660:	7ffb      	ldrb	r3, [r7, #31]
 800c662:	f003 031c 	and.w	r3, r3, #28
 800c666:	2b00      	cmp	r3, #0
 800c668:	f000 8117 	beq.w	800c89a <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800c66c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c670:	2b00      	cmp	r3, #0
 800c672:	d017      	beq.n	800c6a4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c674:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c678:	2b04      	cmp	r3, #4
 800c67a:	d10e      	bne.n	800c69a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c67c:	f7fc fd78 	bl	8009170 <enq_lock>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d006      	beq.n	800c694 <f_open+0xcc>
 800c686:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe fde2 	bl	800b254 <dir_register>
 800c690:	4603      	mov	r3, r0
 800c692:	e000      	b.n	800c696 <f_open+0xce>
 800c694:	2312      	movs	r3, #18
 800c696:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c69a:	7ffb      	ldrb	r3, [r7, #31]
 800c69c:	f043 0308 	orr.w	r3, r3, #8
 800c6a0:	77fb      	strb	r3, [r7, #31]
 800c6a2:	e011      	b.n	800c6c8 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c6a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c6a8:	f003 0311 	and.w	r3, r3, #17
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d003      	beq.n	800c6b8 <f_open+0xf0>
					res = FR_DENIED;
 800c6b0:	2307      	movs	r3, #7
 800c6b2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c6b6:	e007      	b.n	800c6c8 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c6b8:	7ffb      	ldrb	r3, [r7, #31]
 800c6ba:	f003 0304 	and.w	r3, r3, #4
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <f_open+0x100>
 800c6c2:	2308      	movs	r3, #8
 800c6c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c6c8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 8100 	bne.w	800c8d2 <f_open+0x30a>
 800c6d2:	7ffb      	ldrb	r3, [r7, #31]
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 80fa 	beq.w	800c8d2 <f_open+0x30a>
				dw = GET_FATTIME();
 800c6de:	f7f9 f8d9 	bl	8005894 <get_fattime>
 800c6e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b04      	cmp	r3, #4
 800c6ec:	f040 8085 	bne.w	800c7fa <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800c6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800c6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	3334      	adds	r3, #52	; 0x34
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fc fa8f 	bl	8008c20 <ld_dword>
 800c702:	4602      	mov	r2, r0
 800c704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c706:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	695b      	ldr	r3, [r3, #20]
 800c70c:	3338      	adds	r3, #56	; 0x38
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fc faa9 	bl	8008c66 <ld_qword>
 800c714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c716:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71c:	695b      	ldr	r3, [r3, #20]
 800c71e:	3321      	adds	r3, #33	; 0x21
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	f003 0302 	and.w	r3, r3, #2
 800c726:	b2db      	uxtb	r3, r3
 800c728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c72a:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72e:	2200      	movs	r2, #0
 800c730:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800c732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c734:	695b      	ldr	r3, [r3, #20]
 800c736:	3308      	adds	r3, #8
 800c738:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7fc fb88 	bl	8008e52 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	f103 0214 	add.w	r2, r3, #20
 800c74a:	2300      	movs	r3, #0
 800c74c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	330c      	adds	r3, #12
 800c754:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fc fb7a 	bl	8008e52 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	695b      	ldr	r3, [r3, #20]
 800c762:	f103 0215 	add.w	r2, r3, #21
 800c766:	2300      	movs	r3, #0
 800c768:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	1d1a      	adds	r2, r3, #4
 800c770:	2320      	movs	r3, #32
 800c772:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	695b      	ldr	r3, [r3, #20]
 800c778:	3334      	adds	r3, #52	; 0x34
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7fc fb68 	bl	8008e52 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800c782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c78a:	f04f 0200 	mov.w	r2, #0
 800c78e:	f04f 0300 	mov.w	r3, #0
 800c792:	4608      	mov	r0, r1
 800c794:	f7fc fb89 	bl	8008eaa <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c7a0:	f04f 0200 	mov.w	r2, #0
 800c7a4:	f04f 0300 	mov.w	r3, #0
 800c7a8:	4608      	mov	r0, r1
 800c7aa:	f7fc fb7e 	bl	8008eaa <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800c7ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7fe fa96 	bl	800acf0 <store_xdir>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800c7ca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d17f      	bne.n	800c8d2 <f_open+0x30a>
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d07b      	beq.n	800c8d2 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800c7da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	f7fd faa6 	bl	8009d34 <remove_chain>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800c7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	6193      	str	r3, [r2, #24]
 800c7f8:	e06b      	b.n	800c8d2 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c7fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7fc:	330e      	adds	r3, #14
 800c7fe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c802:	4618      	mov	r0, r3
 800c804:	f7fc fb25 	bl	8008e52 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c80a:	3316      	adds	r3, #22
 800c80c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c810:	4618      	mov	r0, r3
 800c812:	f7fc fb1e 	bl	8008e52 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c818:	f103 020b 	add.w	r2, r3, #11
 800c81c:	2320      	movs	r3, #32
 800c81e:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c824:	4619      	mov	r1, r3
 800c826:	4610      	mov	r0, r2
 800c828:	f7fd fe5b 	bl	800a4e2 <ld_clust>
 800c82c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c834:	2200      	movs	r2, #0
 800c836:	4619      	mov	r1, r3
 800c838:	f7fd fe72 	bl	800a520 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c83c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c83e:	331c      	adds	r3, #28
 800c840:	2100      	movs	r1, #0
 800c842:	4618      	mov	r0, r3
 800c844:	f7fc fb05 	bl	8008e52 <st_dword>
					fs->wflag = 1;
 800c848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84a:	2301      	movs	r3, #1
 800c84c:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c84e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c852:	2b00      	cmp	r3, #0
 800c854:	d03d      	beq.n	800c8d2 <f_open+0x30a>
						dw = fs->winsect;
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800c85e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c862:	2200      	movs	r2, #0
 800c864:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800c868:	4618      	mov	r0, r3
 800c86a:	f7fd fa63 	bl	8009d34 <remove_chain>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800c874:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d12a      	bne.n	800c8d2 <f_open+0x30a>
							res = move_window(fs, dw);
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc fdc8 	bl	8009418 <move_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c88e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c894:	3b01      	subs	r3, #1
 800c896:	6193      	str	r3, [r2, #24]
 800c898:	e01b      	b.n	800c8d2 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c89a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d117      	bne.n	800c8d2 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c8a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c8a6:	f003 0310 	and.w	r3, r3, #16
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <f_open+0x2ee>
					res = FR_NO_FILE;
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800c8b4:	e00d      	b.n	800c8d2 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c8b6:	7ffb      	ldrb	r3, [r7, #31]
 800c8b8:	f003 0302 	and.w	r3, r3, #2
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d008      	beq.n	800c8d2 <f_open+0x30a>
 800c8c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <f_open+0x30a>
						res = FR_DENIED;
 800c8cc:	2307      	movs	r3, #7
 800c8ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c8d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d128      	bne.n	800c92c <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c8da:	7ffb      	ldrb	r3, [r7, #31]
 800c8dc:	f003 0308 	and.w	r3, r3, #8
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d003      	beq.n	800c8ec <f_open+0x324>
				mode |= FA_MODIFIED;
 800c8e4:	7ffb      	ldrb	r3, [r7, #31]
 800c8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8ea:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800c8f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c8fa:	7ffb      	ldrb	r3, [r7, #31]
 800c8fc:	f023 0301 	bic.w	r3, r3, #1
 800c900:	2b00      	cmp	r3, #0
 800c902:	bf14      	ite	ne
 800c904:	2301      	movne	r3, #1
 800c906:	2300      	moveq	r3, #0
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	461a      	mov	r2, r3
 800c90c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c910:	4611      	mov	r1, r2
 800c912:	4618      	mov	r0, r3
 800c914:	f7fc fc4e 	bl	80091b4 <inc_lock>
 800c918:	4602      	mov	r2, r0
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c922:	2b00      	cmp	r3, #0
 800c924:	d102      	bne.n	800c92c <f_open+0x364>
 800c926:	2302      	movs	r3, #2
 800c928:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c92c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800c930:	2b00      	cmp	r3, #0
 800c932:	f040 810e 	bne.w	800cb52 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	2b04      	cmp	r3, #4
 800c93c:	d12d      	bne.n	800c99a <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800c93e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800c944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c948:	4613      	mov	r3, r2
 800c94a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c94e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c952:	431a      	orrs	r2, r3
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800c958:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	3334      	adds	r3, #52	; 0x34
 800c964:	4618      	mov	r0, r3
 800c966:	f7fc f95b 	bl	8008c20 <ld_dword>
 800c96a:	4602      	mov	r2, r0
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c972:	695b      	ldr	r3, [r3, #20]
 800c974:	3338      	adds	r3, #56	; 0x38
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc f975 	bl	8008c66 <ld_qword>
 800c97c:	4602      	mov	r2, r0
 800c97e:	460b      	mov	r3, r1
 800c980:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c982:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	3321      	adds	r3, #33	; 0x21
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	f003 0302 	and.w	r3, r3, #2
 800c992:	b2da      	uxtb	r2, r3
 800c994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c996:	71da      	strb	r2, [r3, #7]
 800c998:	e016      	b.n	800c9c8 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	f7fd fd9e 	bl	800a4e2 <ld_clust>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9aa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9ae:	331c      	adds	r3, #28
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fc f935 	bl	8008c20 <ld_dword>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	613b      	str	r3, [r7, #16]
 800c9bc:	617a      	str	r2, [r7, #20]
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c9c4:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	88da      	ldrh	r2, [r3, #6]
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	7ffa      	ldrb	r2, [r7, #31]
 800c9e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800c9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c9f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c9f4:	f04f 0200 	mov.w	r2, #0
 800c9f8:	f04f 0300 	mov.w	r3, #0
 800c9fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	3354      	adds	r3, #84	; 0x54
 800ca04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca08:	2100      	movs	r1, #0
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fc faf6 	bl	8008ffc <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ca10:	7ffb      	ldrb	r3, [r7, #31]
 800ca12:	f003 0320 	and.w	r3, r3, #32
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f000 809b 	beq.w	800cb52 <f_open+0x58a>
 800ca1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f000 8095 	beq.w	800cb52 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca30:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	895b      	ldrh	r3, [r3, #10]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3c:	899b      	ldrh	r3, [r3, #12]
 800ca3e:	fb02 f303 	mul.w	r3, r2, r3
 800ca42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ca46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ca54:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800ca58:	e023      	b.n	800caa2 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fc fd97 	bl	8009594 <get_fat>
 800ca66:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800ca6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d802      	bhi.n	800ca78 <f_open+0x4b0>
 800ca72:	2302      	movs	r3, #2
 800ca74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca80:	d102      	bne.n	800ca88 <f_open+0x4c0>
 800ca82:	2301      	movs	r3, #1
 800ca84:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4698      	mov	r8, r3
 800ca90:	4691      	mov	r9, r2
 800ca92:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ca96:	ebb2 0a08 	subs.w	sl, r2, r8
 800ca9a:	eb63 0b09 	sbc.w	fp, r3, r9
 800ca9e:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800caa2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10a      	bne.n	800cac0 <f_open+0x4f8>
 800caaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800caae:	2200      	movs	r2, #0
 800cab0:	461c      	mov	r4, r3
 800cab2:	4615      	mov	r5, r2
 800cab4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800cab8:	4294      	cmp	r4, r2
 800caba:	eb75 0303 	sbcs.w	r3, r5, r3
 800cabe:	d3cc      	bcc.n	800ca5a <f_open+0x492>
				}
				fp->clust = clst;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cac6:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cac8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d140      	bne.n	800cb52 <f_open+0x58a>
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	899b      	ldrh	r3, [r3, #12]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	2200      	movs	r2, #0
 800cad8:	60bb      	str	r3, [r7, #8]
 800cada:	60fa      	str	r2, [r7, #12]
 800cadc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800cae0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cae4:	f7f3 feea 	bl	80008bc <__aeabi_uldivmod>
 800cae8:	4313      	orrs	r3, r2
 800caea:	d032      	beq.n	800cb52 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fc fd2e 	bl	8009554 <clust2sect>
 800caf8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800cafc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d103      	bne.n	800cb0c <f_open+0x544>
						res = FR_INT_ERR;
 800cb04:	2302      	movs	r3, #2
 800cb06:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800cb0a:	e022      	b.n	800cb52 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	899b      	ldrh	r3, [r3, #12]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	2200      	movs	r2, #0
 800cb14:	603b      	str	r3, [r7, #0]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb1c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800cb20:	f7f3 fecc 	bl	80008bc <__aeabi_uldivmod>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cb2c:	441a      	add	r2, r3
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb34:	7858      	ldrb	r0, [r3, #1]
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb40:	2301      	movs	r3, #1
 800cb42:	f7fb fff7 	bl	8008b34 <disk_read>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d002      	beq.n	800cb52 <f_open+0x58a>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cb52:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <f_open+0x598>
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cb60:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	37a0      	adds	r7, #160	; 0xa0
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cb6e <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cb6e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb72:	b098      	sub	sp, #96	; 0x60
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb78:	62b9      	str	r1, [r7, #40]	; 0x28
 800cb7a:	627a      	str	r2, [r7, #36]	; 0x24
 800cb7c:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	64fb      	str	r3, [r7, #76]	; 0x4c


	*br = 0;	/* Clear read byte counter */
 800cb82:	6a3a      	ldr	r2, [r7, #32]
 800cb84:	2300      	movs	r3, #0
 800cb86:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cb88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4610      	mov	r0, r2
 800cb92:	f7ff fc9d 	bl	800c4d0 <validate>
 800cb96:	4603      	mov	r3, r0
 800cb98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d108      	bne.n	800cbb6 <f_read+0x48>
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cbae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <f_read+0x4e>
 800cbb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cbba:	e16b      	b.n	800ce94 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbc2:	f003 0301 	and.w	r3, r3, #1
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d101      	bne.n	800cbce <f_read+0x60>
 800cbca:	2307      	movs	r3, #7
 800cbcc:	e162      	b.n	800ce94 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cbda:	ebb0 0802 	subs.w	r8, r0, r2
 800cbde:	eb61 0903 	sbc.w	r9, r1, r3
 800cbe2:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe8:	2200      	movs	r2, #0
 800cbea:	461c      	mov	r4, r3
 800cbec:	4615      	mov	r5, r2
 800cbee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cbf2:	42a2      	cmp	r2, r4
 800cbf4:	41ab      	sbcs	r3, r5
 800cbf6:	f080 8148 	bcs.w	800ce8a <f_read+0x31c>
 800cbfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfc:	627b      	str	r3, [r7, #36]	; 0x24

	for ( ;  btr;								/* Repeat until all data read */
 800cbfe:	e144      	b.n	800ce8a <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	899b      	ldrh	r3, [r3, #12]
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	61bb      	str	r3, [r7, #24]
 800cc10:	61fa      	str	r2, [r7, #28]
 800cc12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc16:	f7f3 fe51 	bl	80008bc <__aeabi_uldivmod>
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	f040 80e9 	bne.w	800cdf2 <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc28:	899b      	ldrh	r3, [r3, #12]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	613b      	str	r3, [r7, #16]
 800cc30:	617a      	str	r2, [r7, #20]
 800cc32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc36:	f7f3 fe41 	bl	80008bc <__aeabi_uldivmod>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc40:	895b      	ldrh	r3, [r3, #10]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	4013      	ands	r3, r2
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 800cc48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d132      	bne.n	800ccb4 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc54:	4313      	orrs	r3, r2
 800cc56:	d103      	bne.n	800cc60 <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc5e:	e013      	b.n	800cc88 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cc6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc70:	f7fd fa15 	bl	800a09e <clmt_clust>
 800cc74:	65b8      	str	r0, [r7, #88]	; 0x58
 800cc76:	e007      	b.n	800cc88 <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cc78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f7fc fc87 	bl	8009594 <get_fat>
 800cc86:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cc88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d805      	bhi.n	800cc9a <f_read+0x12c>
 800cc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc90:	2202      	movs	r2, #2
 800cc92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cc96:	2302      	movs	r3, #2
 800cc98:	e0fc      	b.n	800ce94 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cc9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca0:	d105      	bne.n	800ccae <f_read+0x140>
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e0f2      	b.n	800ce94 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 800ccae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccb2:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ccb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	4619      	mov	r1, r3
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	f7fc fc49 	bl	8009554 <clust2sect>
 800ccc2:	63b8      	str	r0, [r7, #56]	; 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d105      	bne.n	800ccd6 <f_read+0x168>
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	2202      	movs	r2, #2
 800ccce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	e0de      	b.n	800ce94 <f_read+0x326>
			sect += csect;
 800ccd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccda:	4413      	add	r3, r2
 800ccdc:	63bb      	str	r3, [r7, #56]	; 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ccde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce0:	899b      	ldrh	r3, [r3, #12]
 800cce2:	461a      	mov	r2, r3
 800cce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccea:	653b      	str	r3, [r7, #80]	; 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ccec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d043      	beq.n	800cd7a <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ccf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccf6:	4413      	add	r3, r2
 800ccf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccfa:	8952      	ldrh	r2, [r2, #10]
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d905      	bls.n	800cd0c <f_read+0x19e>
					cc = fs->csize - csect;
 800cd00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd02:	895b      	ldrh	r3, [r3, #10]
 800cd04:	461a      	mov	r2, r3
 800cd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	653b      	str	r3, [r7, #80]	; 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd0e:	7858      	ldrb	r0, [r3, #1]
 800cd10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cd16:	f7fb ff0d 	bl	8008b34 <disk_read>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d005      	beq.n	800cd2c <f_read+0x1be>
 800cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd22:	2201      	movs	r2, #1
 800cd24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cd28:	2301      	movs	r3, #1
 800cd2a:	e0b3      	b.n	800ce94 <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd32:	b25b      	sxtb	r3, r3
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	da18      	bge.n	800cd6a <f_read+0x1fc>
 800cd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d911      	bls.n	800cd6a <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd50:	8992      	ldrh	r2, [r2, #12]
 800cd52:	fb02 f303 	mul.w	r3, r2, r3
 800cd56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd58:	18d0      	adds	r0, r2, r3
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd62:	899b      	ldrh	r3, [r3, #12]
 800cd64:	461a      	mov	r2, r3
 800cd66:	f7fc f928 	bl	8008fba <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	899b      	ldrh	r3, [r3, #12]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd72:	fb02 f303 	mul.w	r3, r2, r3
 800cd76:	657b      	str	r3, [r7, #84]	; 0x54
				continue;
 800cd78:	e067      	b.n	800ce4a <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d033      	beq.n	800cdec <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cd8a:	b25b      	sxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	da1b      	bge.n	800cdc8 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cd90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd92:	7858      	ldrb	r0, [r3, #1]
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd9e:	2301      	movs	r3, #1
 800cda0:	f7fb fee8 	bl	8008b74 <disk_write>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d005      	beq.n	800cdb6 <f_read+0x248>
 800cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e06e      	b.n	800ce94 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc0:	b2da      	uxtb	r2, r3
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdca:	7858      	ldrb	r0, [r3, #1]
 800cdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdd6:	f7fb fead 	bl	8008b34 <disk_read>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d005      	beq.n	800cdec <f_read+0x27e>
 800cde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cde8:	2301      	movs	r3, #1
 800cdea:	e053      	b.n	800ce94 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 800cdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cdf0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf4:	899b      	ldrh	r3, [r3, #12]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce00:	899b      	ldrh	r3, [r3, #12]
 800ce02:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce06:	fb01 f303 	mul.w	r3, r1, r3
 800ce0a:	1ad3      	subs	r3, r2, r3
 800ce0c:	1ac3      	subs	r3, r0, r3
 800ce0e:	657b      	str	r3, [r7, #84]	; 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ce10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d901      	bls.n	800ce1c <f_read+0x2ae>
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	657b      	str	r3, [r7, #84]	; 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ce28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2a:	899b      	ldrh	r3, [r3, #12]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	2200      	movs	r2, #0
 800ce30:	60bb      	str	r3, [r7, #8]
 800ce32:	60fa      	str	r2, [r7, #12]
 800ce34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce38:	f7f3 fd40 	bl	80008bc <__aeabi_uldivmod>
 800ce3c:	4613      	mov	r3, r2
 800ce3e:	4423      	add	r3, r4
 800ce40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce42:	4619      	mov	r1, r3
 800ce44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ce46:	f7fc f8b8 	bl	8008fba <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ce4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ce4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce4e:	4413      	add	r3, r2
 800ce50:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ce58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	468a      	mov	sl, r1
 800ce5e:	4683      	mov	fp, r0
 800ce60:	eb12 010a 	adds.w	r1, r2, sl
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	eb43 030b 	adc.w	r3, r3, fp
 800ce6a:	607b      	str	r3, [r7, #4]
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ce72:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800ce76:	6a3b      	ldr	r3, [r7, #32]
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce7c:	441a      	add	r2, r3
 800ce7e:	6a3b      	ldr	r3, [r7, #32]
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	627b      	str	r3, [r7, #36]	; 0x24
	for ( ;  btr;								/* Repeat until all data read */
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f47f aeb7 	bne.w	800cc00 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ce92:	2300      	movs	r3, #0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3760      	adds	r7, #96	; 0x60
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ce9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ce9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea2:	b091      	sub	sp, #68	; 0x44
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	61f8      	str	r0, [r7, #28]
 800cea8:	61b9      	str	r1, [r7, #24]
 800ceaa:	617a      	str	r2, [r7, #20]
 800ceac:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	f107 0220 	add.w	r2, r7, #32
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff fb05 	bl	800c4d0 <validate>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d108      	bne.n	800cee6 <f_write+0x48>
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ceda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cede:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <f_write+0x4e>
 800cee6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ceea:	e1aa      	b.n	800d242 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cef2:	f003 0302 	and.w	r3, r3, #2
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <f_write+0x60>
 800cefa:	2307      	movs	r3, #7
 800cefc:	e1a1      	b.n	800d242 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	f000 818d 	beq.w	800d222 <f_write+0x384>
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	18d1      	adds	r1, r2, r3
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cf18:	4613      	mov	r3, r2
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	f080 8181 	bcs.w	800d222 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cf26:	4613      	mov	r3, r2
 800cf28:	43db      	mvns	r3, r3
 800cf2a:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cf2c:	e179      	b.n	800d222 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	899b      	ldrh	r3, [r3, #12]
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	461d      	mov	r5, r3
 800cf3e:	4616      	mov	r6, r2
 800cf40:	462a      	mov	r2, r5
 800cf42:	4633      	mov	r3, r6
 800cf44:	f7f3 fcba 	bl	80008bc <__aeabi_uldivmod>
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	f040 810a 	bne.w	800d162 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	899b      	ldrh	r3, [r3, #12]
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	60bb      	str	r3, [r7, #8]
 800cf5e:	60fa      	str	r2, [r7, #12]
 800cf60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf64:	f7f3 fcaa 	bl	80008bc <__aeabi_uldivmod>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	895b      	ldrh	r3, [r3, #10]
 800cf70:	3b01      	subs	r3, #1
 800cf72:	4013      	ands	r3, r2
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800cf76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d146      	bne.n	800d00a <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cf82:	4313      	orrs	r3, r2
 800cf84:	d10c      	bne.n	800cfa0 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800cf8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d11a      	bne.n	800cfc8 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	2100      	movs	r1, #0
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fc ff80 	bl	8009e9c <create_chain>
 800cf9c:	63b8      	str	r0, [r7, #56]	; 0x38
 800cf9e:	e013      	b.n	800cfc8 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d007      	beq.n	800cfb8 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800cfae:	69f8      	ldr	r0, [r7, #28]
 800cfb0:	f7fd f875 	bl	800a09e <clmt_clust>
 800cfb4:	63b8      	str	r0, [r7, #56]	; 0x38
 800cfb6:	e007      	b.n	800cfc8 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800cfb8:	69fa      	ldr	r2, [r7, #28]
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7fc ff6b 	bl	8009e9c <create_chain>
 800cfc6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	f000 812e 	beq.w	800d22c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d105      	bne.n	800cfe2 <f_write+0x144>
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	2202      	movs	r2, #2
 800cfda:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cfde:	2302      	movs	r3, #2
 800cfe0:	e12f      	b.n	800d242 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe8:	d105      	bne.n	800cff6 <f_write+0x158>
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800cff2:	2301      	movs	r3, #1
 800cff4:	e125      	b.n	800d242 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cffa:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800cffc:	69fb      	ldr	r3, [r7, #28]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d102      	bne.n	800d00a <f_write+0x16c>
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d008:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d010:	b25b      	sxtb	r3, r3
 800d012:	2b00      	cmp	r3, #0
 800d014:	da1b      	bge.n	800d04e <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d016:	6a3b      	ldr	r3, [r7, #32]
 800d018:	7858      	ldrb	r0, [r3, #1]
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d024:	2301      	movs	r3, #1
 800d026:	f7fb fda5 	bl	8008b74 <disk_write>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d005      	beq.n	800d03c <f_write+0x19e>
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	2201      	movs	r2, #1
 800d034:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d038:	2301      	movs	r3, #1
 800d03a:	e102      	b.n	800d242 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d046:	b2da      	uxtb	r2, r3
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d04e:	6a3a      	ldr	r2, [r7, #32]
 800d050:	69fb      	ldr	r3, [r7, #28]
 800d052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d054:	4619      	mov	r1, r3
 800d056:	4610      	mov	r0, r2
 800d058:	f7fc fa7c 	bl	8009554 <clust2sect>
 800d05c:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	2b00      	cmp	r3, #0
 800d062:	d105      	bne.n	800d070 <f_write+0x1d2>
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	2202      	movs	r2, #2
 800d068:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d06c:	2302      	movs	r3, #2
 800d06e:	e0e8      	b.n	800d242 <f_write+0x3a4>
			sect += csect;
 800d070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	4413      	add	r3, r2
 800d076:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d078:	6a3b      	ldr	r3, [r7, #32]
 800d07a:	899b      	ldrh	r3, [r3, #12]
 800d07c:	461a      	mov	r2, r3
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	fbb3 f3f2 	udiv	r3, r3, r2
 800d084:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d046      	beq.n	800d11a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d08c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	4413      	add	r3, r2
 800d092:	6a3a      	ldr	r2, [r7, #32]
 800d094:	8952      	ldrh	r2, [r2, #10]
 800d096:	4293      	cmp	r3, r2
 800d098:	d905      	bls.n	800d0a6 <f_write+0x208>
					cc = fs->csize - csect;
 800d09a:	6a3b      	ldr	r3, [r7, #32]
 800d09c:	895b      	ldrh	r3, [r3, #10]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	7858      	ldrb	r0, [r3, #1]
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0b0:	f7fb fd60 	bl	8008b74 <disk_write>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <f_write+0x228>
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	e0bd      	b.n	800d242 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d0c6:	69fb      	ldr	r3, [r7, #28]
 800d0c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d91a      	bls.n	800d10a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d0d4:	69fb      	ldr	r3, [r7, #28]
 800d0d6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	6a3a      	ldr	r2, [r7, #32]
 800d0e4:	8992      	ldrh	r2, [r2, #12]
 800d0e6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0ec:	18d1      	adds	r1, r2, r3
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	899b      	ldrh	r3, [r3, #12]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	f7fb ff61 	bl	8008fba <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
 800d0fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d102:	b2da      	uxtb	r2, r3
 800d104:	69fb      	ldr	r3, [r7, #28]
 800d106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	899b      	ldrh	r3, [r3, #12]
 800d10e:	461a      	mov	r2, r3
 800d110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d112:	fb02 f303 	mul.w	r3, r2, r3
 800d116:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800d118:	e058      	b.n	800d1cc <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d11e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d120:	429a      	cmp	r2, r3
 800d122:	d01b      	beq.n	800d15c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d130:	4290      	cmp	r0, r2
 800d132:	eb71 0303 	sbcs.w	r3, r1, r3
 800d136:	d211      	bcs.n	800d15c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d138:	6a3b      	ldr	r3, [r7, #32]
 800d13a:	7858      	ldrb	r0, [r3, #1]
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d142:	2301      	movs	r3, #1
 800d144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d146:	f7fb fcf5 	bl	8008b34 <disk_read>
 800d14a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800d150:	69fb      	ldr	r3, [r7, #28]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d158:	2301      	movs	r3, #1
 800d15a:	e072      	b.n	800d242 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800d15c:	69fb      	ldr	r3, [r7, #28]
 800d15e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d160:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	899b      	ldrh	r3, [r3, #12]
 800d166:	4618      	mov	r0, r3
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d16e:	6a3b      	ldr	r3, [r7, #32]
 800d170:	899b      	ldrh	r3, [r3, #12]
 800d172:	fbb2 f1f3 	udiv	r1, r2, r3
 800d176:	fb01 f303 	mul.w	r3, r1, r3
 800d17a:	1ad3      	subs	r3, r2, r3
 800d17c:	1ac3      	subs	r3, r0, r3
 800d17e:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	429a      	cmp	r2, r3
 800d186:	d901      	bls.n	800d18c <f_write+0x2ee>
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800d192:	69fb      	ldr	r3, [r7, #28]
 800d194:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	899b      	ldrh	r3, [r3, #12]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	2200      	movs	r2, #0
 800d1a0:	603b      	str	r3, [r7, #0]
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1a8:	f7f3 fb88 	bl	80008bc <__aeabi_uldivmod>
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	4423      	add	r3, r4
 800d1b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7fb ff00 	bl	8008fba <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d1ba:	69fb      	ldr	r3, [r7, #28]
 800d1bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d1c4:	b2da      	uxtb	r2, r3
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d1cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	4413      	add	r3, r2
 800d1d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d1da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1dc:	2000      	movs	r0, #0
 800d1de:	4688      	mov	r8, r1
 800d1e0:	4681      	mov	r9, r0
 800d1e2:	eb12 0a08 	adds.w	sl, r2, r8
 800d1e6:	eb43 0b09 	adc.w	fp, r3, r9
 800d1ea:	69fb      	ldr	r3, [r7, #28]
 800d1ec:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800d1f6:	69fb      	ldr	r3, [r7, #28]
 800d1f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d1fc:	4290      	cmp	r0, r2
 800d1fe:	eb71 0403 	sbcs.w	r4, r1, r3
 800d202:	d201      	bcs.n	800d208 <f_write+0x36a>
 800d204:	4610      	mov	r0, r2
 800d206:	4619      	mov	r1, r3
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	441a      	add	r2, r3
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	f47f ae82 	bne.w	800cf2e <f_write+0x90>
 800d22a:	e000      	b.n	800d22e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d22c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3744      	adds	r7, #68	; 0x44
 800d246:	46bd      	mov	sp, r7
 800d248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d24c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b09a      	sub	sp, #104	; 0x68
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d25a:	4611      	mov	r1, r2
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7ff f937 	bl	800c4d0 <validate>
 800d262:	4603      	mov	r3, r0
 800d264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d268:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f040 8105 	bne.w	800d47c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 80fd 	beq.w	800d47c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d288:	b25b      	sxtb	r3, r3
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	da17      	bge.n	800d2be <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d28e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d290:	7858      	ldrb	r0, [r3, #1]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d29c:	2301      	movs	r3, #1
 800d29e:	f7fb fc69 	bl	8008b74 <disk_write>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <f_sync+0x60>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e0e9      	b.n	800d480 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d2be:	f7f8 fae9 	bl	8005894 <get_fattime>
 800d2c2:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d2c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	f040 808c 	bne.w	800d3e6 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fc fccf 	bl	8009c74 <fill_first_frag>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d2dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10a      	bne.n	800d2fa <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	f7fc fcef 	bl	8009cd2 <fill_last_frag>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800d2fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f040 80bc 	bne.w	800d47c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	4611      	mov	r1, r2
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fd fcb9 	bl	800ac84 <load_obj_dir>
 800d312:	4603      	mov	r3, r0
 800d314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800d318:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f040 80ad 	bne.w	800d47c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d324:	695b      	ldr	r3, [r3, #20]
 800d326:	3304      	adds	r3, #4
 800d328:	781a      	ldrb	r2, [r3, #0]
 800d32a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d32c:	695b      	ldr	r3, [r3, #20]
 800d32e:	3304      	adds	r3, #4
 800d330:	f042 0220 	orr.w	r2, r2, #32
 800d334:	b2d2      	uxtb	r2, r2
 800d336:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	79da      	ldrb	r2, [r3, #7]
 800d33c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	3321      	adds	r3, #33	; 0x21
 800d342:	f042 0201 	orr.w	r2, r2, #1
 800d346:	b2d2      	uxtb	r2, r2
 800d348:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800d34a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d34c:	695b      	ldr	r3, [r3, #20]
 800d34e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7fb fd7a 	bl	8008e52 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800d35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d36c:	4608      	mov	r0, r1
 800d36e:	f7fb fd9c 	bl	8008eaa <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800d372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d380:	4608      	mov	r0, r1
 800d382:	f7fb fd92 	bl	8008eaa <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800d386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	330c      	adds	r3, #12
 800d38c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fb fd5f 	bl	8008e52 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800d394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d396:	695b      	ldr	r3, [r3, #20]
 800d398:	3315      	adds	r3, #21
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800d39e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3a0:	695b      	ldr	r3, [r3, #20]
 800d3a2:	3310      	adds	r3, #16
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fb fd53 	bl	8008e52 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800d3ac:	f107 0308 	add.w	r3, r7, #8
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fd fc9d 	bl	800acf0 <store_xdir>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800d3bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d15b      	bne.n	800d47c <f_sync+0x230>
							res = sync_fs(fs);
 800d3c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fc f854 	bl	8009474 <sync_fs>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d3e4:	e04a      	b.n	800d47c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d3e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	f7fc f812 	bl	8009418 <move_window>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800d3fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d13c      	bne.n	800d47c <f_sync+0x230>
					dir = fp->dir_ptr;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d406:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d40a:	330b      	adds	r3, #11
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d410:	330b      	adds	r3, #11
 800d412:	f042 0220 	orr.w	r2, r2, #32
 800d416:	b2d2      	uxtb	r2, r2
 800d418:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6818      	ldr	r0, [r3, #0]
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	461a      	mov	r2, r3
 800d424:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d426:	f7fd f87b 	bl	800a520 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d42c:	f103 001c 	add.w	r0, r3, #28
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d436:	4613      	mov	r3, r2
 800d438:	4619      	mov	r1, r3
 800d43a:	f7fb fd0a 	bl	8008e52 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d440:	3316      	adds	r3, #22
 800d442:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d444:	4618      	mov	r0, r3
 800d446:	f7fb fd04 	bl	8008e52 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d44a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d44c:	3312      	adds	r3, #18
 800d44e:	2100      	movs	r1, #0
 800d450:	4618      	mov	r0, r3
 800d452:	f7fb fce3 	bl	8008e1c <st_word>
					fs->wflag = 1;
 800d456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d458:	2201      	movs	r2, #1
 800d45a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d45c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fc f808 	bl	8009474 <sync_fs>
 800d464:	4603      	mov	r3, r0
 800d466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d474:	b2da      	uxtb	r2, r3
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d47c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d480:	4618      	mov	r0, r3
 800d482:	3768      	adds	r7, #104	; 0x68
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7ff fedb 	bl	800d24c <f_sync>
 800d496:	4603      	mov	r3, r0
 800d498:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d49a:	7bfb      	ldrb	r3, [r7, #15]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d118      	bne.n	800d4d2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f107 0208 	add.w	r2, r7, #8
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff f811 	bl	800c4d0 <validate>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d4b2:	7bfb      	ldrb	r3, [r7, #15]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10c      	bne.n	800d4d2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fb ff07 	bl	80092d0 <dec_lock>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d102      	bne.n	800d4d2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3710      	adds	r7, #16
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b086      	sub	sp, #24
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <f_opendir+0x14>
 800d4ec:	2309      	movs	r3, #9
 800d4ee:	e09a      	b.n	800d626 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800d4f4:	f107 010c 	add.w	r1, r7, #12
 800d4f8:	463b      	mov	r3, r7
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fc4d 	bl	800bd9c <find_volume>
 800d502:	4603      	mov	r3, r0
 800d504:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d506:	7dfb      	ldrb	r3, [r7, #23]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f040 8085 	bne.w	800d618 <f_opendir+0x13c>
		obj->fs = fs;
 800d50e:	68fa      	ldr	r2, [r7, #12]
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	4619      	mov	r1, r3
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7fe fae9 	bl	800baf0 <follow_path>
 800d51e:	4603      	mov	r3, r0
 800d520:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800d522:	7dfb      	ldrb	r3, [r7, #23]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d172      	bne.n	800d60e <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d52e:	b25b      	sxtb	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	db47      	blt.n	800d5c4 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	799b      	ldrb	r3, [r3, #6]
 800d538:	f003 0310 	and.w	r3, r3, #16
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d03f      	beq.n	800d5c0 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b04      	cmp	r3, #4
 800d546:	d130      	bne.n	800d5aa <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	689a      	ldr	r2, [r3, #8]
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d556:	4613      	mov	r3, r2
 800d558:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d55c:	693a      	ldr	r2, [r7, #16]
 800d55e:	79d2      	ldrb	r2, [r2, #7]
 800d560:	431a      	orrs	r2, r3
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	695b      	ldr	r3, [r3, #20]
 800d572:	3334      	adds	r3, #52	; 0x34
 800d574:	4618      	mov	r0, r3
 800d576:	f7fb fb53 	bl	8008c20 <ld_dword>
 800d57a:	4602      	mov	r2, r0
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	695b      	ldr	r3, [r3, #20]
 800d584:	3338      	adds	r3, #56	; 0x38
 800d586:	4618      	mov	r0, r3
 800d588:	f7fb fb6d 	bl	8008c66 <ld_qword>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	6939      	ldr	r1, [r7, #16]
 800d592:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	695b      	ldr	r3, [r3, #20]
 800d59a:	3321      	adds	r3, #33	; 0x21
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	71da      	strb	r2, [r3, #7]
 800d5a8:	e00c      	b.n	800d5c4 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7fc ff95 	bl	800a4e2 <ld_clust>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	609a      	str	r2, [r3, #8]
 800d5be:	e001      	b.n	800d5c4 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d5c0:	2305      	movs	r3, #5
 800d5c2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800d5c4:	7dfb      	ldrb	r3, [r7, #23]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d121      	bne.n	800d60e <f_opendir+0x132>
				obj->id = fs->id;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	88da      	ldrh	r2, [r3, #6]
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7fc fdae 	bl	800a136 <dir_sdi>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d5de:	7dfb      	ldrb	r3, [r7, #23]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d114      	bne.n	800d60e <f_opendir+0x132>
					if (obj->sclust) {
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00d      	beq.n	800d608 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7fb fde0 	bl	80091b4 <inc_lock>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d105      	bne.n	800d60e <f_opendir+0x132>
 800d602:	2312      	movs	r3, #18
 800d604:	75fb      	strb	r3, [r7, #23]
 800d606:	e002      	b.n	800d60e <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	2200      	movs	r2, #0
 800d60c:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	2b04      	cmp	r3, #4
 800d612:	d101      	bne.n	800d618 <f_opendir+0x13c>
 800d614:	2305      	movs	r3, #5
 800d616:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d618:	7dfb      	ldrb	r3, [r7, #23]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d002      	beq.n	800d624 <f_opendir+0x148>
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	2200      	movs	r2, #0
 800d622:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d624:	7dfb      	ldrb	r3, [r7, #23]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3718      	adds	r7, #24
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b084      	sub	sp, #16
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f107 0208 	add.w	r2, r7, #8
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fe ff46 	bl	800c4d0 <validate>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d110      	bne.n	800d670 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d652:	2b00      	cmp	r3, #0
 800d654:	d006      	beq.n	800d664 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fb fe38 	bl	80092d0 <dec_lock>
 800d660:	4603      	mov	r3, r0
 800d662:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d102      	bne.n	800d670 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d670:	7bfb      	ldrb	r3, [r7, #15]
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
 800d682:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f107 0208 	add.w	r2, r7, #8
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe ff1f 	bl	800c4d0 <validate>
 800d692:	4603      	mov	r3, r0
 800d694:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d126      	bne.n	800d6ea <f_readdir+0x70>
		if (!fno) {
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d106      	bne.n	800d6b0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d6a2:	2100      	movs	r1, #0
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f7fc fd46 	bl	800a136 <dir_sdi>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73fb      	strb	r3, [r7, #15]
 800d6ae:	e01c      	b.n	800d6ea <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f7fd fbde 	bl	800ae74 <dir_read>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	2b04      	cmp	r3, #4
 800d6c0:	d101      	bne.n	800d6c6 <f_readdir+0x4c>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d10e      	bne.n	800d6ea <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fd ff6a 	bl	800b5a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7fc fdc1 	bl	800a25e <dir_next>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	d101      	bne.n	800d6ea <f_readdir+0x70>
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b098      	sub	sp, #96	; 0x60
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d6fe:	f107 0108 	add.w	r1, r7, #8
 800d702:	1d3b      	adds	r3, r7, #4
 800d704:	2200      	movs	r2, #0
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe fb48 	bl	800bd9c <find_volume>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d716:	2b00      	cmp	r3, #0
 800d718:	d11f      	bne.n	800d75a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	f107 0308 	add.w	r3, r7, #8
 800d720:	4611      	mov	r1, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe f9e4 	bl	800baf0 <follow_path>
 800d728:	4603      	mov	r3, r0
 800d72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800d72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d732:	2b00      	cmp	r3, #0
 800d734:	d111      	bne.n	800d75a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d736:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d73a:	b25b      	sxtb	r3, r3
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da03      	bge.n	800d748 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d740:	2306      	movs	r3, #6
 800d742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d746:	e008      	b.n	800d75a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <f_stat+0x66>
 800d74e:	f107 0308 	add.w	r3, r7, #8
 800d752:	6839      	ldr	r1, [r7, #0]
 800d754:	4618      	mov	r0, r3
 800d756:	f7fd ff27 	bl	800b5a8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d75a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3760      	adds	r7, #96	; 0x60
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b09a      	sub	sp, #104	; 0x68
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d772:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800d776:	f107 030c 	add.w	r3, r7, #12
 800d77a:	2200      	movs	r2, #0
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fe fb0d 	bl	800bd9c <find_volume>
 800d782:	4603      	mov	r3, r0
 800d784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800d788:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 80eb 	bne.w	800d968 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d79a:	69da      	ldr	r2, [r3, #28]
 800d79c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d79e:	6a1b      	ldr	r3, [r3, #32]
 800d7a0:	3b02      	subs	r3, #2
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d804      	bhi.n	800d7b0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7a8:	69da      	ldr	r2, [r3, #28]
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	e0db      	b.n	800d968 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	d128      	bne.n	800d80e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7c2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800d7c4:	f107 0310 	add.w	r3, r7, #16
 800d7c8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fb fee2 	bl	8009594 <get_fat>
 800d7d0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d7d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d8:	d103      	bne.n	800d7e2 <f_getfree+0x7c>
 800d7da:	2301      	movs	r3, #1
 800d7dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d7e0:	e0b5      	b.n	800d94e <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d103      	bne.n	800d7f0 <f_getfree+0x8a>
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d7ee:	e0ae      	b.n	800d94e <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800d7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d102      	bne.n	800d7fc <f_getfree+0x96>
 800d7f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800d7fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7fe:	3301      	adds	r3, #1
 800d800:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d808:	429a      	cmp	r2, r3
 800d80a:	d3db      	bcc.n	800d7c4 <f_getfree+0x5e>
 800d80c:	e09f      	b.n	800d94e <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800d80e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	2b04      	cmp	r3, #4
 800d814:	d14b      	bne.n	800d8ae <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800d816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	3b02      	subs	r3, #2
 800d81c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800d81e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d822:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10d      	bne.n	800d84a <f_getfree+0xe4>
 800d82e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d830:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d832:	1c5a      	adds	r2, r3, #1
 800d834:	65ba      	str	r2, [r7, #88]	; 0x58
 800d836:	4619      	mov	r1, r3
 800d838:	f7fb fdee 	bl	8009418 <move_window>
 800d83c:	4603      	mov	r3, r0
 800d83e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800d842:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d846:	2b00      	cmp	r3, #0
 800d848:	d17e      	bne.n	800d948 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d84a:	2308      	movs	r3, #8
 800d84c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d84e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d852:	4413      	add	r3, r2
 800d854:	333c      	adds	r3, #60	; 0x3c
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d85c:	e013      	b.n	800d886 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800d85e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d862:	f003 0301 	and.w	r3, r3, #1
 800d866:	2b00      	cmp	r3, #0
 800d868:	d102      	bne.n	800d870 <f_getfree+0x10a>
 800d86a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d86c:	3301      	adds	r3, #1
 800d86e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800d870:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d874:	085b      	lsrs	r3, r3, #1
 800d876:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800d87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d87c:	3b01      	subs	r3, #1
 800d87e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d882:	3b01      	subs	r3, #1
 800d884:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <f_getfree+0x12c>
 800d88c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d1e5      	bne.n	800d85e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800d892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d894:	3301      	adds	r3, #1
 800d896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d898:	8992      	ldrh	r2, [r2, #12]
 800d89a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d89e:	fb01 f202 	mul.w	r2, r1, r2
 800d8a2:	1a9b      	subs	r3, r3, r2
 800d8a4:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800d8a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1bd      	bne.n	800d828 <f_getfree+0xc2>
 800d8ac:	e04f      	b.n	800d94e <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d8ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b8:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	657b      	str	r3, [r7, #84]	; 0x54
 800d8be:	2300      	movs	r3, #0
 800d8c0:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800d8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d113      	bne.n	800d8f0 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800d8c8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8cc:	1c5a      	adds	r2, r3, #1
 800d8ce:	65ba      	str	r2, [r7, #88]	; 0x58
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	f7fb fda1 	bl	8009418 <move_window>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800d8dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d133      	bne.n	800d94c <f_getfree+0x1e6>
							p = fs->win;
 800d8e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8e6:	333c      	adds	r3, #60	; 0x3c
 800d8e8:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800d8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ec:	899b      	ldrh	r3, [r3, #12]
 800d8ee:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800d8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d10f      	bne.n	800d918 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800d8f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d8fa:	f7fb f979 	bl	8008bf0 <ld_word>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <f_getfree+0x1a4>
 800d904:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d906:	3301      	adds	r3, #1
 800d908:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800d90a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d90c:	3302      	adds	r3, #2
 800d90e:	653b      	str	r3, [r7, #80]	; 0x50
 800d910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d912:	3b02      	subs	r3, #2
 800d914:	657b      	str	r3, [r7, #84]	; 0x54
 800d916:	e010      	b.n	800d93a <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d918:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d91a:	f7fb f981 	bl	8008c20 <ld_dword>
 800d91e:	4603      	mov	r3, r0
 800d920:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d102      	bne.n	800d92e <f_getfree+0x1c8>
 800d928:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d92a:	3301      	adds	r3, #1
 800d92c:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800d92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d930:	3304      	adds	r3, #4
 800d932:	653b      	str	r3, [r7, #80]	; 0x50
 800d934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d936:	3b04      	subs	r3, #4
 800d938:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800d93a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d93c:	3b01      	subs	r3, #1
 800d93e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1bd      	bne.n	800d8c2 <f_getfree+0x15c>
 800d946:	e002      	b.n	800d94e <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800d948:	bf00      	nop
 800d94a:	e000      	b.n	800d94e <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800d94c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d952:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d958:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d95c:	791a      	ldrb	r2, [r3, #4]
 800d95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d960:	f042 0201 	orr.w	r2, r2, #1
 800d964:	b2d2      	uxtb	r2, r2
 800d966:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3768      	adds	r7, #104	; 0x68
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d974:	b5b0      	push	{r4, r5, r7, lr}
 800d976:	b0a0      	sub	sp, #128	; 0x80
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d97c:	f107 010c 	add.w	r1, r7, #12
 800d980:	1d3b      	adds	r3, r7, #4
 800d982:	2202      	movs	r2, #2
 800d984:	4618      	mov	r0, r3
 800d986:	f7fe fa09 	bl	800bd9c <find_volume>
 800d98a:	4603      	mov	r3, r0
 800d98c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800d994:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f040 8133 	bne.w	800dc04 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	f107 0310 	add.w	r3, r7, #16
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe f8a2 	bl	800baf0 <follow_path>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d9b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d102      	bne.n	800d9c0 <f_mkdir+0x4c>
 800d9ba:	2308      	movs	r3, #8
 800d9bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d9c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d9c4:	2b04      	cmp	r3, #4
 800d9c6:	f040 811d 	bne.w	800dc04 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d9ca:	f107 0310 	add.w	r3, r7, #16
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fc fa63 	bl	8009e9c <create_chain>
 800d9d6:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	895b      	ldrh	r3, [r3, #10]
 800d9dc:	461a      	mov	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	899b      	ldrh	r3, [r3, #12]
 800d9e2:	fb02 f303 	mul.w	r3, r2, r3
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	461c      	mov	r4, r3
 800d9ea:	4615      	mov	r5, r2
 800d9ec:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d9f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d102      	bne.n	800da02 <f_mkdir+0x8e>
 800d9fc:	2307      	movs	r3, #7
 800d9fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800da02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da04:	2b01      	cmp	r3, #1
 800da06:	d102      	bne.n	800da0e <f_mkdir+0x9a>
 800da08:	2302      	movs	r3, #2
 800da0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800da0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d102      	bne.n	800da1c <f_mkdir+0xa8>
 800da16:	2301      	movs	r3, #1
 800da18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800da1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da20:	2b00      	cmp	r3, #0
 800da22:	d106      	bne.n	800da32 <f_mkdir+0xbe>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fb fcb2 	bl	8009390 <sync_window>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800da32:	f7f7 ff2f 	bl	8005894 <get_fattime>
 800da36:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800da38:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d170      	bne.n	800db22 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800da44:	4618      	mov	r0, r3
 800da46:	f7fb fd85 	bl	8009554 <clust2sect>
 800da4a:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	333c      	adds	r3, #60	; 0x3c
 800da50:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	899b      	ldrh	r3, [r3, #12]
 800da56:	461a      	mov	r2, r3
 800da58:	2100      	movs	r1, #0
 800da5a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800da5c:	f7fb face 	bl	8008ffc <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	2b04      	cmp	r3, #4
 800da66:	d036      	beq.n	800dad6 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800da68:	220b      	movs	r2, #11
 800da6a:	2120      	movs	r1, #32
 800da6c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800da6e:	f7fb fac5 	bl	8008ffc <mem_set>
					dir[DIR_Name] = '.';
 800da72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da74:	222e      	movs	r2, #46	; 0x2e
 800da76:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800da78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da7a:	330b      	adds	r3, #11
 800da7c:	2210      	movs	r2, #16
 800da7e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800da80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da82:	3316      	adds	r3, #22
 800da84:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da86:	4618      	mov	r0, r3
 800da88:	f7fb f9e3 	bl	8008e52 <st_dword>
					st_clust(fs, dir, dcl);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800da90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800da92:	4618      	mov	r0, r3
 800da94:	f7fc fd44 	bl	800a520 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800da98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da9a:	3320      	adds	r3, #32
 800da9c:	2220      	movs	r2, #32
 800da9e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7fb fa8a 	bl	8008fba <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800daa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daa8:	3321      	adds	r3, #33	; 0x21
 800daaa:	222e      	movs	r2, #46	; 0x2e
 800daac:	701a      	strb	r2, [r3, #0]
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	2b03      	cmp	r3, #3
 800dab8:	d106      	bne.n	800dac8 <f_mkdir+0x154>
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d101      	bne.n	800dac8 <f_mkdir+0x154>
 800dac4:	2300      	movs	r3, #0
 800dac6:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dacc:	3320      	adds	r3, #32
 800dace:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dad0:	4619      	mov	r1, r3
 800dad2:	f7fc fd25 	bl	800a520 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	895b      	ldrh	r3, [r3, #10]
 800dada:	67bb      	str	r3, [r7, #120]	; 0x78
 800dadc:	e01c      	b.n	800db18 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800dade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	677a      	str	r2, [r7, #116]	; 0x74
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2201      	movs	r2, #1
 800daec:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fb fc4d 	bl	8009390 <sync_window>
 800daf6:	4603      	mov	r3, r0
 800daf8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800dafc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10d      	bne.n	800db20 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	899b      	ldrh	r3, [r3, #12]
 800db08:	461a      	mov	r2, r3
 800db0a:	2100      	movs	r1, #0
 800db0c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800db0e:	f7fb fa75 	bl	8008ffc <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800db12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db14:	3b01      	subs	r3, #1
 800db16:	67bb      	str	r3, [r7, #120]	; 0x78
 800db18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d1df      	bne.n	800dade <f_mkdir+0x16a>
 800db1e:	e000      	b.n	800db22 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800db20:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800db22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db26:	2b00      	cmp	r3, #0
 800db28:	d107      	bne.n	800db3a <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800db2a:	f107 0310 	add.w	r3, r7, #16
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fd fb90 	bl	800b254 <dir_register>
 800db34:	4603      	mov	r3, r0
 800db36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800db3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d159      	bne.n	800dbf6 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	2b04      	cmp	r3, #4
 800db48:	d134      	bne.n	800dbb4 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	330c      	adds	r3, #12
 800db50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db52:	4618      	mov	r0, r3
 800db54:	f7fb f97d 	bl	8008e52 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	695b      	ldr	r3, [r3, #20]
 800db5c:	3334      	adds	r3, #52	; 0x34
 800db5e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800db60:	4618      	mov	r0, r3
 800db62:	f7fb f976 	bl	8008e52 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	695b      	ldr	r3, [r3, #20]
 800db6a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800db6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800db72:	4613      	mov	r3, r2
 800db74:	4619      	mov	r1, r3
 800db76:	f7fb f96c 	bl	8008e52 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800db82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800db86:	4613      	mov	r3, r2
 800db88:	4619      	mov	r1, r3
 800db8a:	f7fb f962 	bl	8008e52 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	695b      	ldr	r3, [r3, #20]
 800db92:	3321      	adds	r3, #33	; 0x21
 800db94:	2203      	movs	r2, #3
 800db96:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	695b      	ldr	r3, [r3, #20]
 800db9c:	3304      	adds	r3, #4
 800db9e:	2210      	movs	r2, #16
 800dba0:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800dba2:	f107 0310 	add.w	r3, r7, #16
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fd f8a2 	bl	800acf0 <store_xdir>
 800dbac:	4603      	mov	r3, r0
 800dbae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dbb2:	e014      	b.n	800dbde <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800dbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb6:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800dbb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbba:	3316      	adds	r3, #22
 800dbbc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fb f947 	bl	8008e52 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dbc8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc fca8 	bl	800a520 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800dbd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbd2:	330b      	adds	r3, #11
 800dbd4:	2210      	movs	r2, #16
 800dbd6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800dbde:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d10e      	bne.n	800dc04 <f_mkdir+0x290>
					res = sync_fs(fs);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fb fc43 	bl	8009474 <sync_fs>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800dbf4:	e006      	b.n	800dc04 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800dbf6:	f107 0310 	add.w	r3, r7, #16
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fc f898 	bl	8009d34 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800dc04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3780      	adds	r7, #128	; 0x80
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bdb0      	pop	{r4, r5, r7, pc}

0800dc10 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b087      	sub	sp, #28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc22:	2300      	movs	r3, #0
 800dc24:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc26:	4b1f      	ldr	r3, [pc, #124]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc28:	7a5b      	ldrb	r3, [r3, #9]
 800dc2a:	b2db      	uxtb	r3, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d131      	bne.n	800dc94 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc30:	4b1c      	ldr	r3, [pc, #112]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc32:	7a5b      	ldrb	r3, [r3, #9]
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	461a      	mov	r2, r3
 800dc38:	4b1a      	ldr	r3, [pc, #104]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc3e:	4b19      	ldr	r3, [pc, #100]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc40:	7a5b      	ldrb	r3, [r3, #9]
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	4a17      	ldr	r2, [pc, #92]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	68fa      	ldr	r2, [r7, #12]
 800dc4c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc4e:	4b15      	ldr	r3, [pc, #84]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc50:	7a5b      	ldrb	r3, [r3, #9]
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	461a      	mov	r2, r3
 800dc56:	4b13      	ldr	r3, [pc, #76]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc58:	4413      	add	r3, r2
 800dc5a:	79fa      	ldrb	r2, [r7, #7]
 800dc5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc5e:	4b11      	ldr	r3, [pc, #68]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc60:	7a5b      	ldrb	r3, [r3, #9]
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	1c5a      	adds	r2, r3, #1
 800dc66:	b2d1      	uxtb	r1, r2
 800dc68:	4a0e      	ldr	r2, [pc, #56]	; (800dca4 <FATFS_LinkDriverEx+0x94>)
 800dc6a:	7251      	strb	r1, [r2, #9]
 800dc6c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc6e:	7dbb      	ldrb	r3, [r7, #22]
 800dc70:	3330      	adds	r3, #48	; 0x30
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	223a      	movs	r2, #58	; 0x3a
 800dc7e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	3302      	adds	r3, #2
 800dc84:	222f      	movs	r2, #47	; 0x2f
 800dc86:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	3303      	adds	r3, #3
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc90:	2300      	movs	r3, #0
 800dc92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	371c      	adds	r7, #28
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	20002750 	.word	0x20002750

0800dca8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7ff ffaa 	bl	800dc10 <FATFS_LinkDriverEx>
 800dcbc:	4603      	mov	r3, r0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
	...

0800dcc8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	4603      	mov	r3, r0
 800dcd0:	6039      	str	r1, [r7, #0]
 800dcd2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dcd4:	88fb      	ldrh	r3, [r7, #6]
 800dcd6:	2b7f      	cmp	r3, #127	; 0x7f
 800dcd8:	d802      	bhi.n	800dce0 <ff_convert+0x18>
		c = chr;
 800dcda:	88fb      	ldrh	r3, [r7, #6]
 800dcdc:	81fb      	strh	r3, [r7, #14]
 800dcde:	e025      	b.n	800dd2c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00b      	beq.n	800dcfe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dce6:	88fb      	ldrh	r3, [r7, #6]
 800dce8:	2bff      	cmp	r3, #255	; 0xff
 800dcea:	d805      	bhi.n	800dcf8 <ff_convert+0x30>
 800dcec:	88fb      	ldrh	r3, [r7, #6]
 800dcee:	3b80      	subs	r3, #128	; 0x80
 800dcf0:	4a12      	ldr	r2, [pc, #72]	; (800dd3c <ff_convert+0x74>)
 800dcf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcf6:	e000      	b.n	800dcfa <ff_convert+0x32>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	81fb      	strh	r3, [r7, #14]
 800dcfc:	e016      	b.n	800dd2c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dcfe:	2300      	movs	r3, #0
 800dd00:	81fb      	strh	r3, [r7, #14]
 800dd02:	e009      	b.n	800dd18 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dd04:	89fb      	ldrh	r3, [r7, #14]
 800dd06:	4a0d      	ldr	r2, [pc, #52]	; (800dd3c <ff_convert+0x74>)
 800dd08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd0c:	88fa      	ldrh	r2, [r7, #6]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d006      	beq.n	800dd20 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dd12:	89fb      	ldrh	r3, [r7, #14]
 800dd14:	3301      	adds	r3, #1
 800dd16:	81fb      	strh	r3, [r7, #14]
 800dd18:	89fb      	ldrh	r3, [r7, #14]
 800dd1a:	2b7f      	cmp	r3, #127	; 0x7f
 800dd1c:	d9f2      	bls.n	800dd04 <ff_convert+0x3c>
 800dd1e:	e000      	b.n	800dd22 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dd20:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dd22:	89fb      	ldrh	r3, [r7, #14]
 800dd24:	3380      	adds	r3, #128	; 0x80
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dd2c:	89fb      	ldrh	r3, [r7, #14]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3714      	adds	r7, #20
 800dd32:	46bd      	mov	sp, r7
 800dd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd38:	4770      	bx	lr
 800dd3a:	bf00      	nop
 800dd3c:	0800f590 	.word	0x0800f590

0800dd40 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dd4a:	88fb      	ldrh	r3, [r7, #6]
 800dd4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd50:	d201      	bcs.n	800dd56 <ff_wtoupper+0x16>
 800dd52:	4b3e      	ldr	r3, [pc, #248]	; (800de4c <ff_wtoupper+0x10c>)
 800dd54:	e000      	b.n	800dd58 <ff_wtoupper+0x18>
 800dd56:	4b3e      	ldr	r3, [pc, #248]	; (800de50 <ff_wtoupper+0x110>)
 800dd58:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	1c9a      	adds	r2, r3, #2
 800dd5e:	617a      	str	r2, [r7, #20]
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dd64:	8a7b      	ldrh	r3, [r7, #18]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d068      	beq.n	800de3c <ff_wtoupper+0xfc>
 800dd6a:	88fa      	ldrh	r2, [r7, #6]
 800dd6c:	8a7b      	ldrh	r3, [r7, #18]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d364      	bcc.n	800de3c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	1c9a      	adds	r2, r3, #2
 800dd76:	617a      	str	r2, [r7, #20]
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	823b      	strh	r3, [r7, #16]
 800dd7c:	8a3b      	ldrh	r3, [r7, #16]
 800dd7e:	0a1b      	lsrs	r3, r3, #8
 800dd80:	81fb      	strh	r3, [r7, #14]
 800dd82:	8a3b      	ldrh	r3, [r7, #16]
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dd88:	88fa      	ldrh	r2, [r7, #6]
 800dd8a:	8a79      	ldrh	r1, [r7, #18]
 800dd8c:	8a3b      	ldrh	r3, [r7, #16]
 800dd8e:	440b      	add	r3, r1
 800dd90:	429a      	cmp	r2, r3
 800dd92:	da49      	bge.n	800de28 <ff_wtoupper+0xe8>
			switch (cmd) {
 800dd94:	89fb      	ldrh	r3, [r7, #14]
 800dd96:	2b08      	cmp	r3, #8
 800dd98:	d84f      	bhi.n	800de3a <ff_wtoupper+0xfa>
 800dd9a:	a201      	add	r2, pc, #4	; (adr r2, 800dda0 <ff_wtoupper+0x60>)
 800dd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dda0:	0800ddc5 	.word	0x0800ddc5
 800dda4:	0800ddd7 	.word	0x0800ddd7
 800dda8:	0800dded 	.word	0x0800dded
 800ddac:	0800ddf5 	.word	0x0800ddf5
 800ddb0:	0800ddfd 	.word	0x0800ddfd
 800ddb4:	0800de05 	.word	0x0800de05
 800ddb8:	0800de0d 	.word	0x0800de0d
 800ddbc:	0800de15 	.word	0x0800de15
 800ddc0:	0800de1d 	.word	0x0800de1d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ddc4:	88fa      	ldrh	r2, [r7, #6]
 800ddc6:	8a7b      	ldrh	r3, [r7, #18]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	4413      	add	r3, r2
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	80fb      	strh	r3, [r7, #6]
 800ddd4:	e027      	b.n	800de26 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ddd6:	88fa      	ldrh	r2, [r7, #6]
 800ddd8:	8a7b      	ldrh	r3, [r7, #18]
 800ddda:	1ad3      	subs	r3, r2, r3
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	f003 0301 	and.w	r3, r3, #1
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	88fa      	ldrh	r2, [r7, #6]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	80fb      	strh	r3, [r7, #6]
 800ddea:	e01c      	b.n	800de26 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ddec:	88fb      	ldrh	r3, [r7, #6]
 800ddee:	3b10      	subs	r3, #16
 800ddf0:	80fb      	strh	r3, [r7, #6]
 800ddf2:	e018      	b.n	800de26 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	3b20      	subs	r3, #32
 800ddf8:	80fb      	strh	r3, [r7, #6]
 800ddfa:	e014      	b.n	800de26 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ddfc:	88fb      	ldrh	r3, [r7, #6]
 800ddfe:	3b30      	subs	r3, #48	; 0x30
 800de00:	80fb      	strh	r3, [r7, #6]
 800de02:	e010      	b.n	800de26 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800de04:	88fb      	ldrh	r3, [r7, #6]
 800de06:	3b1a      	subs	r3, #26
 800de08:	80fb      	strh	r3, [r7, #6]
 800de0a:	e00c      	b.n	800de26 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800de0c:	88fb      	ldrh	r3, [r7, #6]
 800de0e:	3308      	adds	r3, #8
 800de10:	80fb      	strh	r3, [r7, #6]
 800de12:	e008      	b.n	800de26 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800de14:	88fb      	ldrh	r3, [r7, #6]
 800de16:	3b50      	subs	r3, #80	; 0x50
 800de18:	80fb      	strh	r3, [r7, #6]
 800de1a:	e004      	b.n	800de26 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800de1c:	88fb      	ldrh	r3, [r7, #6]
 800de1e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800de22:	80fb      	strh	r3, [r7, #6]
 800de24:	bf00      	nop
			}
			break;
 800de26:	e008      	b.n	800de3a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800de28:	89fb      	ldrh	r3, [r7, #14]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d195      	bne.n	800dd5a <ff_wtoupper+0x1a>
 800de2e:	8a3b      	ldrh	r3, [r7, #16]
 800de30:	005b      	lsls	r3, r3, #1
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	4413      	add	r3, r2
 800de36:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800de38:	e78f      	b.n	800dd5a <ff_wtoupper+0x1a>
			break;
 800de3a:	bf00      	nop
	}

	return chr;
 800de3c:	88fb      	ldrh	r3, [r7, #6]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	371c      	adds	r7, #28
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	0800f690 	.word	0x0800f690
 800de50:	0800f884 	.word	0x0800f884

0800de54 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800de58:	2201      	movs	r2, #1
 800de5a:	490e      	ldr	r1, [pc, #56]	; (800de94 <MX_USB_HOST_Init+0x40>)
 800de5c:	480e      	ldr	r0, [pc, #56]	; (800de98 <MX_USB_HOST_Init+0x44>)
 800de5e:	f7f9 f9d5 	bl	800720c <USBH_Init>
 800de62:	4603      	mov	r3, r0
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800de68:	f7f3 fc56 	bl	8001718 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800de6c:	490b      	ldr	r1, [pc, #44]	; (800de9c <MX_USB_HOST_Init+0x48>)
 800de6e:	480a      	ldr	r0, [pc, #40]	; (800de98 <MX_USB_HOST_Init+0x44>)
 800de70:	f7f9 fa5a 	bl	8007328 <USBH_RegisterClass>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800de7a:	f7f3 fc4d 	bl	8001718 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800de7e:	4806      	ldr	r0, [pc, #24]	; (800de98 <MX_USB_HOST_Init+0x44>)
 800de80:	f7f9 fade 	bl	8007440 <USBH_Start>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d001      	beq.n	800de8e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de8a:	f7f3 fc45 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de8e:	bf00      	nop
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	0800deb5 	.word	0x0800deb5
 800de98:	2000275c 	.word	0x2000275c
 800de9c:	2000000c 	.word	0x2000000c

0800dea0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800dea4:	4802      	ldr	r0, [pc, #8]	; (800deb0 <MX_USB_HOST_Process+0x10>)
 800dea6:	f7f9 fadb 	bl	8007460 <USBH_Process>
}
 800deaa:	bf00      	nop
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	2000275c 	.word	0x2000275c

0800deb4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	460b      	mov	r3, r1
 800debe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800dec0:	78fb      	ldrb	r3, [r7, #3]
 800dec2:	3b01      	subs	r3, #1
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	d847      	bhi.n	800df58 <USBH_UserProcess+0xa4>
 800dec8:	a201      	add	r2, pc, #4	; (adr r2, 800ded0 <USBH_UserProcess+0x1c>)
 800deca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dece:	bf00      	nop
 800ded0:	0800df59 	.word	0x0800df59
 800ded4:	0800def1 	.word	0x0800def1
 800ded8:	0800df59 	.word	0x0800df59
 800dedc:	0800df51 	.word	0x0800df51
 800dee0:	0800dee5 	.word	0x0800dee5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800dee4:	4b1f      	ldr	r3, [pc, #124]	; (800df64 <USBH_UserProcess+0xb0>)
 800dee6:	2203      	movs	r2, #3
 800dee8:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800deea:	f7f2 fe9d 	bl	8000c28 <Unmount_USB>
  break;
 800deee:	e034      	b.n	800df5a <USBH_UserProcess+0xa6>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800def0:	4b1c      	ldr	r3, [pc, #112]	; (800df64 <USBH_UserProcess+0xb0>)
 800def2:	2202      	movs	r2, #2
 800def4:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 800def6:	f7f2 fe75 	bl	8000be4 <Mount_USB>
 Check_USB_Details();
 800defa:	f7f3 faa5 	bl	8001448 <Check_USB_Details>
 Scan_USB("/");
 800defe:	481a      	ldr	r0, [pc, #104]	; (800df68 <USBH_UserProcess+0xb4>)
 800df00:	f7f2 feb2 	bl	8000c68 <Scan_USB>
 Create_File("/STM32MASSSTORAGE.TXT");
 800df04:	4819      	ldr	r0, [pc, #100]	; (800df6c <USBH_UserProcess+0xb8>)
 800df06:	f7f3 f8eb 	bl	80010e0 <Create_File>
 Write_File("/STM32MASSSTORAGE.TXT", "Aplicacion Realizada en Clase");
 800df0a:	4919      	ldr	r1, [pc, #100]	; (800df70 <USBH_UserProcess+0xbc>)
 800df0c:	4817      	ldr	r0, [pc, #92]	; (800df6c <USBH_UserProcess+0xb8>)
 800df0e:	f7f2 ff51 	bl	8000db4 <Write_File>
Read_File("/STM32MASSSTORAGE.TXT");
 800df12:	4816      	ldr	r0, [pc, #88]	; (800df6c <USBH_UserProcess+0xb8>)
 800df14:	f7f3 f812 	bl	8000f3c <Read_File>

 Create_Dir("/STM32");
 800df18:	4816      	ldr	r0, [pc, #88]	; (800df74 <USBH_UserProcess+0xc0>)
 800df1a:	f7f3 fa55 	bl	80013c8 <Create_Dir>
 Create_File("/STM32/massDevice.TXT");
 800df1e:	4816      	ldr	r0, [pc, #88]	; (800df78 <USBH_UserProcess+0xc4>)
 800df20:	f7f3 f8de 	bl	80010e0 <Create_File>
  Write_File("/STM32/massDevice.TXT", "Primer Subdirectorio");
 800df24:	4915      	ldr	r1, [pc, #84]	; (800df7c <USBH_UserProcess+0xc8>)
 800df26:	4814      	ldr	r0, [pc, #80]	; (800df78 <USBH_UserProcess+0xc4>)
 800df28:	f7f2 ff44 	bl	8000db4 <Write_File>

  Create_Dir("/NXP");
 800df2c:	4814      	ldr	r0, [pc, #80]	; (800df80 <USBH_UserProcess+0xcc>)
 800df2e:	f7f3 fa4b 	bl	80013c8 <Create_Dir>
  Create_Dir("/NXP/Fredoom");
 800df32:	4814      	ldr	r0, [pc, #80]	; (800df84 <USBH_UserProcess+0xd0>)
 800df34:	f7f3 fa48 	bl	80013c8 <Create_Dir>
  Create_File("/NXP/Fredoom/mass.TXT");
 800df38:	4813      	ldr	r0, [pc, #76]	; (800df88 <USBH_UserProcess+0xd4>)
 800df3a:	f7f3 f8d1 	bl	80010e0 <Create_File>
   Write_File("/NXP/Fredoom/mass.TXT", "2do Subdirectorio");
 800df3e:	4913      	ldr	r1, [pc, #76]	; (800df8c <USBH_UserProcess+0xd8>)
 800df40:	4811      	ldr	r0, [pc, #68]	; (800df88 <USBH_UserProcess+0xd4>)
 800df42:	f7f2 ff37 	bl	8000db4 <Write_File>

   Update_File("/NXP/Fredoom/mass.TXT","Archivo Modificado a Pedido de Ricardo");
 800df46:	4912      	ldr	r1, [pc, #72]	; (800df90 <USBH_UserProcess+0xdc>)
 800df48:	480f      	ldr	r0, [pc, #60]	; (800df88 <USBH_UserProcess+0xd4>)
 800df4a:	f7f3 f965 	bl	8001218 <Update_File>
  break;
 800df4e:	e004      	b.n	800df5a <USBH_UserProcess+0xa6>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800df50:	4b04      	ldr	r3, [pc, #16]	; (800df64 <USBH_UserProcess+0xb0>)
 800df52:	2201      	movs	r2, #1
 800df54:	701a      	strb	r2, [r3, #0]
  break;
 800df56:	e000      	b.n	800df5a <USBH_UserProcess+0xa6>

  default:
  break;
 800df58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800df5a:	bf00      	nop
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20002b34 	.word	0x20002b34
 800df68:	0800f3f4 	.word	0x0800f3f4
 800df6c:	0800f3f8 	.word	0x0800f3f8
 800df70:	0800f410 	.word	0x0800f410
 800df74:	0800f430 	.word	0x0800f430
 800df78:	0800f438 	.word	0x0800f438
 800df7c:	0800f450 	.word	0x0800f450
 800df80:	0800f468 	.word	0x0800f468
 800df84:	0800f470 	.word	0x0800f470
 800df88:	0800f480 	.word	0x0800f480
 800df8c:	0800f498 	.word	0x0800f498
 800df90:	0800f4ac 	.word	0x0800f4ac

0800df94 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b08a      	sub	sp, #40	; 0x28
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df9c:	f107 0314 	add.w	r3, r7, #20
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	601a      	str	r2, [r3, #0]
 800dfa4:	605a      	str	r2, [r3, #4]
 800dfa6:	609a      	str	r2, [r3, #8]
 800dfa8:	60da      	str	r2, [r3, #12]
 800dfaa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dfb4:	d147      	bne.n	800e046 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	613b      	str	r3, [r7, #16]
 800dfba:	4b25      	ldr	r3, [pc, #148]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800dfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfbe:	4a24      	ldr	r2, [pc, #144]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800dfc0:	f043 0301 	orr.w	r3, r3, #1
 800dfc4:	6313      	str	r3, [r2, #48]	; 0x30
 800dfc6:	4b22      	ldr	r3, [pc, #136]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800dfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfca:	f003 0301 	and.w	r3, r3, #1
 800dfce:	613b      	str	r3, [r7, #16]
 800dfd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dfd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dfd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfe0:	f107 0314 	add.w	r3, r7, #20
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	481b      	ldr	r0, [pc, #108]	; (800e054 <HAL_HCD_MspInit+0xc0>)
 800dfe8:	f7f3 fe5a 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dfec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dff2:	2302      	movs	r3, #2
 800dff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dff6:	2300      	movs	r3, #0
 800dff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dffa:	2303      	movs	r3, #3
 800dffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dffe:	230a      	movs	r3, #10
 800e000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e002:	f107 0314 	add.w	r3, r7, #20
 800e006:	4619      	mov	r1, r3
 800e008:	4812      	ldr	r0, [pc, #72]	; (800e054 <HAL_HCD_MspInit+0xc0>)
 800e00a:	f7f3 fe49 	bl	8001ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e00e:	4b10      	ldr	r3, [pc, #64]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800e010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e012:	4a0f      	ldr	r2, [pc, #60]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800e014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e018:	6353      	str	r3, [r2, #52]	; 0x34
 800e01a:	2300      	movs	r3, #0
 800e01c:	60fb      	str	r3, [r7, #12]
 800e01e:	4b0c      	ldr	r3, [pc, #48]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800e020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e022:	4a0b      	ldr	r2, [pc, #44]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800e024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e028:	6453      	str	r3, [r2, #68]	; 0x44
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <HAL_HCD_MspInit+0xbc>)
 800e02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e02e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e036:	2200      	movs	r2, #0
 800e038:	2100      	movs	r1, #0
 800e03a:	2043      	movs	r0, #67	; 0x43
 800e03c:	f7f3 fdf9 	bl	8001c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e040:	2043      	movs	r0, #67	; 0x43
 800e042:	f7f3 fe12 	bl	8001c6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e046:	bf00      	nop
 800e048:	3728      	adds	r7, #40	; 0x28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	40023800 	.word	0x40023800
 800e054:	40020000 	.word	0x40020000

0800e058 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e066:	4618      	mov	r0, r3
 800e068:	f7f9 fdd9 	bl	8007c1e <USBH_LL_IncTimer>
}
 800e06c:	bf00      	nop
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e082:	4618      	mov	r0, r3
 800e084:	f7f9 fe11 	bl	8007caa <USBH_LL_Connect>
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f9 fe1a 	bl	8007cd8 <USBH_LL_Disconnect>
}
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b083      	sub	sp, #12
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70fb      	strb	r3, [r7, #3]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e0bc:	bf00      	nop
 800e0be:	370c      	adds	r7, #12
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c6:	4770      	bx	lr

0800e0c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7f9 fdcb 	bl	8007c72 <USBH_LL_PortEnabled>
}
 800e0dc:	bf00      	nop
 800e0de:	3708      	adds	r7, #8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7f9 fdcb 	bl	8007c8e <USBH_LL_PortDisabled>
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b082      	sub	sp, #8
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d12a      	bne.n	800e168 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e112:	4a18      	ldr	r2, [pc, #96]	; (800e174 <USBH_LL_Init+0x74>)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4a15      	ldr	r2, [pc, #84]	; (800e174 <USBH_LL_Init+0x74>)
 800e11e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e122:	4b14      	ldr	r3, [pc, #80]	; (800e174 <USBH_LL_Init+0x74>)
 800e124:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e128:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e12a:	4b12      	ldr	r3, [pc, #72]	; (800e174 <USBH_LL_Init+0x74>)
 800e12c:	2208      	movs	r2, #8
 800e12e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e130:	4b10      	ldr	r3, [pc, #64]	; (800e174 <USBH_LL_Init+0x74>)
 800e132:	2201      	movs	r2, #1
 800e134:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e136:	4b0f      	ldr	r3, [pc, #60]	; (800e174 <USBH_LL_Init+0x74>)
 800e138:	2200      	movs	r2, #0
 800e13a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e13c:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <USBH_LL_Init+0x74>)
 800e13e:	2202      	movs	r2, #2
 800e140:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <USBH_LL_Init+0x74>)
 800e144:	2200      	movs	r2, #0
 800e146:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e148:	480a      	ldr	r0, [pc, #40]	; (800e174 <USBH_LL_Init+0x74>)
 800e14a:	f7f3 ff46 	bl	8001fda <HAL_HCD_Init>
 800e14e:	4603      	mov	r3, r0
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e154:	f7f3 fae0 	bl	8001718 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e158:	4806      	ldr	r0, [pc, #24]	; (800e174 <USBH_LL_Init+0x74>)
 800e15a:	f7f4 fb2a 	bl	80027b2 <HAL_HCD_GetCurrentFrame>
 800e15e:	4603      	mov	r3, r0
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7f9 fd4c 	bl	8007c00 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	20002b38 	.word	0x20002b38

0800e178 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e18e:	4618      	mov	r0, r3
 800e190:	f7f4 fa99 	bl	80026c6 <HAL_HCD_Start>
 800e194:	4603      	mov	r3, r0
 800e196:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e198:	7bfb      	ldrb	r3, [r7, #15]
 800e19a:	4618      	mov	r0, r3
 800e19c:	f000 f99e 	bl	800e4dc <USBH_Get_USB_Status>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}

0800e1ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b084      	sub	sp, #16
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f4 faa1 	bl	800270c <HAL_HCD_Stop>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 f983 	bl	800e4dc <USBH_Get_USB_Status>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7f4 fae9 	bl	80027ce <HAL_HCD_GetCurrentSpeed>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b02      	cmp	r3, #2
 800e200:	d00c      	beq.n	800e21c <USBH_LL_GetSpeed+0x38>
 800e202:	2b02      	cmp	r3, #2
 800e204:	d80d      	bhi.n	800e222 <USBH_LL_GetSpeed+0x3e>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <USBH_LL_GetSpeed+0x2c>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d003      	beq.n	800e216 <USBH_LL_GetSpeed+0x32>
 800e20e:	e008      	b.n	800e222 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e210:	2300      	movs	r3, #0
 800e212:	73fb      	strb	r3, [r7, #15]
    break;
 800e214:	e008      	b.n	800e228 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e216:	2301      	movs	r3, #1
 800e218:	73fb      	strb	r3, [r7, #15]
    break;
 800e21a:	e005      	b.n	800e228 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e21c:	2302      	movs	r3, #2
 800e21e:	73fb      	strb	r3, [r7, #15]
    break;
 800e220:	e002      	b.n	800e228 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e222:	2301      	movs	r3, #1
 800e224:	73fb      	strb	r3, [r7, #15]
    break;
 800e226:	bf00      	nop
  }
  return  speed;
 800e228:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e23e:	2300      	movs	r3, #0
 800e240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e248:	4618      	mov	r0, r3
 800e24a:	f7f4 fa7c 	bl	8002746 <HAL_HCD_ResetPort>
 800e24e:	4603      	mov	r3, r0
 800e250:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	4618      	mov	r0, r3
 800e256:	f000 f941 	bl	800e4dc <USBH_Get_USB_Status>
 800e25a:	4603      	mov	r3, r0
 800e25c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3710      	adds	r7, #16
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e27a:	78fa      	ldrb	r2, [r7, #3]
 800e27c:	4611      	mov	r1, r2
 800e27e:	4618      	mov	r0, r3
 800e280:	f7f4 fa83 	bl	800278a <HAL_HCD_HC_GetXferCount>
 800e284:	4603      	mov	r3, r0
}
 800e286:	4618      	mov	r0, r3
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e28e:	b590      	push	{r4, r7, lr}
 800e290:	b089      	sub	sp, #36	; 0x24
 800e292:	af04      	add	r7, sp, #16
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	4608      	mov	r0, r1
 800e298:	4611      	mov	r1, r2
 800e29a:	461a      	mov	r2, r3
 800e29c:	4603      	mov	r3, r0
 800e29e:	70fb      	strb	r3, [r7, #3]
 800e2a0:	460b      	mov	r3, r1
 800e2a2:	70bb      	strb	r3, [r7, #2]
 800e2a4:	4613      	mov	r3, r2
 800e2a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e2b6:	787c      	ldrb	r4, [r7, #1]
 800e2b8:	78ba      	ldrb	r2, [r7, #2]
 800e2ba:	78f9      	ldrb	r1, [r7, #3]
 800e2bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e2be:	9302      	str	r3, [sp, #8]
 800e2c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e2c4:	9301      	str	r3, [sp, #4]
 800e2c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4623      	mov	r3, r4
 800e2ce:	f7f3 fee6 	bl	800209e <HAL_HCD_HC_Init>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f000 f8ff 	bl	800e4dc <USBH_Get_USB_Status>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd90      	pop	{r4, r7, pc}

0800e2ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e306:	78fa      	ldrb	r2, [r7, #3]
 800e308:	4611      	mov	r1, r2
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7f3 ff56 	bl	80021bc <HAL_HCD_HC_Halt>
 800e310:	4603      	mov	r3, r0
 800e312:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	4618      	mov	r0, r3
 800e318:	f000 f8e0 	bl	800e4dc <USBH_Get_USB_Status>
 800e31c:	4603      	mov	r3, r0
 800e31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e320:	7bbb      	ldrb	r3, [r7, #14]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e32a:	b590      	push	{r4, r7, lr}
 800e32c:	b089      	sub	sp, #36	; 0x24
 800e32e:	af04      	add	r7, sp, #16
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	4608      	mov	r0, r1
 800e334:	4611      	mov	r1, r2
 800e336:	461a      	mov	r2, r3
 800e338:	4603      	mov	r3, r0
 800e33a:	70fb      	strb	r3, [r7, #3]
 800e33c:	460b      	mov	r3, r1
 800e33e:	70bb      	strb	r3, [r7, #2]
 800e340:	4613      	mov	r3, r2
 800e342:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e352:	787c      	ldrb	r4, [r7, #1]
 800e354:	78ba      	ldrb	r2, [r7, #2]
 800e356:	78f9      	ldrb	r1, [r7, #3]
 800e358:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e35c:	9303      	str	r3, [sp, #12]
 800e35e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e360:	9302      	str	r3, [sp, #8]
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	4623      	mov	r3, r4
 800e36e:	f7f3 ff49 	bl	8002204 <HAL_HCD_HC_SubmitRequest>
 800e372:	4603      	mov	r3, r0
 800e374:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e376:	7bfb      	ldrb	r3, [r7, #15]
 800e378:	4618      	mov	r0, r3
 800e37a:	f000 f8af 	bl	800e4dc <USBH_Get_USB_Status>
 800e37e:	4603      	mov	r3, r0
 800e380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e382:	7bbb      	ldrb	r3, [r7, #14]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3714      	adds	r7, #20
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd90      	pop	{r4, r7, pc}

0800e38c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e39e:	78fa      	ldrb	r2, [r7, #3]
 800e3a0:	4611      	mov	r1, r2
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7f4 f9dd 	bl	8002762 <HAL_HCD_HC_GetURBState>
 800e3a8:	4603      	mov	r3, r0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	d103      	bne.n	800e3d2 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e3ca:	78fb      	ldrb	r3, [r7, #3]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f000 f8b1 	bl	800e534 <MX_DriverVbusFS>
  }

  if (state == 1) {
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d105      	bne.n	800e3e4 <USBH_LL_DriverVBUS+0x30>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800e3d8:	2200      	movs	r2, #0
 800e3da:	2101      	movs	r1, #1
 800e3dc:	4808      	ldr	r0, [pc, #32]	; (800e400 <USBH_LL_DriverVBUS+0x4c>)
 800e3de:	f7f3 fde3 	bl	8001fa8 <HAL_GPIO_WritePin>
 800e3e2:	e004      	b.n	800e3ee <USBH_LL_DriverVBUS+0x3a>
}else{

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	2101      	movs	r1, #1
 800e3e8:	4805      	ldr	r0, [pc, #20]	; (800e400 <USBH_LL_DriverVBUS+0x4c>)
 800e3ea:	f7f3 fddd 	bl	8001fa8 <HAL_GPIO_WritePin>
}
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e3ee:	20c8      	movs	r0, #200	; 0xc8
 800e3f0:	f7f3 fb20 	bl	8001a34 <HAL_Delay>
  return USBH_OK;
 800e3f4:	2300      	movs	r3, #0
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3708      	adds	r7, #8
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	bd80      	pop	{r7, pc}
 800e3fe:	bf00      	nop
 800e400:	40020800 	.word	0x40020800

0800e404 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
 800e410:	4613      	mov	r3, r2
 800e412:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e41a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	212c      	movs	r1, #44	; 0x2c
 800e422:	fb01 f303 	mul.w	r3, r1, r3
 800e426:	4413      	add	r3, r2
 800e428:	333b      	adds	r3, #59	; 0x3b
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d009      	beq.n	800e444 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	68fa      	ldr	r2, [r7, #12]
 800e434:	212c      	movs	r1, #44	; 0x2c
 800e436:	fb01 f303 	mul.w	r3, r1, r3
 800e43a:	4413      	add	r3, r2
 800e43c:	3354      	adds	r3, #84	; 0x54
 800e43e:	78ba      	ldrb	r2, [r7, #2]
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	e008      	b.n	800e456 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	68fa      	ldr	r2, [r7, #12]
 800e448:	212c      	movs	r1, #44	; 0x2c
 800e44a:	fb01 f303 	mul.w	r3, r1, r3
 800e44e:	4413      	add	r3, r2
 800e450:	3355      	adds	r3, #85	; 0x55
 800e452:	78ba      	ldrb	r2, [r7, #2]
 800e454:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	460b      	mov	r3, r1
 800e46e:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e470:	2300      	movs	r3, #0
 800e472:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e47a:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	68ba      	ldr	r2, [r7, #8]
 800e480:	212c      	movs	r1, #44	; 0x2c
 800e482:	fb01 f303 	mul.w	r3, r1, r3
 800e486:	4413      	add	r3, r2
 800e488:	333b      	adds	r3, #59	; 0x3b
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d009      	beq.n	800e4a4 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e490:	78fb      	ldrb	r3, [r7, #3]
 800e492:	68ba      	ldr	r2, [r7, #8]
 800e494:	212c      	movs	r1, #44	; 0x2c
 800e496:	fb01 f303 	mul.w	r3, r1, r3
 800e49a:	4413      	add	r3, r2
 800e49c:	3354      	adds	r3, #84	; 0x54
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	73fb      	strb	r3, [r7, #15]
 800e4a2:	e008      	b.n	800e4b6 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e4a4:	78fb      	ldrb	r3, [r7, #3]
 800e4a6:	68ba      	ldr	r2, [r7, #8]
 800e4a8:	212c      	movs	r1, #44	; 0x2c
 800e4aa:	fb01 f303 	mul.w	r3, r1, r3
 800e4ae:	4413      	add	r3, r2
 800e4b0:	3355      	adds	r3, #85	; 0x55
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e4b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3714      	adds	r7, #20
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f7f3 fab1 	bl	8001a34 <HAL_Delay>
}
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
	...

0800e4dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4ea:	79fb      	ldrb	r3, [r7, #7]
 800e4ec:	2b03      	cmp	r3, #3
 800e4ee:	d817      	bhi.n	800e520 <USBH_Get_USB_Status+0x44>
 800e4f0:	a201      	add	r2, pc, #4	; (adr r2, 800e4f8 <USBH_Get_USB_Status+0x1c>)
 800e4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f6:	bf00      	nop
 800e4f8:	0800e509 	.word	0x0800e509
 800e4fc:	0800e50f 	.word	0x0800e50f
 800e500:	0800e515 	.word	0x0800e515
 800e504:	0800e51b 	.word	0x0800e51b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e508:	2300      	movs	r3, #0
 800e50a:	73fb      	strb	r3, [r7, #15]
    break;
 800e50c:	e00b      	b.n	800e526 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e50e:	2302      	movs	r3, #2
 800e510:	73fb      	strb	r3, [r7, #15]
    break;
 800e512:	e008      	b.n	800e526 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e514:	2301      	movs	r3, #1
 800e516:	73fb      	strb	r3, [r7, #15]
    break;
 800e518:	e005      	b.n	800e526 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e51a:	2302      	movs	r3, #2
 800e51c:	73fb      	strb	r3, [r7, #15]
    break;
 800e51e:	e002      	b.n	800e526 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e520:	2302      	movs	r3, #2
 800e522:	73fb      	strb	r3, [r7, #15]
    break;
 800e524:	bf00      	nop
  }
  return usb_status;
 800e526:	7bfb      	ldrb	r3, [r7, #15]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b084      	sub	sp, #16
 800e538:	af00      	add	r7, sp, #0
 800e53a:	4603      	mov	r3, r0
 800e53c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d102      	bne.n	800e54e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e548:	2300      	movs	r3, #0
 800e54a:	73fb      	strb	r3, [r7, #15]
 800e54c:	e001      	b.n	800e552 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e54e:	2301      	movs	r3, #1
 800e550:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e552:	7bfb      	ldrb	r3, [r7, #15]
 800e554:	461a      	mov	r2, r3
 800e556:	2101      	movs	r1, #1
 800e558:	4803      	ldr	r0, [pc, #12]	; (800e568 <MX_DriverVbusFS+0x34>)
 800e55a:	f7f3 fd25 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 800e55e:	bf00      	nop
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	40020800 	.word	0x40020800

0800e56c <malloc>:
 800e56c:	4b02      	ldr	r3, [pc, #8]	; (800e578 <malloc+0xc>)
 800e56e:	4601      	mov	r1, r0
 800e570:	6818      	ldr	r0, [r3, #0]
 800e572:	f000 b82b 	b.w	800e5cc <_malloc_r>
 800e576:	bf00      	nop
 800e578:	20000078 	.word	0x20000078

0800e57c <free>:
 800e57c:	4b02      	ldr	r3, [pc, #8]	; (800e588 <free+0xc>)
 800e57e:	4601      	mov	r1, r0
 800e580:	6818      	ldr	r0, [r3, #0]
 800e582:	f000 b921 	b.w	800e7c8 <_free_r>
 800e586:	bf00      	nop
 800e588:	20000078 	.word	0x20000078

0800e58c <sbrk_aligned>:
 800e58c:	b570      	push	{r4, r5, r6, lr}
 800e58e:	4e0e      	ldr	r6, [pc, #56]	; (800e5c8 <sbrk_aligned+0x3c>)
 800e590:	460c      	mov	r4, r1
 800e592:	6831      	ldr	r1, [r6, #0]
 800e594:	4605      	mov	r5, r0
 800e596:	b911      	cbnz	r1, 800e59e <sbrk_aligned+0x12>
 800e598:	f000 f8cc 	bl	800e734 <_sbrk_r>
 800e59c:	6030      	str	r0, [r6, #0]
 800e59e:	4621      	mov	r1, r4
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	f000 f8c7 	bl	800e734 <_sbrk_r>
 800e5a6:	1c43      	adds	r3, r0, #1
 800e5a8:	d00a      	beq.n	800e5c0 <sbrk_aligned+0x34>
 800e5aa:	1cc4      	adds	r4, r0, #3
 800e5ac:	f024 0403 	bic.w	r4, r4, #3
 800e5b0:	42a0      	cmp	r0, r4
 800e5b2:	d007      	beq.n	800e5c4 <sbrk_aligned+0x38>
 800e5b4:	1a21      	subs	r1, r4, r0
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	f000 f8bc 	bl	800e734 <_sbrk_r>
 800e5bc:	3001      	adds	r0, #1
 800e5be:	d101      	bne.n	800e5c4 <sbrk_aligned+0x38>
 800e5c0:	f04f 34ff 	mov.w	r4, #4294967295
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	bd70      	pop	{r4, r5, r6, pc}
 800e5c8:	20002e40 	.word	0x20002e40

0800e5cc <_malloc_r>:
 800e5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5d0:	1ccd      	adds	r5, r1, #3
 800e5d2:	f025 0503 	bic.w	r5, r5, #3
 800e5d6:	3508      	adds	r5, #8
 800e5d8:	2d0c      	cmp	r5, #12
 800e5da:	bf38      	it	cc
 800e5dc:	250c      	movcc	r5, #12
 800e5de:	2d00      	cmp	r5, #0
 800e5e0:	4607      	mov	r7, r0
 800e5e2:	db01      	blt.n	800e5e8 <_malloc_r+0x1c>
 800e5e4:	42a9      	cmp	r1, r5
 800e5e6:	d905      	bls.n	800e5f4 <_malloc_r+0x28>
 800e5e8:	230c      	movs	r3, #12
 800e5ea:	603b      	str	r3, [r7, #0]
 800e5ec:	2600      	movs	r6, #0
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e6c8 <_malloc_r+0xfc>
 800e5f8:	f000 f868 	bl	800e6cc <__malloc_lock>
 800e5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e600:	461c      	mov	r4, r3
 800e602:	bb5c      	cbnz	r4, 800e65c <_malloc_r+0x90>
 800e604:	4629      	mov	r1, r5
 800e606:	4638      	mov	r0, r7
 800e608:	f7ff ffc0 	bl	800e58c <sbrk_aligned>
 800e60c:	1c43      	adds	r3, r0, #1
 800e60e:	4604      	mov	r4, r0
 800e610:	d155      	bne.n	800e6be <_malloc_r+0xf2>
 800e612:	f8d8 4000 	ldr.w	r4, [r8]
 800e616:	4626      	mov	r6, r4
 800e618:	2e00      	cmp	r6, #0
 800e61a:	d145      	bne.n	800e6a8 <_malloc_r+0xdc>
 800e61c:	2c00      	cmp	r4, #0
 800e61e:	d048      	beq.n	800e6b2 <_malloc_r+0xe6>
 800e620:	6823      	ldr	r3, [r4, #0]
 800e622:	4631      	mov	r1, r6
 800e624:	4638      	mov	r0, r7
 800e626:	eb04 0903 	add.w	r9, r4, r3
 800e62a:	f000 f883 	bl	800e734 <_sbrk_r>
 800e62e:	4581      	cmp	r9, r0
 800e630:	d13f      	bne.n	800e6b2 <_malloc_r+0xe6>
 800e632:	6821      	ldr	r1, [r4, #0]
 800e634:	1a6d      	subs	r5, r5, r1
 800e636:	4629      	mov	r1, r5
 800e638:	4638      	mov	r0, r7
 800e63a:	f7ff ffa7 	bl	800e58c <sbrk_aligned>
 800e63e:	3001      	adds	r0, #1
 800e640:	d037      	beq.n	800e6b2 <_malloc_r+0xe6>
 800e642:	6823      	ldr	r3, [r4, #0]
 800e644:	442b      	add	r3, r5
 800e646:	6023      	str	r3, [r4, #0]
 800e648:	f8d8 3000 	ldr.w	r3, [r8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d038      	beq.n	800e6c2 <_malloc_r+0xf6>
 800e650:	685a      	ldr	r2, [r3, #4]
 800e652:	42a2      	cmp	r2, r4
 800e654:	d12b      	bne.n	800e6ae <_malloc_r+0xe2>
 800e656:	2200      	movs	r2, #0
 800e658:	605a      	str	r2, [r3, #4]
 800e65a:	e00f      	b.n	800e67c <_malloc_r+0xb0>
 800e65c:	6822      	ldr	r2, [r4, #0]
 800e65e:	1b52      	subs	r2, r2, r5
 800e660:	d41f      	bmi.n	800e6a2 <_malloc_r+0xd6>
 800e662:	2a0b      	cmp	r2, #11
 800e664:	d917      	bls.n	800e696 <_malloc_r+0xca>
 800e666:	1961      	adds	r1, r4, r5
 800e668:	42a3      	cmp	r3, r4
 800e66a:	6025      	str	r5, [r4, #0]
 800e66c:	bf18      	it	ne
 800e66e:	6059      	strne	r1, [r3, #4]
 800e670:	6863      	ldr	r3, [r4, #4]
 800e672:	bf08      	it	eq
 800e674:	f8c8 1000 	streq.w	r1, [r8]
 800e678:	5162      	str	r2, [r4, r5]
 800e67a:	604b      	str	r3, [r1, #4]
 800e67c:	4638      	mov	r0, r7
 800e67e:	f104 060b 	add.w	r6, r4, #11
 800e682:	f000 f829 	bl	800e6d8 <__malloc_unlock>
 800e686:	f026 0607 	bic.w	r6, r6, #7
 800e68a:	1d23      	adds	r3, r4, #4
 800e68c:	1af2      	subs	r2, r6, r3
 800e68e:	d0ae      	beq.n	800e5ee <_malloc_r+0x22>
 800e690:	1b9b      	subs	r3, r3, r6
 800e692:	50a3      	str	r3, [r4, r2]
 800e694:	e7ab      	b.n	800e5ee <_malloc_r+0x22>
 800e696:	42a3      	cmp	r3, r4
 800e698:	6862      	ldr	r2, [r4, #4]
 800e69a:	d1dd      	bne.n	800e658 <_malloc_r+0x8c>
 800e69c:	f8c8 2000 	str.w	r2, [r8]
 800e6a0:	e7ec      	b.n	800e67c <_malloc_r+0xb0>
 800e6a2:	4623      	mov	r3, r4
 800e6a4:	6864      	ldr	r4, [r4, #4]
 800e6a6:	e7ac      	b.n	800e602 <_malloc_r+0x36>
 800e6a8:	4634      	mov	r4, r6
 800e6aa:	6876      	ldr	r6, [r6, #4]
 800e6ac:	e7b4      	b.n	800e618 <_malloc_r+0x4c>
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	e7cc      	b.n	800e64c <_malloc_r+0x80>
 800e6b2:	230c      	movs	r3, #12
 800e6b4:	603b      	str	r3, [r7, #0]
 800e6b6:	4638      	mov	r0, r7
 800e6b8:	f000 f80e 	bl	800e6d8 <__malloc_unlock>
 800e6bc:	e797      	b.n	800e5ee <_malloc_r+0x22>
 800e6be:	6025      	str	r5, [r4, #0]
 800e6c0:	e7dc      	b.n	800e67c <_malloc_r+0xb0>
 800e6c2:	605b      	str	r3, [r3, #4]
 800e6c4:	deff      	udf	#255	; 0xff
 800e6c6:	bf00      	nop
 800e6c8:	20002e3c 	.word	0x20002e3c

0800e6cc <__malloc_lock>:
 800e6cc:	4801      	ldr	r0, [pc, #4]	; (800e6d4 <__malloc_lock+0x8>)
 800e6ce:	f000 b86b 	b.w	800e7a8 <__retarget_lock_acquire_recursive>
 800e6d2:	bf00      	nop
 800e6d4:	20002f80 	.word	0x20002f80

0800e6d8 <__malloc_unlock>:
 800e6d8:	4801      	ldr	r0, [pc, #4]	; (800e6e0 <__malloc_unlock+0x8>)
 800e6da:	f000 b866 	b.w	800e7aa <__retarget_lock_release_recursive>
 800e6de:	bf00      	nop
 800e6e0:	20002f80 	.word	0x20002f80

0800e6e4 <siprintf>:
 800e6e4:	b40e      	push	{r1, r2, r3}
 800e6e6:	b500      	push	{lr}
 800e6e8:	b09c      	sub	sp, #112	; 0x70
 800e6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800e6ec:	9002      	str	r0, [sp, #8]
 800e6ee:	9006      	str	r0, [sp, #24]
 800e6f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6f4:	4809      	ldr	r0, [pc, #36]	; (800e71c <siprintf+0x38>)
 800e6f6:	9107      	str	r1, [sp, #28]
 800e6f8:	9104      	str	r1, [sp, #16]
 800e6fa:	4909      	ldr	r1, [pc, #36]	; (800e720 <siprintf+0x3c>)
 800e6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e700:	9105      	str	r1, [sp, #20]
 800e702:	6800      	ldr	r0, [r0, #0]
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	a902      	add	r1, sp, #8
 800e708:	f000 f904 	bl	800e914 <_svfiprintf_r>
 800e70c:	9b02      	ldr	r3, [sp, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	701a      	strb	r2, [r3, #0]
 800e712:	b01c      	add	sp, #112	; 0x70
 800e714:	f85d eb04 	ldr.w	lr, [sp], #4
 800e718:	b003      	add	sp, #12
 800e71a:	4770      	bx	lr
 800e71c:	20000078 	.word	0x20000078
 800e720:	ffff0208 	.word	0xffff0208

0800e724 <memset>:
 800e724:	4402      	add	r2, r0
 800e726:	4603      	mov	r3, r0
 800e728:	4293      	cmp	r3, r2
 800e72a:	d100      	bne.n	800e72e <memset+0xa>
 800e72c:	4770      	bx	lr
 800e72e:	f803 1b01 	strb.w	r1, [r3], #1
 800e732:	e7f9      	b.n	800e728 <memset+0x4>

0800e734 <_sbrk_r>:
 800e734:	b538      	push	{r3, r4, r5, lr}
 800e736:	4d06      	ldr	r5, [pc, #24]	; (800e750 <_sbrk_r+0x1c>)
 800e738:	2300      	movs	r3, #0
 800e73a:	4604      	mov	r4, r0
 800e73c:	4608      	mov	r0, r1
 800e73e:	602b      	str	r3, [r5, #0]
 800e740:	f7f3 f894 	bl	800186c <_sbrk>
 800e744:	1c43      	adds	r3, r0, #1
 800e746:	d102      	bne.n	800e74e <_sbrk_r+0x1a>
 800e748:	682b      	ldr	r3, [r5, #0]
 800e74a:	b103      	cbz	r3, 800e74e <_sbrk_r+0x1a>
 800e74c:	6023      	str	r3, [r4, #0]
 800e74e:	bd38      	pop	{r3, r4, r5, pc}
 800e750:	20002f7c 	.word	0x20002f7c

0800e754 <__errno>:
 800e754:	4b01      	ldr	r3, [pc, #4]	; (800e75c <__errno+0x8>)
 800e756:	6818      	ldr	r0, [r3, #0]
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	20000078 	.word	0x20000078

0800e760 <__libc_init_array>:
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	4d0d      	ldr	r5, [pc, #52]	; (800e798 <__libc_init_array+0x38>)
 800e764:	4c0d      	ldr	r4, [pc, #52]	; (800e79c <__libc_init_array+0x3c>)
 800e766:	1b64      	subs	r4, r4, r5
 800e768:	10a4      	asrs	r4, r4, #2
 800e76a:	2600      	movs	r6, #0
 800e76c:	42a6      	cmp	r6, r4
 800e76e:	d109      	bne.n	800e784 <__libc_init_array+0x24>
 800e770:	4d0b      	ldr	r5, [pc, #44]	; (800e7a0 <__libc_init_array+0x40>)
 800e772:	4c0c      	ldr	r4, [pc, #48]	; (800e7a4 <__libc_init_array+0x44>)
 800e774:	f000 fbae 	bl	800eed4 <_init>
 800e778:	1b64      	subs	r4, r4, r5
 800e77a:	10a4      	asrs	r4, r4, #2
 800e77c:	2600      	movs	r6, #0
 800e77e:	42a6      	cmp	r6, r4
 800e780:	d105      	bne.n	800e78e <__libc_init_array+0x2e>
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	f855 3b04 	ldr.w	r3, [r5], #4
 800e788:	4798      	blx	r3
 800e78a:	3601      	adds	r6, #1
 800e78c:	e7ee      	b.n	800e76c <__libc_init_array+0xc>
 800e78e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e792:	4798      	blx	r3
 800e794:	3601      	adds	r6, #1
 800e796:	e7f2      	b.n	800e77e <__libc_init_array+0x1e>
 800e798:	0800f97c 	.word	0x0800f97c
 800e79c:	0800f97c 	.word	0x0800f97c
 800e7a0:	0800f97c 	.word	0x0800f97c
 800e7a4:	0800f980 	.word	0x0800f980

0800e7a8 <__retarget_lock_acquire_recursive>:
 800e7a8:	4770      	bx	lr

0800e7aa <__retarget_lock_release_recursive>:
 800e7aa:	4770      	bx	lr

0800e7ac <memcpy>:
 800e7ac:	440a      	add	r2, r1
 800e7ae:	4291      	cmp	r1, r2
 800e7b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e7b4:	d100      	bne.n	800e7b8 <memcpy+0xc>
 800e7b6:	4770      	bx	lr
 800e7b8:	b510      	push	{r4, lr}
 800e7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7c2:	4291      	cmp	r1, r2
 800e7c4:	d1f9      	bne.n	800e7ba <memcpy+0xe>
 800e7c6:	bd10      	pop	{r4, pc}

0800e7c8 <_free_r>:
 800e7c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7ca:	2900      	cmp	r1, #0
 800e7cc:	d044      	beq.n	800e858 <_free_r+0x90>
 800e7ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d2:	9001      	str	r0, [sp, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f1a1 0404 	sub.w	r4, r1, #4
 800e7da:	bfb8      	it	lt
 800e7dc:	18e4      	addlt	r4, r4, r3
 800e7de:	f7ff ff75 	bl	800e6cc <__malloc_lock>
 800e7e2:	4a1e      	ldr	r2, [pc, #120]	; (800e85c <_free_r+0x94>)
 800e7e4:	9801      	ldr	r0, [sp, #4]
 800e7e6:	6813      	ldr	r3, [r2, #0]
 800e7e8:	b933      	cbnz	r3, 800e7f8 <_free_r+0x30>
 800e7ea:	6063      	str	r3, [r4, #4]
 800e7ec:	6014      	str	r4, [r2, #0]
 800e7ee:	b003      	add	sp, #12
 800e7f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7f4:	f7ff bf70 	b.w	800e6d8 <__malloc_unlock>
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	d908      	bls.n	800e80e <_free_r+0x46>
 800e7fc:	6825      	ldr	r5, [r4, #0]
 800e7fe:	1961      	adds	r1, r4, r5
 800e800:	428b      	cmp	r3, r1
 800e802:	bf01      	itttt	eq
 800e804:	6819      	ldreq	r1, [r3, #0]
 800e806:	685b      	ldreq	r3, [r3, #4]
 800e808:	1949      	addeq	r1, r1, r5
 800e80a:	6021      	streq	r1, [r4, #0]
 800e80c:	e7ed      	b.n	800e7ea <_free_r+0x22>
 800e80e:	461a      	mov	r2, r3
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	b10b      	cbz	r3, 800e818 <_free_r+0x50>
 800e814:	42a3      	cmp	r3, r4
 800e816:	d9fa      	bls.n	800e80e <_free_r+0x46>
 800e818:	6811      	ldr	r1, [r2, #0]
 800e81a:	1855      	adds	r5, r2, r1
 800e81c:	42a5      	cmp	r5, r4
 800e81e:	d10b      	bne.n	800e838 <_free_r+0x70>
 800e820:	6824      	ldr	r4, [r4, #0]
 800e822:	4421      	add	r1, r4
 800e824:	1854      	adds	r4, r2, r1
 800e826:	42a3      	cmp	r3, r4
 800e828:	6011      	str	r1, [r2, #0]
 800e82a:	d1e0      	bne.n	800e7ee <_free_r+0x26>
 800e82c:	681c      	ldr	r4, [r3, #0]
 800e82e:	685b      	ldr	r3, [r3, #4]
 800e830:	6053      	str	r3, [r2, #4]
 800e832:	440c      	add	r4, r1
 800e834:	6014      	str	r4, [r2, #0]
 800e836:	e7da      	b.n	800e7ee <_free_r+0x26>
 800e838:	d902      	bls.n	800e840 <_free_r+0x78>
 800e83a:	230c      	movs	r3, #12
 800e83c:	6003      	str	r3, [r0, #0]
 800e83e:	e7d6      	b.n	800e7ee <_free_r+0x26>
 800e840:	6825      	ldr	r5, [r4, #0]
 800e842:	1961      	adds	r1, r4, r5
 800e844:	428b      	cmp	r3, r1
 800e846:	bf04      	itt	eq
 800e848:	6819      	ldreq	r1, [r3, #0]
 800e84a:	685b      	ldreq	r3, [r3, #4]
 800e84c:	6063      	str	r3, [r4, #4]
 800e84e:	bf04      	itt	eq
 800e850:	1949      	addeq	r1, r1, r5
 800e852:	6021      	streq	r1, [r4, #0]
 800e854:	6054      	str	r4, [r2, #4]
 800e856:	e7ca      	b.n	800e7ee <_free_r+0x26>
 800e858:	b003      	add	sp, #12
 800e85a:	bd30      	pop	{r4, r5, pc}
 800e85c:	20002e3c 	.word	0x20002e3c

0800e860 <__ssputs_r>:
 800e860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e864:	688e      	ldr	r6, [r1, #8]
 800e866:	461f      	mov	r7, r3
 800e868:	42be      	cmp	r6, r7
 800e86a:	680b      	ldr	r3, [r1, #0]
 800e86c:	4682      	mov	sl, r0
 800e86e:	460c      	mov	r4, r1
 800e870:	4690      	mov	r8, r2
 800e872:	d82c      	bhi.n	800e8ce <__ssputs_r+0x6e>
 800e874:	898a      	ldrh	r2, [r1, #12]
 800e876:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e87a:	d026      	beq.n	800e8ca <__ssputs_r+0x6a>
 800e87c:	6965      	ldr	r5, [r4, #20]
 800e87e:	6909      	ldr	r1, [r1, #16]
 800e880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e884:	eba3 0901 	sub.w	r9, r3, r1
 800e888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e88c:	1c7b      	adds	r3, r7, #1
 800e88e:	444b      	add	r3, r9
 800e890:	106d      	asrs	r5, r5, #1
 800e892:	429d      	cmp	r5, r3
 800e894:	bf38      	it	cc
 800e896:	461d      	movcc	r5, r3
 800e898:	0553      	lsls	r3, r2, #21
 800e89a:	d527      	bpl.n	800e8ec <__ssputs_r+0x8c>
 800e89c:	4629      	mov	r1, r5
 800e89e:	f7ff fe95 	bl	800e5cc <_malloc_r>
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	b360      	cbz	r0, 800e900 <__ssputs_r+0xa0>
 800e8a6:	6921      	ldr	r1, [r4, #16]
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	f7ff ff7f 	bl	800e7ac <memcpy>
 800e8ae:	89a3      	ldrh	r3, [r4, #12]
 800e8b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8b8:	81a3      	strh	r3, [r4, #12]
 800e8ba:	6126      	str	r6, [r4, #16]
 800e8bc:	6165      	str	r5, [r4, #20]
 800e8be:	444e      	add	r6, r9
 800e8c0:	eba5 0509 	sub.w	r5, r5, r9
 800e8c4:	6026      	str	r6, [r4, #0]
 800e8c6:	60a5      	str	r5, [r4, #8]
 800e8c8:	463e      	mov	r6, r7
 800e8ca:	42be      	cmp	r6, r7
 800e8cc:	d900      	bls.n	800e8d0 <__ssputs_r+0x70>
 800e8ce:	463e      	mov	r6, r7
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	4632      	mov	r2, r6
 800e8d4:	4641      	mov	r1, r8
 800e8d6:	f000 faab 	bl	800ee30 <memmove>
 800e8da:	68a3      	ldr	r3, [r4, #8]
 800e8dc:	1b9b      	subs	r3, r3, r6
 800e8de:	60a3      	str	r3, [r4, #8]
 800e8e0:	6823      	ldr	r3, [r4, #0]
 800e8e2:	4433      	add	r3, r6
 800e8e4:	6023      	str	r3, [r4, #0]
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8ec:	462a      	mov	r2, r5
 800e8ee:	f000 fab9 	bl	800ee64 <_realloc_r>
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	2800      	cmp	r0, #0
 800e8f6:	d1e0      	bne.n	800e8ba <__ssputs_r+0x5a>
 800e8f8:	6921      	ldr	r1, [r4, #16]
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	f7ff ff64 	bl	800e7c8 <_free_r>
 800e900:	230c      	movs	r3, #12
 800e902:	f8ca 3000 	str.w	r3, [sl]
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e90c:	81a3      	strh	r3, [r4, #12]
 800e90e:	f04f 30ff 	mov.w	r0, #4294967295
 800e912:	e7e9      	b.n	800e8e8 <__ssputs_r+0x88>

0800e914 <_svfiprintf_r>:
 800e914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e918:	4698      	mov	r8, r3
 800e91a:	898b      	ldrh	r3, [r1, #12]
 800e91c:	061b      	lsls	r3, r3, #24
 800e91e:	b09d      	sub	sp, #116	; 0x74
 800e920:	4607      	mov	r7, r0
 800e922:	460d      	mov	r5, r1
 800e924:	4614      	mov	r4, r2
 800e926:	d50e      	bpl.n	800e946 <_svfiprintf_r+0x32>
 800e928:	690b      	ldr	r3, [r1, #16]
 800e92a:	b963      	cbnz	r3, 800e946 <_svfiprintf_r+0x32>
 800e92c:	2140      	movs	r1, #64	; 0x40
 800e92e:	f7ff fe4d 	bl	800e5cc <_malloc_r>
 800e932:	6028      	str	r0, [r5, #0]
 800e934:	6128      	str	r0, [r5, #16]
 800e936:	b920      	cbnz	r0, 800e942 <_svfiprintf_r+0x2e>
 800e938:	230c      	movs	r3, #12
 800e93a:	603b      	str	r3, [r7, #0]
 800e93c:	f04f 30ff 	mov.w	r0, #4294967295
 800e940:	e0d0      	b.n	800eae4 <_svfiprintf_r+0x1d0>
 800e942:	2340      	movs	r3, #64	; 0x40
 800e944:	616b      	str	r3, [r5, #20]
 800e946:	2300      	movs	r3, #0
 800e948:	9309      	str	r3, [sp, #36]	; 0x24
 800e94a:	2320      	movs	r3, #32
 800e94c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e950:	f8cd 800c 	str.w	r8, [sp, #12]
 800e954:	2330      	movs	r3, #48	; 0x30
 800e956:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eafc <_svfiprintf_r+0x1e8>
 800e95a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e95e:	f04f 0901 	mov.w	r9, #1
 800e962:	4623      	mov	r3, r4
 800e964:	469a      	mov	sl, r3
 800e966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e96a:	b10a      	cbz	r2, 800e970 <_svfiprintf_r+0x5c>
 800e96c:	2a25      	cmp	r2, #37	; 0x25
 800e96e:	d1f9      	bne.n	800e964 <_svfiprintf_r+0x50>
 800e970:	ebba 0b04 	subs.w	fp, sl, r4
 800e974:	d00b      	beq.n	800e98e <_svfiprintf_r+0x7a>
 800e976:	465b      	mov	r3, fp
 800e978:	4622      	mov	r2, r4
 800e97a:	4629      	mov	r1, r5
 800e97c:	4638      	mov	r0, r7
 800e97e:	f7ff ff6f 	bl	800e860 <__ssputs_r>
 800e982:	3001      	adds	r0, #1
 800e984:	f000 80a9 	beq.w	800eada <_svfiprintf_r+0x1c6>
 800e988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e98a:	445a      	add	r2, fp
 800e98c:	9209      	str	r2, [sp, #36]	; 0x24
 800e98e:	f89a 3000 	ldrb.w	r3, [sl]
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 80a1 	beq.w	800eada <_svfiprintf_r+0x1c6>
 800e998:	2300      	movs	r3, #0
 800e99a:	f04f 32ff 	mov.w	r2, #4294967295
 800e99e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9a2:	f10a 0a01 	add.w	sl, sl, #1
 800e9a6:	9304      	str	r3, [sp, #16]
 800e9a8:	9307      	str	r3, [sp, #28]
 800e9aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9ae:	931a      	str	r3, [sp, #104]	; 0x68
 800e9b0:	4654      	mov	r4, sl
 800e9b2:	2205      	movs	r2, #5
 800e9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b8:	4850      	ldr	r0, [pc, #320]	; (800eafc <_svfiprintf_r+0x1e8>)
 800e9ba:	f7f1 fc29 	bl	8000210 <memchr>
 800e9be:	9a04      	ldr	r2, [sp, #16]
 800e9c0:	b9d8      	cbnz	r0, 800e9fa <_svfiprintf_r+0xe6>
 800e9c2:	06d0      	lsls	r0, r2, #27
 800e9c4:	bf44      	itt	mi
 800e9c6:	2320      	movmi	r3, #32
 800e9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9cc:	0711      	lsls	r1, r2, #28
 800e9ce:	bf44      	itt	mi
 800e9d0:	232b      	movmi	r3, #43	; 0x2b
 800e9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800e9da:	2b2a      	cmp	r3, #42	; 0x2a
 800e9dc:	d015      	beq.n	800ea0a <_svfiprintf_r+0xf6>
 800e9de:	9a07      	ldr	r2, [sp, #28]
 800e9e0:	4654      	mov	r4, sl
 800e9e2:	2000      	movs	r0, #0
 800e9e4:	f04f 0c0a 	mov.w	ip, #10
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ee:	3b30      	subs	r3, #48	; 0x30
 800e9f0:	2b09      	cmp	r3, #9
 800e9f2:	d94d      	bls.n	800ea90 <_svfiprintf_r+0x17c>
 800e9f4:	b1b0      	cbz	r0, 800ea24 <_svfiprintf_r+0x110>
 800e9f6:	9207      	str	r2, [sp, #28]
 800e9f8:	e014      	b.n	800ea24 <_svfiprintf_r+0x110>
 800e9fa:	eba0 0308 	sub.w	r3, r0, r8
 800e9fe:	fa09 f303 	lsl.w	r3, r9, r3
 800ea02:	4313      	orrs	r3, r2
 800ea04:	9304      	str	r3, [sp, #16]
 800ea06:	46a2      	mov	sl, r4
 800ea08:	e7d2      	b.n	800e9b0 <_svfiprintf_r+0x9c>
 800ea0a:	9b03      	ldr	r3, [sp, #12]
 800ea0c:	1d19      	adds	r1, r3, #4
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	9103      	str	r1, [sp, #12]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	bfbb      	ittet	lt
 800ea16:	425b      	neglt	r3, r3
 800ea18:	f042 0202 	orrlt.w	r2, r2, #2
 800ea1c:	9307      	strge	r3, [sp, #28]
 800ea1e:	9307      	strlt	r3, [sp, #28]
 800ea20:	bfb8      	it	lt
 800ea22:	9204      	strlt	r2, [sp, #16]
 800ea24:	7823      	ldrb	r3, [r4, #0]
 800ea26:	2b2e      	cmp	r3, #46	; 0x2e
 800ea28:	d10c      	bne.n	800ea44 <_svfiprintf_r+0x130>
 800ea2a:	7863      	ldrb	r3, [r4, #1]
 800ea2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2e:	d134      	bne.n	800ea9a <_svfiprintf_r+0x186>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	1d1a      	adds	r2, r3, #4
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	9203      	str	r2, [sp, #12]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	bfb8      	it	lt
 800ea3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea40:	3402      	adds	r4, #2
 800ea42:	9305      	str	r3, [sp, #20]
 800ea44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800eb0c <_svfiprintf_r+0x1f8>
 800ea48:	7821      	ldrb	r1, [r4, #0]
 800ea4a:	2203      	movs	r2, #3
 800ea4c:	4650      	mov	r0, sl
 800ea4e:	f7f1 fbdf 	bl	8000210 <memchr>
 800ea52:	b138      	cbz	r0, 800ea64 <_svfiprintf_r+0x150>
 800ea54:	9b04      	ldr	r3, [sp, #16]
 800ea56:	eba0 000a 	sub.w	r0, r0, sl
 800ea5a:	2240      	movs	r2, #64	; 0x40
 800ea5c:	4082      	lsls	r2, r0
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	3401      	adds	r4, #1
 800ea62:	9304      	str	r3, [sp, #16]
 800ea64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea68:	4825      	ldr	r0, [pc, #148]	; (800eb00 <_svfiprintf_r+0x1ec>)
 800ea6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea6e:	2206      	movs	r2, #6
 800ea70:	f7f1 fbce 	bl	8000210 <memchr>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	d038      	beq.n	800eaea <_svfiprintf_r+0x1d6>
 800ea78:	4b22      	ldr	r3, [pc, #136]	; (800eb04 <_svfiprintf_r+0x1f0>)
 800ea7a:	bb1b      	cbnz	r3, 800eac4 <_svfiprintf_r+0x1b0>
 800ea7c:	9b03      	ldr	r3, [sp, #12]
 800ea7e:	3307      	adds	r3, #7
 800ea80:	f023 0307 	bic.w	r3, r3, #7
 800ea84:	3308      	adds	r3, #8
 800ea86:	9303      	str	r3, [sp, #12]
 800ea88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea8a:	4433      	add	r3, r6
 800ea8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8e:	e768      	b.n	800e962 <_svfiprintf_r+0x4e>
 800ea90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea94:	460c      	mov	r4, r1
 800ea96:	2001      	movs	r0, #1
 800ea98:	e7a6      	b.n	800e9e8 <_svfiprintf_r+0xd4>
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	3401      	adds	r4, #1
 800ea9e:	9305      	str	r3, [sp, #20]
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	f04f 0c0a 	mov.w	ip, #10
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaac:	3a30      	subs	r2, #48	; 0x30
 800eaae:	2a09      	cmp	r2, #9
 800eab0:	d903      	bls.n	800eaba <_svfiprintf_r+0x1a6>
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0c6      	beq.n	800ea44 <_svfiprintf_r+0x130>
 800eab6:	9105      	str	r1, [sp, #20]
 800eab8:	e7c4      	b.n	800ea44 <_svfiprintf_r+0x130>
 800eaba:	fb0c 2101 	mla	r1, ip, r1, r2
 800eabe:	4604      	mov	r4, r0
 800eac0:	2301      	movs	r3, #1
 800eac2:	e7f0      	b.n	800eaa6 <_svfiprintf_r+0x192>
 800eac4:	ab03      	add	r3, sp, #12
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	462a      	mov	r2, r5
 800eaca:	4b0f      	ldr	r3, [pc, #60]	; (800eb08 <_svfiprintf_r+0x1f4>)
 800eacc:	a904      	add	r1, sp, #16
 800eace:	4638      	mov	r0, r7
 800ead0:	f3af 8000 	nop.w
 800ead4:	1c42      	adds	r2, r0, #1
 800ead6:	4606      	mov	r6, r0
 800ead8:	d1d6      	bne.n	800ea88 <_svfiprintf_r+0x174>
 800eada:	89ab      	ldrh	r3, [r5, #12]
 800eadc:	065b      	lsls	r3, r3, #25
 800eade:	f53f af2d 	bmi.w	800e93c <_svfiprintf_r+0x28>
 800eae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eae4:	b01d      	add	sp, #116	; 0x74
 800eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaea:	ab03      	add	r3, sp, #12
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	462a      	mov	r2, r5
 800eaf0:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <_svfiprintf_r+0x1f4>)
 800eaf2:	a904      	add	r1, sp, #16
 800eaf4:	4638      	mov	r0, r7
 800eaf6:	f000 f879 	bl	800ebec <_printf_i>
 800eafa:	e7eb      	b.n	800ead4 <_svfiprintf_r+0x1c0>
 800eafc:	0800f940 	.word	0x0800f940
 800eb00:	0800f94a 	.word	0x0800f94a
 800eb04:	00000000 	.word	0x00000000
 800eb08:	0800e861 	.word	0x0800e861
 800eb0c:	0800f946 	.word	0x0800f946

0800eb10 <_printf_common>:
 800eb10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb14:	4616      	mov	r6, r2
 800eb16:	4699      	mov	r9, r3
 800eb18:	688a      	ldr	r2, [r1, #8]
 800eb1a:	690b      	ldr	r3, [r1, #16]
 800eb1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb20:	4293      	cmp	r3, r2
 800eb22:	bfb8      	it	lt
 800eb24:	4613      	movlt	r3, r2
 800eb26:	6033      	str	r3, [r6, #0]
 800eb28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb2c:	4607      	mov	r7, r0
 800eb2e:	460c      	mov	r4, r1
 800eb30:	b10a      	cbz	r2, 800eb36 <_printf_common+0x26>
 800eb32:	3301      	adds	r3, #1
 800eb34:	6033      	str	r3, [r6, #0]
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	0699      	lsls	r1, r3, #26
 800eb3a:	bf42      	ittt	mi
 800eb3c:	6833      	ldrmi	r3, [r6, #0]
 800eb3e:	3302      	addmi	r3, #2
 800eb40:	6033      	strmi	r3, [r6, #0]
 800eb42:	6825      	ldr	r5, [r4, #0]
 800eb44:	f015 0506 	ands.w	r5, r5, #6
 800eb48:	d106      	bne.n	800eb58 <_printf_common+0x48>
 800eb4a:	f104 0a19 	add.w	sl, r4, #25
 800eb4e:	68e3      	ldr	r3, [r4, #12]
 800eb50:	6832      	ldr	r2, [r6, #0]
 800eb52:	1a9b      	subs	r3, r3, r2
 800eb54:	42ab      	cmp	r3, r5
 800eb56:	dc26      	bgt.n	800eba6 <_printf_common+0x96>
 800eb58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb5c:	1e13      	subs	r3, r2, #0
 800eb5e:	6822      	ldr	r2, [r4, #0]
 800eb60:	bf18      	it	ne
 800eb62:	2301      	movne	r3, #1
 800eb64:	0692      	lsls	r2, r2, #26
 800eb66:	d42b      	bmi.n	800ebc0 <_printf_common+0xb0>
 800eb68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb6c:	4649      	mov	r1, r9
 800eb6e:	4638      	mov	r0, r7
 800eb70:	47c0      	blx	r8
 800eb72:	3001      	adds	r0, #1
 800eb74:	d01e      	beq.n	800ebb4 <_printf_common+0xa4>
 800eb76:	6823      	ldr	r3, [r4, #0]
 800eb78:	6922      	ldr	r2, [r4, #16]
 800eb7a:	f003 0306 	and.w	r3, r3, #6
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	bf02      	ittt	eq
 800eb82:	68e5      	ldreq	r5, [r4, #12]
 800eb84:	6833      	ldreq	r3, [r6, #0]
 800eb86:	1aed      	subeq	r5, r5, r3
 800eb88:	68a3      	ldr	r3, [r4, #8]
 800eb8a:	bf0c      	ite	eq
 800eb8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb90:	2500      	movne	r5, #0
 800eb92:	4293      	cmp	r3, r2
 800eb94:	bfc4      	itt	gt
 800eb96:	1a9b      	subgt	r3, r3, r2
 800eb98:	18ed      	addgt	r5, r5, r3
 800eb9a:	2600      	movs	r6, #0
 800eb9c:	341a      	adds	r4, #26
 800eb9e:	42b5      	cmp	r5, r6
 800eba0:	d11a      	bne.n	800ebd8 <_printf_common+0xc8>
 800eba2:	2000      	movs	r0, #0
 800eba4:	e008      	b.n	800ebb8 <_printf_common+0xa8>
 800eba6:	2301      	movs	r3, #1
 800eba8:	4652      	mov	r2, sl
 800ebaa:	4649      	mov	r1, r9
 800ebac:	4638      	mov	r0, r7
 800ebae:	47c0      	blx	r8
 800ebb0:	3001      	adds	r0, #1
 800ebb2:	d103      	bne.n	800ebbc <_printf_common+0xac>
 800ebb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebbc:	3501      	adds	r5, #1
 800ebbe:	e7c6      	b.n	800eb4e <_printf_common+0x3e>
 800ebc0:	18e1      	adds	r1, r4, r3
 800ebc2:	1c5a      	adds	r2, r3, #1
 800ebc4:	2030      	movs	r0, #48	; 0x30
 800ebc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebca:	4422      	add	r2, r4
 800ebcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebd4:	3302      	adds	r3, #2
 800ebd6:	e7c7      	b.n	800eb68 <_printf_common+0x58>
 800ebd8:	2301      	movs	r3, #1
 800ebda:	4622      	mov	r2, r4
 800ebdc:	4649      	mov	r1, r9
 800ebde:	4638      	mov	r0, r7
 800ebe0:	47c0      	blx	r8
 800ebe2:	3001      	adds	r0, #1
 800ebe4:	d0e6      	beq.n	800ebb4 <_printf_common+0xa4>
 800ebe6:	3601      	adds	r6, #1
 800ebe8:	e7d9      	b.n	800eb9e <_printf_common+0x8e>
	...

0800ebec <_printf_i>:
 800ebec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf0:	7e0f      	ldrb	r7, [r1, #24]
 800ebf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ebf4:	2f78      	cmp	r7, #120	; 0x78
 800ebf6:	4691      	mov	r9, r2
 800ebf8:	4680      	mov	r8, r0
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	469a      	mov	sl, r3
 800ebfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec02:	d807      	bhi.n	800ec14 <_printf_i+0x28>
 800ec04:	2f62      	cmp	r7, #98	; 0x62
 800ec06:	d80a      	bhi.n	800ec1e <_printf_i+0x32>
 800ec08:	2f00      	cmp	r7, #0
 800ec0a:	f000 80d4 	beq.w	800edb6 <_printf_i+0x1ca>
 800ec0e:	2f58      	cmp	r7, #88	; 0x58
 800ec10:	f000 80c0 	beq.w	800ed94 <_printf_i+0x1a8>
 800ec14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec1c:	e03a      	b.n	800ec94 <_printf_i+0xa8>
 800ec1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec22:	2b15      	cmp	r3, #21
 800ec24:	d8f6      	bhi.n	800ec14 <_printf_i+0x28>
 800ec26:	a101      	add	r1, pc, #4	; (adr r1, 800ec2c <_printf_i+0x40>)
 800ec28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec2c:	0800ec85 	.word	0x0800ec85
 800ec30:	0800ec99 	.word	0x0800ec99
 800ec34:	0800ec15 	.word	0x0800ec15
 800ec38:	0800ec15 	.word	0x0800ec15
 800ec3c:	0800ec15 	.word	0x0800ec15
 800ec40:	0800ec15 	.word	0x0800ec15
 800ec44:	0800ec99 	.word	0x0800ec99
 800ec48:	0800ec15 	.word	0x0800ec15
 800ec4c:	0800ec15 	.word	0x0800ec15
 800ec50:	0800ec15 	.word	0x0800ec15
 800ec54:	0800ec15 	.word	0x0800ec15
 800ec58:	0800ed9d 	.word	0x0800ed9d
 800ec5c:	0800ecc5 	.word	0x0800ecc5
 800ec60:	0800ed57 	.word	0x0800ed57
 800ec64:	0800ec15 	.word	0x0800ec15
 800ec68:	0800ec15 	.word	0x0800ec15
 800ec6c:	0800edbf 	.word	0x0800edbf
 800ec70:	0800ec15 	.word	0x0800ec15
 800ec74:	0800ecc5 	.word	0x0800ecc5
 800ec78:	0800ec15 	.word	0x0800ec15
 800ec7c:	0800ec15 	.word	0x0800ec15
 800ec80:	0800ed5f 	.word	0x0800ed5f
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	1d1a      	adds	r2, r3, #4
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	602a      	str	r2, [r5, #0]
 800ec8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec94:	2301      	movs	r3, #1
 800ec96:	e09f      	b.n	800edd8 <_printf_i+0x1ec>
 800ec98:	6820      	ldr	r0, [r4, #0]
 800ec9a:	682b      	ldr	r3, [r5, #0]
 800ec9c:	0607      	lsls	r7, r0, #24
 800ec9e:	f103 0104 	add.w	r1, r3, #4
 800eca2:	6029      	str	r1, [r5, #0]
 800eca4:	d501      	bpl.n	800ecaa <_printf_i+0xbe>
 800eca6:	681e      	ldr	r6, [r3, #0]
 800eca8:	e003      	b.n	800ecb2 <_printf_i+0xc6>
 800ecaa:	0646      	lsls	r6, r0, #25
 800ecac:	d5fb      	bpl.n	800eca6 <_printf_i+0xba>
 800ecae:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ecb2:	2e00      	cmp	r6, #0
 800ecb4:	da03      	bge.n	800ecbe <_printf_i+0xd2>
 800ecb6:	232d      	movs	r3, #45	; 0x2d
 800ecb8:	4276      	negs	r6, r6
 800ecba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecbe:	485a      	ldr	r0, [pc, #360]	; (800ee28 <_printf_i+0x23c>)
 800ecc0:	230a      	movs	r3, #10
 800ecc2:	e012      	b.n	800ecea <_printf_i+0xfe>
 800ecc4:	682b      	ldr	r3, [r5, #0]
 800ecc6:	6820      	ldr	r0, [r4, #0]
 800ecc8:	1d19      	adds	r1, r3, #4
 800ecca:	6029      	str	r1, [r5, #0]
 800eccc:	0605      	lsls	r5, r0, #24
 800ecce:	d501      	bpl.n	800ecd4 <_printf_i+0xe8>
 800ecd0:	681e      	ldr	r6, [r3, #0]
 800ecd2:	e002      	b.n	800ecda <_printf_i+0xee>
 800ecd4:	0641      	lsls	r1, r0, #25
 800ecd6:	d5fb      	bpl.n	800ecd0 <_printf_i+0xe4>
 800ecd8:	881e      	ldrh	r6, [r3, #0]
 800ecda:	4853      	ldr	r0, [pc, #332]	; (800ee28 <_printf_i+0x23c>)
 800ecdc:	2f6f      	cmp	r7, #111	; 0x6f
 800ecde:	bf0c      	ite	eq
 800ece0:	2308      	moveq	r3, #8
 800ece2:	230a      	movne	r3, #10
 800ece4:	2100      	movs	r1, #0
 800ece6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecea:	6865      	ldr	r5, [r4, #4]
 800ecec:	60a5      	str	r5, [r4, #8]
 800ecee:	2d00      	cmp	r5, #0
 800ecf0:	bfa2      	ittt	ge
 800ecf2:	6821      	ldrge	r1, [r4, #0]
 800ecf4:	f021 0104 	bicge.w	r1, r1, #4
 800ecf8:	6021      	strge	r1, [r4, #0]
 800ecfa:	b90e      	cbnz	r6, 800ed00 <_printf_i+0x114>
 800ecfc:	2d00      	cmp	r5, #0
 800ecfe:	d04b      	beq.n	800ed98 <_printf_i+0x1ac>
 800ed00:	4615      	mov	r5, r2
 800ed02:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed06:	fb03 6711 	mls	r7, r3, r1, r6
 800ed0a:	5dc7      	ldrb	r7, [r0, r7]
 800ed0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed10:	4637      	mov	r7, r6
 800ed12:	42bb      	cmp	r3, r7
 800ed14:	460e      	mov	r6, r1
 800ed16:	d9f4      	bls.n	800ed02 <_printf_i+0x116>
 800ed18:	2b08      	cmp	r3, #8
 800ed1a:	d10b      	bne.n	800ed34 <_printf_i+0x148>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	07de      	lsls	r6, r3, #31
 800ed20:	d508      	bpl.n	800ed34 <_printf_i+0x148>
 800ed22:	6923      	ldr	r3, [r4, #16]
 800ed24:	6861      	ldr	r1, [r4, #4]
 800ed26:	4299      	cmp	r1, r3
 800ed28:	bfde      	ittt	le
 800ed2a:	2330      	movle	r3, #48	; 0x30
 800ed2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed30:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed34:	1b52      	subs	r2, r2, r5
 800ed36:	6122      	str	r2, [r4, #16]
 800ed38:	f8cd a000 	str.w	sl, [sp]
 800ed3c:	464b      	mov	r3, r9
 800ed3e:	aa03      	add	r2, sp, #12
 800ed40:	4621      	mov	r1, r4
 800ed42:	4640      	mov	r0, r8
 800ed44:	f7ff fee4 	bl	800eb10 <_printf_common>
 800ed48:	3001      	adds	r0, #1
 800ed4a:	d14a      	bne.n	800ede2 <_printf_i+0x1f6>
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	b004      	add	sp, #16
 800ed52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	f043 0320 	orr.w	r3, r3, #32
 800ed5c:	6023      	str	r3, [r4, #0]
 800ed5e:	4833      	ldr	r0, [pc, #204]	; (800ee2c <_printf_i+0x240>)
 800ed60:	2778      	movs	r7, #120	; 0x78
 800ed62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed66:	6823      	ldr	r3, [r4, #0]
 800ed68:	6829      	ldr	r1, [r5, #0]
 800ed6a:	061f      	lsls	r7, r3, #24
 800ed6c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed70:	d402      	bmi.n	800ed78 <_printf_i+0x18c>
 800ed72:	065f      	lsls	r7, r3, #25
 800ed74:	bf48      	it	mi
 800ed76:	b2b6      	uxthmi	r6, r6
 800ed78:	07df      	lsls	r7, r3, #31
 800ed7a:	bf48      	it	mi
 800ed7c:	f043 0320 	orrmi.w	r3, r3, #32
 800ed80:	6029      	str	r1, [r5, #0]
 800ed82:	bf48      	it	mi
 800ed84:	6023      	strmi	r3, [r4, #0]
 800ed86:	b91e      	cbnz	r6, 800ed90 <_printf_i+0x1a4>
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	f023 0320 	bic.w	r3, r3, #32
 800ed8e:	6023      	str	r3, [r4, #0]
 800ed90:	2310      	movs	r3, #16
 800ed92:	e7a7      	b.n	800ece4 <_printf_i+0xf8>
 800ed94:	4824      	ldr	r0, [pc, #144]	; (800ee28 <_printf_i+0x23c>)
 800ed96:	e7e4      	b.n	800ed62 <_printf_i+0x176>
 800ed98:	4615      	mov	r5, r2
 800ed9a:	e7bd      	b.n	800ed18 <_printf_i+0x12c>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	6826      	ldr	r6, [r4, #0]
 800eda0:	6961      	ldr	r1, [r4, #20]
 800eda2:	1d18      	adds	r0, r3, #4
 800eda4:	6028      	str	r0, [r5, #0]
 800eda6:	0635      	lsls	r5, r6, #24
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	d501      	bpl.n	800edb0 <_printf_i+0x1c4>
 800edac:	6019      	str	r1, [r3, #0]
 800edae:	e002      	b.n	800edb6 <_printf_i+0x1ca>
 800edb0:	0670      	lsls	r0, r6, #25
 800edb2:	d5fb      	bpl.n	800edac <_printf_i+0x1c0>
 800edb4:	8019      	strh	r1, [r3, #0]
 800edb6:	2300      	movs	r3, #0
 800edb8:	6123      	str	r3, [r4, #16]
 800edba:	4615      	mov	r5, r2
 800edbc:	e7bc      	b.n	800ed38 <_printf_i+0x14c>
 800edbe:	682b      	ldr	r3, [r5, #0]
 800edc0:	1d1a      	adds	r2, r3, #4
 800edc2:	602a      	str	r2, [r5, #0]
 800edc4:	681d      	ldr	r5, [r3, #0]
 800edc6:	6862      	ldr	r2, [r4, #4]
 800edc8:	2100      	movs	r1, #0
 800edca:	4628      	mov	r0, r5
 800edcc:	f7f1 fa20 	bl	8000210 <memchr>
 800edd0:	b108      	cbz	r0, 800edd6 <_printf_i+0x1ea>
 800edd2:	1b40      	subs	r0, r0, r5
 800edd4:	6060      	str	r0, [r4, #4]
 800edd6:	6863      	ldr	r3, [r4, #4]
 800edd8:	6123      	str	r3, [r4, #16]
 800edda:	2300      	movs	r3, #0
 800eddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ede0:	e7aa      	b.n	800ed38 <_printf_i+0x14c>
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	462a      	mov	r2, r5
 800ede6:	4649      	mov	r1, r9
 800ede8:	4640      	mov	r0, r8
 800edea:	47d0      	blx	sl
 800edec:	3001      	adds	r0, #1
 800edee:	d0ad      	beq.n	800ed4c <_printf_i+0x160>
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	079b      	lsls	r3, r3, #30
 800edf4:	d413      	bmi.n	800ee1e <_printf_i+0x232>
 800edf6:	68e0      	ldr	r0, [r4, #12]
 800edf8:	9b03      	ldr	r3, [sp, #12]
 800edfa:	4298      	cmp	r0, r3
 800edfc:	bfb8      	it	lt
 800edfe:	4618      	movlt	r0, r3
 800ee00:	e7a6      	b.n	800ed50 <_printf_i+0x164>
 800ee02:	2301      	movs	r3, #1
 800ee04:	4632      	mov	r2, r6
 800ee06:	4649      	mov	r1, r9
 800ee08:	4640      	mov	r0, r8
 800ee0a:	47d0      	blx	sl
 800ee0c:	3001      	adds	r0, #1
 800ee0e:	d09d      	beq.n	800ed4c <_printf_i+0x160>
 800ee10:	3501      	adds	r5, #1
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	9903      	ldr	r1, [sp, #12]
 800ee16:	1a5b      	subs	r3, r3, r1
 800ee18:	42ab      	cmp	r3, r5
 800ee1a:	dcf2      	bgt.n	800ee02 <_printf_i+0x216>
 800ee1c:	e7eb      	b.n	800edf6 <_printf_i+0x20a>
 800ee1e:	2500      	movs	r5, #0
 800ee20:	f104 0619 	add.w	r6, r4, #25
 800ee24:	e7f5      	b.n	800ee12 <_printf_i+0x226>
 800ee26:	bf00      	nop
 800ee28:	0800f951 	.word	0x0800f951
 800ee2c:	0800f962 	.word	0x0800f962

0800ee30 <memmove>:
 800ee30:	4288      	cmp	r0, r1
 800ee32:	b510      	push	{r4, lr}
 800ee34:	eb01 0402 	add.w	r4, r1, r2
 800ee38:	d902      	bls.n	800ee40 <memmove+0x10>
 800ee3a:	4284      	cmp	r4, r0
 800ee3c:	4623      	mov	r3, r4
 800ee3e:	d807      	bhi.n	800ee50 <memmove+0x20>
 800ee40:	1e43      	subs	r3, r0, #1
 800ee42:	42a1      	cmp	r1, r4
 800ee44:	d008      	beq.n	800ee58 <memmove+0x28>
 800ee46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee4e:	e7f8      	b.n	800ee42 <memmove+0x12>
 800ee50:	4402      	add	r2, r0
 800ee52:	4601      	mov	r1, r0
 800ee54:	428a      	cmp	r2, r1
 800ee56:	d100      	bne.n	800ee5a <memmove+0x2a>
 800ee58:	bd10      	pop	{r4, pc}
 800ee5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee62:	e7f7      	b.n	800ee54 <memmove+0x24>

0800ee64 <_realloc_r>:
 800ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee68:	4680      	mov	r8, r0
 800ee6a:	4614      	mov	r4, r2
 800ee6c:	460e      	mov	r6, r1
 800ee6e:	b921      	cbnz	r1, 800ee7a <_realloc_r+0x16>
 800ee70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	4611      	mov	r1, r2
 800ee76:	f7ff bba9 	b.w	800e5cc <_malloc_r>
 800ee7a:	b92a      	cbnz	r2, 800ee88 <_realloc_r+0x24>
 800ee7c:	f7ff fca4 	bl	800e7c8 <_free_r>
 800ee80:	4625      	mov	r5, r4
 800ee82:	4628      	mov	r0, r5
 800ee84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee88:	f000 f81b 	bl	800eec2 <_malloc_usable_size_r>
 800ee8c:	4284      	cmp	r4, r0
 800ee8e:	4607      	mov	r7, r0
 800ee90:	d802      	bhi.n	800ee98 <_realloc_r+0x34>
 800ee92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee96:	d812      	bhi.n	800eebe <_realloc_r+0x5a>
 800ee98:	4621      	mov	r1, r4
 800ee9a:	4640      	mov	r0, r8
 800ee9c:	f7ff fb96 	bl	800e5cc <_malloc_r>
 800eea0:	4605      	mov	r5, r0
 800eea2:	2800      	cmp	r0, #0
 800eea4:	d0ed      	beq.n	800ee82 <_realloc_r+0x1e>
 800eea6:	42bc      	cmp	r4, r7
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4631      	mov	r1, r6
 800eeac:	bf28      	it	cs
 800eeae:	463a      	movcs	r2, r7
 800eeb0:	f7ff fc7c 	bl	800e7ac <memcpy>
 800eeb4:	4631      	mov	r1, r6
 800eeb6:	4640      	mov	r0, r8
 800eeb8:	f7ff fc86 	bl	800e7c8 <_free_r>
 800eebc:	e7e1      	b.n	800ee82 <_realloc_r+0x1e>
 800eebe:	4635      	mov	r5, r6
 800eec0:	e7df      	b.n	800ee82 <_realloc_r+0x1e>

0800eec2 <_malloc_usable_size_r>:
 800eec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eec6:	1f18      	subs	r0, r3, #4
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bfbc      	itt	lt
 800eecc:	580b      	ldrlt	r3, [r1, r0]
 800eece:	18c0      	addlt	r0, r0, r3
 800eed0:	4770      	bx	lr
	...

0800eed4 <_init>:
 800eed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eed6:	bf00      	nop
 800eed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeda:	bc08      	pop	{r3}
 800eedc:	469e      	mov	lr, r3
 800eede:	4770      	bx	lr

0800eee0 <_fini>:
 800eee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee2:	bf00      	nop
 800eee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eee6:	bc08      	pop	{r3}
 800eee8:	469e      	mov	lr, r3
 800eeea:	4770      	bx	lr

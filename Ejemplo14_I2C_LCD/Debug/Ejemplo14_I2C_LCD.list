
Ejemplo14_I2C_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c14  08002c14  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c14  08002c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c1c  08002c1c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000005c  08002c80  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08002c80  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006d32  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016a9  00000000  00000000  00026e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000740  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000577  00000000  00000000  00028bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150e8  00000000  00000000  00029167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4f3  00000000  00000000  0003e24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082f17  00000000  00000000  00048742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002148  00000000  00000000  000cb65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000cd7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002b9c 	.word	0x08002b9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08002b9c 	.word	0x08002b9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <LCD_STM32_CMD>:
#include "LCD.h"
#include "main.h"
#include "stm32f4xx_hal.h"
#include "i2c.h"

void LCD_STM32_CMD(uint8_t a,uint8_t rs){
 800057c:	b580      	push	{r7, lr}
 800057e:	b086      	sub	sp, #24
 8000580:	af02      	add	r7, sp, #8
 8000582:	4603      	mov	r3, r0
 8000584:	460a      	mov	r2, r1
 8000586:	71fb      	strb	r3, [r7, #7]
 8000588:	4613      	mov	r3, r2
 800058a:	71bb      	strb	r3, [r7, #6]
	uint8_t dato = a<<4;
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	011b      	lsls	r3, r3, #4
 8000590:	b2db      	uxtb	r3, r3
 8000592:	73fb      	strb	r3, [r7, #15]
	dato |= rs<<RS_BIT;
 8000594:	7bfa      	ldrb	r2, [r7, #15]
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	4313      	orrs	r3, r2
 800059a:	b2db      	uxtb	r3, r3
 800059c:	73fb      	strb	r3, [r7, #15]
	dato |= 1<<E_BIT;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
	dato |= 1<<3;
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	f043 0308 	orr.w	r3, r3, #8
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, ADD_LCD, &dato, 1, 100);
 80005b2:	f107 020f 	add.w	r2, r7, #15
 80005b6:	2364      	movs	r3, #100	; 0x64
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	214e      	movs	r1, #78	; 0x4e
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <LCD_STM32_CMD+0x74>)
 80005c0:	f000 fefc 	bl	80013bc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fb27 	bl	8000c18 <HAL_Delay>
	dato &= ~(1<<E_BIT);
 80005ca:	7bfb      	ldrb	r3, [r7, #15]
 80005cc:	f023 0304 	bic.w	r3, r3, #4
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c1, ADD_LCD, &dato, 1, 100);
 80005d4:	f107 020f 	add.w	r2, r7, #15
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	214e      	movs	r1, #78	; 0x4e
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <LCD_STM32_CMD+0x74>)
 80005e2:	f000 feeb 	bl	80013bc <HAL_I2C_Master_Transmit>
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000078 	.word	0x20000078

080005f4 <LCD_STM32_INIT>:
void LCD_STM32_BUS(uint8_t a){


}

void LCD_STM32_INIT(void){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

	LCD_STM32_CMD(0x03,0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2003      	movs	r0, #3
 80005fc:	f7ff ffbe 	bl	800057c <LCD_STM32_CMD>
	HAL_Delay(3);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 fb09 	bl	8000c18 <HAL_Delay>
	LCD_STM32_CMD(0x03,0);
 8000606:	2100      	movs	r1, #0
 8000608:	2003      	movs	r0, #3
 800060a:	f7ff ffb7 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x03,0);
 800060e:	2100      	movs	r1, #0
 8000610:	2003      	movs	r0, #3
 8000612:	f7ff ffb3 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x02,0);
 8000616:	2100      	movs	r1, #0
 8000618:	2002      	movs	r0, #2
 800061a:	f7ff ffaf 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x02,0);
 800061e:	2100      	movs	r1, #0
 8000620:	2002      	movs	r0, #2
 8000622:	f7ff ffab 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x08,0);
 8000626:	2100      	movs	r1, #0
 8000628:	2008      	movs	r0, #8
 800062a:	f7ff ffa7 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00,0);
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ffa3 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x08,0);
 8000636:	2100      	movs	r1, #0
 8000638:	2008      	movs	r0, #8
 800063a:	f7ff ff9f 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00,0);
 800063e:	2100      	movs	r1, #0
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff9b 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x01,0);
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f7ff ff97 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(0x00,0);
 800064e:	2100      	movs	r1, #0
 8000650:	2000      	movs	r0, #0
 8000652:	f7ff ff93 	bl	800057c <LCD_STM32_CMD>
	//Con curso activado es 0XD,  sin cursor : 0xC
	LCD_STM32_CMD(0x0D,0);
 8000656:	2100      	movs	r1, #0
 8000658:	200d      	movs	r0, #13
 800065a:	f7ff ff8f 	bl	800057c <LCD_STM32_CMD>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <LCD_STM32_SET_CURSOR>:


void LCD_STM32_SET_CURSOR(uint8_t x,Ubicacion y){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]

	uint8_t m,n;


	switch (y) {
 8000674:	79bb      	ldrb	r3, [r7, #6]
 8000676:	2b03      	cmp	r3, #3
 8000678:	d82f      	bhi.n	80006da <LCD_STM32_SET_CURSOR+0x76>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <LCD_STM32_SET_CURSOR+0x1c>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	08000691 	.word	0x08000691
 8000684:	080006b5 	.word	0x080006b5
 8000688:	080006d9 	.word	0x080006d9
 800068c:	080006d9 	.word	0x080006d9
		case fila1:
			m=0x80+x;
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	3b80      	subs	r3, #128	; 0x80
 8000694:	73fb      	strb	r3, [r7, #15]
			n=(0x80+x)>>4;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3380      	adds	r3, #128	; 0x80
 800069a:	111b      	asrs	r3, r3, #4
 800069c:	73bb      	strb	r3, [r7, #14]
			LCD_STM32_CMD(n,0);
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff6a 	bl	800057c <LCD_STM32_CMD>
			LCD_STM32_CMD(m,0);
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff65 	bl	800057c <LCD_STM32_CMD>
			break;
 80006b2:	e012      	b.n	80006da <LCD_STM32_SET_CURSOR+0x76>
		case fila2:
			m=0xC0+x;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	3b40      	subs	r3, #64	; 0x40
 80006b8:	73fb      	strb	r3, [r7, #15]
			n=(0xC0+x)>>4;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	33c0      	adds	r3, #192	; 0xc0
 80006be:	111b      	asrs	r3, r3, #4
 80006c0:	73bb      	strb	r3, [r7, #14]
			LCD_STM32_CMD(n,0);
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff58 	bl	800057c <LCD_STM32_CMD>
			LCD_STM32_CMD(m,0);
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	2100      	movs	r1, #0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff53 	bl	800057c <LCD_STM32_CMD>
			break;
 80006d6:	e000      	b.n	80006da <LCD_STM32_SET_CURSOR+0x76>
		case fila3:

			break;
 80006d8:	bf00      	nop

			break;
	}


}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop

080006e4 <LCD_STM32_PRINT_CHAR>:

void LCD_STM32_PRINT_CHAR(char a){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m = a>>4;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	73fb      	strb	r3, [r7, #15]
    n = a;
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	73bb      	strb	r3, [r7, #14]

	LCD_STM32_CMD(m,1);
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	2101      	movs	r1, #1
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff3d 	bl	800057c <LCD_STM32_CMD>
	LCD_STM32_CMD(n,1);
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff38 	bl	800057c <LCD_STM32_CMD>

}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LCD_STM32_PRINT_STRING>:

void LCD_STM32_PRINT_STRING(char *a){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]


	while(*a){
 800071c:	e006      	b.n	800072c <LCD_STM32_PRINT_STRING+0x18>
			LCD_STM32_PRINT_CHAR(*a++);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffdc 	bl	80006e4 <LCD_STM32_PRINT_CHAR>
	while(*a){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f4      	bne.n	800071e <LCD_STM32_PRINT_STRING+0xa>
	}

}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_GPIO_Init+0x4c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <MX_GPIO_Init+0x4c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MX_GPIO_Init+0x4c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_GPIO_Init+0x4c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MX_GPIO_Init+0x4c>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_GPIO_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_I2C1_Init+0x50>)
 8000796:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <MX_I2C1_Init+0x54>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_I2C1_Init+0x50>)
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_I2C1_Init+0x58>)
 800079e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_I2C1_Init+0x50>)
 80007ce:	f000 fcb1 	bl	8001134 <HAL_I2C_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007d8:	f000 f8e2 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000078 	.word	0x20000078
 80007e4:	40005400 	.word	0x40005400
 80007e8:	000186a0 	.word	0x000186a0

080007ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <HAL_I2C_MspInit+0x84>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d12c      	bne.n	8000868 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000830:	2312      	movs	r3, #18
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083c:	2304      	movs	r3, #4
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	480c      	ldr	r0, [pc, #48]	; (8000878 <HAL_I2C_MspInit+0x8c>)
 8000848:	f000 faf0 	bl	8000e2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_I2C_MspInit+0x88>)
 8000856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800085a:	6413      	str	r3, [r2, #64]	; 0x40
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_I2C_MspInit+0x88>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40005400 	.word	0x40005400
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 f957 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000886:	f000 f82b 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088a:	f7ff ff59 	bl	8000740 <MX_GPIO_Init>
  MX_I2C1_Init();
 800088e:	f7ff ff7f 	bl	8000790 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
LCD_STM32_INIT();
 8000892:	f7ff feaf 	bl	80005f4 <LCD_STM32_INIT>
LCD_STM32_PRINT_CHAR('T');
LCD_STM32_PRINT_CHAR('M');
LCD_STM32_PRINT_CHAR('3');
LCD_STM32_PRINT_CHAR('2');*/

LCD_STM32_SET_CURSOR(0, fila1);
 8000896:	2100      	movs	r1, #0
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fee3 	bl	8000664 <LCD_STM32_SET_CURSOR>
LCD_STM32_PRINT_STRING("LCD CON I2C");
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <main+0x5c>)
 80008a0:	f7ff ff38 	bl	8000714 <LCD_STM32_PRINT_STRING>
uint8_t count  = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (count = 0; count < 256; ++count) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	73fb      	strb	r3, [r7, #15]
		  LCD_STM32_SET_CURSOR(0, fila2);
 80008ac:	2101      	movs	r1, #1
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fed8 	bl	8000664 <LCD_STM32_SET_CURSOR>
		  sprintf(str_count,"C:%03u",count);
 80008b4:	7bfa      	ldrb	r2, [r7, #15]
 80008b6:	463b      	mov	r3, r7
 80008b8:	4908      	ldr	r1, [pc, #32]	; (80008dc <main+0x60>)
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fcca 	bl	8002254 <siprintf>
		  LCD_STM32_PRINT_STRING(str_count);
 80008c0:	463b      	mov	r3, r7
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff26 	bl	8000714 <LCD_STM32_PRINT_STRING>
		  HAL_Delay(300);
 80008c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008cc:	f000 f9a4 	bl	8000c18 <HAL_Delay>
	  for (count = 0; count < 256; ++count) {
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	3301      	adds	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e7e9      	b.n	80008ac <main+0x30>
 80008d8:	08002bb4 	.word	0x08002bb4
 80008dc:	08002bc0 	.word	0x08002bc0

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fcd0 	bl	8002294 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <SystemClock_Config+0xb8>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a22      	ldr	r2, [pc, #136]	; (8000998 <SystemClock_Config+0xb8>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <SystemClock_Config+0xb8>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <SystemClock_Config+0xbc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <SystemClock_Config+0xbc>)
 800092e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <SystemClock_Config+0xbc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f839 	bl	80019cc <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000960:	f000 f81e 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f001 fa9c 	bl	8001ebc <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800098a:	f000 f809 	bl	80009a0 <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	; (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	; 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8c6 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <_sbrk+0x5c>)
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_sbrk+0x60>)
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <_sbrk+0x64>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <_sbrk+0x68>)
 8000a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d207      	bcs.n	8000a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a80:	f001 fc10 	bl	80022a4 <__errno>
 8000a84:	4603      	mov	r3, r0
 8000a86:	220c      	movs	r2, #12
 8000a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8e:	e009      	b.n	8000aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x64>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a05      	ldr	r2, [pc, #20]	; (8000ab4 <_sbrk+0x64>)
 8000aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3718      	adds	r7, #24
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20018000 	.word	0x20018000
 8000ab0:	00000400 	.word	0x00000400
 8000ab4:	200000cc 	.word	0x200000cc
 8000ab8:	20000220 	.word	0x20000220

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <SystemInit+0x20>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a05      	ldr	r2, [pc, #20]	; (8000adc <SystemInit+0x20>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae4:	480d      	ldr	r0, [pc, #52]	; (8000b1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ae6:	490e      	ldr	r1, [pc, #56]	; (8000b20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000afc:	4c0b      	ldr	r4, [pc, #44]	; (8000b2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0a:	f7ff ffd7 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b0e:	f001 fbcf 	bl	80022b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b12:	f7ff feb3 	bl	800087c <main>
  bx  lr    
 8000b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b24:	08002c24 	.word	0x08002c24
  ldr r2, =_sbss
 8000b28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b2c:	2000021c 	.word	0x2000021c

08000b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <HAL_Init+0x40>)
 8000b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_Init+0x40>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <HAL_Init+0x40>)
 8000b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	f000 f931 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b62:	200f      	movs	r0, #15
 8000b64:	f000 f808 	bl	8000b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b68:	f7ff ff20 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40023c00 	.word	0x40023c00

08000b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_InitTick+0x54>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x58>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f93b 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00e      	b.n	8000bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d80a      	bhi.n	8000bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bac:	2200      	movs	r2, #0
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f000 f911 	bl	8000dda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb8:	4a06      	ldr	r2, [pc, #24]	; (8000bd4 <HAL_InitTick+0x5c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e000      	b.n	8000bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000004 	.word	0x20000004

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	200000d0 	.word	0x200000d0

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	200000d0 	.word	0x200000d0

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff47 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5c 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e159      	b.n	80010fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8148 	bne.w	80010f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d130      	bne.n	8000ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4013      	ands	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	f003 0201 	and.w	r2, r3, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d017      	beq.n	8000f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0303 	and.w	r3, r3, #3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a2 	beq.w	80010f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a52      	ldr	r2, [pc, #328]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a49      	ldr	r2, [pc, #292]	; (800111c <HAL_GPIO_Init+0x2f0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x202>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <HAL_GPIO_Init+0x2f4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1fe>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a47      	ldr	r2, [pc, #284]	; (8001124 <HAL_GPIO_Init+0x2f8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1fa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a46      	ldr	r2, [pc, #280]	; (8001128 <HAL_GPIO_Init+0x2fc>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a45      	ldr	r2, [pc, #276]	; (800112c <HAL_GPIO_Init+0x300>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1f2>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800101e:	2307      	movs	r3, #7
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x304>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a2f      	ldr	r2, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x304>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_GPIO_Init+0x304>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a24      	ldr	r2, [pc, #144]	; (8001130 <HAL_GPIO_Init+0x304>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <HAL_GPIO_Init+0x304>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f aea2 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40013c00 	.word	0x40013c00

08001134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e12b      	b.n	800139e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fb46 	bl	80007ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f022 0201 	bic.w	r2, r2, #1
 8001176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001198:	f001 f848 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 800119c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a81      	ldr	r2, [pc, #516]	; (80013a8 <HAL_I2C_Init+0x274>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d807      	bhi.n	80011b8 <HAL_I2C_Init+0x84>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4a80      	ldr	r2, [pc, #512]	; (80013ac <HAL_I2C_Init+0x278>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	bf94      	ite	ls
 80011b0:	2301      	movls	r3, #1
 80011b2:	2300      	movhi	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	e006      	b.n	80011c6 <HAL_I2C_Init+0x92>
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a7d      	ldr	r2, [pc, #500]	; (80013b0 <HAL_I2C_Init+0x27c>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	bf94      	ite	ls
 80011c0:	2301      	movls	r3, #1
 80011c2:	2300      	movhi	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0e7      	b.n	800139e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4a78      	ldr	r2, [pc, #480]	; (80013b4 <HAL_I2C_Init+0x280>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0c9b      	lsrs	r3, r3, #18
 80011d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a6a      	ldr	r2, [pc, #424]	; (80013a8 <HAL_I2C_Init+0x274>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d802      	bhi.n	8001208 <HAL_I2C_Init+0xd4>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3301      	adds	r3, #1
 8001206:	e009      	b.n	800121c <HAL_I2C_Init+0xe8>
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800120e:	fb02 f303 	mul.w	r3, r2, r3
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_I2C_Init+0x284>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	099b      	lsrs	r3, r3, #6
 800121a:	3301      	adds	r3, #1
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6812      	ldr	r2, [r2, #0]
 8001220:	430b      	orrs	r3, r1
 8001222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800122e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	495c      	ldr	r1, [pc, #368]	; (80013a8 <HAL_I2C_Init+0x274>)
 8001238:	428b      	cmp	r3, r1
 800123a:	d819      	bhi.n	8001270 <HAL_I2C_Init+0x13c>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1e59      	subs	r1, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	fbb1 f3f3 	udiv	r3, r1, r3
 800124a:	1c59      	adds	r1, r3, #1
 800124c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001250:	400b      	ands	r3, r1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00a      	beq.n	800126c <HAL_I2C_Init+0x138>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1e59      	subs	r1, r3, #1
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fbb1 f3f3 	udiv	r3, r1, r3
 8001264:	3301      	adds	r3, #1
 8001266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126a:	e051      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 800126c:	2304      	movs	r3, #4
 800126e:	e04f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d111      	bne.n	800129c <HAL_I2C_Init+0x168>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	1e58      	subs	r0, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	fbb0 f3f3 	udiv	r3, r0, r3
 800128a:	3301      	adds	r3, #1
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf0c      	ite	eq
 8001294:	2301      	moveq	r3, #1
 8001296:	2300      	movne	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	e012      	b.n	80012c2 <HAL_I2C_Init+0x18e>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	1e58      	subs	r0, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	0099      	lsls	r1, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b2:	3301      	adds	r3, #1
 80012b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_I2C_Init+0x196>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e022      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10e      	bne.n	80012f0 <HAL_I2C_Init+0x1bc>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1e58      	subs	r0, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	460b      	mov	r3, r1
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	440b      	add	r3, r1
 80012e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ee:	e00f      	b.n	8001310 <HAL_I2C_Init+0x1dc>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	1e58      	subs	r0, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6859      	ldr	r1, [r3, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	0099      	lsls	r1, r3, #2
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	4313      	orrs	r3, r2
 8001316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800133e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6911      	ldr	r1, [r2, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68d2      	ldr	r2, [r2, #12]
 800134a:	4311      	orrs	r1, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	430b      	orrs	r3, r1
 8001352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f042 0201 	orr.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	000186a0 	.word	0x000186a0
 80013ac:	001e847f 	.word	0x001e847f
 80013b0:	003d08ff 	.word	0x003d08ff
 80013b4:	431bde83 	.word	0x431bde83
 80013b8:	10624dd3 	.word	0x10624dd3

080013bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	607a      	str	r2, [r7, #4]
 80013c6:	461a      	mov	r2, r3
 80013c8:	460b      	mov	r3, r1
 80013ca:	817b      	strh	r3, [r7, #10]
 80013cc:	4613      	mov	r3, r2
 80013ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fc16 	bl	8000c00 <HAL_GetTick>
 80013d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b20      	cmp	r3, #32
 80013e0:	f040 80e0 	bne.w	80015a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2319      	movs	r3, #25
 80013ea:	2201      	movs	r2, #1
 80013ec:	4970      	ldr	r1, [pc, #448]	; (80015b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f000 f964 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
 80013fc:	e0d3      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <HAL_I2C_Master_Transmit+0x50>
 8001408:	2302      	movs	r3, #2
 800140a:	e0cc      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d007      	beq.n	8001432 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001440:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2221      	movs	r2, #33	; 0x21
 8001446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2210      	movs	r2, #16
 800144e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	893a      	ldrh	r2, [r7, #8]
 8001462:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001474:	8979      	ldrh	r1, [r7, #10]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	6a3a      	ldr	r2, [r7, #32]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f89c 	bl	80015b8 <I2C_MasterRequestWrite>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e08d      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80014a0:	e066      	b.n	8001570 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	6a39      	ldr	r1, [r7, #32]
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f9de 	bl	8001868 <I2C_WaitOnTXEFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d00d      	beq.n	80014ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d107      	bne.n	80014ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e06b      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b04      	cmp	r3, #4
 800150a:	d11b      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x188>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d017      	beq.n	8001544 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	781a      	ldrb	r2, [r3, #0]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152e:	b29b      	uxth	r3, r3
 8001530:	3b01      	subs	r3, #1
 8001532:	b29a      	uxth	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153c:	3b01      	subs	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	6a39      	ldr	r1, [r7, #32]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f9ce 	bl	80018ea <I2C_WaitOnBTFFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b04      	cmp	r3, #4
 800155a:	d107      	bne.n	800156c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800156a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e01a      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d194      	bne.n	80014a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e000      	b.n	80015a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80015a4:	2302      	movs	r3, #2
  }
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	00100002 	.word	0x00100002
 80015b4:	ffff0000 	.word	0xffff0000

080015b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	460b      	mov	r3, r1
 80015c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d006      	beq.n	80015e2 <I2C_MasterRequestWrite+0x2a>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d003      	beq.n	80015e2 <I2C_MasterRequestWrite+0x2a>
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80015e0:	d108      	bne.n	80015f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e00b      	b.n	800160c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	2b12      	cmp	r3, #18
 80015fa:	d107      	bne.n	800160c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800160a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f84f 	bl	80016bc <I2C_WaitOnFlagUntilTimeout>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001632:	d103      	bne.n	800163c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e035      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001648:	d108      	bne.n	800165c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800164a:	897b      	ldrh	r3, [r7, #10]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	e01b      	b.n	8001694 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800165c:	897b      	ldrh	r3, [r7, #10]
 800165e:	11db      	asrs	r3, r3, #7
 8001660:	b2db      	uxtb	r3, r3
 8001662:	f003 0306 	and.w	r3, r3, #6
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f063 030f 	orn	r3, r3, #15
 800166c:	b2da      	uxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	490e      	ldr	r1, [pc, #56]	; (80016b4 <I2C_MasterRequestWrite+0xfc>)
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f875 	bl	800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e010      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <I2C_MasterRequestWrite+0x100>)
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f865 	bl	800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	00010008 	.word	0x00010008
 80016b8:	00010002 	.word	0x00010002

080016bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016cc:	e025      	b.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d021      	beq.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d6:	f7ff fa93 	bl	8000c00 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d302      	bcc.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d116      	bne.n	800171a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2220      	movs	r2, #32
 80016f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f043 0220 	orr.w	r2, r3, #32
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e023      	b.n	8001762 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	0c1b      	lsrs	r3, r3, #16
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d10d      	bne.n	8001740 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4013      	ands	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf0c      	ite	eq
 8001736:	2301      	moveq	r3, #1
 8001738:	2300      	movne	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	e00c      	b.n	800175a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4013      	ands	r3, r2
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	bf0c      	ite	eq
 8001752:	2301      	moveq	r3, #1
 8001754:	2300      	movne	r3, #0
 8001756:	b2db      	uxtb	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	429a      	cmp	r2, r3
 800175e:	d0b6      	beq.n	80016ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001778:	e051      	b.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001788:	d123      	bne.n	80017d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001798:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f043 0204 	orr.w	r2, r3, #4
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e046      	b.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d021      	beq.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017da:	f7ff fa11 	bl	8000c00 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d302      	bcc.n	80017f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d116      	bne.n	800181e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f043 0220 	orr.w	r2, r3, #32
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e020      	b.n	8001860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10c      	bne.n	8001842 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	4013      	ands	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	bf14      	ite	ne
 800183a:	2301      	movne	r3, #1
 800183c:	2300      	moveq	r3, #0
 800183e:	b2db      	uxtb	r3, r3
 8001840:	e00b      	b.n	800185a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	43da      	mvns	r2, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	4013      	ands	r3, r2
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d18d      	bne.n	800177a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001874:	e02d      	b.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f878 	bl	800196c <I2C_IsAcknowledgeFailed>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e02d      	b.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d021      	beq.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800188e:	f7ff f9b7 	bl	8000c00 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	429a      	cmp	r2, r3
 800189c:	d302      	bcc.n	80018a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d116      	bne.n	80018d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f043 0220 	orr.w	r2, r3, #32
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e007      	b.n	80018e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	2b80      	cmp	r3, #128	; 0x80
 80018de:	d1ca      	bne.n	8001876 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018f6:	e02d      	b.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f000 f837 	bl	800196c <I2C_IsAcknowledgeFailed>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e02d      	b.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d021      	beq.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001910:	f7ff f976 	bl	8000c00 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	429a      	cmp	r2, r3
 800191e:	d302      	bcc.n	8001926 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d116      	bne.n	8001954 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f043 0220 	orr.w	r2, r3, #32
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e007      	b.n	8001964 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b04      	cmp	r3, #4
 8001960:	d1ca      	bne.n	80018f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d11b      	bne.n	80019bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800198c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f043 0204 	orr.w	r2, r3, #4
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e267      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ea:	4b88      	ldr	r3, [pc, #544]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d00c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b85      	ldr	r3, [pc, #532]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d112      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a02:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0e:	d10b      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05b      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x108>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d157      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e242      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d106      	bne.n	8001a40 <HAL_RCC_OscConfig+0x74>
 8001a32:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a75      	ldr	r2, [pc, #468]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e01d      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x98>
 8001a4a:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6f      	ldr	r2, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b6d      	ldr	r3, [pc, #436]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a6c      	ldr	r2, [pc, #432]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0xb0>
 8001a64:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a68      	ldr	r2, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a65      	ldr	r2, [pc, #404]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f8bc 	bl	8000c00 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f8b8 	bl	8000c00 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e207      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0f0      	beq.n	8001a8c <HAL_RCC_OscConfig+0xc0>
 8001aaa:	e014      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7ff f8a8 	bl	8000c00 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff f8a4 	bl	8000c00 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1f3      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b51      	ldr	r3, [pc, #324]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0xe8>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ae2:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d11c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001afa:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d005      	beq.n	8001b1e <HAL_RCC_OscConfig+0x152>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e1c7      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4937      	ldr	r1, [pc, #220]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e03a      	b.n	8001baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <HAL_RCC_OscConfig+0x244>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7ff f85d 	bl	8000c00 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b4a:	f7ff f859 	bl	8000c00 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e1a8      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4925      	ldr	r1, [pc, #148]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e015      	b.n	8001baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <HAL_RCC_OscConfig+0x244>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f83c 	bl	8000c00 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f838 	bl	8000c00 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e187      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d036      	beq.n	8001c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_RCC_OscConfig+0x248>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f81c 	bl	8000c00 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bcc:	f7ff f818 	bl	8000c00 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e167      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x240>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x200>
 8001bea:	e01b      	b.n	8001c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_RCC_OscConfig+0x248>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf2:	f7ff f805 	bl	8000c00 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	e00e      	b.n	8001c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfa:	f7ff f801 	bl	8000c00 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d907      	bls.n	8001c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e150      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	42470000 	.word	0x42470000
 8001c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1ea      	bne.n	8001bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8097 	beq.w	8001d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	4b7d      	ldr	r3, [pc, #500]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a7c      	ldr	r2, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b7a      	ldr	r3, [pc, #488]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b77      	ldr	r3, [pc, #476]	; (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a73      	ldr	r2, [pc, #460]	; (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ffc1 	bl	8000c00 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe ffbd 	bl	8000c00 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e10c      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_OscConfig+0x474>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x2ea>
 8001ca8:	4b64      	ldr	r3, [pc, #400]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a63      	ldr	r2, [pc, #396]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	e01c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x324>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x30c>
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	4a5b      	ldr	r2, [pc, #364]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x324>
 8001cd8:	4b58      	ldr	r3, [pc, #352]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 0301 	bic.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001cea:	f023 0304 	bic.w	r3, r3, #4
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d015      	beq.n	8001d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7fe ff82 	bl	8000c00 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff7e 	bl	8000c00 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e0cb      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	4b49      	ldr	r3, [pc, #292]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ee      	beq.n	8001d00 <HAL_RCC_OscConfig+0x334>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7fe ff6c 	bl	8000c00 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2a:	e00a      	b.n	8001d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d2c:	f7fe ff68 	bl	8000c00 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0b5      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d42:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1ee      	bne.n	8001d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d4e:	7dfb      	ldrb	r3, [r7, #23]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a1 	beq.w	8001eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d6a:	4b34      	ldr	r3, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d05c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d141      	bne.n	8001e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe ff3c 	bl	8000c00 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7fe ff38 	bl	8000c00 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e087      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	491b      	ldr	r1, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe ff11 	bl	8000c00 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe ff0d 	bl	8000c00 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e05c      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x416>
 8001e00:	e054      	b.n	8001eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <HAL_RCC_OscConfig+0x478>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe fefa 	bl	8000c00 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fef6 	bl	8000c00 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e045      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x470>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x444>
 8001e2e:	e03d      	b.n	8001eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d107      	bne.n	8001e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e038      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000
 8001e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4ec>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d028      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d121      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d11a      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e78:	4013      	ands	r3, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d111      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8e:	085b      	lsrs	r3, r3, #1
 8001e90:	3b01      	subs	r3, #1
 8001e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800

08001ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0cc      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d90c      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0b8      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f10:	4b59      	ldr	r3, [pc, #356]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a58      	ldr	r2, [pc, #352]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f28:	4b53      	ldr	r3, [pc, #332]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	494d      	ldr	r1, [pc, #308]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d044      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d119      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e07f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d003      	beq.n	8001f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e06f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e067      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b37      	ldr	r3, [pc, #220]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4934      	ldr	r1, [pc, #208]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fe28 	bl	8000c00 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe fe24 	bl	8000c00 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e04f      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d20c      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e032      	b.n	800206a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d008      	beq.n	8002022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4916      	ldr	r1, [pc, #88]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	4313      	orrs	r3, r2
 8002020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	490e      	ldr	r1, [pc, #56]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	4313      	orrs	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002042:	f000 f821 	bl	8002088 <HAL_RCC_GetSysClockFreq>
 8002046:	4602      	mov	r2, r0
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	490a      	ldr	r1, [pc, #40]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	5ccb      	ldrb	r3, [r1, r3]
 8002056:	fa22 f303 	lsr.w	r3, r2, r3
 800205a:	4a09      	ldr	r2, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fd88 	bl	8000b78 <HAL_InitTick>

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40023c00 	.word	0x40023c00
 8002078:	40023800 	.word	0x40023800
 800207c:	08002bc8 	.word	0x08002bc8
 8002080:	20000000 	.word	0x20000000
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800208c:	b090      	sub	sp, #64	; 0x40
 800208e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x40>
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	f200 80a1 	bhi.w	80021f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x34>
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ba:	e09b      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_GetSysClockFreq+0x184>)
 80020be:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020c0:	e09b      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020c2:	4b53      	ldr	r3, [pc, #332]	; (8002210 <HAL_RCC_GetSysClockFreq+0x188>)
 80020c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020c6:	e098      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c8:	4b4f      	ldr	r3, [pc, #316]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020d2:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d028      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020de:	4b4a      	ldr	r3, [pc, #296]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	099b      	lsrs	r3, r3, #6
 80020e4:	2200      	movs	r2, #0
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	627a      	str	r2, [r7, #36]	; 0x24
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020f0:	2100      	movs	r1, #0
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f4:	fb03 f201 	mul.w	r2, r3, r1
 80020f8:	2300      	movs	r3, #0
 80020fa:	fb00 f303 	mul.w	r3, r0, r3
 80020fe:	4413      	add	r3, r2
 8002100:	4a43      	ldr	r2, [pc, #268]	; (8002210 <HAL_RCC_GetSysClockFreq+0x188>)
 8002102:	fba0 1202 	umull	r1, r2, r0, r2
 8002106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002108:	460a      	mov	r2, r1
 800210a:	62ba      	str	r2, [r7, #40]	; 0x28
 800210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800210e:	4413      	add	r3, r2
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002114:	2200      	movs	r2, #0
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	61fa      	str	r2, [r7, #28]
 800211a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002122:	f7fe f8ad 	bl	8000280 <__aeabi_uldivmod>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4613      	mov	r3, r2
 800212c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212e:	e053      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002130:	4b35      	ldr	r3, [pc, #212]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	2200      	movs	r2, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	617a      	str	r2, [r7, #20]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002142:	f04f 0b00 	mov.w	fp, #0
 8002146:	4652      	mov	r2, sl
 8002148:	465b      	mov	r3, fp
 800214a:	f04f 0000 	mov.w	r0, #0
 800214e:	f04f 0100 	mov.w	r1, #0
 8002152:	0159      	lsls	r1, r3, #5
 8002154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002158:	0150      	lsls	r0, r2, #5
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ebb2 080a 	subs.w	r8, r2, sl
 8002162:	eb63 090b 	sbc.w	r9, r3, fp
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002172:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002176:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800217a:	ebb2 0408 	subs.w	r4, r2, r8
 800217e:	eb63 0509 	sbc.w	r5, r3, r9
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	00eb      	lsls	r3, r5, #3
 800218c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002190:	00e2      	lsls	r2, r4, #3
 8002192:	4614      	mov	r4, r2
 8002194:	461d      	mov	r5, r3
 8002196:	eb14 030a 	adds.w	r3, r4, sl
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	eb45 030b 	adc.w	r3, r5, fp
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ae:	4629      	mov	r1, r5
 80021b0:	028b      	lsls	r3, r1, #10
 80021b2:	4621      	mov	r1, r4
 80021b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b8:	4621      	mov	r1, r4
 80021ba:	028a      	lsls	r2, r1, #10
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	2200      	movs	r2, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	60fa      	str	r2, [r7, #12]
 80021c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021cc:	f7fe f858 	bl	8000280 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4613      	mov	r3, r2
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetSysClockFreq+0x180>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	3301      	adds	r3, #1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80021e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetSysClockFreq+0x184>)
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3740      	adds	r7, #64	; 0x40
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	00f42400 	.word	0x00f42400
 8002210:	017d7840 	.word	0x017d7840

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff0 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	08002bd8 	.word	0x08002bd8

08002254 <siprintf>:
 8002254:	b40e      	push	{r1, r2, r3}
 8002256:	b500      	push	{lr}
 8002258:	b09c      	sub	sp, #112	; 0x70
 800225a:	ab1d      	add	r3, sp, #116	; 0x74
 800225c:	9002      	str	r0, [sp, #8]
 800225e:	9006      	str	r0, [sp, #24]
 8002260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002264:	4809      	ldr	r0, [pc, #36]	; (800228c <siprintf+0x38>)
 8002266:	9107      	str	r1, [sp, #28]
 8002268:	9104      	str	r1, [sp, #16]
 800226a:	4909      	ldr	r1, [pc, #36]	; (8002290 <siprintf+0x3c>)
 800226c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002270:	9105      	str	r1, [sp, #20]
 8002272:	6800      	ldr	r0, [r0, #0]
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	a902      	add	r1, sp, #8
 8002278:	f000 f992 	bl	80025a0 <_svfiprintf_r>
 800227c:	9b02      	ldr	r3, [sp, #8]
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
 8002282:	b01c      	add	sp, #112	; 0x70
 8002284:	f85d eb04 	ldr.w	lr, [sp], #4
 8002288:	b003      	add	sp, #12
 800228a:	4770      	bx	lr
 800228c:	20000058 	.word	0x20000058
 8002290:	ffff0208 	.word	0xffff0208

08002294 <memset>:
 8002294:	4402      	add	r2, r0
 8002296:	4603      	mov	r3, r0
 8002298:	4293      	cmp	r3, r2
 800229a:	d100      	bne.n	800229e <memset+0xa>
 800229c:	4770      	bx	lr
 800229e:	f803 1b01 	strb.w	r1, [r3], #1
 80022a2:	e7f9      	b.n	8002298 <memset+0x4>

080022a4 <__errno>:
 80022a4:	4b01      	ldr	r3, [pc, #4]	; (80022ac <__errno+0x8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000058 	.word	0x20000058

080022b0 <__libc_init_array>:
 80022b0:	b570      	push	{r4, r5, r6, lr}
 80022b2:	4d0d      	ldr	r5, [pc, #52]	; (80022e8 <__libc_init_array+0x38>)
 80022b4:	4c0d      	ldr	r4, [pc, #52]	; (80022ec <__libc_init_array+0x3c>)
 80022b6:	1b64      	subs	r4, r4, r5
 80022b8:	10a4      	asrs	r4, r4, #2
 80022ba:	2600      	movs	r6, #0
 80022bc:	42a6      	cmp	r6, r4
 80022be:	d109      	bne.n	80022d4 <__libc_init_array+0x24>
 80022c0:	4d0b      	ldr	r5, [pc, #44]	; (80022f0 <__libc_init_array+0x40>)
 80022c2:	4c0c      	ldr	r4, [pc, #48]	; (80022f4 <__libc_init_array+0x44>)
 80022c4:	f000 fc6a 	bl	8002b9c <_init>
 80022c8:	1b64      	subs	r4, r4, r5
 80022ca:	10a4      	asrs	r4, r4, #2
 80022cc:	2600      	movs	r6, #0
 80022ce:	42a6      	cmp	r6, r4
 80022d0:	d105      	bne.n	80022de <__libc_init_array+0x2e>
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d8:	4798      	blx	r3
 80022da:	3601      	adds	r6, #1
 80022dc:	e7ee      	b.n	80022bc <__libc_init_array+0xc>
 80022de:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e2:	4798      	blx	r3
 80022e4:	3601      	adds	r6, #1
 80022e6:	e7f2      	b.n	80022ce <__libc_init_array+0x1e>
 80022e8:	08002c1c 	.word	0x08002c1c
 80022ec:	08002c1c 	.word	0x08002c1c
 80022f0:	08002c1c 	.word	0x08002c1c
 80022f4:	08002c20 	.word	0x08002c20

080022f8 <__retarget_lock_acquire_recursive>:
 80022f8:	4770      	bx	lr

080022fa <__retarget_lock_release_recursive>:
 80022fa:	4770      	bx	lr

080022fc <_free_r>:
 80022fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022fe:	2900      	cmp	r1, #0
 8002300:	d044      	beq.n	800238c <_free_r+0x90>
 8002302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002306:	9001      	str	r0, [sp, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f1a1 0404 	sub.w	r4, r1, #4
 800230e:	bfb8      	it	lt
 8002310:	18e4      	addlt	r4, r4, r3
 8002312:	f000 f8df 	bl	80024d4 <__malloc_lock>
 8002316:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <_free_r+0x94>)
 8002318:	9801      	ldr	r0, [sp, #4]
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	b933      	cbnz	r3, 800232c <_free_r+0x30>
 800231e:	6063      	str	r3, [r4, #4]
 8002320:	6014      	str	r4, [r2, #0]
 8002322:	b003      	add	sp, #12
 8002324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002328:	f000 b8da 	b.w	80024e0 <__malloc_unlock>
 800232c:	42a3      	cmp	r3, r4
 800232e:	d908      	bls.n	8002342 <_free_r+0x46>
 8002330:	6825      	ldr	r5, [r4, #0]
 8002332:	1961      	adds	r1, r4, r5
 8002334:	428b      	cmp	r3, r1
 8002336:	bf01      	itttt	eq
 8002338:	6819      	ldreq	r1, [r3, #0]
 800233a:	685b      	ldreq	r3, [r3, #4]
 800233c:	1949      	addeq	r1, r1, r5
 800233e:	6021      	streq	r1, [r4, #0]
 8002340:	e7ed      	b.n	800231e <_free_r+0x22>
 8002342:	461a      	mov	r2, r3
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	b10b      	cbz	r3, 800234c <_free_r+0x50>
 8002348:	42a3      	cmp	r3, r4
 800234a:	d9fa      	bls.n	8002342 <_free_r+0x46>
 800234c:	6811      	ldr	r1, [r2, #0]
 800234e:	1855      	adds	r5, r2, r1
 8002350:	42a5      	cmp	r5, r4
 8002352:	d10b      	bne.n	800236c <_free_r+0x70>
 8002354:	6824      	ldr	r4, [r4, #0]
 8002356:	4421      	add	r1, r4
 8002358:	1854      	adds	r4, r2, r1
 800235a:	42a3      	cmp	r3, r4
 800235c:	6011      	str	r1, [r2, #0]
 800235e:	d1e0      	bne.n	8002322 <_free_r+0x26>
 8002360:	681c      	ldr	r4, [r3, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	6053      	str	r3, [r2, #4]
 8002366:	440c      	add	r4, r1
 8002368:	6014      	str	r4, [r2, #0]
 800236a:	e7da      	b.n	8002322 <_free_r+0x26>
 800236c:	d902      	bls.n	8002374 <_free_r+0x78>
 800236e:	230c      	movs	r3, #12
 8002370:	6003      	str	r3, [r0, #0]
 8002372:	e7d6      	b.n	8002322 <_free_r+0x26>
 8002374:	6825      	ldr	r5, [r4, #0]
 8002376:	1961      	adds	r1, r4, r5
 8002378:	428b      	cmp	r3, r1
 800237a:	bf04      	itt	eq
 800237c:	6819      	ldreq	r1, [r3, #0]
 800237e:	685b      	ldreq	r3, [r3, #4]
 8002380:	6063      	str	r3, [r4, #4]
 8002382:	bf04      	itt	eq
 8002384:	1949      	addeq	r1, r1, r5
 8002386:	6021      	streq	r1, [r4, #0]
 8002388:	6054      	str	r4, [r2, #4]
 800238a:	e7ca      	b.n	8002322 <_free_r+0x26>
 800238c:	b003      	add	sp, #12
 800238e:	bd30      	pop	{r4, r5, pc}
 8002390:	20000214 	.word	0x20000214

08002394 <sbrk_aligned>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	4e0e      	ldr	r6, [pc, #56]	; (80023d0 <sbrk_aligned+0x3c>)
 8002398:	460c      	mov	r4, r1
 800239a:	6831      	ldr	r1, [r6, #0]
 800239c:	4605      	mov	r5, r0
 800239e:	b911      	cbnz	r1, 80023a6 <sbrk_aligned+0x12>
 80023a0:	f000 fba6 	bl	8002af0 <_sbrk_r>
 80023a4:	6030      	str	r0, [r6, #0]
 80023a6:	4621      	mov	r1, r4
 80023a8:	4628      	mov	r0, r5
 80023aa:	f000 fba1 	bl	8002af0 <_sbrk_r>
 80023ae:	1c43      	adds	r3, r0, #1
 80023b0:	d00a      	beq.n	80023c8 <sbrk_aligned+0x34>
 80023b2:	1cc4      	adds	r4, r0, #3
 80023b4:	f024 0403 	bic.w	r4, r4, #3
 80023b8:	42a0      	cmp	r0, r4
 80023ba:	d007      	beq.n	80023cc <sbrk_aligned+0x38>
 80023bc:	1a21      	subs	r1, r4, r0
 80023be:	4628      	mov	r0, r5
 80023c0:	f000 fb96 	bl	8002af0 <_sbrk_r>
 80023c4:	3001      	adds	r0, #1
 80023c6:	d101      	bne.n	80023cc <sbrk_aligned+0x38>
 80023c8:	f04f 34ff 	mov.w	r4, #4294967295
 80023cc:	4620      	mov	r0, r4
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
 80023d0:	20000218 	.word	0x20000218

080023d4 <_malloc_r>:
 80023d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d8:	1ccd      	adds	r5, r1, #3
 80023da:	f025 0503 	bic.w	r5, r5, #3
 80023de:	3508      	adds	r5, #8
 80023e0:	2d0c      	cmp	r5, #12
 80023e2:	bf38      	it	cc
 80023e4:	250c      	movcc	r5, #12
 80023e6:	2d00      	cmp	r5, #0
 80023e8:	4607      	mov	r7, r0
 80023ea:	db01      	blt.n	80023f0 <_malloc_r+0x1c>
 80023ec:	42a9      	cmp	r1, r5
 80023ee:	d905      	bls.n	80023fc <_malloc_r+0x28>
 80023f0:	230c      	movs	r3, #12
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	2600      	movs	r6, #0
 80023f6:	4630      	mov	r0, r6
 80023f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80024d0 <_malloc_r+0xfc>
 8002400:	f000 f868 	bl	80024d4 <__malloc_lock>
 8002404:	f8d8 3000 	ldr.w	r3, [r8]
 8002408:	461c      	mov	r4, r3
 800240a:	bb5c      	cbnz	r4, 8002464 <_malloc_r+0x90>
 800240c:	4629      	mov	r1, r5
 800240e:	4638      	mov	r0, r7
 8002410:	f7ff ffc0 	bl	8002394 <sbrk_aligned>
 8002414:	1c43      	adds	r3, r0, #1
 8002416:	4604      	mov	r4, r0
 8002418:	d155      	bne.n	80024c6 <_malloc_r+0xf2>
 800241a:	f8d8 4000 	ldr.w	r4, [r8]
 800241e:	4626      	mov	r6, r4
 8002420:	2e00      	cmp	r6, #0
 8002422:	d145      	bne.n	80024b0 <_malloc_r+0xdc>
 8002424:	2c00      	cmp	r4, #0
 8002426:	d048      	beq.n	80024ba <_malloc_r+0xe6>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	4631      	mov	r1, r6
 800242c:	4638      	mov	r0, r7
 800242e:	eb04 0903 	add.w	r9, r4, r3
 8002432:	f000 fb5d 	bl	8002af0 <_sbrk_r>
 8002436:	4581      	cmp	r9, r0
 8002438:	d13f      	bne.n	80024ba <_malloc_r+0xe6>
 800243a:	6821      	ldr	r1, [r4, #0]
 800243c:	1a6d      	subs	r5, r5, r1
 800243e:	4629      	mov	r1, r5
 8002440:	4638      	mov	r0, r7
 8002442:	f7ff ffa7 	bl	8002394 <sbrk_aligned>
 8002446:	3001      	adds	r0, #1
 8002448:	d037      	beq.n	80024ba <_malloc_r+0xe6>
 800244a:	6823      	ldr	r3, [r4, #0]
 800244c:	442b      	add	r3, r5
 800244e:	6023      	str	r3, [r4, #0]
 8002450:	f8d8 3000 	ldr.w	r3, [r8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d038      	beq.n	80024ca <_malloc_r+0xf6>
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	42a2      	cmp	r2, r4
 800245c:	d12b      	bne.n	80024b6 <_malloc_r+0xe2>
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e00f      	b.n	8002484 <_malloc_r+0xb0>
 8002464:	6822      	ldr	r2, [r4, #0]
 8002466:	1b52      	subs	r2, r2, r5
 8002468:	d41f      	bmi.n	80024aa <_malloc_r+0xd6>
 800246a:	2a0b      	cmp	r2, #11
 800246c:	d917      	bls.n	800249e <_malloc_r+0xca>
 800246e:	1961      	adds	r1, r4, r5
 8002470:	42a3      	cmp	r3, r4
 8002472:	6025      	str	r5, [r4, #0]
 8002474:	bf18      	it	ne
 8002476:	6059      	strne	r1, [r3, #4]
 8002478:	6863      	ldr	r3, [r4, #4]
 800247a:	bf08      	it	eq
 800247c:	f8c8 1000 	streq.w	r1, [r8]
 8002480:	5162      	str	r2, [r4, r5]
 8002482:	604b      	str	r3, [r1, #4]
 8002484:	4638      	mov	r0, r7
 8002486:	f104 060b 	add.w	r6, r4, #11
 800248a:	f000 f829 	bl	80024e0 <__malloc_unlock>
 800248e:	f026 0607 	bic.w	r6, r6, #7
 8002492:	1d23      	adds	r3, r4, #4
 8002494:	1af2      	subs	r2, r6, r3
 8002496:	d0ae      	beq.n	80023f6 <_malloc_r+0x22>
 8002498:	1b9b      	subs	r3, r3, r6
 800249a:	50a3      	str	r3, [r4, r2]
 800249c:	e7ab      	b.n	80023f6 <_malloc_r+0x22>
 800249e:	42a3      	cmp	r3, r4
 80024a0:	6862      	ldr	r2, [r4, #4]
 80024a2:	d1dd      	bne.n	8002460 <_malloc_r+0x8c>
 80024a4:	f8c8 2000 	str.w	r2, [r8]
 80024a8:	e7ec      	b.n	8002484 <_malloc_r+0xb0>
 80024aa:	4623      	mov	r3, r4
 80024ac:	6864      	ldr	r4, [r4, #4]
 80024ae:	e7ac      	b.n	800240a <_malloc_r+0x36>
 80024b0:	4634      	mov	r4, r6
 80024b2:	6876      	ldr	r6, [r6, #4]
 80024b4:	e7b4      	b.n	8002420 <_malloc_r+0x4c>
 80024b6:	4613      	mov	r3, r2
 80024b8:	e7cc      	b.n	8002454 <_malloc_r+0x80>
 80024ba:	230c      	movs	r3, #12
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4638      	mov	r0, r7
 80024c0:	f000 f80e 	bl	80024e0 <__malloc_unlock>
 80024c4:	e797      	b.n	80023f6 <_malloc_r+0x22>
 80024c6:	6025      	str	r5, [r4, #0]
 80024c8:	e7dc      	b.n	8002484 <_malloc_r+0xb0>
 80024ca:	605b      	str	r3, [r3, #4]
 80024cc:	deff      	udf	#255	; 0xff
 80024ce:	bf00      	nop
 80024d0:	20000214 	.word	0x20000214

080024d4 <__malloc_lock>:
 80024d4:	4801      	ldr	r0, [pc, #4]	; (80024dc <__malloc_lock+0x8>)
 80024d6:	f7ff bf0f 	b.w	80022f8 <__retarget_lock_acquire_recursive>
 80024da:	bf00      	nop
 80024dc:	20000210 	.word	0x20000210

080024e0 <__malloc_unlock>:
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <__malloc_unlock+0x8>)
 80024e2:	f7ff bf0a 	b.w	80022fa <__retarget_lock_release_recursive>
 80024e6:	bf00      	nop
 80024e8:	20000210 	.word	0x20000210

080024ec <__ssputs_r>:
 80024ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024f0:	688e      	ldr	r6, [r1, #8]
 80024f2:	461f      	mov	r7, r3
 80024f4:	42be      	cmp	r6, r7
 80024f6:	680b      	ldr	r3, [r1, #0]
 80024f8:	4682      	mov	sl, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4690      	mov	r8, r2
 80024fe:	d82c      	bhi.n	800255a <__ssputs_r+0x6e>
 8002500:	898a      	ldrh	r2, [r1, #12]
 8002502:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002506:	d026      	beq.n	8002556 <__ssputs_r+0x6a>
 8002508:	6965      	ldr	r5, [r4, #20]
 800250a:	6909      	ldr	r1, [r1, #16]
 800250c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002510:	eba3 0901 	sub.w	r9, r3, r1
 8002514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002518:	1c7b      	adds	r3, r7, #1
 800251a:	444b      	add	r3, r9
 800251c:	106d      	asrs	r5, r5, #1
 800251e:	429d      	cmp	r5, r3
 8002520:	bf38      	it	cc
 8002522:	461d      	movcc	r5, r3
 8002524:	0553      	lsls	r3, r2, #21
 8002526:	d527      	bpl.n	8002578 <__ssputs_r+0x8c>
 8002528:	4629      	mov	r1, r5
 800252a:	f7ff ff53 	bl	80023d4 <_malloc_r>
 800252e:	4606      	mov	r6, r0
 8002530:	b360      	cbz	r0, 800258c <__ssputs_r+0xa0>
 8002532:	6921      	ldr	r1, [r4, #16]
 8002534:	464a      	mov	r2, r9
 8002536:	f000 faeb 	bl	8002b10 <memcpy>
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	81a3      	strh	r3, [r4, #12]
 8002546:	6126      	str	r6, [r4, #16]
 8002548:	6165      	str	r5, [r4, #20]
 800254a:	444e      	add	r6, r9
 800254c:	eba5 0509 	sub.w	r5, r5, r9
 8002550:	6026      	str	r6, [r4, #0]
 8002552:	60a5      	str	r5, [r4, #8]
 8002554:	463e      	mov	r6, r7
 8002556:	42be      	cmp	r6, r7
 8002558:	d900      	bls.n	800255c <__ssputs_r+0x70>
 800255a:	463e      	mov	r6, r7
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	4632      	mov	r2, r6
 8002560:	4641      	mov	r1, r8
 8002562:	f000 faab 	bl	8002abc <memmove>
 8002566:	68a3      	ldr	r3, [r4, #8]
 8002568:	1b9b      	subs	r3, r3, r6
 800256a:	60a3      	str	r3, [r4, #8]
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	4433      	add	r3, r6
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	2000      	movs	r0, #0
 8002574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002578:	462a      	mov	r2, r5
 800257a:	f000 fad7 	bl	8002b2c <_realloc_r>
 800257e:	4606      	mov	r6, r0
 8002580:	2800      	cmp	r0, #0
 8002582:	d1e0      	bne.n	8002546 <__ssputs_r+0x5a>
 8002584:	6921      	ldr	r1, [r4, #16]
 8002586:	4650      	mov	r0, sl
 8002588:	f7ff feb8 	bl	80022fc <_free_r>
 800258c:	230c      	movs	r3, #12
 800258e:	f8ca 3000 	str.w	r3, [sl]
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	f04f 30ff 	mov.w	r0, #4294967295
 800259e:	e7e9      	b.n	8002574 <__ssputs_r+0x88>

080025a0 <_svfiprintf_r>:
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	4698      	mov	r8, r3
 80025a6:	898b      	ldrh	r3, [r1, #12]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	b09d      	sub	sp, #116	; 0x74
 80025ac:	4607      	mov	r7, r0
 80025ae:	460d      	mov	r5, r1
 80025b0:	4614      	mov	r4, r2
 80025b2:	d50e      	bpl.n	80025d2 <_svfiprintf_r+0x32>
 80025b4:	690b      	ldr	r3, [r1, #16]
 80025b6:	b963      	cbnz	r3, 80025d2 <_svfiprintf_r+0x32>
 80025b8:	2140      	movs	r1, #64	; 0x40
 80025ba:	f7ff ff0b 	bl	80023d4 <_malloc_r>
 80025be:	6028      	str	r0, [r5, #0]
 80025c0:	6128      	str	r0, [r5, #16]
 80025c2:	b920      	cbnz	r0, 80025ce <_svfiprintf_r+0x2e>
 80025c4:	230c      	movs	r3, #12
 80025c6:	603b      	str	r3, [r7, #0]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	e0d0      	b.n	8002770 <_svfiprintf_r+0x1d0>
 80025ce:	2340      	movs	r3, #64	; 0x40
 80025d0:	616b      	str	r3, [r5, #20]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9309      	str	r3, [sp, #36]	; 0x24
 80025d6:	2320      	movs	r3, #32
 80025d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80025e0:	2330      	movs	r3, #48	; 0x30
 80025e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002788 <_svfiprintf_r+0x1e8>
 80025e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025ea:	f04f 0901 	mov.w	r9, #1
 80025ee:	4623      	mov	r3, r4
 80025f0:	469a      	mov	sl, r3
 80025f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025f6:	b10a      	cbz	r2, 80025fc <_svfiprintf_r+0x5c>
 80025f8:	2a25      	cmp	r2, #37	; 0x25
 80025fa:	d1f9      	bne.n	80025f0 <_svfiprintf_r+0x50>
 80025fc:	ebba 0b04 	subs.w	fp, sl, r4
 8002600:	d00b      	beq.n	800261a <_svfiprintf_r+0x7a>
 8002602:	465b      	mov	r3, fp
 8002604:	4622      	mov	r2, r4
 8002606:	4629      	mov	r1, r5
 8002608:	4638      	mov	r0, r7
 800260a:	f7ff ff6f 	bl	80024ec <__ssputs_r>
 800260e:	3001      	adds	r0, #1
 8002610:	f000 80a9 	beq.w	8002766 <_svfiprintf_r+0x1c6>
 8002614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002616:	445a      	add	r2, fp
 8002618:	9209      	str	r2, [sp, #36]	; 0x24
 800261a:	f89a 3000 	ldrb.w	r3, [sl]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80a1 	beq.w	8002766 <_svfiprintf_r+0x1c6>
 8002624:	2300      	movs	r3, #0
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800262e:	f10a 0a01 	add.w	sl, sl, #1
 8002632:	9304      	str	r3, [sp, #16]
 8002634:	9307      	str	r3, [sp, #28]
 8002636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800263a:	931a      	str	r3, [sp, #104]	; 0x68
 800263c:	4654      	mov	r4, sl
 800263e:	2205      	movs	r2, #5
 8002640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002644:	4850      	ldr	r0, [pc, #320]	; (8002788 <_svfiprintf_r+0x1e8>)
 8002646:	f7fd fdcb 	bl	80001e0 <memchr>
 800264a:	9a04      	ldr	r2, [sp, #16]
 800264c:	b9d8      	cbnz	r0, 8002686 <_svfiprintf_r+0xe6>
 800264e:	06d0      	lsls	r0, r2, #27
 8002650:	bf44      	itt	mi
 8002652:	2320      	movmi	r3, #32
 8002654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002658:	0711      	lsls	r1, r2, #28
 800265a:	bf44      	itt	mi
 800265c:	232b      	movmi	r3, #43	; 0x2b
 800265e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002662:	f89a 3000 	ldrb.w	r3, [sl]
 8002666:	2b2a      	cmp	r3, #42	; 0x2a
 8002668:	d015      	beq.n	8002696 <_svfiprintf_r+0xf6>
 800266a:	9a07      	ldr	r2, [sp, #28]
 800266c:	4654      	mov	r4, sl
 800266e:	2000      	movs	r0, #0
 8002670:	f04f 0c0a 	mov.w	ip, #10
 8002674:	4621      	mov	r1, r4
 8002676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	2b09      	cmp	r3, #9
 800267e:	d94d      	bls.n	800271c <_svfiprintf_r+0x17c>
 8002680:	b1b0      	cbz	r0, 80026b0 <_svfiprintf_r+0x110>
 8002682:	9207      	str	r2, [sp, #28]
 8002684:	e014      	b.n	80026b0 <_svfiprintf_r+0x110>
 8002686:	eba0 0308 	sub.w	r3, r0, r8
 800268a:	fa09 f303 	lsl.w	r3, r9, r3
 800268e:	4313      	orrs	r3, r2
 8002690:	9304      	str	r3, [sp, #16]
 8002692:	46a2      	mov	sl, r4
 8002694:	e7d2      	b.n	800263c <_svfiprintf_r+0x9c>
 8002696:	9b03      	ldr	r3, [sp, #12]
 8002698:	1d19      	adds	r1, r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	9103      	str	r1, [sp, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bfbb      	ittet	lt
 80026a2:	425b      	neglt	r3, r3
 80026a4:	f042 0202 	orrlt.w	r2, r2, #2
 80026a8:	9307      	strge	r3, [sp, #28]
 80026aa:	9307      	strlt	r3, [sp, #28]
 80026ac:	bfb8      	it	lt
 80026ae:	9204      	strlt	r2, [sp, #16]
 80026b0:	7823      	ldrb	r3, [r4, #0]
 80026b2:	2b2e      	cmp	r3, #46	; 0x2e
 80026b4:	d10c      	bne.n	80026d0 <_svfiprintf_r+0x130>
 80026b6:	7863      	ldrb	r3, [r4, #1]
 80026b8:	2b2a      	cmp	r3, #42	; 0x2a
 80026ba:	d134      	bne.n	8002726 <_svfiprintf_r+0x186>
 80026bc:	9b03      	ldr	r3, [sp, #12]
 80026be:	1d1a      	adds	r2, r3, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	9203      	str	r2, [sp, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bfb8      	it	lt
 80026c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80026cc:	3402      	adds	r4, #2
 80026ce:	9305      	str	r3, [sp, #20]
 80026d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8002798 <_svfiprintf_r+0x1f8>
 80026d4:	7821      	ldrb	r1, [r4, #0]
 80026d6:	2203      	movs	r2, #3
 80026d8:	4650      	mov	r0, sl
 80026da:	f7fd fd81 	bl	80001e0 <memchr>
 80026de:	b138      	cbz	r0, 80026f0 <_svfiprintf_r+0x150>
 80026e0:	9b04      	ldr	r3, [sp, #16]
 80026e2:	eba0 000a 	sub.w	r0, r0, sl
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	4082      	lsls	r2, r0
 80026ea:	4313      	orrs	r3, r2
 80026ec:	3401      	adds	r4, #1
 80026ee:	9304      	str	r3, [sp, #16]
 80026f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026f4:	4825      	ldr	r0, [pc, #148]	; (800278c <_svfiprintf_r+0x1ec>)
 80026f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026fa:	2206      	movs	r2, #6
 80026fc:	f7fd fd70 	bl	80001e0 <memchr>
 8002700:	2800      	cmp	r0, #0
 8002702:	d038      	beq.n	8002776 <_svfiprintf_r+0x1d6>
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <_svfiprintf_r+0x1f0>)
 8002706:	bb1b      	cbnz	r3, 8002750 <_svfiprintf_r+0x1b0>
 8002708:	9b03      	ldr	r3, [sp, #12]
 800270a:	3307      	adds	r3, #7
 800270c:	f023 0307 	bic.w	r3, r3, #7
 8002710:	3308      	adds	r3, #8
 8002712:	9303      	str	r3, [sp, #12]
 8002714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002716:	4433      	add	r3, r6
 8002718:	9309      	str	r3, [sp, #36]	; 0x24
 800271a:	e768      	b.n	80025ee <_svfiprintf_r+0x4e>
 800271c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002720:	460c      	mov	r4, r1
 8002722:	2001      	movs	r0, #1
 8002724:	e7a6      	b.n	8002674 <_svfiprintf_r+0xd4>
 8002726:	2300      	movs	r3, #0
 8002728:	3401      	adds	r4, #1
 800272a:	9305      	str	r3, [sp, #20]
 800272c:	4619      	mov	r1, r3
 800272e:	f04f 0c0a 	mov.w	ip, #10
 8002732:	4620      	mov	r0, r4
 8002734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002738:	3a30      	subs	r2, #48	; 0x30
 800273a:	2a09      	cmp	r2, #9
 800273c:	d903      	bls.n	8002746 <_svfiprintf_r+0x1a6>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0c6      	beq.n	80026d0 <_svfiprintf_r+0x130>
 8002742:	9105      	str	r1, [sp, #20]
 8002744:	e7c4      	b.n	80026d0 <_svfiprintf_r+0x130>
 8002746:	fb0c 2101 	mla	r1, ip, r1, r2
 800274a:	4604      	mov	r4, r0
 800274c:	2301      	movs	r3, #1
 800274e:	e7f0      	b.n	8002732 <_svfiprintf_r+0x192>
 8002750:	ab03      	add	r3, sp, #12
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	462a      	mov	r2, r5
 8002756:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <_svfiprintf_r+0x1f4>)
 8002758:	a904      	add	r1, sp, #16
 800275a:	4638      	mov	r0, r7
 800275c:	f3af 8000 	nop.w
 8002760:	1c42      	adds	r2, r0, #1
 8002762:	4606      	mov	r6, r0
 8002764:	d1d6      	bne.n	8002714 <_svfiprintf_r+0x174>
 8002766:	89ab      	ldrh	r3, [r5, #12]
 8002768:	065b      	lsls	r3, r3, #25
 800276a:	f53f af2d 	bmi.w	80025c8 <_svfiprintf_r+0x28>
 800276e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002770:	b01d      	add	sp, #116	; 0x74
 8002772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002776:	ab03      	add	r3, sp, #12
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	462a      	mov	r2, r5
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <_svfiprintf_r+0x1f4>)
 800277e:	a904      	add	r1, sp, #16
 8002780:	4638      	mov	r0, r7
 8002782:	f000 f879 	bl	8002878 <_printf_i>
 8002786:	e7eb      	b.n	8002760 <_svfiprintf_r+0x1c0>
 8002788:	08002be0 	.word	0x08002be0
 800278c:	08002bea 	.word	0x08002bea
 8002790:	00000000 	.word	0x00000000
 8002794:	080024ed 	.word	0x080024ed
 8002798:	08002be6 	.word	0x08002be6

0800279c <_printf_common>:
 800279c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027a0:	4616      	mov	r6, r2
 80027a2:	4699      	mov	r9, r3
 80027a4:	688a      	ldr	r2, [r1, #8]
 80027a6:	690b      	ldr	r3, [r1, #16]
 80027a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bfb8      	it	lt
 80027b0:	4613      	movlt	r3, r2
 80027b2:	6033      	str	r3, [r6, #0]
 80027b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027b8:	4607      	mov	r7, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	b10a      	cbz	r2, 80027c2 <_printf_common+0x26>
 80027be:	3301      	adds	r3, #1
 80027c0:	6033      	str	r3, [r6, #0]
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	0699      	lsls	r1, r3, #26
 80027c6:	bf42      	ittt	mi
 80027c8:	6833      	ldrmi	r3, [r6, #0]
 80027ca:	3302      	addmi	r3, #2
 80027cc:	6033      	strmi	r3, [r6, #0]
 80027ce:	6825      	ldr	r5, [r4, #0]
 80027d0:	f015 0506 	ands.w	r5, r5, #6
 80027d4:	d106      	bne.n	80027e4 <_printf_common+0x48>
 80027d6:	f104 0a19 	add.w	sl, r4, #25
 80027da:	68e3      	ldr	r3, [r4, #12]
 80027dc:	6832      	ldr	r2, [r6, #0]
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	42ab      	cmp	r3, r5
 80027e2:	dc26      	bgt.n	8002832 <_printf_common+0x96>
 80027e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027e8:	1e13      	subs	r3, r2, #0
 80027ea:	6822      	ldr	r2, [r4, #0]
 80027ec:	bf18      	it	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	0692      	lsls	r2, r2, #26
 80027f2:	d42b      	bmi.n	800284c <_printf_common+0xb0>
 80027f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027f8:	4649      	mov	r1, r9
 80027fa:	4638      	mov	r0, r7
 80027fc:	47c0      	blx	r8
 80027fe:	3001      	adds	r0, #1
 8002800:	d01e      	beq.n	8002840 <_printf_common+0xa4>
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	6922      	ldr	r2, [r4, #16]
 8002806:	f003 0306 	and.w	r3, r3, #6
 800280a:	2b04      	cmp	r3, #4
 800280c:	bf02      	ittt	eq
 800280e:	68e5      	ldreq	r5, [r4, #12]
 8002810:	6833      	ldreq	r3, [r6, #0]
 8002812:	1aed      	subeq	r5, r5, r3
 8002814:	68a3      	ldr	r3, [r4, #8]
 8002816:	bf0c      	ite	eq
 8002818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800281c:	2500      	movne	r5, #0
 800281e:	4293      	cmp	r3, r2
 8002820:	bfc4      	itt	gt
 8002822:	1a9b      	subgt	r3, r3, r2
 8002824:	18ed      	addgt	r5, r5, r3
 8002826:	2600      	movs	r6, #0
 8002828:	341a      	adds	r4, #26
 800282a:	42b5      	cmp	r5, r6
 800282c:	d11a      	bne.n	8002864 <_printf_common+0xc8>
 800282e:	2000      	movs	r0, #0
 8002830:	e008      	b.n	8002844 <_printf_common+0xa8>
 8002832:	2301      	movs	r3, #1
 8002834:	4652      	mov	r2, sl
 8002836:	4649      	mov	r1, r9
 8002838:	4638      	mov	r0, r7
 800283a:	47c0      	blx	r8
 800283c:	3001      	adds	r0, #1
 800283e:	d103      	bne.n	8002848 <_printf_common+0xac>
 8002840:	f04f 30ff 	mov.w	r0, #4294967295
 8002844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002848:	3501      	adds	r5, #1
 800284a:	e7c6      	b.n	80027da <_printf_common+0x3e>
 800284c:	18e1      	adds	r1, r4, r3
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	2030      	movs	r0, #48	; 0x30
 8002852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002856:	4422      	add	r2, r4
 8002858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800285c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002860:	3302      	adds	r3, #2
 8002862:	e7c7      	b.n	80027f4 <_printf_common+0x58>
 8002864:	2301      	movs	r3, #1
 8002866:	4622      	mov	r2, r4
 8002868:	4649      	mov	r1, r9
 800286a:	4638      	mov	r0, r7
 800286c:	47c0      	blx	r8
 800286e:	3001      	adds	r0, #1
 8002870:	d0e6      	beq.n	8002840 <_printf_common+0xa4>
 8002872:	3601      	adds	r6, #1
 8002874:	e7d9      	b.n	800282a <_printf_common+0x8e>
	...

08002878 <_printf_i>:
 8002878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800287c:	7e0f      	ldrb	r7, [r1, #24]
 800287e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002880:	2f78      	cmp	r7, #120	; 0x78
 8002882:	4691      	mov	r9, r2
 8002884:	4680      	mov	r8, r0
 8002886:	460c      	mov	r4, r1
 8002888:	469a      	mov	sl, r3
 800288a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800288e:	d807      	bhi.n	80028a0 <_printf_i+0x28>
 8002890:	2f62      	cmp	r7, #98	; 0x62
 8002892:	d80a      	bhi.n	80028aa <_printf_i+0x32>
 8002894:	2f00      	cmp	r7, #0
 8002896:	f000 80d4 	beq.w	8002a42 <_printf_i+0x1ca>
 800289a:	2f58      	cmp	r7, #88	; 0x58
 800289c:	f000 80c0 	beq.w	8002a20 <_printf_i+0x1a8>
 80028a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028a8:	e03a      	b.n	8002920 <_printf_i+0xa8>
 80028aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028ae:	2b15      	cmp	r3, #21
 80028b0:	d8f6      	bhi.n	80028a0 <_printf_i+0x28>
 80028b2:	a101      	add	r1, pc, #4	; (adr r1, 80028b8 <_printf_i+0x40>)
 80028b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028b8:	08002911 	.word	0x08002911
 80028bc:	08002925 	.word	0x08002925
 80028c0:	080028a1 	.word	0x080028a1
 80028c4:	080028a1 	.word	0x080028a1
 80028c8:	080028a1 	.word	0x080028a1
 80028cc:	080028a1 	.word	0x080028a1
 80028d0:	08002925 	.word	0x08002925
 80028d4:	080028a1 	.word	0x080028a1
 80028d8:	080028a1 	.word	0x080028a1
 80028dc:	080028a1 	.word	0x080028a1
 80028e0:	080028a1 	.word	0x080028a1
 80028e4:	08002a29 	.word	0x08002a29
 80028e8:	08002951 	.word	0x08002951
 80028ec:	080029e3 	.word	0x080029e3
 80028f0:	080028a1 	.word	0x080028a1
 80028f4:	080028a1 	.word	0x080028a1
 80028f8:	08002a4b 	.word	0x08002a4b
 80028fc:	080028a1 	.word	0x080028a1
 8002900:	08002951 	.word	0x08002951
 8002904:	080028a1 	.word	0x080028a1
 8002908:	080028a1 	.word	0x080028a1
 800290c:	080029eb 	.word	0x080029eb
 8002910:	682b      	ldr	r3, [r5, #0]
 8002912:	1d1a      	adds	r2, r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	602a      	str	r2, [r5, #0]
 8002918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800291c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002920:	2301      	movs	r3, #1
 8002922:	e09f      	b.n	8002a64 <_printf_i+0x1ec>
 8002924:	6820      	ldr	r0, [r4, #0]
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	0607      	lsls	r7, r0, #24
 800292a:	f103 0104 	add.w	r1, r3, #4
 800292e:	6029      	str	r1, [r5, #0]
 8002930:	d501      	bpl.n	8002936 <_printf_i+0xbe>
 8002932:	681e      	ldr	r6, [r3, #0]
 8002934:	e003      	b.n	800293e <_printf_i+0xc6>
 8002936:	0646      	lsls	r6, r0, #25
 8002938:	d5fb      	bpl.n	8002932 <_printf_i+0xba>
 800293a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800293e:	2e00      	cmp	r6, #0
 8002940:	da03      	bge.n	800294a <_printf_i+0xd2>
 8002942:	232d      	movs	r3, #45	; 0x2d
 8002944:	4276      	negs	r6, r6
 8002946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800294a:	485a      	ldr	r0, [pc, #360]	; (8002ab4 <_printf_i+0x23c>)
 800294c:	230a      	movs	r3, #10
 800294e:	e012      	b.n	8002976 <_printf_i+0xfe>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	6820      	ldr	r0, [r4, #0]
 8002954:	1d19      	adds	r1, r3, #4
 8002956:	6029      	str	r1, [r5, #0]
 8002958:	0605      	lsls	r5, r0, #24
 800295a:	d501      	bpl.n	8002960 <_printf_i+0xe8>
 800295c:	681e      	ldr	r6, [r3, #0]
 800295e:	e002      	b.n	8002966 <_printf_i+0xee>
 8002960:	0641      	lsls	r1, r0, #25
 8002962:	d5fb      	bpl.n	800295c <_printf_i+0xe4>
 8002964:	881e      	ldrh	r6, [r3, #0]
 8002966:	4853      	ldr	r0, [pc, #332]	; (8002ab4 <_printf_i+0x23c>)
 8002968:	2f6f      	cmp	r7, #111	; 0x6f
 800296a:	bf0c      	ite	eq
 800296c:	2308      	moveq	r3, #8
 800296e:	230a      	movne	r3, #10
 8002970:	2100      	movs	r1, #0
 8002972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002976:	6865      	ldr	r5, [r4, #4]
 8002978:	60a5      	str	r5, [r4, #8]
 800297a:	2d00      	cmp	r5, #0
 800297c:	bfa2      	ittt	ge
 800297e:	6821      	ldrge	r1, [r4, #0]
 8002980:	f021 0104 	bicge.w	r1, r1, #4
 8002984:	6021      	strge	r1, [r4, #0]
 8002986:	b90e      	cbnz	r6, 800298c <_printf_i+0x114>
 8002988:	2d00      	cmp	r5, #0
 800298a:	d04b      	beq.n	8002a24 <_printf_i+0x1ac>
 800298c:	4615      	mov	r5, r2
 800298e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002992:	fb03 6711 	mls	r7, r3, r1, r6
 8002996:	5dc7      	ldrb	r7, [r0, r7]
 8002998:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800299c:	4637      	mov	r7, r6
 800299e:	42bb      	cmp	r3, r7
 80029a0:	460e      	mov	r6, r1
 80029a2:	d9f4      	bls.n	800298e <_printf_i+0x116>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d10b      	bne.n	80029c0 <_printf_i+0x148>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	07de      	lsls	r6, r3, #31
 80029ac:	d508      	bpl.n	80029c0 <_printf_i+0x148>
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	6861      	ldr	r1, [r4, #4]
 80029b2:	4299      	cmp	r1, r3
 80029b4:	bfde      	ittt	le
 80029b6:	2330      	movle	r3, #48	; 0x30
 80029b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029c0:	1b52      	subs	r2, r2, r5
 80029c2:	6122      	str	r2, [r4, #16]
 80029c4:	f8cd a000 	str.w	sl, [sp]
 80029c8:	464b      	mov	r3, r9
 80029ca:	aa03      	add	r2, sp, #12
 80029cc:	4621      	mov	r1, r4
 80029ce:	4640      	mov	r0, r8
 80029d0:	f7ff fee4 	bl	800279c <_printf_common>
 80029d4:	3001      	adds	r0, #1
 80029d6:	d14a      	bne.n	8002a6e <_printf_i+0x1f6>
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	b004      	add	sp, #16
 80029de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	f043 0320 	orr.w	r3, r3, #32
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <_printf_i+0x240>)
 80029ec:	2778      	movs	r7, #120	; 0x78
 80029ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	6829      	ldr	r1, [r5, #0]
 80029f6:	061f      	lsls	r7, r3, #24
 80029f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80029fc:	d402      	bmi.n	8002a04 <_printf_i+0x18c>
 80029fe:	065f      	lsls	r7, r3, #25
 8002a00:	bf48      	it	mi
 8002a02:	b2b6      	uxthmi	r6, r6
 8002a04:	07df      	lsls	r7, r3, #31
 8002a06:	bf48      	it	mi
 8002a08:	f043 0320 	orrmi.w	r3, r3, #32
 8002a0c:	6029      	str	r1, [r5, #0]
 8002a0e:	bf48      	it	mi
 8002a10:	6023      	strmi	r3, [r4, #0]
 8002a12:	b91e      	cbnz	r6, 8002a1c <_printf_i+0x1a4>
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	f023 0320 	bic.w	r3, r3, #32
 8002a1a:	6023      	str	r3, [r4, #0]
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	e7a7      	b.n	8002970 <_printf_i+0xf8>
 8002a20:	4824      	ldr	r0, [pc, #144]	; (8002ab4 <_printf_i+0x23c>)
 8002a22:	e7e4      	b.n	80029ee <_printf_i+0x176>
 8002a24:	4615      	mov	r5, r2
 8002a26:	e7bd      	b.n	80029a4 <_printf_i+0x12c>
 8002a28:	682b      	ldr	r3, [r5, #0]
 8002a2a:	6826      	ldr	r6, [r4, #0]
 8002a2c:	6961      	ldr	r1, [r4, #20]
 8002a2e:	1d18      	adds	r0, r3, #4
 8002a30:	6028      	str	r0, [r5, #0]
 8002a32:	0635      	lsls	r5, r6, #24
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	d501      	bpl.n	8002a3c <_printf_i+0x1c4>
 8002a38:	6019      	str	r1, [r3, #0]
 8002a3a:	e002      	b.n	8002a42 <_printf_i+0x1ca>
 8002a3c:	0670      	lsls	r0, r6, #25
 8002a3e:	d5fb      	bpl.n	8002a38 <_printf_i+0x1c0>
 8002a40:	8019      	strh	r1, [r3, #0]
 8002a42:	2300      	movs	r3, #0
 8002a44:	6123      	str	r3, [r4, #16]
 8002a46:	4615      	mov	r5, r2
 8002a48:	e7bc      	b.n	80029c4 <_printf_i+0x14c>
 8002a4a:	682b      	ldr	r3, [r5, #0]
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	602a      	str	r2, [r5, #0]
 8002a50:	681d      	ldr	r5, [r3, #0]
 8002a52:	6862      	ldr	r2, [r4, #4]
 8002a54:	2100      	movs	r1, #0
 8002a56:	4628      	mov	r0, r5
 8002a58:	f7fd fbc2 	bl	80001e0 <memchr>
 8002a5c:	b108      	cbz	r0, 8002a62 <_printf_i+0x1ea>
 8002a5e:	1b40      	subs	r0, r0, r5
 8002a60:	6060      	str	r0, [r4, #4]
 8002a62:	6863      	ldr	r3, [r4, #4]
 8002a64:	6123      	str	r3, [r4, #16]
 8002a66:	2300      	movs	r3, #0
 8002a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a6c:	e7aa      	b.n	80029c4 <_printf_i+0x14c>
 8002a6e:	6923      	ldr	r3, [r4, #16]
 8002a70:	462a      	mov	r2, r5
 8002a72:	4649      	mov	r1, r9
 8002a74:	4640      	mov	r0, r8
 8002a76:	47d0      	blx	sl
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d0ad      	beq.n	80029d8 <_printf_i+0x160>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	079b      	lsls	r3, r3, #30
 8002a80:	d413      	bmi.n	8002aaa <_printf_i+0x232>
 8002a82:	68e0      	ldr	r0, [r4, #12]
 8002a84:	9b03      	ldr	r3, [sp, #12]
 8002a86:	4298      	cmp	r0, r3
 8002a88:	bfb8      	it	lt
 8002a8a:	4618      	movlt	r0, r3
 8002a8c:	e7a6      	b.n	80029dc <_printf_i+0x164>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4632      	mov	r2, r6
 8002a92:	4649      	mov	r1, r9
 8002a94:	4640      	mov	r0, r8
 8002a96:	47d0      	blx	sl
 8002a98:	3001      	adds	r0, #1
 8002a9a:	d09d      	beq.n	80029d8 <_printf_i+0x160>
 8002a9c:	3501      	adds	r5, #1
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	9903      	ldr	r1, [sp, #12]
 8002aa2:	1a5b      	subs	r3, r3, r1
 8002aa4:	42ab      	cmp	r3, r5
 8002aa6:	dcf2      	bgt.n	8002a8e <_printf_i+0x216>
 8002aa8:	e7eb      	b.n	8002a82 <_printf_i+0x20a>
 8002aaa:	2500      	movs	r5, #0
 8002aac:	f104 0619 	add.w	r6, r4, #25
 8002ab0:	e7f5      	b.n	8002a9e <_printf_i+0x226>
 8002ab2:	bf00      	nop
 8002ab4:	08002bf1 	.word	0x08002bf1
 8002ab8:	08002c02 	.word	0x08002c02

08002abc <memmove>:
 8002abc:	4288      	cmp	r0, r1
 8002abe:	b510      	push	{r4, lr}
 8002ac0:	eb01 0402 	add.w	r4, r1, r2
 8002ac4:	d902      	bls.n	8002acc <memmove+0x10>
 8002ac6:	4284      	cmp	r4, r0
 8002ac8:	4623      	mov	r3, r4
 8002aca:	d807      	bhi.n	8002adc <memmove+0x20>
 8002acc:	1e43      	subs	r3, r0, #1
 8002ace:	42a1      	cmp	r1, r4
 8002ad0:	d008      	beq.n	8002ae4 <memmove+0x28>
 8002ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ada:	e7f8      	b.n	8002ace <memmove+0x12>
 8002adc:	4402      	add	r2, r0
 8002ade:	4601      	mov	r1, r0
 8002ae0:	428a      	cmp	r2, r1
 8002ae2:	d100      	bne.n	8002ae6 <memmove+0x2a>
 8002ae4:	bd10      	pop	{r4, pc}
 8002ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002aee:	e7f7      	b.n	8002ae0 <memmove+0x24>

08002af0 <_sbrk_r>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	4d06      	ldr	r5, [pc, #24]	; (8002b0c <_sbrk_r+0x1c>)
 8002af4:	2300      	movs	r3, #0
 8002af6:	4604      	mov	r4, r0
 8002af8:	4608      	mov	r0, r1
 8002afa:	602b      	str	r3, [r5, #0]
 8002afc:	f7fd ffa8 	bl	8000a50 <_sbrk>
 8002b00:	1c43      	adds	r3, r0, #1
 8002b02:	d102      	bne.n	8002b0a <_sbrk_r+0x1a>
 8002b04:	682b      	ldr	r3, [r5, #0]
 8002b06:	b103      	cbz	r3, 8002b0a <_sbrk_r+0x1a>
 8002b08:	6023      	str	r3, [r4, #0]
 8002b0a:	bd38      	pop	{r3, r4, r5, pc}
 8002b0c:	2000020c 	.word	0x2000020c

08002b10 <memcpy>:
 8002b10:	440a      	add	r2, r1
 8002b12:	4291      	cmp	r1, r2
 8002b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b18:	d100      	bne.n	8002b1c <memcpy+0xc>
 8002b1a:	4770      	bx	lr
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b26:	4291      	cmp	r1, r2
 8002b28:	d1f9      	bne.n	8002b1e <memcpy+0xe>
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <_realloc_r>:
 8002b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b30:	4680      	mov	r8, r0
 8002b32:	4614      	mov	r4, r2
 8002b34:	460e      	mov	r6, r1
 8002b36:	b921      	cbnz	r1, 8002b42 <_realloc_r+0x16>
 8002b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	f7ff bc49 	b.w	80023d4 <_malloc_r>
 8002b42:	b92a      	cbnz	r2, 8002b50 <_realloc_r+0x24>
 8002b44:	f7ff fbda 	bl	80022fc <_free_r>
 8002b48:	4625      	mov	r5, r4
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b50:	f000 f81b 	bl	8002b8a <_malloc_usable_size_r>
 8002b54:	4284      	cmp	r4, r0
 8002b56:	4607      	mov	r7, r0
 8002b58:	d802      	bhi.n	8002b60 <_realloc_r+0x34>
 8002b5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b5e:	d812      	bhi.n	8002b86 <_realloc_r+0x5a>
 8002b60:	4621      	mov	r1, r4
 8002b62:	4640      	mov	r0, r8
 8002b64:	f7ff fc36 	bl	80023d4 <_malloc_r>
 8002b68:	4605      	mov	r5, r0
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	d0ed      	beq.n	8002b4a <_realloc_r+0x1e>
 8002b6e:	42bc      	cmp	r4, r7
 8002b70:	4622      	mov	r2, r4
 8002b72:	4631      	mov	r1, r6
 8002b74:	bf28      	it	cs
 8002b76:	463a      	movcs	r2, r7
 8002b78:	f7ff ffca 	bl	8002b10 <memcpy>
 8002b7c:	4631      	mov	r1, r6
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f7ff fbbc 	bl	80022fc <_free_r>
 8002b84:	e7e1      	b.n	8002b4a <_realloc_r+0x1e>
 8002b86:	4635      	mov	r5, r6
 8002b88:	e7df      	b.n	8002b4a <_realloc_r+0x1e>

08002b8a <_malloc_usable_size_r>:
 8002b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b8e:	1f18      	subs	r0, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bfbc      	itt	lt
 8002b94:	580b      	ldrlt	r3, [r1, r0]
 8002b96:	18c0      	addlt	r0, r0, r3
 8002b98:	4770      	bx	lr
	...

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	bf00      	nop
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

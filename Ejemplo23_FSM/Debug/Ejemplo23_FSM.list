
Ejemplo23_FSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039cc  080039cc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039d4  080039d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080039dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000068  08003a44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08003a44  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ec9  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b25  00000000  00000000  00028fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  0002aad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bf  00000000  00000000  0002b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000166f9  00000000  00000000  0002b82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a706  00000000  00000000  00041f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000868af  00000000  00000000  0004c62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000024bc  00000000  00000000  000d2ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003958 	.word	0x08003958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003958 	.word	0x08003958

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <MX_GPIO_Init+0x7c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <MX_GPIO_Init+0x7c>)
 800059c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <MX_GPIO_Init+0x7c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_GPIO_Init+0x7c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <MX_GPIO_Init+0x7c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_GPIO_Init+0x7c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0x80>)
 80005d0:	f000 fe5a 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_Pin;
 80005d4:	2320      	movs	r3, #32
 80005d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	4619      	mov	r1, r3
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0x80>)
 80005ec:	f000 fcc8 	bl	8000f80 <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020000 	.word	0x40020000

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
int main(void)
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 faa2 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f860 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f7ff ffb2 	bl	800057c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f9f8 	bl	8000a0c <MX_USART2_UART_Init>

  	  HAL_UART_Transmit(&huart2, (const uint8_t *)&ch, (uint16_t)1, HAL_MAX_DELAY);

  	  return ch;
  }
  Machine.Limite = 200;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <main+0xc4>)
 800061e:	22c8      	movs	r2, #200	; 0xc8
 8000620:	70da      	strb	r2, [r3, #3]

  Machine.Counter = 0;
 8000622:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <main+0xc4>)
 8000624:	2200      	movs	r2, #0
 8000626:	709a      	strb	r2, [r3, #2]

  Estado = Inicio;
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <main+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, &Machine.Rx, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	4924      	ldr	r1, [pc, #144]	; (80006c4 <main+0xc4>)
 8000632:	4826      	ldr	r0, [pc, #152]	; (80006cc <main+0xcc>)
 8000634:	f001 fb41 	bl	8001cba <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  switch (Estado) {
 8000638:	4b23      	ldr	r3, [pc, #140]	; (80006c8 <main+0xc8>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b03      	cmp	r3, #3
 800063e:	d83c      	bhi.n	80006ba <main+0xba>
 8000640:	a201      	add	r2, pc, #4	; (adr r2, 8000648 <main+0x48>)
 8000642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000646:	bf00      	nop
 8000648:	08000659 	.word	0x08000659
 800064c:	08000661 	.word	0x08000661
 8000650:	08000687 	.word	0x08000687
 8000654:	080006a7 	.word	0x080006a7
		case Inicio:
			//Machine.Counter = 0;
			Estado = StandBye;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <main+0xc8>)
 800065a:	2202      	movs	r2, #2
 800065c:	701a      	strb	r2, [r3, #0]
			break;
 800065e:	e02f      	b.n	80006c0 <main+0xc0>
		case Aumento:
			Machine.Counter++;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <main+0xc4>)
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	3301      	adds	r3, #1
 8000666:	b2da      	uxtb	r2, r3
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0xc4>)
 800066a:	709a      	strb	r2, [r3, #2]
			if (Machine.Counter >= (Machine.Limite+1)) {
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0xc4>)
 800066e:	78da      	ldrb	r2, [r3, #3]
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <main+0xc4>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	429a      	cmp	r2, r3
 8000676:	d202      	bcs.n	800067e <main+0x7e>
				Machine.Counter = 0;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0xc4>)
 800067a:	2200      	movs	r2, #0
 800067c:	709a      	strb	r2, [r3, #2]
			}
			Estado = Print;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <main+0xc8>)
 8000680:	2203      	movs	r2, #3
 8000682:	701a      	strb	r2, [r3, #0]
			break;
 8000684:	e01c      	b.n	80006c0 <main+0xc0>
		case StandBye:
			while(!Machine.FlagRX);
 8000686:	bf00      	nop
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <main+0xc4>)
 800068a:	785b      	ldrb	r3, [r3, #1]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f083 0301 	eor.w	r3, r3, #1
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f7      	bne.n	8000688 <main+0x88>
			Machine.FlagRX = false;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <main+0xc4>)
 800069a:	2200      	movs	r2, #0
 800069c:	705a      	strb	r2, [r3, #1]
			Estado = Aumento;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <main+0xc8>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]
			break;
 80006a4:	e00c      	b.n	80006c0 <main+0xc0>
		case Print:
			printf("Cuenta : %03u\n\r",Machine.Counter);
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <main+0xc4>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4808      	ldr	r0, [pc, #32]	; (80006d0 <main+0xd0>)
 80006ae:	f002 fadf 	bl	8002c70 <iprintf>
			//HAL_UART_Transmit(&huart2, Machine.Str_Counter, strlen(Machine.Str_Counter), HAL_MAX_DELAY);

			Estado = Inicio;
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <main+0xc8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	e002      	b.n	80006c0 <main+0xc0>
		default:
			Error_Handler();
 80006ba:	f000 f88f 	bl	80007dc <Error_Handler>
			break;
 80006be:	bf00      	nop
	  switch (Estado) {
 80006c0:	e7ba      	b.n	8000638 <main+0x38>
 80006c2:	bf00      	nop
 80006c4:	20000084 	.word	0x20000084
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	20000094 	.word	0x20000094
 80006d0:	08003970 	.word	0x08003970

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fb19 	bl	8002d1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <SystemClock_Config+0xd0>)
 8000722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemClock_Config+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000738:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000748:	2304      	movs	r3, #4
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800074c:	2354      	movs	r3, #84	; 0x54
 800074e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fdc7 	bl	80012f0 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000768:	f000 f838 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	2302      	movs	r3, #2
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2102      	movs	r1, #2
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f829 	bl	80017e0 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 f822 	bl	80007dc <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80007b0:	2120      	movs	r1, #32
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <HAL_UART_RxCpltCallback+0x28>)
 80007b4:	f000 fd81 	bl	80012ba <HAL_GPIO_TogglePin>
	Machine.FlagRX = true;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_UART_RxCpltCallback+0x2c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	705a      	strb	r2, [r3, #1]
	HAL_UART_Receive_IT(&huart2, &Machine.Rx, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	4904      	ldr	r1, [pc, #16]	; (80007d4 <HAL_UART_RxCpltCallback+0x2c>)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <HAL_UART_RxCpltCallback+0x30>)
 80007c4:	f001 fa79 	bl	8001cba <HAL_UART_Receive_IT>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40020000 	.word	0x40020000
 80007d4:	20000084 	.word	0x20000084
 80007d8:	20000094 	.word	0x20000094

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <HAL_MspInit+0x4c>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	4a0f      	ldr	r2, [pc, #60]	; (8000834 <HAL_MspInit+0x4c>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	; 0x44
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x4c>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x4c>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	; 0x40
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f9b8 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <USART2_IRQHandler+0x10>)
 8000892:	f001 fa43 	bl	8001d1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000094 	.word	0x20000094

080008a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	e00a      	b.n	80008c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008b2:	f3af 8000 	nop.w
 80008b6:	4601      	mov	r1, r0
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	b2ca      	uxtb	r2, r1
 80008c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c2:	697b      	ldr	r3, [r7, #20]
 80008c4:	3301      	adds	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697a      	ldr	r2, [r7, #20]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dbf0      	blt.n	80008b2 <_read+0x12>
  }

  return len;
 80008d0:	687b      	ldr	r3, [r7, #4]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e009      	b.n	8000900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	60ba      	str	r2, [r7, #8]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf1      	blt.n	80008ec <_write+0x12>
  }
  return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_close>:

int _close(int file)
{
 8000912:	b480      	push	{r7}
 8000914:	b083      	sub	sp, #12
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
 8000932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093a:	605a      	str	r2, [r3, #4]
  return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <_isatty>:

int _isatty(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	; (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f002 fa04 	bl	8002db8 <__errno>
 80009b0:	4603      	mov	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <_sbrk+0x64>)
 80009cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20018000 	.word	0x20018000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	20000090 	.word	0x20000090
 80009e4:	20000228 	.word	0x20000228

080009e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <SystemInit+0x20>)
 80009ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009f2:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <SystemInit+0x20>)
 80009f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART2_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x4c>)
 8000a44:	f001 f8ec 	bl	8001c20 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4e:	f7ff fec5 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000094 	.word	0x20000094
 8000a5c:	40004400 	.word	0x40004400

08000a60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_UART_MspInit+0x94>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d133      	bne.n	8000aea <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0x98>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aba:	230c      	movs	r3, #12
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aca:	2307      	movs	r3, #7
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <HAL_UART_MspInit+0x9c>)
 8000ad6:	f000 fa53 	bl	8000f80 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2026      	movs	r0, #38	; 0x26
 8000ae0:	f000 f985 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ae4:	2026      	movs	r0, #38	; 0x26
 8000ae6:	f000 f99e 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b06:	490e      	ldr	r1, [pc, #56]	; (8000b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b08:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b1c:	4c0b      	ldr	r4, [pc, #44]	; (8000b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2a:	f7ff ff5d 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b2e:	f002 f949 	bl	8002dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b32:	f7ff fd65 	bl	8000600 <main>
  bx  lr    
 8000b36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b44:	080039dc 	.word	0x080039dc
  ldr r2, =_sbss
 8000b48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b4c:	20000228 	.word	0x20000228

08000b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_Init+0x40>)
 8000b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_Init+0x40>)
 8000b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_Init+0x40>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <HAL_Init+0x40>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f000 f92b 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b82:	200f      	movs	r0, #15
 8000b84:	f000 f808 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe2e 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023c00 	.word	0x40023c00

08000b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x54>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x58>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f943 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e00e      	b.n	8000be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d80a      	bhi.n	8000be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	f000 f90b 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_InitTick+0x5c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200000d8 	.word	0x200000d8

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000d8 	.word	0x200000d8

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b084      	sub	sp, #16
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff feda 	bl	8000c20 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d008      	beq.n	8000e8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e052      	b.n	8000f32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0216 	bic.w	r2, r2, #22
 8000e9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	695a      	ldr	r2, [r3, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000eaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <HAL_DMA_Abort+0x62>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d007      	beq.n	8000ecc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0208 	bic.w	r2, r2, #8
 8000eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0201 	bic.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000edc:	e013      	b.n	8000f06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ede:	f7ff fe9f 	bl	8000c20 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d90c      	bls.n	8000f06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2220      	movs	r2, #32
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e015      	b.n	8000f32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1e4      	bne.n	8000ede <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f18:	223f      	movs	r2, #63	; 0x3f
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d004      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e00c      	b.n	8000f72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0201 	bic.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e159      	b.n	8001250 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8148 	bne.w	800124a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d005      	beq.n	8000fd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d130      	bne.n	8001034 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	091b      	lsrs	r3, r3, #4
 800101e:	f003 0201 	and.w	r2, r3, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b03      	cmp	r3, #3
 800103e:	d017      	beq.n	8001070 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d123      	bne.n	80010c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	08da      	lsrs	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3208      	adds	r2, #8
 80010be:	69b9      	ldr	r1, [r7, #24]
 80010c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0203 	and.w	r2, r3, #3
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 80a2 	beq.w	800124a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a56      	ldr	r2, [pc, #344]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b54      	ldr	r3, [pc, #336]	; (8001268 <HAL_GPIO_Init+0x2e8>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001122:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_GPIO_Init+0x2ec>)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a49      	ldr	r2, [pc, #292]	; (8001270 <HAL_GPIO_Init+0x2f0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x202>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a48      	ldr	r2, [pc, #288]	; (8001274 <HAL_GPIO_Init+0x2f4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x1fe>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a47      	ldr	r2, [pc, #284]	; (8001278 <HAL_GPIO_Init+0x2f8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x1fa>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a46      	ldr	r2, [pc, #280]	; (800127c <HAL_GPIO_Init+0x2fc>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x1f6>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a45      	ldr	r2, [pc, #276]	; (8001280 <HAL_GPIO_Init+0x300>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x1f2>
 800116e:	2304      	movs	r3, #4
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001172:	2307      	movs	r3, #7
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x204>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x204>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x2ec>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a2f      	ldr	r2, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b23      	ldr	r3, [pc, #140]	; (8001284 <HAL_GPIO_Init+0x304>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_GPIO_Init+0x304>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f aea2 	bls.w	8000f9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b085      	sub	sp, #20
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012cc:	887a      	ldrh	r2, [r7, #2]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	041a      	lsls	r2, r3, #16
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	400b      	ands	r3, r1
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e267      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d075      	beq.n	80013fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800130e:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b04      	cmp	r3, #4
 8001318:	d00c      	beq.n	8001334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131a:	4b85      	ldr	r3, [pc, #532]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	2b08      	cmp	r3, #8
 8001324:	d112      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b82      	ldr	r3, [pc, #520]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e242      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x74>
 8001356:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a75      	ldr	r2, [pc, #468]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x98>
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6c      	ldr	r2, [pc, #432]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a68      	ldr	r2, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc3a 	bl	8000c20 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fc36 	bl	8000c20 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e207      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	4b5b      	ldr	r3, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc26 	bl	8000c20 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc22 	bl	8000c20 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1f3      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d063      	beq.n	80014ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	2b08      	cmp	r3, #8
 800141c:	d11c      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d116      	bne.n	8001458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	4b41      	ldr	r3, [pc, #260]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e1c7      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	4937      	ldr	r1, [pc, #220]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001456:	e03a      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_RCC_OscConfig+0x244>)
 8001462:	2201      	movs	r2, #1
 8001464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff fbdb 	bl	8000c20 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146e:	f7ff fbd7 	bl	8000c20 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1a8      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	4925      	ldr	r1, [pc, #148]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
 80014a0:	e015      	b.n	80014ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_OscConfig+0x244>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fbba 	bl	8000c20 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b0:	f7ff fbb6 	bl	8000c20 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e187      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d036      	beq.n	8001548 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d016      	beq.n	8001510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_RCC_OscConfig+0x248>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fb9a 	bl	8000c20 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fb96 	bl	8000c20 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e167      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x240>)
 8001504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0f0      	beq.n	80014f0 <HAL_RCC_OscConfig+0x200>
 800150e:	e01b      	b.n	8001548 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_RCC_OscConfig+0x248>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb83 	bl	8000c20 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	e00e      	b.n	800153c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fb7f 	bl	8000c20 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d907      	bls.n	800153c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e150      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	42470000 	.word	0x42470000
 8001538:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1ea      	bne.n	800151e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 8097 	beq.w	8001684 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b81      	ldr	r3, [pc, #516]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10f      	bne.n	8001586 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a7c      	ldr	r2, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b7a      	ldr	r3, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001582:	2301      	movs	r3, #1
 8001584:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001586:	4b77      	ldr	r3, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158e:	2b00      	cmp	r3, #0
 8001590:	d118      	bne.n	80015c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001592:	4b74      	ldr	r3, [pc, #464]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a73      	ldr	r2, [pc, #460]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159e:	f7ff fb3f 	bl	8000c20 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a6:	f7ff fb3b 	bl	8000c20 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e10c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x474>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d106      	bne.n	80015da <HAL_RCC_OscConfig+0x2ea>
 80015cc:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6713      	str	r3, [r2, #112]	; 0x70
 80015d8:	e01c      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0x30c>
 80015e2:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e6:	4a5e      	ldr	r2, [pc, #376]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6713      	str	r3, [r2, #112]	; 0x70
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0x324>
 80015fc:	4b58      	ldr	r3, [pc, #352]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	4a57      	ldr	r2, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	; 0x70
 8001608:	4b55      	ldr	r3, [pc, #340]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d015      	beq.n	8001648 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fb00 	bl	8000c20 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fafc 	bl	8000c20 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0cb      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0ee      	beq.n	8001624 <HAL_RCC_OscConfig+0x334>
 8001646:	e014      	b.n	8001672 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001648:	f7ff faea 	bl	8000c20 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164e:	e00a      	b.n	8001666 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001650:	f7ff fae6 	bl	8000c20 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0b5      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ee      	bne.n	8001650 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800167e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a1 	beq.w	80017d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b08      	cmp	r3, #8
 8001698:	d05c      	beq.n	8001754 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d141      	bne.n	8001726 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff faba 	bl	8000c20 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fab6 	bl	8000c20 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e087      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	019b      	lsls	r3, r3, #6
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	3b01      	subs	r3, #1
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	061b      	lsls	r3, r3, #24
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fe:	f7ff fa8f 	bl	8000c20 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001706:	f7ff fa8b 	bl	8000c20 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e05c      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x416>
 8001724:	e054      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa78 	bl	8000c20 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fa74 	bl	8000c20 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e045      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x444>
 8001752:	e03d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d107      	bne.n	800176c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e038      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000
 8001768:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x4ec>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d028      	beq.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d121      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d11a      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b2:	085b      	lsrs	r3, r3, #1
 80017b4:	3b01      	subs	r3, #1
 80017b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0cc      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b68      	ldr	r3, [pc, #416]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d90c      	bls.n	800181c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b65      	ldr	r3, [pc, #404]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b63      	ldr	r3, [pc, #396]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0b8      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d020      	beq.n	800186a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001834:	4b59      	ldr	r3, [pc, #356]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a58      	ldr	r2, [pc, #352]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800183e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800184c:	4b53      	ldr	r3, [pc, #332]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a52      	ldr	r2, [pc, #328]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b50      	ldr	r3, [pc, #320]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	494d      	ldr	r1, [pc, #308]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d044      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b47      	ldr	r3, [pc, #284]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d119      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e07f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d003      	beq.n	800189e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	2b03      	cmp	r3, #3
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b3f      	ldr	r3, [pc, #252]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3b      	ldr	r3, [pc, #236]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e067      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4934      	ldr	r1, [pc, #208]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7ff f9a6 	bl	8000c20 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7ff f9a2 	bl	8000c20 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e04f      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d20c      	bcs.n	8001928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_ClockConfig+0x1b8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e032      	b.n	800198e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001934:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4916      	ldr	r1, [pc, #88]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d009      	beq.n	8001966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	490e      	ldr	r1, [pc, #56]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001966:	f000 f821 	bl	80019ac <HAL_RCC_GetSysClockFreq>
 800196a:	4602      	mov	r2, r0
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	490a      	ldr	r1, [pc, #40]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	5ccb      	ldrb	r3, [r1, r3]
 800197a:	fa22 f303 	lsr.w	r3, r2, r3
 800197e:	4a09      	ldr	r2, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f906 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00
 800199c:	40023800 	.word	0x40023800
 80019a0:	08003980 	.word	0x08003980
 80019a4:	20000000 	.word	0x20000000
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b0:	b094      	sub	sp, #80	; 0x50
 80019b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	647b      	str	r3, [r7, #68]	; 0x44
 80019b8:	2300      	movs	r3, #0
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019bc:	2300      	movs	r3, #0
 80019be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c4:	4b79      	ldr	r3, [pc, #484]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d00d      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x40>
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	f200 80e1 	bhi.w	8001b98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x34>
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d003      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019de:	e0db      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019e4:	e0db      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x208>)
 80019e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ea:	e0d8      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f6:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a02:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	099b      	lsrs	r3, r3, #6
 8001a08:	2200      	movs	r2, #0
 8001a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a1e:	4622      	mov	r2, r4
 8001a20:	462b      	mov	r3, r5
 8001a22:	f04f 0000 	mov.w	r0, #0
 8001a26:	f04f 0100 	mov.w	r1, #0
 8001a2a:	0159      	lsls	r1, r3, #5
 8001a2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a30:	0150      	lsls	r0, r2, #5
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4621      	mov	r1, r4
 8001a38:	1a51      	subs	r1, r2, r1
 8001a3a:	6139      	str	r1, [r7, #16]
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a50:	4659      	mov	r1, fp
 8001a52:	018b      	lsls	r3, r1, #6
 8001a54:	4651      	mov	r1, sl
 8001a56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5a:	4651      	mov	r1, sl
 8001a5c:	018a      	lsls	r2, r1, #6
 8001a5e:	4651      	mov	r1, sl
 8001a60:	ebb2 0801 	subs.w	r8, r2, r1
 8001a64:	4659      	mov	r1, fp
 8001a66:	eb63 0901 	sbc.w	r9, r3, r1
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a7e:	4690      	mov	r8, r2
 8001a80:	4699      	mov	r9, r3
 8001a82:	4623      	mov	r3, r4
 8001a84:	eb18 0303 	adds.w	r3, r8, r3
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	462b      	mov	r3, r5
 8001a8c:	eb49 0303 	adc.w	r3, r9, r3
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	024b      	lsls	r3, r1, #9
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	024a      	lsls	r2, r1, #9
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001abc:	f7fe fbe0 	bl	8000280 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac8:	e058      	b.n	8001b7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	2300      	movs	r3, #0
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ae4:	4642      	mov	r2, r8
 8001ae6:	464b      	mov	r3, r9
 8001ae8:	f04f 0000 	mov.w	r0, #0
 8001aec:	f04f 0100 	mov.w	r1, #0
 8001af0:	0159      	lsls	r1, r3, #5
 8001af2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af6:	0150      	lsls	r0, r2, #5
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4641      	mov	r1, r8
 8001afe:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b02:	4649      	mov	r1, r9
 8001b04:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b1c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b20:	eb63 050b 	sbc.w	r5, r3, fp
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	00eb      	lsls	r3, r5, #3
 8001b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b32:	00e2      	lsls	r2, r4, #3
 8001b34:	4614      	mov	r4, r2
 8001b36:	461d      	mov	r5, r3
 8001b38:	4643      	mov	r3, r8
 8001b3a:	18e3      	adds	r3, r4, r3
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	464b      	mov	r3, r9
 8001b40:	eb45 0303 	adc.w	r3, r5, r3
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b52:	4629      	mov	r1, r5
 8001b54:	028b      	lsls	r3, r1, #10
 8001b56:	4621      	mov	r1, r4
 8001b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b5c:	4621      	mov	r1, r4
 8001b5e:	028a      	lsls	r2, r1, #10
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b66:	2200      	movs	r2, #0
 8001b68:	61bb      	str	r3, [r7, #24]
 8001b6a:	61fa      	str	r2, [r7, #28]
 8001b6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b70:	f7fe fb86 	bl	8000280 <__aeabi_uldivmod>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_GetSysClockFreq+0x200>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	3301      	adds	r3, #1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3750      	adds	r7, #80	; 0x50
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	00f42400 	.word	0x00f42400
 8001bb4:	007a1200 	.word	0x007a1200

08001bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff0 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	0a9b      	lsrs	r3, r3, #10
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08003990 	.word	0x08003990

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffdc 	bl	8001bb8 <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	0b5b      	lsrs	r3, r3, #13
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	08003990 	.word	0x08003990

08001c20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e03f      	b.n	8001cb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe ff0a 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fcdf 	bl	8002628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	695a      	ldr	r2, [r3, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b20      	cmp	r3, #32
 8001cd2:	d11d      	bne.n	8001d10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <HAL_UART_Receive_IT+0x26>
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e016      	b.n	8001d12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_UART_Receive_IT+0x38>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e00f      	b.n	8001d12 <HAL_UART_Receive_IT+0x58>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fab6 	bl	8002278 <UART_Start_Receive_IT>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	e000      	b.n	8001d12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0ba      	sub	sp, #232	; 0xe8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_UART_IRQHandler+0x66>
 8001d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fb99 	bl	80024b2 <UART_Receive_IT>
      return;
 8001d80:	e256      	b.n	8002230 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80de 	beq.w	8001f48 <HAL_UART_IRQHandler+0x22c>
 8001d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d106      	bne.n	8001da6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001d9c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80d1 	beq.w	8001f48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_UART_IRQHandler+0xae>
 8001db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_UART_IRQHandler+0xd2>
 8001dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0202 	orr.w	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_UART_IRQHandler+0xf6>
 8001dfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d011      	beq.n	8001e42 <HAL_UART_IRQHandler+0x126>
 8001e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f043 0208 	orr.w	r2, r3, #8
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 81ed 	beq.w	8002226 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e50:	f003 0320 	and.w	r3, r3, #32
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_UART_IRQHandler+0x14e>
 8001e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 fb24 	bl	80024b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_UART_IRQHandler+0x17a>
 8001e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d04f      	beq.n	8001f36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa2c 	bl	80022f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b40      	cmp	r3, #64	; 0x40
 8001ea8:	d141      	bne.n	8001f2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3314      	adds	r3, #20
 8001eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb8:	e853 3f00 	ldrex	r3, [r3]
 8001ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3314      	adds	r3, #20
 8001ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001ee6:	e841 2300 	strex	r3, r2, [r1]
 8001eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1d9      	bne.n	8001eaa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d013      	beq.n	8001f26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	4a7d      	ldr	r2, [pc, #500]	; (80020f8 <HAL_UART_IRQHandler+0x3dc>)
 8001f04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff f815 	bl	8000f3a <HAL_DMA_Abort_IT>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f20:	4610      	mov	r0, r2
 8001f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f24:	e00e      	b.n	8001f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f990 	bl	800224c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f2c:	e00a      	b.n	8001f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f98c 	bl	800224c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f34:	e006      	b.n	8001f44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f988 	bl	800224c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001f42:	e170      	b.n	8002226 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f44:	bf00      	nop
    return;
 8001f46:	e16e      	b.n	8002226 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	f040 814a 	bne.w	80021e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 8143 	beq.w	80021e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 813c 	beq.w	80021e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	f040 80b4 	bne.w	80020fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001fa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8140 	beq.w	800222a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f080 8139 	bcs.w	800222a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001fbe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fca:	f000 8088 	beq.w	80020de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fdc:	e853 3f00 	ldrex	r3, [r3]
 8001fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ffa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800200a:	e841 2300 	strex	r3, r2, [r1]
 800200e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1d9      	bne.n	8001fce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3314      	adds	r3, #20
 8002020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002024:	e853 3f00 	ldrex	r3, [r3]
 8002028:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800202a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3314      	adds	r3, #20
 800203a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800203e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002042:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002044:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800204a:	e841 2300 	strex	r3, r2, [r1]
 800204e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1e1      	bne.n	800201a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002060:	e853 3f00 	ldrex	r3, [r3]
 8002064:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800206c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3314      	adds	r3, #20
 8002076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800207a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800207c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002082:	e841 2300 	strex	r3, r2, [r1]
 8002086:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e3      	bne.n	8002056 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	330c      	adds	r3, #12
 80020a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a6:	e853 3f00 	ldrex	r3, [r3]
 80020aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80020ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ae:	f023 0310 	bic.w	r3, r3, #16
 80020b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	330c      	adds	r3, #12
 80020bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80020c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80020c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80020c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020c8:	e841 2300 	strex	r3, r2, [r1]
 80020cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80020ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e3      	bne.n	800209c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe febe 	bl	8000e5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4619      	mov	r1, r3
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b6 	bl	8002260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020f4:	e099      	b.n	800222a <HAL_UART_IRQHandler+0x50e>
 80020f6:	bf00      	nop
 80020f8:	080023bb 	.word	0x080023bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002104:	b29b      	uxth	r3, r3
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 808b 	beq.w	800222e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8086 	beq.w	800222e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	330c      	adds	r3, #12
 8002128:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	e853 3f00 	ldrex	r3, [r3]
 8002130:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002138:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	330c      	adds	r3, #12
 8002142:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002146:	647a      	str	r2, [r7, #68]	; 0x44
 8002148:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800214c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800214e:	e841 2300 	strex	r3, r2, [r1]
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e3      	bne.n	8002122 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3314      	adds	r3, #20
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	623b      	str	r3, [r7, #32]
   return(result);
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800217e:	633a      	str	r2, [r7, #48]	; 0x30
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e3      	bne.n	800215a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	330c      	adds	r3, #12
 80021a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0310 	bic.w	r3, r3, #16
 80021b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80021c4:	61fa      	str	r2, [r7, #28]
 80021c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	617b      	str	r3, [r7, #20]
   return(result);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e3      	bne.n	80021a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f83e 	bl	8002260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021e4:	e023      	b.n	800222e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_UART_IRQHandler+0x4ea>
 80021f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f8ef 	bl	80023e2 <UART_Transmit_IT>
    return;
 8002204:	e014      	b.n	8002230 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00e      	beq.n	8002230 <HAL_UART_IRQHandler+0x514>
 8002212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f92f 	bl	8002482 <UART_EndTransmit_IT>
    return;
 8002224:	e004      	b.n	8002230 <HAL_UART_IRQHandler+0x514>
    return;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <HAL_UART_IRQHandler+0x514>
      return;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <HAL_UART_IRQHandler+0x514>
      return;
 800222e:	bf00      	nop
  }
}
 8002230:	37e8      	adds	r7, #232	; 0xe8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	4613      	mov	r3, r2
 8002284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	88fa      	ldrh	r2, [r7, #6]
 8002290:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	88fa      	ldrh	r2, [r7, #6]
 8002296:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2222      	movs	r2, #34	; 0x22
 80022a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d007      	beq.n	80022c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b095      	sub	sp, #84	; 0x54
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	330c      	adds	r3, #12
 8002302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002306:	e853 3f00 	ldrex	r3, [r3]
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800231c:	643a      	str	r2, [r7, #64]	; 0x40
 800231e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002324:	e841 2300 	strex	r3, r2, [r1]
 8002328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1e5      	bne.n	80022fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	3314      	adds	r3, #20
 8002336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	e853 3f00 	ldrex	r3, [r3]
 800233e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	64bb      	str	r3, [r7, #72]	; 0x48
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3314      	adds	r3, #20
 800234e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002358:	e841 2300 	strex	r3, r2, [r1]
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e5      	bne.n	8002330 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	2b01      	cmp	r3, #1
 800236a:	d119      	bne.n	80023a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	e853 3f00 	ldrex	r3, [r3]
 800237a:	60bb      	str	r3, [r7, #8]
   return(result);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f023 0310 	bic.w	r3, r3, #16
 8002382:	647b      	str	r3, [r7, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800238c:	61ba      	str	r2, [r7, #24]
 800238e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002390:	6979      	ldr	r1, [r7, #20]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	e841 2300 	strex	r3, r2, [r1]
 8002398:	613b      	str	r3, [r7, #16]
   return(result);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1e5      	bne.n	800236c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80023ae:	bf00      	nop
 80023b0:	3754      	adds	r7, #84	; 0x54
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff ff39 	bl	800224c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b21      	cmp	r3, #33	; 0x21
 80023f4:	d13e      	bne.n	8002474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023fe:	d114      	bne.n	800242a <UART_Transmit_IT+0x48>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d110      	bne.n	800242a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	e008      	b.n	800243c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	1c59      	adds	r1, r3, #1
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6211      	str	r1, [r2, #32]
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4619      	mov	r1, r3
 800244a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68da      	ldr	r2, [r3, #12]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800245e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2220      	movs	r2, #32
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fec8 	bl	8002238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b08c      	sub	sp, #48	; 0x30
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b22      	cmp	r3, #34	; 0x22
 80024c4:	f040 80ab 	bne.w	800261e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	d117      	bne.n	8002502 <UART_Receive_IT+0x50>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002500:	e026      	b.n	8002550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002514:	d007      	beq.n	8002526 <UART_Receive_IT+0x74>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10a      	bne.n	8002534 <UART_Receive_IT+0x82>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	e008      	b.n	8002546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	b2da      	uxtb	r2, r3
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	1c5a      	adds	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002554:	b29b      	uxth	r3, r3
 8002556:	3b01      	subs	r3, #1
 8002558:	b29b      	uxth	r3, r3
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4619      	mov	r1, r3
 800255e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002560:	2b00      	cmp	r3, #0
 8002562:	d15a      	bne.n	800261a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0220 	bic.w	r2, r2, #32
 8002572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2220      	movs	r2, #32
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d135      	bne.n	8002610 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	330c      	adds	r3, #12
 80025b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	e853 3f00 	ldrex	r3, [r3]
 80025b8:	613b      	str	r3, [r7, #16]
   return(result);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f023 0310 	bic.w	r3, r3, #16
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	330c      	adds	r3, #12
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	623a      	str	r2, [r7, #32]
 80025cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ce:	69f9      	ldr	r1, [r7, #28]
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	e841 2300 	strex	r3, r2, [r1]
 80025d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1e5      	bne.n	80025aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b10      	cmp	r3, #16
 80025ea:	d10a      	bne.n	8002602 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002606:	4619      	mov	r1, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fe29 	bl	8002260 <HAL_UARTEx_RxEventCallback>
 800260e:	e002      	b.n	8002616 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7fe f8c9 	bl	80007a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e002      	b.n	8002620 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800262c:	b0c0      	sub	sp, #256	; 0x100
 800262e:	af00      	add	r7, sp, #0
 8002630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	ea40 0301 	orr.w	r3, r0, r1
 8002650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	431a      	orrs	r2, r3
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	431a      	orrs	r2, r3
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4313      	orrs	r3, r2
 8002670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002680:	f021 010c 	bic.w	r1, r1, #12
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800268e:	430b      	orrs	r3, r1
 8002690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	6999      	ldr	r1, [r3, #24]
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	ea40 0301 	orr.w	r3, r0, r1
 80026ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4b8f      	ldr	r3, [pc, #572]	; (80028f4 <UART_SetConfig+0x2cc>)
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d005      	beq.n	80026c8 <UART_SetConfig+0xa0>
 80026bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b8d      	ldr	r3, [pc, #564]	; (80028f8 <UART_SetConfig+0x2d0>)
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d104      	bne.n	80026d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026c8:	f7ff fa96 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80026cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80026d0:	e003      	b.n	80026da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026d2:	f7ff fa7d 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80026d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e4:	f040 810c 	bne.w	8002900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ec:	2200      	movs	r2, #0
 80026ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	1891      	adds	r1, r2, r2
 8002700:	65b9      	str	r1, [r7, #88]	; 0x58
 8002702:	415b      	adcs	r3, r3
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800270a:	4621      	mov	r1, r4
 800270c:	eb12 0801 	adds.w	r8, r2, r1
 8002710:	4629      	mov	r1, r5
 8002712:	eb43 0901 	adc.w	r9, r3, r1
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800272a:	4690      	mov	r8, r2
 800272c:	4699      	mov	r9, r3
 800272e:	4623      	mov	r3, r4
 8002730:	eb18 0303 	adds.w	r3, r8, r3
 8002734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002738:	462b      	mov	r3, r5
 800273a:	eb49 0303 	adc.w	r3, r9, r3
 800273e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800274e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002756:	460b      	mov	r3, r1
 8002758:	18db      	adds	r3, r3, r3
 800275a:	653b      	str	r3, [r7, #80]	; 0x50
 800275c:	4613      	mov	r3, r2
 800275e:	eb42 0303 	adc.w	r3, r2, r3
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
 8002764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800276c:	f7fd fd88 	bl	8000280 <__aeabi_uldivmod>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4b61      	ldr	r3, [pc, #388]	; (80028fc <UART_SetConfig+0x2d4>)
 8002776:	fba3 2302 	umull	r2, r3, r3, r2
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	011c      	lsls	r4, r3, #4
 800277e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002782:	2200      	movs	r2, #0
 8002784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800278c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	1891      	adds	r1, r2, r2
 8002796:	64b9      	str	r1, [r7, #72]	; 0x48
 8002798:	415b      	adcs	r3, r3
 800279a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800279c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027a0:	4641      	mov	r1, r8
 80027a2:	eb12 0a01 	adds.w	sl, r2, r1
 80027a6:	4649      	mov	r1, r9
 80027a8:	eb43 0b01 	adc.w	fp, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027c0:	4692      	mov	sl, r2
 80027c2:	469b      	mov	fp, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	eb1a 0303 	adds.w	r3, sl, r3
 80027ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027ce:	464b      	mov	r3, r9
 80027d0:	eb4b 0303 	adc.w	r3, fp, r3
 80027d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80027d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80027e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027ec:	460b      	mov	r3, r1
 80027ee:	18db      	adds	r3, r3, r3
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
 80027f2:	4613      	mov	r3, r2
 80027f4:	eb42 0303 	adc.w	r3, r2, r3
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
 80027fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002802:	f7fd fd3d 	bl	8000280 <__aeabi_uldivmod>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4611      	mov	r1, r2
 800280c:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <UART_SetConfig+0x2d4>)
 800280e:	fba3 2301 	umull	r2, r3, r3, r1
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2264      	movs	r2, #100	; 0x64
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	1acb      	subs	r3, r1, r3
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <UART_SetConfig+0x2d4>)
 8002824:	fba3 2302 	umull	r2, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002830:	441c      	add	r4, r3
 8002832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002836:	2200      	movs	r2, #0
 8002838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800283c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002844:	4642      	mov	r2, r8
 8002846:	464b      	mov	r3, r9
 8002848:	1891      	adds	r1, r2, r2
 800284a:	63b9      	str	r1, [r7, #56]	; 0x38
 800284c:	415b      	adcs	r3, r3
 800284e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002854:	4641      	mov	r1, r8
 8002856:	1851      	adds	r1, r2, r1
 8002858:	6339      	str	r1, [r7, #48]	; 0x30
 800285a:	4649      	mov	r1, r9
 800285c:	414b      	adcs	r3, r1
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800286c:	4659      	mov	r1, fp
 800286e:	00cb      	lsls	r3, r1, #3
 8002870:	4651      	mov	r1, sl
 8002872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002876:	4651      	mov	r1, sl
 8002878:	00ca      	lsls	r2, r1, #3
 800287a:	4610      	mov	r0, r2
 800287c:	4619      	mov	r1, r3
 800287e:	4603      	mov	r3, r0
 8002880:	4642      	mov	r2, r8
 8002882:	189b      	adds	r3, r3, r2
 8002884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002888:	464b      	mov	r3, r9
 800288a:	460a      	mov	r2, r1
 800288c:	eb42 0303 	adc.w	r3, r2, r3
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028a8:	460b      	mov	r3, r1
 80028aa:	18db      	adds	r3, r3, r3
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ae:	4613      	mov	r3, r2
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80028be:	f7fd fcdf 	bl	8000280 <__aeabi_uldivmod>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <UART_SetConfig+0x2d4>)
 80028c8:	fba3 1302 	umull	r1, r3, r3, r2
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	2164      	movs	r1, #100	; 0x64
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	3332      	adds	r3, #50	; 0x32
 80028da:	4a08      	ldr	r2, [pc, #32]	; (80028fc <UART_SetConfig+0x2d4>)
 80028dc:	fba2 2303 	umull	r2, r3, r2, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	f003 0207 	and.w	r2, r3, #7
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4422      	add	r2, r4
 80028ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028f0:	e106      	b.n	8002b00 <UART_SetConfig+0x4d8>
 80028f2:	bf00      	nop
 80028f4:	40011000 	.word	0x40011000
 80028f8:	40011400 	.word	0x40011400
 80028fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800290a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800290e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002912:	4642      	mov	r2, r8
 8002914:	464b      	mov	r3, r9
 8002916:	1891      	adds	r1, r2, r2
 8002918:	6239      	str	r1, [r7, #32]
 800291a:	415b      	adcs	r3, r3
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002922:	4641      	mov	r1, r8
 8002924:	1854      	adds	r4, r2, r1
 8002926:	4649      	mov	r1, r9
 8002928:	eb43 0501 	adc.w	r5, r3, r1
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	00eb      	lsls	r3, r5, #3
 8002936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800293a:	00e2      	lsls	r2, r4, #3
 800293c:	4614      	mov	r4, r2
 800293e:	461d      	mov	r5, r3
 8002940:	4643      	mov	r3, r8
 8002942:	18e3      	adds	r3, r4, r3
 8002944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002948:	464b      	mov	r3, r9
 800294a:	eb45 0303 	adc.w	r3, r5, r3
 800294e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800295e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800296e:	4629      	mov	r1, r5
 8002970:	008b      	lsls	r3, r1, #2
 8002972:	4621      	mov	r1, r4
 8002974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002978:	4621      	mov	r1, r4
 800297a:	008a      	lsls	r2, r1, #2
 800297c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002980:	f7fd fc7e 	bl	8000280 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4b60      	ldr	r3, [pc, #384]	; (8002b0c <UART_SetConfig+0x4e4>)
 800298a:	fba3 2302 	umull	r2, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	011c      	lsls	r4, r3, #4
 8002992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002996:	2200      	movs	r2, #0
 8002998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800299c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029a4:	4642      	mov	r2, r8
 80029a6:	464b      	mov	r3, r9
 80029a8:	1891      	adds	r1, r2, r2
 80029aa:	61b9      	str	r1, [r7, #24]
 80029ac:	415b      	adcs	r3, r3
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029b4:	4641      	mov	r1, r8
 80029b6:	1851      	adds	r1, r2, r1
 80029b8:	6139      	str	r1, [r7, #16]
 80029ba:	4649      	mov	r1, r9
 80029bc:	414b      	adcs	r3, r1
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029cc:	4659      	mov	r1, fp
 80029ce:	00cb      	lsls	r3, r1, #3
 80029d0:	4651      	mov	r1, sl
 80029d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029d6:	4651      	mov	r1, sl
 80029d8:	00ca      	lsls	r2, r1, #3
 80029da:	4610      	mov	r0, r2
 80029dc:	4619      	mov	r1, r3
 80029de:	4603      	mov	r3, r0
 80029e0:	4642      	mov	r2, r8
 80029e2:	189b      	adds	r3, r3, r2
 80029e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80029e8:	464b      	mov	r3, r9
 80029ea:	460a      	mov	r2, r1
 80029ec:	eb42 0303 	adc.w	r3, r2, r3
 80029f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	008b      	lsls	r3, r1, #2
 8002a10:	4641      	mov	r1, r8
 8002a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a16:	4641      	mov	r1, r8
 8002a18:	008a      	lsls	r2, r1, #2
 8002a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a1e:	f7fd fc2f 	bl	8000280 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2264      	movs	r2, #100	; 0x64
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	1acb      	subs	r3, r1, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	; 0x32
 8002a3c:	4a33      	ldr	r2, [pc, #204]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a48:	441c      	add	r4, r3
 8002a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4e:	2200      	movs	r2, #0
 8002a50:	673b      	str	r3, [r7, #112]	; 0x70
 8002a52:	677a      	str	r2, [r7, #116]	; 0x74
 8002a54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1891      	adds	r1, r2, r2
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	415b      	adcs	r3, r3
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a68:	4641      	mov	r1, r8
 8002a6a:	1851      	adds	r1, r2, r1
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	4649      	mov	r1, r9
 8002a70:	414b      	adcs	r3, r1
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a80:	4659      	mov	r1, fp
 8002a82:	00cb      	lsls	r3, r1, #3
 8002a84:	4651      	mov	r1, sl
 8002a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a8a:	4651      	mov	r1, sl
 8002a8c:	00ca      	lsls	r2, r1, #3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	4642      	mov	r2, r8
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9a:	464b      	mov	r3, r9
 8002a9c:	460a      	mov	r2, r1
 8002a9e:	eb42 0303 	adc.w	r3, r2, r3
 8002aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	663b      	str	r3, [r7, #96]	; 0x60
 8002aae:	667a      	str	r2, [r7, #100]	; 0x64
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002abc:	4649      	mov	r1, r9
 8002abe:	008b      	lsls	r3, r1, #2
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	008a      	lsls	r2, r1, #2
 8002aca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ace:	f7fd fbd7 	bl	8000280 <__aeabi_uldivmod>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	2164      	movs	r1, #100	; 0x64
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	3332      	adds	r3, #50	; 0x32
 8002aea:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <UART_SetConfig+0x4e4>)
 8002aec:	fba2 2303 	umull	r2, r3, r2, r3
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	f003 020f 	and.w	r2, r3, #15
 8002af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4422      	add	r2, r4
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b06:	46bd      	mov	sp, r7
 8002b08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0c:	51eb851f 	.word	0x51eb851f

08002b10 <std>:
 8002b10:	2300      	movs	r3, #0
 8002b12:	b510      	push	{r4, lr}
 8002b14:	4604      	mov	r4, r0
 8002b16:	e9c0 3300 	strd	r3, r3, [r0]
 8002b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b1e:	6083      	str	r3, [r0, #8]
 8002b20:	8181      	strh	r1, [r0, #12]
 8002b22:	6643      	str	r3, [r0, #100]	; 0x64
 8002b24:	81c2      	strh	r2, [r0, #14]
 8002b26:	6183      	str	r3, [r0, #24]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	305c      	adds	r0, #92	; 0x5c
 8002b2e:	f000 f8f4 	bl	8002d1a <memset>
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <std+0x38>)
 8002b34:	6263      	str	r3, [r4, #36]	; 0x24
 8002b36:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <std+0x3c>)
 8002b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <std+0x40>)
 8002b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <std+0x44>)
 8002b40:	6224      	str	r4, [r4, #32]
 8002b42:	6323      	str	r3, [r4, #48]	; 0x30
 8002b44:	bd10      	pop	{r4, pc}
 8002b46:	bf00      	nop
 8002b48:	08002c95 	.word	0x08002c95
 8002b4c:	08002cb7 	.word	0x08002cb7
 8002b50:	08002cef 	.word	0x08002cef
 8002b54:	08002d13 	.word	0x08002d13

08002b58 <stdio_exit_handler>:
 8002b58:	4a02      	ldr	r2, [pc, #8]	; (8002b64 <stdio_exit_handler+0xc>)
 8002b5a:	4903      	ldr	r1, [pc, #12]	; (8002b68 <stdio_exit_handler+0x10>)
 8002b5c:	4803      	ldr	r0, [pc, #12]	; (8002b6c <stdio_exit_handler+0x14>)
 8002b5e:	f000 b869 	b.w	8002c34 <_fwalk_sglue>
 8002b62:	bf00      	nop
 8002b64:	2000000c 	.word	0x2000000c
 8002b68:	080036b5 	.word	0x080036b5
 8002b6c:	20000018 	.word	0x20000018

08002b70 <cleanup_stdio>:
 8002b70:	6841      	ldr	r1, [r0, #4]
 8002b72:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <cleanup_stdio+0x34>)
 8002b74:	4299      	cmp	r1, r3
 8002b76:	b510      	push	{r4, lr}
 8002b78:	4604      	mov	r4, r0
 8002b7a:	d001      	beq.n	8002b80 <cleanup_stdio+0x10>
 8002b7c:	f000 fd9a 	bl	80036b4 <_fflush_r>
 8002b80:	68a1      	ldr	r1, [r4, #8]
 8002b82:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <cleanup_stdio+0x38>)
 8002b84:	4299      	cmp	r1, r3
 8002b86:	d002      	beq.n	8002b8e <cleanup_stdio+0x1e>
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f000 fd93 	bl	80036b4 <_fflush_r>
 8002b8e:	68e1      	ldr	r1, [r4, #12]
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <cleanup_stdio+0x3c>)
 8002b92:	4299      	cmp	r1, r3
 8002b94:	d004      	beq.n	8002ba0 <cleanup_stdio+0x30>
 8002b96:	4620      	mov	r0, r4
 8002b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b9c:	f000 bd8a 	b.w	80036b4 <_fflush_r>
 8002ba0:	bd10      	pop	{r4, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200000dc 	.word	0x200000dc
 8002ba8:	20000144 	.word	0x20000144
 8002bac:	200001ac 	.word	0x200001ac

08002bb0 <global_stdio_init.part.0>:
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <global_stdio_init.part.0+0x30>)
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	; (8002be4 <global_stdio_init.part.0+0x34>)
 8002bb6:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <global_stdio_init.part.0+0x38>)
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	4620      	mov	r0, r4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	f7ff ffa6 	bl	8002b10 <std>
 8002bc4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2109      	movs	r1, #9
 8002bcc:	f7ff ffa0 	bl	8002b10 <std>
 8002bd0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bda:	2112      	movs	r1, #18
 8002bdc:	f7ff bf98 	b.w	8002b10 <std>
 8002be0:	20000214 	.word	0x20000214
 8002be4:	200000dc 	.word	0x200000dc
 8002be8:	08002b59 	.word	0x08002b59

08002bec <__sfp_lock_acquire>:
 8002bec:	4801      	ldr	r0, [pc, #4]	; (8002bf4 <__sfp_lock_acquire+0x8>)
 8002bee:	f000 b90d 	b.w	8002e0c <__retarget_lock_acquire_recursive>
 8002bf2:	bf00      	nop
 8002bf4:	2000021d 	.word	0x2000021d

08002bf8 <__sfp_lock_release>:
 8002bf8:	4801      	ldr	r0, [pc, #4]	; (8002c00 <__sfp_lock_release+0x8>)
 8002bfa:	f000 b908 	b.w	8002e0e <__retarget_lock_release_recursive>
 8002bfe:	bf00      	nop
 8002c00:	2000021d 	.word	0x2000021d

08002c04 <__sinit>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	4604      	mov	r4, r0
 8002c08:	f7ff fff0 	bl	8002bec <__sfp_lock_acquire>
 8002c0c:	6a23      	ldr	r3, [r4, #32]
 8002c0e:	b11b      	cbz	r3, 8002c18 <__sinit+0x14>
 8002c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c14:	f7ff bff0 	b.w	8002bf8 <__sfp_lock_release>
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <__sinit+0x28>)
 8002c1a:	6223      	str	r3, [r4, #32]
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <__sinit+0x2c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f5      	bne.n	8002c10 <__sinit+0xc>
 8002c24:	f7ff ffc4 	bl	8002bb0 <global_stdio_init.part.0>
 8002c28:	e7f2      	b.n	8002c10 <__sinit+0xc>
 8002c2a:	bf00      	nop
 8002c2c:	08002b71 	.word	0x08002b71
 8002c30:	20000214 	.word	0x20000214

08002c34 <_fwalk_sglue>:
 8002c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c38:	4607      	mov	r7, r0
 8002c3a:	4688      	mov	r8, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	2600      	movs	r6, #0
 8002c40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c44:	f1b9 0901 	subs.w	r9, r9, #1
 8002c48:	d505      	bpl.n	8002c56 <_fwalk_sglue+0x22>
 8002c4a:	6824      	ldr	r4, [r4, #0]
 8002c4c:	2c00      	cmp	r4, #0
 8002c4e:	d1f7      	bne.n	8002c40 <_fwalk_sglue+0xc>
 8002c50:	4630      	mov	r0, r6
 8002c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c56:	89ab      	ldrh	r3, [r5, #12]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d907      	bls.n	8002c6c <_fwalk_sglue+0x38>
 8002c5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c60:	3301      	adds	r3, #1
 8002c62:	d003      	beq.n	8002c6c <_fwalk_sglue+0x38>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	47c0      	blx	r8
 8002c6a:	4306      	orrs	r6, r0
 8002c6c:	3568      	adds	r5, #104	; 0x68
 8002c6e:	e7e9      	b.n	8002c44 <_fwalk_sglue+0x10>

08002c70 <iprintf>:
 8002c70:	b40f      	push	{r0, r1, r2, r3}
 8002c72:	b507      	push	{r0, r1, r2, lr}
 8002c74:	4906      	ldr	r1, [pc, #24]	; (8002c90 <iprintf+0x20>)
 8002c76:	ab04      	add	r3, sp, #16
 8002c78:	6808      	ldr	r0, [r1, #0]
 8002c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c7e:	6881      	ldr	r1, [r0, #8]
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	f000 f9e7 	bl	8003054 <_vfiprintf_r>
 8002c86:	b003      	add	sp, #12
 8002c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c8c:	b004      	add	sp, #16
 8002c8e:	4770      	bx	lr
 8002c90:	20000064 	.word	0x20000064

08002c94 <__sread>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	460c      	mov	r4, r1
 8002c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9c:	f000 f868 	bl	8002d70 <_read_r>
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	bfab      	itete	ge
 8002ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ca8:	181b      	addge	r3, r3, r0
 8002caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cae:	bfac      	ite	ge
 8002cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cb2:	81a3      	strhlt	r3, [r4, #12]
 8002cb4:	bd10      	pop	{r4, pc}

08002cb6 <__swrite>:
 8002cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cba:	461f      	mov	r7, r3
 8002cbc:	898b      	ldrh	r3, [r1, #12]
 8002cbe:	05db      	lsls	r3, r3, #23
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	4616      	mov	r6, r2
 8002cc6:	d505      	bpl.n	8002cd4 <__swrite+0x1e>
 8002cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ccc:	2302      	movs	r3, #2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f000 f83c 	bl	8002d4c <_lseek_r>
 8002cd4:	89a3      	ldrh	r3, [r4, #12]
 8002cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cde:	81a3      	strh	r3, [r4, #12]
 8002ce0:	4632      	mov	r2, r6
 8002ce2:	463b      	mov	r3, r7
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cea:	f000 b853 	b.w	8002d94 <_write_r>

08002cee <__sseek>:
 8002cee:	b510      	push	{r4, lr}
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cf6:	f000 f829 	bl	8002d4c <_lseek_r>
 8002cfa:	1c43      	adds	r3, r0, #1
 8002cfc:	89a3      	ldrh	r3, [r4, #12]
 8002cfe:	bf15      	itete	ne
 8002d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d0a:	81a3      	strheq	r3, [r4, #12]
 8002d0c:	bf18      	it	ne
 8002d0e:	81a3      	strhne	r3, [r4, #12]
 8002d10:	bd10      	pop	{r4, pc}

08002d12 <__sclose>:
 8002d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d16:	f000 b809 	b.w	8002d2c <_close_r>

08002d1a <memset>:
 8002d1a:	4402      	add	r2, r0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d100      	bne.n	8002d24 <memset+0xa>
 8002d22:	4770      	bx	lr
 8002d24:	f803 1b01 	strb.w	r1, [r3], #1
 8002d28:	e7f9      	b.n	8002d1e <memset+0x4>
	...

08002d2c <_close_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d06      	ldr	r5, [pc, #24]	; (8002d48 <_close_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	f7fd fdeb 	bl	8000912 <_close>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_close_r+0x1a>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_close_r+0x1a>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	20000218 	.word	0x20000218

08002d4c <_lseek_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_lseek_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fd fe00 	bl	8000960 <_lseek>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_lseek_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_lseek_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	20000218 	.word	0x20000218

08002d70 <_read_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	4d07      	ldr	r5, [pc, #28]	; (8002d90 <_read_r+0x20>)
 8002d74:	4604      	mov	r4, r0
 8002d76:	4608      	mov	r0, r1
 8002d78:	4611      	mov	r1, r2
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	602a      	str	r2, [r5, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f7fd fd8e 	bl	80008a0 <_read>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_read_r+0x1e>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_read_r+0x1e>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	20000218 	.word	0x20000218

08002d94 <_write_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	4d07      	ldr	r5, [pc, #28]	; (8002db4 <_write_r+0x20>)
 8002d98:	4604      	mov	r4, r0
 8002d9a:	4608      	mov	r0, r1
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	602a      	str	r2, [r5, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f7fd fd99 	bl	80008da <_write>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d102      	bne.n	8002db2 <_write_r+0x1e>
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	b103      	cbz	r3, 8002db2 <_write_r+0x1e>
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	bd38      	pop	{r3, r4, r5, pc}
 8002db4:	20000218 	.word	0x20000218

08002db8 <__errno>:
 8002db8:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <__errno+0x8>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	20000064 	.word	0x20000064

08002dc4 <__libc_init_array>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	4d0d      	ldr	r5, [pc, #52]	; (8002dfc <__libc_init_array+0x38>)
 8002dc8:	4c0d      	ldr	r4, [pc, #52]	; (8002e00 <__libc_init_array+0x3c>)
 8002dca:	1b64      	subs	r4, r4, r5
 8002dcc:	10a4      	asrs	r4, r4, #2
 8002dce:	2600      	movs	r6, #0
 8002dd0:	42a6      	cmp	r6, r4
 8002dd2:	d109      	bne.n	8002de8 <__libc_init_array+0x24>
 8002dd4:	4d0b      	ldr	r5, [pc, #44]	; (8002e04 <__libc_init_array+0x40>)
 8002dd6:	4c0c      	ldr	r4, [pc, #48]	; (8002e08 <__libc_init_array+0x44>)
 8002dd8:	f000 fdbe 	bl	8003958 <_init>
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	2600      	movs	r6, #0
 8002de2:	42a6      	cmp	r6, r4
 8002de4:	d105      	bne.n	8002df2 <__libc_init_array+0x2e>
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dec:	4798      	blx	r3
 8002dee:	3601      	adds	r6, #1
 8002df0:	e7ee      	b.n	8002dd0 <__libc_init_array+0xc>
 8002df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df6:	4798      	blx	r3
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7f2      	b.n	8002de2 <__libc_init_array+0x1e>
 8002dfc:	080039d4 	.word	0x080039d4
 8002e00:	080039d4 	.word	0x080039d4
 8002e04:	080039d4 	.word	0x080039d4
 8002e08:	080039d8 	.word	0x080039d8

08002e0c <__retarget_lock_acquire_recursive>:
 8002e0c:	4770      	bx	lr

08002e0e <__retarget_lock_release_recursive>:
 8002e0e:	4770      	bx	lr

08002e10 <_free_r>:
 8002e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e12:	2900      	cmp	r1, #0
 8002e14:	d044      	beq.n	8002ea0 <_free_r+0x90>
 8002e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e1a:	9001      	str	r0, [sp, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8002e22:	bfb8      	it	lt
 8002e24:	18e4      	addlt	r4, r4, r3
 8002e26:	f000 f8df 	bl	8002fe8 <__malloc_lock>
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <_free_r+0x94>)
 8002e2c:	9801      	ldr	r0, [sp, #4]
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	b933      	cbnz	r3, 8002e40 <_free_r+0x30>
 8002e32:	6063      	str	r3, [r4, #4]
 8002e34:	6014      	str	r4, [r2, #0]
 8002e36:	b003      	add	sp, #12
 8002e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e3c:	f000 b8da 	b.w	8002ff4 <__malloc_unlock>
 8002e40:	42a3      	cmp	r3, r4
 8002e42:	d908      	bls.n	8002e56 <_free_r+0x46>
 8002e44:	6825      	ldr	r5, [r4, #0]
 8002e46:	1961      	adds	r1, r4, r5
 8002e48:	428b      	cmp	r3, r1
 8002e4a:	bf01      	itttt	eq
 8002e4c:	6819      	ldreq	r1, [r3, #0]
 8002e4e:	685b      	ldreq	r3, [r3, #4]
 8002e50:	1949      	addeq	r1, r1, r5
 8002e52:	6021      	streq	r1, [r4, #0]
 8002e54:	e7ed      	b.n	8002e32 <_free_r+0x22>
 8002e56:	461a      	mov	r2, r3
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b10b      	cbz	r3, 8002e60 <_free_r+0x50>
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	d9fa      	bls.n	8002e56 <_free_r+0x46>
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	1855      	adds	r5, r2, r1
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d10b      	bne.n	8002e80 <_free_r+0x70>
 8002e68:	6824      	ldr	r4, [r4, #0]
 8002e6a:	4421      	add	r1, r4
 8002e6c:	1854      	adds	r4, r2, r1
 8002e6e:	42a3      	cmp	r3, r4
 8002e70:	6011      	str	r1, [r2, #0]
 8002e72:	d1e0      	bne.n	8002e36 <_free_r+0x26>
 8002e74:	681c      	ldr	r4, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	440c      	add	r4, r1
 8002e7c:	6014      	str	r4, [r2, #0]
 8002e7e:	e7da      	b.n	8002e36 <_free_r+0x26>
 8002e80:	d902      	bls.n	8002e88 <_free_r+0x78>
 8002e82:	230c      	movs	r3, #12
 8002e84:	6003      	str	r3, [r0, #0]
 8002e86:	e7d6      	b.n	8002e36 <_free_r+0x26>
 8002e88:	6825      	ldr	r5, [r4, #0]
 8002e8a:	1961      	adds	r1, r4, r5
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf04      	itt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	bf04      	itt	eq
 8002e98:	1949      	addeq	r1, r1, r5
 8002e9a:	6021      	streq	r1, [r4, #0]
 8002e9c:	6054      	str	r4, [r2, #4]
 8002e9e:	e7ca      	b.n	8002e36 <_free_r+0x26>
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd30      	pop	{r4, r5, pc}
 8002ea4:	20000220 	.word	0x20000220

08002ea8 <sbrk_aligned>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	4e0e      	ldr	r6, [pc, #56]	; (8002ee4 <sbrk_aligned+0x3c>)
 8002eac:	460c      	mov	r4, r1
 8002eae:	6831      	ldr	r1, [r6, #0]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	b911      	cbnz	r1, 8002eba <sbrk_aligned+0x12>
 8002eb4:	f000 fcbc 	bl	8003830 <_sbrk_r>
 8002eb8:	6030      	str	r0, [r6, #0]
 8002eba:	4621      	mov	r1, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f000 fcb7 	bl	8003830 <_sbrk_r>
 8002ec2:	1c43      	adds	r3, r0, #1
 8002ec4:	d00a      	beq.n	8002edc <sbrk_aligned+0x34>
 8002ec6:	1cc4      	adds	r4, r0, #3
 8002ec8:	f024 0403 	bic.w	r4, r4, #3
 8002ecc:	42a0      	cmp	r0, r4
 8002ece:	d007      	beq.n	8002ee0 <sbrk_aligned+0x38>
 8002ed0:	1a21      	subs	r1, r4, r0
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	f000 fcac 	bl	8003830 <_sbrk_r>
 8002ed8:	3001      	adds	r0, #1
 8002eda:	d101      	bne.n	8002ee0 <sbrk_aligned+0x38>
 8002edc:	f04f 34ff 	mov.w	r4, #4294967295
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}
 8002ee4:	20000224 	.word	0x20000224

08002ee8 <_malloc_r>:
 8002ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eec:	1ccd      	adds	r5, r1, #3
 8002eee:	f025 0503 	bic.w	r5, r5, #3
 8002ef2:	3508      	adds	r5, #8
 8002ef4:	2d0c      	cmp	r5, #12
 8002ef6:	bf38      	it	cc
 8002ef8:	250c      	movcc	r5, #12
 8002efa:	2d00      	cmp	r5, #0
 8002efc:	4607      	mov	r7, r0
 8002efe:	db01      	blt.n	8002f04 <_malloc_r+0x1c>
 8002f00:	42a9      	cmp	r1, r5
 8002f02:	d905      	bls.n	8002f10 <_malloc_r+0x28>
 8002f04:	230c      	movs	r3, #12
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4630      	mov	r0, r6
 8002f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fe4 <_malloc_r+0xfc>
 8002f14:	f000 f868 	bl	8002fe8 <__malloc_lock>
 8002f18:	f8d8 3000 	ldr.w	r3, [r8]
 8002f1c:	461c      	mov	r4, r3
 8002f1e:	bb5c      	cbnz	r4, 8002f78 <_malloc_r+0x90>
 8002f20:	4629      	mov	r1, r5
 8002f22:	4638      	mov	r0, r7
 8002f24:	f7ff ffc0 	bl	8002ea8 <sbrk_aligned>
 8002f28:	1c43      	adds	r3, r0, #1
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	d155      	bne.n	8002fda <_malloc_r+0xf2>
 8002f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8002f32:	4626      	mov	r6, r4
 8002f34:	2e00      	cmp	r6, #0
 8002f36:	d145      	bne.n	8002fc4 <_malloc_r+0xdc>
 8002f38:	2c00      	cmp	r4, #0
 8002f3a:	d048      	beq.n	8002fce <_malloc_r+0xe6>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	4631      	mov	r1, r6
 8002f40:	4638      	mov	r0, r7
 8002f42:	eb04 0903 	add.w	r9, r4, r3
 8002f46:	f000 fc73 	bl	8003830 <_sbrk_r>
 8002f4a:	4581      	cmp	r9, r0
 8002f4c:	d13f      	bne.n	8002fce <_malloc_r+0xe6>
 8002f4e:	6821      	ldr	r1, [r4, #0]
 8002f50:	1a6d      	subs	r5, r5, r1
 8002f52:	4629      	mov	r1, r5
 8002f54:	4638      	mov	r0, r7
 8002f56:	f7ff ffa7 	bl	8002ea8 <sbrk_aligned>
 8002f5a:	3001      	adds	r0, #1
 8002f5c:	d037      	beq.n	8002fce <_malloc_r+0xe6>
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	442b      	add	r3, r5
 8002f62:	6023      	str	r3, [r4, #0]
 8002f64:	f8d8 3000 	ldr.w	r3, [r8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d038      	beq.n	8002fde <_malloc_r+0xf6>
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	42a2      	cmp	r2, r4
 8002f70:	d12b      	bne.n	8002fca <_malloc_r+0xe2>
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	e00f      	b.n	8002f98 <_malloc_r+0xb0>
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	1b52      	subs	r2, r2, r5
 8002f7c:	d41f      	bmi.n	8002fbe <_malloc_r+0xd6>
 8002f7e:	2a0b      	cmp	r2, #11
 8002f80:	d917      	bls.n	8002fb2 <_malloc_r+0xca>
 8002f82:	1961      	adds	r1, r4, r5
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	6025      	str	r5, [r4, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	6059      	strne	r1, [r3, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	bf08      	it	eq
 8002f90:	f8c8 1000 	streq.w	r1, [r8]
 8002f94:	5162      	str	r2, [r4, r5]
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	4638      	mov	r0, r7
 8002f9a:	f104 060b 	add.w	r6, r4, #11
 8002f9e:	f000 f829 	bl	8002ff4 <__malloc_unlock>
 8002fa2:	f026 0607 	bic.w	r6, r6, #7
 8002fa6:	1d23      	adds	r3, r4, #4
 8002fa8:	1af2      	subs	r2, r6, r3
 8002faa:	d0ae      	beq.n	8002f0a <_malloc_r+0x22>
 8002fac:	1b9b      	subs	r3, r3, r6
 8002fae:	50a3      	str	r3, [r4, r2]
 8002fb0:	e7ab      	b.n	8002f0a <_malloc_r+0x22>
 8002fb2:	42a3      	cmp	r3, r4
 8002fb4:	6862      	ldr	r2, [r4, #4]
 8002fb6:	d1dd      	bne.n	8002f74 <_malloc_r+0x8c>
 8002fb8:	f8c8 2000 	str.w	r2, [r8]
 8002fbc:	e7ec      	b.n	8002f98 <_malloc_r+0xb0>
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	6864      	ldr	r4, [r4, #4]
 8002fc2:	e7ac      	b.n	8002f1e <_malloc_r+0x36>
 8002fc4:	4634      	mov	r4, r6
 8002fc6:	6876      	ldr	r6, [r6, #4]
 8002fc8:	e7b4      	b.n	8002f34 <_malloc_r+0x4c>
 8002fca:	4613      	mov	r3, r2
 8002fcc:	e7cc      	b.n	8002f68 <_malloc_r+0x80>
 8002fce:	230c      	movs	r3, #12
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	f000 f80e 	bl	8002ff4 <__malloc_unlock>
 8002fd8:	e797      	b.n	8002f0a <_malloc_r+0x22>
 8002fda:	6025      	str	r5, [r4, #0]
 8002fdc:	e7dc      	b.n	8002f98 <_malloc_r+0xb0>
 8002fde:	605b      	str	r3, [r3, #4]
 8002fe0:	deff      	udf	#255	; 0xff
 8002fe2:	bf00      	nop
 8002fe4:	20000220 	.word	0x20000220

08002fe8 <__malloc_lock>:
 8002fe8:	4801      	ldr	r0, [pc, #4]	; (8002ff0 <__malloc_lock+0x8>)
 8002fea:	f7ff bf0f 	b.w	8002e0c <__retarget_lock_acquire_recursive>
 8002fee:	bf00      	nop
 8002ff0:	2000021c 	.word	0x2000021c

08002ff4 <__malloc_unlock>:
 8002ff4:	4801      	ldr	r0, [pc, #4]	; (8002ffc <__malloc_unlock+0x8>)
 8002ff6:	f7ff bf0a 	b.w	8002e0e <__retarget_lock_release_recursive>
 8002ffa:	bf00      	nop
 8002ffc:	2000021c 	.word	0x2000021c

08003000 <__sfputc_r>:
 8003000:	6893      	ldr	r3, [r2, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	b410      	push	{r4}
 8003008:	6093      	str	r3, [r2, #8]
 800300a:	da08      	bge.n	800301e <__sfputc_r+0x1e>
 800300c:	6994      	ldr	r4, [r2, #24]
 800300e:	42a3      	cmp	r3, r4
 8003010:	db01      	blt.n	8003016 <__sfputc_r+0x16>
 8003012:	290a      	cmp	r1, #10
 8003014:	d103      	bne.n	800301e <__sfputc_r+0x1e>
 8003016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800301a:	f000 bb73 	b.w	8003704 <__swbuf_r>
 800301e:	6813      	ldr	r3, [r2, #0]
 8003020:	1c58      	adds	r0, r3, #1
 8003022:	6010      	str	r0, [r2, #0]
 8003024:	7019      	strb	r1, [r3, #0]
 8003026:	4608      	mov	r0, r1
 8003028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800302c:	4770      	bx	lr

0800302e <__sfputs_r>:
 800302e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003030:	4606      	mov	r6, r0
 8003032:	460f      	mov	r7, r1
 8003034:	4614      	mov	r4, r2
 8003036:	18d5      	adds	r5, r2, r3
 8003038:	42ac      	cmp	r4, r5
 800303a:	d101      	bne.n	8003040 <__sfputs_r+0x12>
 800303c:	2000      	movs	r0, #0
 800303e:	e007      	b.n	8003050 <__sfputs_r+0x22>
 8003040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003044:	463a      	mov	r2, r7
 8003046:	4630      	mov	r0, r6
 8003048:	f7ff ffda 	bl	8003000 <__sfputc_r>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d1f3      	bne.n	8003038 <__sfputs_r+0xa>
 8003050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003054 <_vfiprintf_r>:
 8003054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003058:	460d      	mov	r5, r1
 800305a:	b09d      	sub	sp, #116	; 0x74
 800305c:	4614      	mov	r4, r2
 800305e:	4698      	mov	r8, r3
 8003060:	4606      	mov	r6, r0
 8003062:	b118      	cbz	r0, 800306c <_vfiprintf_r+0x18>
 8003064:	6a03      	ldr	r3, [r0, #32]
 8003066:	b90b      	cbnz	r3, 800306c <_vfiprintf_r+0x18>
 8003068:	f7ff fdcc 	bl	8002c04 <__sinit>
 800306c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800306e:	07d9      	lsls	r1, r3, #31
 8003070:	d405      	bmi.n	800307e <_vfiprintf_r+0x2a>
 8003072:	89ab      	ldrh	r3, [r5, #12]
 8003074:	059a      	lsls	r2, r3, #22
 8003076:	d402      	bmi.n	800307e <_vfiprintf_r+0x2a>
 8003078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800307a:	f7ff fec7 	bl	8002e0c <__retarget_lock_acquire_recursive>
 800307e:	89ab      	ldrh	r3, [r5, #12]
 8003080:	071b      	lsls	r3, r3, #28
 8003082:	d501      	bpl.n	8003088 <_vfiprintf_r+0x34>
 8003084:	692b      	ldr	r3, [r5, #16]
 8003086:	b99b      	cbnz	r3, 80030b0 <_vfiprintf_r+0x5c>
 8003088:	4629      	mov	r1, r5
 800308a:	4630      	mov	r0, r6
 800308c:	f000 fb78 	bl	8003780 <__swsetup_r>
 8003090:	b170      	cbz	r0, 80030b0 <_vfiprintf_r+0x5c>
 8003092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003094:	07dc      	lsls	r4, r3, #31
 8003096:	d504      	bpl.n	80030a2 <_vfiprintf_r+0x4e>
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	b01d      	add	sp, #116	; 0x74
 800309e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030a2:	89ab      	ldrh	r3, [r5, #12]
 80030a4:	0598      	lsls	r0, r3, #22
 80030a6:	d4f7      	bmi.n	8003098 <_vfiprintf_r+0x44>
 80030a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030aa:	f7ff feb0 	bl	8002e0e <__retarget_lock_release_recursive>
 80030ae:	e7f3      	b.n	8003098 <_vfiprintf_r+0x44>
 80030b0:	2300      	movs	r3, #0
 80030b2:	9309      	str	r3, [sp, #36]	; 0x24
 80030b4:	2320      	movs	r3, #32
 80030b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80030be:	2330      	movs	r3, #48	; 0x30
 80030c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003274 <_vfiprintf_r+0x220>
 80030c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030c8:	f04f 0901 	mov.w	r9, #1
 80030cc:	4623      	mov	r3, r4
 80030ce:	469a      	mov	sl, r3
 80030d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030d4:	b10a      	cbz	r2, 80030da <_vfiprintf_r+0x86>
 80030d6:	2a25      	cmp	r2, #37	; 0x25
 80030d8:	d1f9      	bne.n	80030ce <_vfiprintf_r+0x7a>
 80030da:	ebba 0b04 	subs.w	fp, sl, r4
 80030de:	d00b      	beq.n	80030f8 <_vfiprintf_r+0xa4>
 80030e0:	465b      	mov	r3, fp
 80030e2:	4622      	mov	r2, r4
 80030e4:	4629      	mov	r1, r5
 80030e6:	4630      	mov	r0, r6
 80030e8:	f7ff ffa1 	bl	800302e <__sfputs_r>
 80030ec:	3001      	adds	r0, #1
 80030ee:	f000 80a9 	beq.w	8003244 <_vfiprintf_r+0x1f0>
 80030f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030f4:	445a      	add	r2, fp
 80030f6:	9209      	str	r2, [sp, #36]	; 0x24
 80030f8:	f89a 3000 	ldrb.w	r3, [sl]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a1 	beq.w	8003244 <_vfiprintf_r+0x1f0>
 8003102:	2300      	movs	r3, #0
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800310c:	f10a 0a01 	add.w	sl, sl, #1
 8003110:	9304      	str	r3, [sp, #16]
 8003112:	9307      	str	r3, [sp, #28]
 8003114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003118:	931a      	str	r3, [sp, #104]	; 0x68
 800311a:	4654      	mov	r4, sl
 800311c:	2205      	movs	r2, #5
 800311e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003122:	4854      	ldr	r0, [pc, #336]	; (8003274 <_vfiprintf_r+0x220>)
 8003124:	f7fd f85c 	bl	80001e0 <memchr>
 8003128:	9a04      	ldr	r2, [sp, #16]
 800312a:	b9d8      	cbnz	r0, 8003164 <_vfiprintf_r+0x110>
 800312c:	06d1      	lsls	r1, r2, #27
 800312e:	bf44      	itt	mi
 8003130:	2320      	movmi	r3, #32
 8003132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003136:	0713      	lsls	r3, r2, #28
 8003138:	bf44      	itt	mi
 800313a:	232b      	movmi	r3, #43	; 0x2b
 800313c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003140:	f89a 3000 	ldrb.w	r3, [sl]
 8003144:	2b2a      	cmp	r3, #42	; 0x2a
 8003146:	d015      	beq.n	8003174 <_vfiprintf_r+0x120>
 8003148:	9a07      	ldr	r2, [sp, #28]
 800314a:	4654      	mov	r4, sl
 800314c:	2000      	movs	r0, #0
 800314e:	f04f 0c0a 	mov.w	ip, #10
 8003152:	4621      	mov	r1, r4
 8003154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003158:	3b30      	subs	r3, #48	; 0x30
 800315a:	2b09      	cmp	r3, #9
 800315c:	d94d      	bls.n	80031fa <_vfiprintf_r+0x1a6>
 800315e:	b1b0      	cbz	r0, 800318e <_vfiprintf_r+0x13a>
 8003160:	9207      	str	r2, [sp, #28]
 8003162:	e014      	b.n	800318e <_vfiprintf_r+0x13a>
 8003164:	eba0 0308 	sub.w	r3, r0, r8
 8003168:	fa09 f303 	lsl.w	r3, r9, r3
 800316c:	4313      	orrs	r3, r2
 800316e:	9304      	str	r3, [sp, #16]
 8003170:	46a2      	mov	sl, r4
 8003172:	e7d2      	b.n	800311a <_vfiprintf_r+0xc6>
 8003174:	9b03      	ldr	r3, [sp, #12]
 8003176:	1d19      	adds	r1, r3, #4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	9103      	str	r1, [sp, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	bfbb      	ittet	lt
 8003180:	425b      	neglt	r3, r3
 8003182:	f042 0202 	orrlt.w	r2, r2, #2
 8003186:	9307      	strge	r3, [sp, #28]
 8003188:	9307      	strlt	r3, [sp, #28]
 800318a:	bfb8      	it	lt
 800318c:	9204      	strlt	r2, [sp, #16]
 800318e:	7823      	ldrb	r3, [r4, #0]
 8003190:	2b2e      	cmp	r3, #46	; 0x2e
 8003192:	d10c      	bne.n	80031ae <_vfiprintf_r+0x15a>
 8003194:	7863      	ldrb	r3, [r4, #1]
 8003196:	2b2a      	cmp	r3, #42	; 0x2a
 8003198:	d134      	bne.n	8003204 <_vfiprintf_r+0x1b0>
 800319a:	9b03      	ldr	r3, [sp, #12]
 800319c:	1d1a      	adds	r2, r3, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	9203      	str	r2, [sp, #12]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bfb8      	it	lt
 80031a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031aa:	3402      	adds	r4, #2
 80031ac:	9305      	str	r3, [sp, #20]
 80031ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003284 <_vfiprintf_r+0x230>
 80031b2:	7821      	ldrb	r1, [r4, #0]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4650      	mov	r0, sl
 80031b8:	f7fd f812 	bl	80001e0 <memchr>
 80031bc:	b138      	cbz	r0, 80031ce <_vfiprintf_r+0x17a>
 80031be:	9b04      	ldr	r3, [sp, #16]
 80031c0:	eba0 000a 	sub.w	r0, r0, sl
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4082      	lsls	r2, r0
 80031c8:	4313      	orrs	r3, r2
 80031ca:	3401      	adds	r4, #1
 80031cc:	9304      	str	r3, [sp, #16]
 80031ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031d2:	4829      	ldr	r0, [pc, #164]	; (8003278 <_vfiprintf_r+0x224>)
 80031d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031d8:	2206      	movs	r2, #6
 80031da:	f7fd f801 	bl	80001e0 <memchr>
 80031de:	2800      	cmp	r0, #0
 80031e0:	d03f      	beq.n	8003262 <_vfiprintf_r+0x20e>
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <_vfiprintf_r+0x228>)
 80031e4:	bb1b      	cbnz	r3, 800322e <_vfiprintf_r+0x1da>
 80031e6:	9b03      	ldr	r3, [sp, #12]
 80031e8:	3307      	adds	r3, #7
 80031ea:	f023 0307 	bic.w	r3, r3, #7
 80031ee:	3308      	adds	r3, #8
 80031f0:	9303      	str	r3, [sp, #12]
 80031f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031f4:	443b      	add	r3, r7
 80031f6:	9309      	str	r3, [sp, #36]	; 0x24
 80031f8:	e768      	b.n	80030cc <_vfiprintf_r+0x78>
 80031fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80031fe:	460c      	mov	r4, r1
 8003200:	2001      	movs	r0, #1
 8003202:	e7a6      	b.n	8003152 <_vfiprintf_r+0xfe>
 8003204:	2300      	movs	r3, #0
 8003206:	3401      	adds	r4, #1
 8003208:	9305      	str	r3, [sp, #20]
 800320a:	4619      	mov	r1, r3
 800320c:	f04f 0c0a 	mov.w	ip, #10
 8003210:	4620      	mov	r0, r4
 8003212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003216:	3a30      	subs	r2, #48	; 0x30
 8003218:	2a09      	cmp	r2, #9
 800321a:	d903      	bls.n	8003224 <_vfiprintf_r+0x1d0>
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0c6      	beq.n	80031ae <_vfiprintf_r+0x15a>
 8003220:	9105      	str	r1, [sp, #20]
 8003222:	e7c4      	b.n	80031ae <_vfiprintf_r+0x15a>
 8003224:	fb0c 2101 	mla	r1, ip, r1, r2
 8003228:	4604      	mov	r4, r0
 800322a:	2301      	movs	r3, #1
 800322c:	e7f0      	b.n	8003210 <_vfiprintf_r+0x1bc>
 800322e:	ab03      	add	r3, sp, #12
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	462a      	mov	r2, r5
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <_vfiprintf_r+0x22c>)
 8003236:	a904      	add	r1, sp, #16
 8003238:	4630      	mov	r0, r6
 800323a:	f3af 8000 	nop.w
 800323e:	4607      	mov	r7, r0
 8003240:	1c78      	adds	r0, r7, #1
 8003242:	d1d6      	bne.n	80031f2 <_vfiprintf_r+0x19e>
 8003244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003246:	07d9      	lsls	r1, r3, #31
 8003248:	d405      	bmi.n	8003256 <_vfiprintf_r+0x202>
 800324a:	89ab      	ldrh	r3, [r5, #12]
 800324c:	059a      	lsls	r2, r3, #22
 800324e:	d402      	bmi.n	8003256 <_vfiprintf_r+0x202>
 8003250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003252:	f7ff fddc 	bl	8002e0e <__retarget_lock_release_recursive>
 8003256:	89ab      	ldrh	r3, [r5, #12]
 8003258:	065b      	lsls	r3, r3, #25
 800325a:	f53f af1d 	bmi.w	8003098 <_vfiprintf_r+0x44>
 800325e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003260:	e71c      	b.n	800309c <_vfiprintf_r+0x48>
 8003262:	ab03      	add	r3, sp, #12
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	462a      	mov	r2, r5
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <_vfiprintf_r+0x22c>)
 800326a:	a904      	add	r1, sp, #16
 800326c:	4630      	mov	r0, r6
 800326e:	f000 f879 	bl	8003364 <_printf_i>
 8003272:	e7e4      	b.n	800323e <_vfiprintf_r+0x1ea>
 8003274:	08003998 	.word	0x08003998
 8003278:	080039a2 	.word	0x080039a2
 800327c:	00000000 	.word	0x00000000
 8003280:	0800302f 	.word	0x0800302f
 8003284:	0800399e 	.word	0x0800399e

08003288 <_printf_common>:
 8003288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800328c:	4616      	mov	r6, r2
 800328e:	4699      	mov	r9, r3
 8003290:	688a      	ldr	r2, [r1, #8]
 8003292:	690b      	ldr	r3, [r1, #16]
 8003294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003298:	4293      	cmp	r3, r2
 800329a:	bfb8      	it	lt
 800329c:	4613      	movlt	r3, r2
 800329e:	6033      	str	r3, [r6, #0]
 80032a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032a4:	4607      	mov	r7, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	b10a      	cbz	r2, 80032ae <_printf_common+0x26>
 80032aa:	3301      	adds	r3, #1
 80032ac:	6033      	str	r3, [r6, #0]
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	0699      	lsls	r1, r3, #26
 80032b2:	bf42      	ittt	mi
 80032b4:	6833      	ldrmi	r3, [r6, #0]
 80032b6:	3302      	addmi	r3, #2
 80032b8:	6033      	strmi	r3, [r6, #0]
 80032ba:	6825      	ldr	r5, [r4, #0]
 80032bc:	f015 0506 	ands.w	r5, r5, #6
 80032c0:	d106      	bne.n	80032d0 <_printf_common+0x48>
 80032c2:	f104 0a19 	add.w	sl, r4, #25
 80032c6:	68e3      	ldr	r3, [r4, #12]
 80032c8:	6832      	ldr	r2, [r6, #0]
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	42ab      	cmp	r3, r5
 80032ce:	dc26      	bgt.n	800331e <_printf_common+0x96>
 80032d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032d4:	1e13      	subs	r3, r2, #0
 80032d6:	6822      	ldr	r2, [r4, #0]
 80032d8:	bf18      	it	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	0692      	lsls	r2, r2, #26
 80032de:	d42b      	bmi.n	8003338 <_printf_common+0xb0>
 80032e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032e4:	4649      	mov	r1, r9
 80032e6:	4638      	mov	r0, r7
 80032e8:	47c0      	blx	r8
 80032ea:	3001      	adds	r0, #1
 80032ec:	d01e      	beq.n	800332c <_printf_common+0xa4>
 80032ee:	6823      	ldr	r3, [r4, #0]
 80032f0:	6922      	ldr	r2, [r4, #16]
 80032f2:	f003 0306 	and.w	r3, r3, #6
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf02      	ittt	eq
 80032fa:	68e5      	ldreq	r5, [r4, #12]
 80032fc:	6833      	ldreq	r3, [r6, #0]
 80032fe:	1aed      	subeq	r5, r5, r3
 8003300:	68a3      	ldr	r3, [r4, #8]
 8003302:	bf0c      	ite	eq
 8003304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003308:	2500      	movne	r5, #0
 800330a:	4293      	cmp	r3, r2
 800330c:	bfc4      	itt	gt
 800330e:	1a9b      	subgt	r3, r3, r2
 8003310:	18ed      	addgt	r5, r5, r3
 8003312:	2600      	movs	r6, #0
 8003314:	341a      	adds	r4, #26
 8003316:	42b5      	cmp	r5, r6
 8003318:	d11a      	bne.n	8003350 <_printf_common+0xc8>
 800331a:	2000      	movs	r0, #0
 800331c:	e008      	b.n	8003330 <_printf_common+0xa8>
 800331e:	2301      	movs	r3, #1
 8003320:	4652      	mov	r2, sl
 8003322:	4649      	mov	r1, r9
 8003324:	4638      	mov	r0, r7
 8003326:	47c0      	blx	r8
 8003328:	3001      	adds	r0, #1
 800332a:	d103      	bne.n	8003334 <_printf_common+0xac>
 800332c:	f04f 30ff 	mov.w	r0, #4294967295
 8003330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003334:	3501      	adds	r5, #1
 8003336:	e7c6      	b.n	80032c6 <_printf_common+0x3e>
 8003338:	18e1      	adds	r1, r4, r3
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	2030      	movs	r0, #48	; 0x30
 800333e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003342:	4422      	add	r2, r4
 8003344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800334c:	3302      	adds	r3, #2
 800334e:	e7c7      	b.n	80032e0 <_printf_common+0x58>
 8003350:	2301      	movs	r3, #1
 8003352:	4622      	mov	r2, r4
 8003354:	4649      	mov	r1, r9
 8003356:	4638      	mov	r0, r7
 8003358:	47c0      	blx	r8
 800335a:	3001      	adds	r0, #1
 800335c:	d0e6      	beq.n	800332c <_printf_common+0xa4>
 800335e:	3601      	adds	r6, #1
 8003360:	e7d9      	b.n	8003316 <_printf_common+0x8e>
	...

08003364 <_printf_i>:
 8003364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003368:	7e0f      	ldrb	r7, [r1, #24]
 800336a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800336c:	2f78      	cmp	r7, #120	; 0x78
 800336e:	4691      	mov	r9, r2
 8003370:	4680      	mov	r8, r0
 8003372:	460c      	mov	r4, r1
 8003374:	469a      	mov	sl, r3
 8003376:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800337a:	d807      	bhi.n	800338c <_printf_i+0x28>
 800337c:	2f62      	cmp	r7, #98	; 0x62
 800337e:	d80a      	bhi.n	8003396 <_printf_i+0x32>
 8003380:	2f00      	cmp	r7, #0
 8003382:	f000 80d4 	beq.w	800352e <_printf_i+0x1ca>
 8003386:	2f58      	cmp	r7, #88	; 0x58
 8003388:	f000 80c0 	beq.w	800350c <_printf_i+0x1a8>
 800338c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003394:	e03a      	b.n	800340c <_printf_i+0xa8>
 8003396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800339a:	2b15      	cmp	r3, #21
 800339c:	d8f6      	bhi.n	800338c <_printf_i+0x28>
 800339e:	a101      	add	r1, pc, #4	; (adr r1, 80033a4 <_printf_i+0x40>)
 80033a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033a4:	080033fd 	.word	0x080033fd
 80033a8:	08003411 	.word	0x08003411
 80033ac:	0800338d 	.word	0x0800338d
 80033b0:	0800338d 	.word	0x0800338d
 80033b4:	0800338d 	.word	0x0800338d
 80033b8:	0800338d 	.word	0x0800338d
 80033bc:	08003411 	.word	0x08003411
 80033c0:	0800338d 	.word	0x0800338d
 80033c4:	0800338d 	.word	0x0800338d
 80033c8:	0800338d 	.word	0x0800338d
 80033cc:	0800338d 	.word	0x0800338d
 80033d0:	08003515 	.word	0x08003515
 80033d4:	0800343d 	.word	0x0800343d
 80033d8:	080034cf 	.word	0x080034cf
 80033dc:	0800338d 	.word	0x0800338d
 80033e0:	0800338d 	.word	0x0800338d
 80033e4:	08003537 	.word	0x08003537
 80033e8:	0800338d 	.word	0x0800338d
 80033ec:	0800343d 	.word	0x0800343d
 80033f0:	0800338d 	.word	0x0800338d
 80033f4:	0800338d 	.word	0x0800338d
 80033f8:	080034d7 	.word	0x080034d7
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	1d1a      	adds	r2, r3, #4
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	602a      	str	r2, [r5, #0]
 8003404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800340c:	2301      	movs	r3, #1
 800340e:	e09f      	b.n	8003550 <_printf_i+0x1ec>
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	682b      	ldr	r3, [r5, #0]
 8003414:	0607      	lsls	r7, r0, #24
 8003416:	f103 0104 	add.w	r1, r3, #4
 800341a:	6029      	str	r1, [r5, #0]
 800341c:	d501      	bpl.n	8003422 <_printf_i+0xbe>
 800341e:	681e      	ldr	r6, [r3, #0]
 8003420:	e003      	b.n	800342a <_printf_i+0xc6>
 8003422:	0646      	lsls	r6, r0, #25
 8003424:	d5fb      	bpl.n	800341e <_printf_i+0xba>
 8003426:	f9b3 6000 	ldrsh.w	r6, [r3]
 800342a:	2e00      	cmp	r6, #0
 800342c:	da03      	bge.n	8003436 <_printf_i+0xd2>
 800342e:	232d      	movs	r3, #45	; 0x2d
 8003430:	4276      	negs	r6, r6
 8003432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003436:	485a      	ldr	r0, [pc, #360]	; (80035a0 <_printf_i+0x23c>)
 8003438:	230a      	movs	r3, #10
 800343a:	e012      	b.n	8003462 <_printf_i+0xfe>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	6820      	ldr	r0, [r4, #0]
 8003440:	1d19      	adds	r1, r3, #4
 8003442:	6029      	str	r1, [r5, #0]
 8003444:	0605      	lsls	r5, r0, #24
 8003446:	d501      	bpl.n	800344c <_printf_i+0xe8>
 8003448:	681e      	ldr	r6, [r3, #0]
 800344a:	e002      	b.n	8003452 <_printf_i+0xee>
 800344c:	0641      	lsls	r1, r0, #25
 800344e:	d5fb      	bpl.n	8003448 <_printf_i+0xe4>
 8003450:	881e      	ldrh	r6, [r3, #0]
 8003452:	4853      	ldr	r0, [pc, #332]	; (80035a0 <_printf_i+0x23c>)
 8003454:	2f6f      	cmp	r7, #111	; 0x6f
 8003456:	bf0c      	ite	eq
 8003458:	2308      	moveq	r3, #8
 800345a:	230a      	movne	r3, #10
 800345c:	2100      	movs	r1, #0
 800345e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003462:	6865      	ldr	r5, [r4, #4]
 8003464:	60a5      	str	r5, [r4, #8]
 8003466:	2d00      	cmp	r5, #0
 8003468:	bfa2      	ittt	ge
 800346a:	6821      	ldrge	r1, [r4, #0]
 800346c:	f021 0104 	bicge.w	r1, r1, #4
 8003470:	6021      	strge	r1, [r4, #0]
 8003472:	b90e      	cbnz	r6, 8003478 <_printf_i+0x114>
 8003474:	2d00      	cmp	r5, #0
 8003476:	d04b      	beq.n	8003510 <_printf_i+0x1ac>
 8003478:	4615      	mov	r5, r2
 800347a:	fbb6 f1f3 	udiv	r1, r6, r3
 800347e:	fb03 6711 	mls	r7, r3, r1, r6
 8003482:	5dc7      	ldrb	r7, [r0, r7]
 8003484:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003488:	4637      	mov	r7, r6
 800348a:	42bb      	cmp	r3, r7
 800348c:	460e      	mov	r6, r1
 800348e:	d9f4      	bls.n	800347a <_printf_i+0x116>
 8003490:	2b08      	cmp	r3, #8
 8003492:	d10b      	bne.n	80034ac <_printf_i+0x148>
 8003494:	6823      	ldr	r3, [r4, #0]
 8003496:	07de      	lsls	r6, r3, #31
 8003498:	d508      	bpl.n	80034ac <_printf_i+0x148>
 800349a:	6923      	ldr	r3, [r4, #16]
 800349c:	6861      	ldr	r1, [r4, #4]
 800349e:	4299      	cmp	r1, r3
 80034a0:	bfde      	ittt	le
 80034a2:	2330      	movle	r3, #48	; 0x30
 80034a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034ac:	1b52      	subs	r2, r2, r5
 80034ae:	6122      	str	r2, [r4, #16]
 80034b0:	f8cd a000 	str.w	sl, [sp]
 80034b4:	464b      	mov	r3, r9
 80034b6:	aa03      	add	r2, sp, #12
 80034b8:	4621      	mov	r1, r4
 80034ba:	4640      	mov	r0, r8
 80034bc:	f7ff fee4 	bl	8003288 <_printf_common>
 80034c0:	3001      	adds	r0, #1
 80034c2:	d14a      	bne.n	800355a <_printf_i+0x1f6>
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	b004      	add	sp, #16
 80034ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	f043 0320 	orr.w	r3, r3, #32
 80034d4:	6023      	str	r3, [r4, #0]
 80034d6:	4833      	ldr	r0, [pc, #204]	; (80035a4 <_printf_i+0x240>)
 80034d8:	2778      	movs	r7, #120	; 0x78
 80034da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	6829      	ldr	r1, [r5, #0]
 80034e2:	061f      	lsls	r7, r3, #24
 80034e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80034e8:	d402      	bmi.n	80034f0 <_printf_i+0x18c>
 80034ea:	065f      	lsls	r7, r3, #25
 80034ec:	bf48      	it	mi
 80034ee:	b2b6      	uxthmi	r6, r6
 80034f0:	07df      	lsls	r7, r3, #31
 80034f2:	bf48      	it	mi
 80034f4:	f043 0320 	orrmi.w	r3, r3, #32
 80034f8:	6029      	str	r1, [r5, #0]
 80034fa:	bf48      	it	mi
 80034fc:	6023      	strmi	r3, [r4, #0]
 80034fe:	b91e      	cbnz	r6, 8003508 <_printf_i+0x1a4>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	f023 0320 	bic.w	r3, r3, #32
 8003506:	6023      	str	r3, [r4, #0]
 8003508:	2310      	movs	r3, #16
 800350a:	e7a7      	b.n	800345c <_printf_i+0xf8>
 800350c:	4824      	ldr	r0, [pc, #144]	; (80035a0 <_printf_i+0x23c>)
 800350e:	e7e4      	b.n	80034da <_printf_i+0x176>
 8003510:	4615      	mov	r5, r2
 8003512:	e7bd      	b.n	8003490 <_printf_i+0x12c>
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	6826      	ldr	r6, [r4, #0]
 8003518:	6961      	ldr	r1, [r4, #20]
 800351a:	1d18      	adds	r0, r3, #4
 800351c:	6028      	str	r0, [r5, #0]
 800351e:	0635      	lsls	r5, r6, #24
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	d501      	bpl.n	8003528 <_printf_i+0x1c4>
 8003524:	6019      	str	r1, [r3, #0]
 8003526:	e002      	b.n	800352e <_printf_i+0x1ca>
 8003528:	0670      	lsls	r0, r6, #25
 800352a:	d5fb      	bpl.n	8003524 <_printf_i+0x1c0>
 800352c:	8019      	strh	r1, [r3, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	4615      	mov	r5, r2
 8003534:	e7bc      	b.n	80034b0 <_printf_i+0x14c>
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	1d1a      	adds	r2, r3, #4
 800353a:	602a      	str	r2, [r5, #0]
 800353c:	681d      	ldr	r5, [r3, #0]
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	2100      	movs	r1, #0
 8003542:	4628      	mov	r0, r5
 8003544:	f7fc fe4c 	bl	80001e0 <memchr>
 8003548:	b108      	cbz	r0, 800354e <_printf_i+0x1ea>
 800354a:	1b40      	subs	r0, r0, r5
 800354c:	6060      	str	r0, [r4, #4]
 800354e:	6863      	ldr	r3, [r4, #4]
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	2300      	movs	r3, #0
 8003554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003558:	e7aa      	b.n	80034b0 <_printf_i+0x14c>
 800355a:	6923      	ldr	r3, [r4, #16]
 800355c:	462a      	mov	r2, r5
 800355e:	4649      	mov	r1, r9
 8003560:	4640      	mov	r0, r8
 8003562:	47d0      	blx	sl
 8003564:	3001      	adds	r0, #1
 8003566:	d0ad      	beq.n	80034c4 <_printf_i+0x160>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	079b      	lsls	r3, r3, #30
 800356c:	d413      	bmi.n	8003596 <_printf_i+0x232>
 800356e:	68e0      	ldr	r0, [r4, #12]
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	4298      	cmp	r0, r3
 8003574:	bfb8      	it	lt
 8003576:	4618      	movlt	r0, r3
 8003578:	e7a6      	b.n	80034c8 <_printf_i+0x164>
 800357a:	2301      	movs	r3, #1
 800357c:	4632      	mov	r2, r6
 800357e:	4649      	mov	r1, r9
 8003580:	4640      	mov	r0, r8
 8003582:	47d0      	blx	sl
 8003584:	3001      	adds	r0, #1
 8003586:	d09d      	beq.n	80034c4 <_printf_i+0x160>
 8003588:	3501      	adds	r5, #1
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	9903      	ldr	r1, [sp, #12]
 800358e:	1a5b      	subs	r3, r3, r1
 8003590:	42ab      	cmp	r3, r5
 8003592:	dcf2      	bgt.n	800357a <_printf_i+0x216>
 8003594:	e7eb      	b.n	800356e <_printf_i+0x20a>
 8003596:	2500      	movs	r5, #0
 8003598:	f104 0619 	add.w	r6, r4, #25
 800359c:	e7f5      	b.n	800358a <_printf_i+0x226>
 800359e:	bf00      	nop
 80035a0:	080039a9 	.word	0x080039a9
 80035a4:	080039ba 	.word	0x080039ba

080035a8 <__sflush_r>:
 80035a8:	898a      	ldrh	r2, [r1, #12]
 80035aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ae:	4605      	mov	r5, r0
 80035b0:	0710      	lsls	r0, r2, #28
 80035b2:	460c      	mov	r4, r1
 80035b4:	d458      	bmi.n	8003668 <__sflush_r+0xc0>
 80035b6:	684b      	ldr	r3, [r1, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	dc05      	bgt.n	80035c8 <__sflush_r+0x20>
 80035bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035be:	2b00      	cmp	r3, #0
 80035c0:	dc02      	bgt.n	80035c8 <__sflush_r+0x20>
 80035c2:	2000      	movs	r0, #0
 80035c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035ca:	2e00      	cmp	r6, #0
 80035cc:	d0f9      	beq.n	80035c2 <__sflush_r+0x1a>
 80035ce:	2300      	movs	r3, #0
 80035d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035d4:	682f      	ldr	r7, [r5, #0]
 80035d6:	6a21      	ldr	r1, [r4, #32]
 80035d8:	602b      	str	r3, [r5, #0]
 80035da:	d032      	beq.n	8003642 <__sflush_r+0x9a>
 80035dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035de:	89a3      	ldrh	r3, [r4, #12]
 80035e0:	075a      	lsls	r2, r3, #29
 80035e2:	d505      	bpl.n	80035f0 <__sflush_r+0x48>
 80035e4:	6863      	ldr	r3, [r4, #4]
 80035e6:	1ac0      	subs	r0, r0, r3
 80035e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ea:	b10b      	cbz	r3, 80035f0 <__sflush_r+0x48>
 80035ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035ee:	1ac0      	subs	r0, r0, r3
 80035f0:	2300      	movs	r3, #0
 80035f2:	4602      	mov	r2, r0
 80035f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035f6:	6a21      	ldr	r1, [r4, #32]
 80035f8:	4628      	mov	r0, r5
 80035fa:	47b0      	blx	r6
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	89a3      	ldrh	r3, [r4, #12]
 8003600:	d106      	bne.n	8003610 <__sflush_r+0x68>
 8003602:	6829      	ldr	r1, [r5, #0]
 8003604:	291d      	cmp	r1, #29
 8003606:	d82b      	bhi.n	8003660 <__sflush_r+0xb8>
 8003608:	4a29      	ldr	r2, [pc, #164]	; (80036b0 <__sflush_r+0x108>)
 800360a:	410a      	asrs	r2, r1
 800360c:	07d6      	lsls	r6, r2, #31
 800360e:	d427      	bmi.n	8003660 <__sflush_r+0xb8>
 8003610:	2200      	movs	r2, #0
 8003612:	6062      	str	r2, [r4, #4]
 8003614:	04d9      	lsls	r1, r3, #19
 8003616:	6922      	ldr	r2, [r4, #16]
 8003618:	6022      	str	r2, [r4, #0]
 800361a:	d504      	bpl.n	8003626 <__sflush_r+0x7e>
 800361c:	1c42      	adds	r2, r0, #1
 800361e:	d101      	bne.n	8003624 <__sflush_r+0x7c>
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	b903      	cbnz	r3, 8003626 <__sflush_r+0x7e>
 8003624:	6560      	str	r0, [r4, #84]	; 0x54
 8003626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003628:	602f      	str	r7, [r5, #0]
 800362a:	2900      	cmp	r1, #0
 800362c:	d0c9      	beq.n	80035c2 <__sflush_r+0x1a>
 800362e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003632:	4299      	cmp	r1, r3
 8003634:	d002      	beq.n	800363c <__sflush_r+0x94>
 8003636:	4628      	mov	r0, r5
 8003638:	f7ff fbea 	bl	8002e10 <_free_r>
 800363c:	2000      	movs	r0, #0
 800363e:	6360      	str	r0, [r4, #52]	; 0x34
 8003640:	e7c0      	b.n	80035c4 <__sflush_r+0x1c>
 8003642:	2301      	movs	r3, #1
 8003644:	4628      	mov	r0, r5
 8003646:	47b0      	blx	r6
 8003648:	1c41      	adds	r1, r0, #1
 800364a:	d1c8      	bne.n	80035de <__sflush_r+0x36>
 800364c:	682b      	ldr	r3, [r5, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0c5      	beq.n	80035de <__sflush_r+0x36>
 8003652:	2b1d      	cmp	r3, #29
 8003654:	d001      	beq.n	800365a <__sflush_r+0xb2>
 8003656:	2b16      	cmp	r3, #22
 8003658:	d101      	bne.n	800365e <__sflush_r+0xb6>
 800365a:	602f      	str	r7, [r5, #0]
 800365c:	e7b1      	b.n	80035c2 <__sflush_r+0x1a>
 800365e:	89a3      	ldrh	r3, [r4, #12]
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	81a3      	strh	r3, [r4, #12]
 8003666:	e7ad      	b.n	80035c4 <__sflush_r+0x1c>
 8003668:	690f      	ldr	r7, [r1, #16]
 800366a:	2f00      	cmp	r7, #0
 800366c:	d0a9      	beq.n	80035c2 <__sflush_r+0x1a>
 800366e:	0793      	lsls	r3, r2, #30
 8003670:	680e      	ldr	r6, [r1, #0]
 8003672:	bf08      	it	eq
 8003674:	694b      	ldreq	r3, [r1, #20]
 8003676:	600f      	str	r7, [r1, #0]
 8003678:	bf18      	it	ne
 800367a:	2300      	movne	r3, #0
 800367c:	eba6 0807 	sub.w	r8, r6, r7
 8003680:	608b      	str	r3, [r1, #8]
 8003682:	f1b8 0f00 	cmp.w	r8, #0
 8003686:	dd9c      	ble.n	80035c2 <__sflush_r+0x1a>
 8003688:	6a21      	ldr	r1, [r4, #32]
 800368a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800368c:	4643      	mov	r3, r8
 800368e:	463a      	mov	r2, r7
 8003690:	4628      	mov	r0, r5
 8003692:	47b0      	blx	r6
 8003694:	2800      	cmp	r0, #0
 8003696:	dc06      	bgt.n	80036a6 <__sflush_r+0xfe>
 8003698:	89a3      	ldrh	r3, [r4, #12]
 800369a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800369e:	81a3      	strh	r3, [r4, #12]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	e78e      	b.n	80035c4 <__sflush_r+0x1c>
 80036a6:	4407      	add	r7, r0
 80036a8:	eba8 0800 	sub.w	r8, r8, r0
 80036ac:	e7e9      	b.n	8003682 <__sflush_r+0xda>
 80036ae:	bf00      	nop
 80036b0:	dfbffffe 	.word	0xdfbffffe

080036b4 <_fflush_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	690b      	ldr	r3, [r1, #16]
 80036b8:	4605      	mov	r5, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	b913      	cbnz	r3, 80036c4 <_fflush_r+0x10>
 80036be:	2500      	movs	r5, #0
 80036c0:	4628      	mov	r0, r5
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
 80036c4:	b118      	cbz	r0, 80036ce <_fflush_r+0x1a>
 80036c6:	6a03      	ldr	r3, [r0, #32]
 80036c8:	b90b      	cbnz	r3, 80036ce <_fflush_r+0x1a>
 80036ca:	f7ff fa9b 	bl	8002c04 <__sinit>
 80036ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f3      	beq.n	80036be <_fflush_r+0xa>
 80036d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036d8:	07d0      	lsls	r0, r2, #31
 80036da:	d404      	bmi.n	80036e6 <_fflush_r+0x32>
 80036dc:	0599      	lsls	r1, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_fflush_r+0x32>
 80036e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036e2:	f7ff fb93 	bl	8002e0c <__retarget_lock_acquire_recursive>
 80036e6:	4628      	mov	r0, r5
 80036e8:	4621      	mov	r1, r4
 80036ea:	f7ff ff5d 	bl	80035a8 <__sflush_r>
 80036ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036f0:	07da      	lsls	r2, r3, #31
 80036f2:	4605      	mov	r5, r0
 80036f4:	d4e4      	bmi.n	80036c0 <_fflush_r+0xc>
 80036f6:	89a3      	ldrh	r3, [r4, #12]
 80036f8:	059b      	lsls	r3, r3, #22
 80036fa:	d4e1      	bmi.n	80036c0 <_fflush_r+0xc>
 80036fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fe:	f7ff fb86 	bl	8002e0e <__retarget_lock_release_recursive>
 8003702:	e7dd      	b.n	80036c0 <_fflush_r+0xc>

08003704 <__swbuf_r>:
 8003704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003706:	460e      	mov	r6, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4605      	mov	r5, r0
 800370c:	b118      	cbz	r0, 8003716 <__swbuf_r+0x12>
 800370e:	6a03      	ldr	r3, [r0, #32]
 8003710:	b90b      	cbnz	r3, 8003716 <__swbuf_r+0x12>
 8003712:	f7ff fa77 	bl	8002c04 <__sinit>
 8003716:	69a3      	ldr	r3, [r4, #24]
 8003718:	60a3      	str	r3, [r4, #8]
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	071a      	lsls	r2, r3, #28
 800371e:	d525      	bpl.n	800376c <__swbuf_r+0x68>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	b31b      	cbz	r3, 800376c <__swbuf_r+0x68>
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	6922      	ldr	r2, [r4, #16]
 8003728:	1a98      	subs	r0, r3, r2
 800372a:	6963      	ldr	r3, [r4, #20]
 800372c:	b2f6      	uxtb	r6, r6
 800372e:	4283      	cmp	r3, r0
 8003730:	4637      	mov	r7, r6
 8003732:	dc04      	bgt.n	800373e <__swbuf_r+0x3a>
 8003734:	4621      	mov	r1, r4
 8003736:	4628      	mov	r0, r5
 8003738:	f7ff ffbc 	bl	80036b4 <_fflush_r>
 800373c:	b9e0      	cbnz	r0, 8003778 <__swbuf_r+0x74>
 800373e:	68a3      	ldr	r3, [r4, #8]
 8003740:	3b01      	subs	r3, #1
 8003742:	60a3      	str	r3, [r4, #8]
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	6022      	str	r2, [r4, #0]
 800374a:	701e      	strb	r6, [r3, #0]
 800374c:	6962      	ldr	r2, [r4, #20]
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	429a      	cmp	r2, r3
 8003752:	d004      	beq.n	800375e <__swbuf_r+0x5a>
 8003754:	89a3      	ldrh	r3, [r4, #12]
 8003756:	07db      	lsls	r3, r3, #31
 8003758:	d506      	bpl.n	8003768 <__swbuf_r+0x64>
 800375a:	2e0a      	cmp	r6, #10
 800375c:	d104      	bne.n	8003768 <__swbuf_r+0x64>
 800375e:	4621      	mov	r1, r4
 8003760:	4628      	mov	r0, r5
 8003762:	f7ff ffa7 	bl	80036b4 <_fflush_r>
 8003766:	b938      	cbnz	r0, 8003778 <__swbuf_r+0x74>
 8003768:	4638      	mov	r0, r7
 800376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376c:	4621      	mov	r1, r4
 800376e:	4628      	mov	r0, r5
 8003770:	f000 f806 	bl	8003780 <__swsetup_r>
 8003774:	2800      	cmp	r0, #0
 8003776:	d0d5      	beq.n	8003724 <__swbuf_r+0x20>
 8003778:	f04f 37ff 	mov.w	r7, #4294967295
 800377c:	e7f4      	b.n	8003768 <__swbuf_r+0x64>
	...

08003780 <__swsetup_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <__swsetup_r+0xac>)
 8003784:	4605      	mov	r5, r0
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	460c      	mov	r4, r1
 800378a:	b118      	cbz	r0, 8003794 <__swsetup_r+0x14>
 800378c:	6a03      	ldr	r3, [r0, #32]
 800378e:	b90b      	cbnz	r3, 8003794 <__swsetup_r+0x14>
 8003790:	f7ff fa38 	bl	8002c04 <__sinit>
 8003794:	89a3      	ldrh	r3, [r4, #12]
 8003796:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800379a:	0718      	lsls	r0, r3, #28
 800379c:	d422      	bmi.n	80037e4 <__swsetup_r+0x64>
 800379e:	06d9      	lsls	r1, r3, #27
 80037a0:	d407      	bmi.n	80037b2 <__swsetup_r+0x32>
 80037a2:	2309      	movs	r3, #9
 80037a4:	602b      	str	r3, [r5, #0]
 80037a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80037aa:	81a3      	strh	r3, [r4, #12]
 80037ac:	f04f 30ff 	mov.w	r0, #4294967295
 80037b0:	e034      	b.n	800381c <__swsetup_r+0x9c>
 80037b2:	0758      	lsls	r0, r3, #29
 80037b4:	d512      	bpl.n	80037dc <__swsetup_r+0x5c>
 80037b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037b8:	b141      	cbz	r1, 80037cc <__swsetup_r+0x4c>
 80037ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037be:	4299      	cmp	r1, r3
 80037c0:	d002      	beq.n	80037c8 <__swsetup_r+0x48>
 80037c2:	4628      	mov	r0, r5
 80037c4:	f7ff fb24 	bl	8002e10 <_free_r>
 80037c8:	2300      	movs	r3, #0
 80037ca:	6363      	str	r3, [r4, #52]	; 0x34
 80037cc:	89a3      	ldrh	r3, [r4, #12]
 80037ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	2300      	movs	r3, #0
 80037d6:	6063      	str	r3, [r4, #4]
 80037d8:	6923      	ldr	r3, [r4, #16]
 80037da:	6023      	str	r3, [r4, #0]
 80037dc:	89a3      	ldrh	r3, [r4, #12]
 80037de:	f043 0308 	orr.w	r3, r3, #8
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	6923      	ldr	r3, [r4, #16]
 80037e6:	b94b      	cbnz	r3, 80037fc <__swsetup_r+0x7c>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037f2:	d003      	beq.n	80037fc <__swsetup_r+0x7c>
 80037f4:	4621      	mov	r1, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	f000 f850 	bl	800389c <__smakebuf_r>
 80037fc:	89a0      	ldrh	r0, [r4, #12]
 80037fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003802:	f010 0301 	ands.w	r3, r0, #1
 8003806:	d00a      	beq.n	800381e <__swsetup_r+0x9e>
 8003808:	2300      	movs	r3, #0
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	6963      	ldr	r3, [r4, #20]
 800380e:	425b      	negs	r3, r3
 8003810:	61a3      	str	r3, [r4, #24]
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	b943      	cbnz	r3, 8003828 <__swsetup_r+0xa8>
 8003816:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800381a:	d1c4      	bne.n	80037a6 <__swsetup_r+0x26>
 800381c:	bd38      	pop	{r3, r4, r5, pc}
 800381e:	0781      	lsls	r1, r0, #30
 8003820:	bf58      	it	pl
 8003822:	6963      	ldrpl	r3, [r4, #20]
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	e7f4      	b.n	8003812 <__swsetup_r+0x92>
 8003828:	2000      	movs	r0, #0
 800382a:	e7f7      	b.n	800381c <__swsetup_r+0x9c>
 800382c:	20000064 	.word	0x20000064

08003830 <_sbrk_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4d06      	ldr	r5, [pc, #24]	; (800384c <_sbrk_r+0x1c>)
 8003834:	2300      	movs	r3, #0
 8003836:	4604      	mov	r4, r0
 8003838:	4608      	mov	r0, r1
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	f7fd f89e 	bl	800097c <_sbrk>
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	d102      	bne.n	800384a <_sbrk_r+0x1a>
 8003844:	682b      	ldr	r3, [r5, #0]
 8003846:	b103      	cbz	r3, 800384a <_sbrk_r+0x1a>
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	20000218 	.word	0x20000218

08003850 <__swhatbuf_r>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	460c      	mov	r4, r1
 8003854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003858:	2900      	cmp	r1, #0
 800385a:	b096      	sub	sp, #88	; 0x58
 800385c:	4615      	mov	r5, r2
 800385e:	461e      	mov	r6, r3
 8003860:	da0d      	bge.n	800387e <__swhatbuf_r+0x2e>
 8003862:	89a3      	ldrh	r3, [r4, #12]
 8003864:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	bf0c      	ite	eq
 800386e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003872:	2340      	movne	r3, #64	; 0x40
 8003874:	2000      	movs	r0, #0
 8003876:	6031      	str	r1, [r6, #0]
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	b016      	add	sp, #88	; 0x58
 800387c:	bd70      	pop	{r4, r5, r6, pc}
 800387e:	466a      	mov	r2, sp
 8003880:	f000 f848 	bl	8003914 <_fstat_r>
 8003884:	2800      	cmp	r0, #0
 8003886:	dbec      	blt.n	8003862 <__swhatbuf_r+0x12>
 8003888:	9901      	ldr	r1, [sp, #4]
 800388a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800388e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003892:	4259      	negs	r1, r3
 8003894:	4159      	adcs	r1, r3
 8003896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800389a:	e7eb      	b.n	8003874 <__swhatbuf_r+0x24>

0800389c <__smakebuf_r>:
 800389c:	898b      	ldrh	r3, [r1, #12]
 800389e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038a0:	079d      	lsls	r5, r3, #30
 80038a2:	4606      	mov	r6, r0
 80038a4:	460c      	mov	r4, r1
 80038a6:	d507      	bpl.n	80038b8 <__smakebuf_r+0x1c>
 80038a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80038ac:	6023      	str	r3, [r4, #0]
 80038ae:	6123      	str	r3, [r4, #16]
 80038b0:	2301      	movs	r3, #1
 80038b2:	6163      	str	r3, [r4, #20]
 80038b4:	b002      	add	sp, #8
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	ab01      	add	r3, sp, #4
 80038ba:	466a      	mov	r2, sp
 80038bc:	f7ff ffc8 	bl	8003850 <__swhatbuf_r>
 80038c0:	9900      	ldr	r1, [sp, #0]
 80038c2:	4605      	mov	r5, r0
 80038c4:	4630      	mov	r0, r6
 80038c6:	f7ff fb0f 	bl	8002ee8 <_malloc_r>
 80038ca:	b948      	cbnz	r0, 80038e0 <__smakebuf_r+0x44>
 80038cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d0:	059a      	lsls	r2, r3, #22
 80038d2:	d4ef      	bmi.n	80038b4 <__smakebuf_r+0x18>
 80038d4:	f023 0303 	bic.w	r3, r3, #3
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	e7e3      	b.n	80038a8 <__smakebuf_r+0xc>
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	6020      	str	r0, [r4, #0]
 80038e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e8:	81a3      	strh	r3, [r4, #12]
 80038ea:	9b00      	ldr	r3, [sp, #0]
 80038ec:	6163      	str	r3, [r4, #20]
 80038ee:	9b01      	ldr	r3, [sp, #4]
 80038f0:	6120      	str	r0, [r4, #16]
 80038f2:	b15b      	cbz	r3, 800390c <__smakebuf_r+0x70>
 80038f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038f8:	4630      	mov	r0, r6
 80038fa:	f000 f81d 	bl	8003938 <_isatty_r>
 80038fe:	b128      	cbz	r0, 800390c <__smakebuf_r+0x70>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	f023 0303 	bic.w	r3, r3, #3
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	431d      	orrs	r5, r3
 8003910:	81a5      	strh	r5, [r4, #12]
 8003912:	e7cf      	b.n	80038b4 <__smakebuf_r+0x18>

08003914 <_fstat_r>:
 8003914:	b538      	push	{r3, r4, r5, lr}
 8003916:	4d07      	ldr	r5, [pc, #28]	; (8003934 <_fstat_r+0x20>)
 8003918:	2300      	movs	r3, #0
 800391a:	4604      	mov	r4, r0
 800391c:	4608      	mov	r0, r1
 800391e:	4611      	mov	r1, r2
 8003920:	602b      	str	r3, [r5, #0]
 8003922:	f7fd f802 	bl	800092a <_fstat>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	d102      	bne.n	8003930 <_fstat_r+0x1c>
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	b103      	cbz	r3, 8003930 <_fstat_r+0x1c>
 800392e:	6023      	str	r3, [r4, #0]
 8003930:	bd38      	pop	{r3, r4, r5, pc}
 8003932:	bf00      	nop
 8003934:	20000218 	.word	0x20000218

08003938 <_isatty_r>:
 8003938:	b538      	push	{r3, r4, r5, lr}
 800393a:	4d06      	ldr	r5, [pc, #24]	; (8003954 <_isatty_r+0x1c>)
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	602b      	str	r3, [r5, #0]
 8003944:	f7fd f801 	bl	800094a <_isatty>
 8003948:	1c43      	adds	r3, r0, #1
 800394a:	d102      	bne.n	8003952 <_isatty_r+0x1a>
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	b103      	cbz	r3, 8003952 <_isatty_r+0x1a>
 8003950:	6023      	str	r3, [r4, #0]
 8003952:	bd38      	pop	{r3, r4, r5, pc}
 8003954:	20000218 	.word	0x20000218

08003958 <_init>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr

08003964 <_fini>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	bf00      	nop
 8003968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396a:	bc08      	pop	{r3}
 800396c:	469e      	mov	lr, r3
 800396e:	4770      	bx	lr

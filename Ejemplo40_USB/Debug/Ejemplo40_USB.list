
Ejemplo40_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007030  08007030  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08007030  08007030  00017030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007038  08007038  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08007040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c54  20000100  08007140  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d54  08007140  00021d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d32a  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ed  00000000  00000000  0002d49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  0002fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000846  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b5a  00000000  00000000  0003120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f15f  00000000  00000000  00048d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086948  00000000  00000000  00057ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002c8c  00000000  00000000  000de810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e149c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000100 	.word	0x20000100
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006fb0 	.word	0x08006fb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000104 	.word	0x20000104
 80001d4:	08006fb0 	.word	0x08006fb0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b970 	b.w	80004e0 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	460d      	mov	r5, r1
 8000220:	4604      	mov	r4, r0
 8000222:	460f      	mov	r7, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14a      	bne.n	80002be <__udivmoddi4+0xa6>
 8000228:	428a      	cmp	r2, r1
 800022a:	4694      	mov	ip, r2
 800022c:	d965      	bls.n	80002fa <__udivmoddi4+0xe2>
 800022e:	fab2 f382 	clz	r3, r2
 8000232:	b143      	cbz	r3, 8000246 <__udivmoddi4+0x2e>
 8000234:	fa02 fc03 	lsl.w	ip, r2, r3
 8000238:	f1c3 0220 	rsb	r2, r3, #32
 800023c:	409f      	lsls	r7, r3
 800023e:	fa20 f202 	lsr.w	r2, r0, r2
 8000242:	4317      	orrs	r7, r2
 8000244:	409c      	lsls	r4, r3
 8000246:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024a:	fa1f f58c 	uxth.w	r5, ip
 800024e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000252:	0c22      	lsrs	r2, r4, #16
 8000254:	fb0e 7711 	mls	r7, lr, r1, r7
 8000258:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800025c:	fb01 f005 	mul.w	r0, r1, r5
 8000260:	4290      	cmp	r0, r2
 8000262:	d90a      	bls.n	800027a <__udivmoddi4+0x62>
 8000264:	eb1c 0202 	adds.w	r2, ip, r2
 8000268:	f101 37ff 	add.w	r7, r1, #4294967295
 800026c:	f080 811c 	bcs.w	80004a8 <__udivmoddi4+0x290>
 8000270:	4290      	cmp	r0, r2
 8000272:	f240 8119 	bls.w	80004a8 <__udivmoddi4+0x290>
 8000276:	3902      	subs	r1, #2
 8000278:	4462      	add	r2, ip
 800027a:	1a12      	subs	r2, r2, r0
 800027c:	b2a4      	uxth	r4, r4
 800027e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000282:	fb0e 2210 	mls	r2, lr, r0, r2
 8000286:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028a:	fb00 f505 	mul.w	r5, r0, r5
 800028e:	42a5      	cmp	r5, r4
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x90>
 8000292:	eb1c 0404 	adds.w	r4, ip, r4
 8000296:	f100 32ff 	add.w	r2, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x294>
 800029e:	42a5      	cmp	r5, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x294>
 80002a4:	4464      	add	r4, ip
 80002a6:	3802      	subs	r0, #2
 80002a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ac:	1b64      	subs	r4, r4, r5
 80002ae:	2100      	movs	r1, #0
 80002b0:	b11e      	cbz	r6, 80002ba <__udivmoddi4+0xa2>
 80002b2:	40dc      	lsrs	r4, r3
 80002b4:	2300      	movs	r3, #0
 80002b6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0xbc>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80ed 	beq.w	80004a2 <__udivmoddi4+0x28a>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e9c6 0500 	strd	r0, r5, [r6]
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	d149      	bne.n	8000370 <__udivmoddi4+0x158>
 80002dc:	42ab      	cmp	r3, r5
 80002de:	d302      	bcc.n	80002e6 <__udivmoddi4+0xce>
 80002e0:	4282      	cmp	r2, r0
 80002e2:	f200 80f8 	bhi.w	80004d6 <__udivmoddi4+0x2be>
 80002e6:	1a84      	subs	r4, r0, r2
 80002e8:	eb65 0203 	sbc.w	r2, r5, r3
 80002ec:	2001      	movs	r0, #1
 80002ee:	4617      	mov	r7, r2
 80002f0:	2e00      	cmp	r6, #0
 80002f2:	d0e2      	beq.n	80002ba <__udivmoddi4+0xa2>
 80002f4:	e9c6 4700 	strd	r4, r7, [r6]
 80002f8:	e7df      	b.n	80002ba <__udivmoddi4+0xa2>
 80002fa:	b902      	cbnz	r2, 80002fe <__udivmoddi4+0xe6>
 80002fc:	deff      	udf	#255	; 0xff
 80002fe:	fab2 f382 	clz	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x210>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2101      	movs	r1, #1
 8000314:	fbb2 f5f7 	udiv	r5, r2, r7
 8000318:	fb07 2015 	mls	r0, r7, r5, r2
 800031c:	0c22      	lsrs	r2, r4, #16
 800031e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000322:	fb0e f005 	mul.w	r0, lr, r5
 8000326:	4290      	cmp	r0, r2
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x124>
 800032a:	eb1c 0202 	adds.w	r2, ip, r2
 800032e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4290      	cmp	r0, r2
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2b8>
 800033a:	4645      	mov	r5, r8
 800033c:	1a12      	subs	r2, r2, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb2 f0f7 	udiv	r0, r2, r7
 8000344:	fb07 2210 	mls	r2, r7, r0, r2
 8000348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x14e>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 32ff 	add.w	r2, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x14c>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2c2>
 8000364:	4610      	mov	r0, r2
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036e:	e79f      	b.n	80002b0 <__udivmoddi4+0x98>
 8000370:	f1c1 0720 	rsb	r7, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa05 f401 	lsl.w	r4, r5, r1
 8000382:	fa20 f307 	lsr.w	r3, r0, r7
 8000386:	40fd      	lsrs	r5, r7
 8000388:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038c:	4323      	orrs	r3, r4
 800038e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	fb09 5518 	mls	r5, r9, r8, r5
 800039a:	0c1c      	lsrs	r4, r3, #16
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	fb08 f50e 	mul.w	r5, r8, lr
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	fa00 f001 	lsl.w	r0, r0, r1
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2b4>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2b4>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4464      	add	r4, ip
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	b29d      	uxth	r5, r3
 80003cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d0:	fb09 4413 	mls	r4, r9, r3, r4
 80003d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2ac>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2ac>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	4464      	add	r4, ip
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fba3 9502 	umull	r9, r5, r3, r2
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	42ac      	cmp	r4, r5
 8000400:	46c8      	mov	r8, r9
 8000402:	46ae      	mov	lr, r5
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x29c>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x298>
 8000408:	b156      	cbz	r6, 8000420 <__udivmoddi4+0x208>
 800040a:	ebb0 0208 	subs.w	r2, r0, r8
 800040e:	eb64 040e 	sbc.w	r4, r4, lr
 8000412:	fa04 f707 	lsl.w	r7, r4, r7
 8000416:	40ca      	lsrs	r2, r1
 8000418:	40cc      	lsrs	r4, r1
 800041a:	4317      	orrs	r7, r2
 800041c:	e9c6 7400 	strd	r7, r4, [r6]
 8000420:	4618      	mov	r0, r3
 8000422:	2100      	movs	r1, #0
 8000424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000428:	f1c3 0120 	rsb	r1, r3, #32
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	fa20 f201 	lsr.w	r2, r0, r1
 8000434:	fa25 f101 	lsr.w	r1, r5, r1
 8000438:	409d      	lsls	r5, r3
 800043a:	432a      	orrs	r2, r5
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb1 f0f7 	udiv	r0, r1, r7
 8000448:	fb07 1510 	mls	r5, r7, r0, r1
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000452:	fb00 f50e 	mul.w	r5, r0, lr
 8000456:	428d      	cmp	r5, r1
 8000458:	fa04 f403 	lsl.w	r4, r4, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x258>
 800045e:	eb1c 0101 	adds.w	r1, ip, r1
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 8000468:	428d      	cmp	r5, r1
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800046c:	3802      	subs	r0, #2
 800046e:	4461      	add	r1, ip
 8000470:	1b49      	subs	r1, r1, r5
 8000472:	b292      	uxth	r2, r2
 8000474:	fbb1 f5f7 	udiv	r5, r1, r7
 8000478:	fb07 1115 	mls	r1, r7, r5, r1
 800047c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000480:	fb05 f10e 	mul.w	r1, r5, lr
 8000484:	4291      	cmp	r1, r2
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x282>
 8000488:	eb1c 0202 	adds.w	r2, ip, r2
 800048c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 8000492:	4291      	cmp	r1, r2
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000496:	3d02      	subs	r5, #2
 8000498:	4462      	add	r2, ip
 800049a:	1a52      	subs	r2, r2, r1
 800049c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0xfc>
 80004a2:	4631      	mov	r1, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e708      	b.n	80002ba <__udivmoddi4+0xa2>
 80004a8:	4639      	mov	r1, r7
 80004aa:	e6e6      	b.n	800027a <__udivmoddi4+0x62>
 80004ac:	4610      	mov	r0, r2
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x90>
 80004b0:	4548      	cmp	r0, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004bc:	3b01      	subs	r3, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004c0:	4645      	mov	r5, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x282>
 80004c4:	462b      	mov	r3, r5
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x258>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4462      	add	r2, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x124>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e70a      	b.n	80002f0 <__udivmoddi4+0xd8>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x14e>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b598      	push	{r3, r4, r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 f9ba 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f860 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8c6 	bl	8000680 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f4:	f005 fffc 	bl	80064f0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(buffer, strlen(buffer));
 80004f8:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <main+0xc0>)
 80004fa:	681c      	ldr	r4, [r3, #0]
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <main+0xc0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe69 	bl	80001d8 <strlen>
 8000506:	4603      	mov	r3, r0
 8000508:	b29b      	uxth	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	4620      	mov	r0, r4
 800050e:	f006 f8c3 	bl	8006698 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000516:	f000 fa15 	bl	8000944 <HAL_Delay>

	  if (rx_buffer[0] == '1') {
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <main+0xc4>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b31      	cmp	r3, #49	; 0x31
 8000520:	d106      	bne.n	8000530 <main+0x4c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000528:	4820      	ldr	r0, [pc, #128]	; (80005ac <main+0xc8>)
 800052a:	f000 fcc5 	bl	8000eb8 <HAL_GPIO_WritePin>
 800052e:	e005      	b.n	800053c <main+0x58>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000536:	481d      	ldr	r0, [pc, #116]	; (80005ac <main+0xc8>)
 8000538:	f000 fcbe 	bl	8000eb8 <HAL_GPIO_WritePin>
	}
	  if (rx_buffer[1] == '1') {
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <main+0xc4>)
 800053e:	785b      	ldrb	r3, [r3, #1]
 8000540:	2b31      	cmp	r3, #49	; 0x31
 8000542:	d106      	bne.n	8000552 <main+0x6e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054a:	4818      	ldr	r0, [pc, #96]	; (80005ac <main+0xc8>)
 800054c:	f000 fcb4 	bl	8000eb8 <HAL_GPIO_WritePin>
 8000550:	e005      	b.n	800055e <main+0x7a>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000558:	4814      	ldr	r0, [pc, #80]	; (80005ac <main+0xc8>)
 800055a:	f000 fcad 	bl	8000eb8 <HAL_GPIO_WritePin>
	}
	  if (rx_buffer[2] == '1') {
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <main+0xc4>)
 8000560:	789b      	ldrb	r3, [r3, #2]
 8000562:	2b31      	cmp	r3, #49	; 0x31
 8000564:	d106      	bne.n	8000574 <main+0x90>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800056c:	480f      	ldr	r0, [pc, #60]	; (80005ac <main+0xc8>)
 800056e:	f000 fca3 	bl	8000eb8 <HAL_GPIO_WritePin>
 8000572:	e005      	b.n	8000580 <main+0x9c>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <main+0xc8>)
 800057c:	f000 fc9c 	bl	8000eb8 <HAL_GPIO_WritePin>
	}
	  if (rx_buffer[3] == '1') {
 8000580:	4b09      	ldr	r3, [pc, #36]	; (80005a8 <main+0xc4>)
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	2b31      	cmp	r3, #49	; 0x31
 8000586:	d106      	bne.n	8000596 <main+0xb2>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <main+0xc8>)
 8000590:	f000 fc92 	bl	8000eb8 <HAL_GPIO_WritePin>
 8000594:	e7b0      	b.n	80004f8 <main+0x14>
	}else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <main+0xc8>)
 800059e:	f000 fc8b 	bl	8000eb8 <HAL_GPIO_WritePin>
	  CDC_Transmit_FS(buffer, strlen(buffer));
 80005a2:	e7a9      	b.n	80004f8 <main+0x14>
 80005a4:	20000000 	.word	0x20000000
 80005a8:	2000011c 	.word	0x2000011c
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	; 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f006 fcbc 	bl	8006f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b27      	ldr	r3, [pc, #156]	; (8000678 <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	4a26      	ldr	r2, [pc, #152]	; (8000678 <SystemClock_Config+0xc8>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	; 0x40
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b21      	ldr	r3, [pc, #132]	; (800067c <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a20      	ldr	r2, [pc, #128]	; (800067c <SystemClock_Config+0xcc>)
 80005fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000620:	2304      	movs	r3, #4
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000624:	2348      	movs	r3, #72	; 0x48
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800062c:	2303      	movs	r3, #3
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0320 	add.w	r3, r7, #32
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fed5 	bl	80023e4 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000640:	f000 f870 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2302      	movs	r3, #2
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f002 f937 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800066c:	f000 f85a 	bl	8000724 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	; 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a1f      	ldr	r2, [pc, #124]	; (800071c <MX_GPIO_Init+0x9c>)
 80006a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_GPIO_Init+0x9c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <MX_GPIO_Init+0x9c>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_GPIO_Init+0x9c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <MX_GPIO_Init+0x9c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_GPIO_Init+0x9c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006f0:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0xa0>)
 80006f2:	f000 fbe1 	bl	8000eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_GPIO_Init+0xa0>)
 8000710:	f000 fa4e 	bl	8000bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	e7fe      	b.n	800072c <Error_Handler+0x8>
	...

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <HAL_MspInit+0x4c>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <HAL_MspInit+0x4c>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000744:	6453      	str	r3, [r2, #68]	; 0x44
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <HAL_MspInit+0x4c>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x4c>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_MspInit+0x4c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f89a 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007d8:	4802      	ldr	r0, [pc, #8]	; (80007e4 <OTG_FS_IRQHandler+0x10>)
 80007da:	f000 fcd6 	bl	800118a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20001628 	.word	0x20001628

080007e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000810:	480d      	ldr	r0, [pc, #52]	; (8000848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000812:	490e      	ldr	r1, [pc, #56]	; (800084c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000818:	e002      	b.n	8000820 <LoopCopyDataInit>

0800081a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800081c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081e:	3304      	adds	r3, #4

08000820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000824:	d3f9      	bcc.n	800081a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000826:	4a0b      	ldr	r2, [pc, #44]	; (8000854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000828:	4c0b      	ldr	r4, [pc, #44]	; (8000858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800082a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800082c:	e001      	b.n	8000832 <LoopFillZerobss>

0800082e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000830:	3204      	adds	r2, #4

08000832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000834:	d3fb      	bcc.n	800082e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000836:	f7ff ffd7 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800083a:	f006 fb87 	bl	8006f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fe51 	bl	80004e4 <main>
  bx  lr    
 8000842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000850:	08007040 	.word	0x08007040
  ldr r2, =_sbss
 8000854:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000858:	20001d54 	.word	0x20001d54

0800085c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <HAL_Init+0x40>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_Init+0x40>)
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x40>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f94f 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff ff4c 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f967 	bl	8000b96 <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f92f 	bl	8000b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000004 	.word	0x20000004
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	20000008 	.word	0x20000008

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	2000000c 	.word	0x2000000c
 8000928:	20000144 	.word	0x20000144

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000144 	.word	0x20000144

08000944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800094c:	f7ff ffee 	bl	800092c <HAL_GetTick>
 8000950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800095c:	d005      	beq.n	800096a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_Delay+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800096a:	bf00      	nop
 800096c:	f7ff ffde 	bl	800092c <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	429a      	cmp	r2, r3
 800097a:	d8f7      	bhi.n	800096c <HAL_Delay+0x28>
  {
  }
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	2000000c 	.word	0x2000000c

0800098c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a8:	4013      	ands	r3, r2
 80009aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <__NVIC_SetPriorityGrouping+0x44>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	60d3      	str	r3, [r2, #12]
}
 80009c4:	bf00      	nop
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <__NVIC_GetPriorityGrouping+0x18>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	0a1b      	lsrs	r3, r3, #8
 80009de:	f003 0307 	and.w	r3, r3, #7
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	db0b      	blt.n	8000a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f003 021f 	and.w	r2, r3, #31
 8000a08:	4907      	ldr	r1, [pc, #28]	; (8000a28 <__NVIC_EnableIRQ+0x38>)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	095b      	lsrs	r3, r3, #5
 8000a10:	2001      	movs	r0, #1
 8000a12:	fa00 f202 	lsl.w	r2, r0, r2
 8000a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af8:	d301      	bcc.n	8000afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00f      	b.n	8000b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <SysTick_Config+0x40>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b06:	210f      	movs	r1, #15
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	f7ff ff8e 	bl	8000a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SysTick_Config+0x40>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <SysTick_Config+0x40>)
 8000b18:	2207      	movs	r2, #7
 8000b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	e000e010 	.word	0xe000e010

08000b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff29 	bl	800098c <__NVIC_SetPriorityGrouping>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b086      	sub	sp, #24
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	4603      	mov	r3, r0
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b54:	f7ff ff3e 	bl	80009d4 <__NVIC_GetPriorityGrouping>
 8000b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5a:	687a      	ldr	r2, [r7, #4]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	6978      	ldr	r0, [r7, #20]
 8000b60:	f7ff ff8e 	bl	8000a80 <NVIC_EncodePriority>
 8000b64:	4602      	mov	r2, r0
 8000b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff5d 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b72:	bf00      	nop
 8000b74:	3718      	adds	r7, #24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff31 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff ffa2 	bl	8000ae8 <SysTick_Config>
 8000ba4:	4603      	mov	r3, r0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e159      	b.n	8000e80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8148 	bne.w	8000e7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d017      	beq.n	8000ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d123      	bne.n	8000cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	69b9      	ldr	r1, [r7, #24]
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0203 	and.w	r2, r3, #3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80a2 	beq.w	8000e7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b57      	ldr	r3, [pc, #348]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a56      	ldr	r2, [pc, #344]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b54      	ldr	r3, [pc, #336]	; (8000e98 <HAL_GPIO_Init+0x2e8>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d52:	4a52      	ldr	r2, [pc, #328]	; (8000e9c <HAL_GPIO_Init+0x2ec>)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a49      	ldr	r2, [pc, #292]	; (8000ea0 <HAL_GPIO_Init+0x2f0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d019      	beq.n	8000db2 <HAL_GPIO_Init+0x202>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_GPIO_Init+0x2f4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d013      	beq.n	8000dae <HAL_GPIO_Init+0x1fe>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a47      	ldr	r2, [pc, #284]	; (8000ea8 <HAL_GPIO_Init+0x2f8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d00d      	beq.n	8000daa <HAL_GPIO_Init+0x1fa>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a46      	ldr	r2, [pc, #280]	; (8000eac <HAL_GPIO_Init+0x2fc>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d007      	beq.n	8000da6 <HAL_GPIO_Init+0x1f6>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a45      	ldr	r2, [pc, #276]	; (8000eb0 <HAL_GPIO_Init+0x300>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_GPIO_Init+0x1f2>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e008      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000da2:	2307      	movs	r3, #7
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000da6:	2303      	movs	r3, #3
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x204>
 8000db2:	2300      	movs	r3, #0
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc4:	4935      	ldr	r1, [pc, #212]	; (8000e9c <HAL_GPIO_Init+0x2ec>)
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dd2:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df6:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e20:	4a24      	ldr	r2, [pc, #144]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e4a:	4a1a      	ldr	r2, [pc, #104]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_GPIO_Init+0x304>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	f67f aea2 	bls.w	8000bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40013800 	.word	0x40013800
 8000ea0:	40020000 	.word	0x40020000
 8000ea4:	40020400 	.word	0x40020400
 8000ea8:	40020800 	.word	0x40020800
 8000eac:	40020c00 	.word	0x40020c00
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40013c00 	.word	0x40013c00

08000eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ece:	887a      	ldrh	r2, [r7, #2]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ed4:	e003      	b.n	8000ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ed6:	887b      	ldrh	r3, [r7, #2]
 8000ed8:	041a      	lsls	r2, r3, #16
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eec:	b08f      	sub	sp, #60	; 0x3c
 8000eee:	af0a      	add	r7, sp, #40	; 0x28
 8000ef0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d101      	bne.n	8000efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e10f      	b.n	800111c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f005 fd06 	bl	8006928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ffd7 	bl	8002eee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	687e      	ldr	r6, [r7, #4]
 8000f48:	466d      	mov	r5, sp
 8000f4a:	f106 0410 	add.w	r4, r6, #16
 8000f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f5e:	1d33      	adds	r3, r6, #4
 8000f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f62:	6838      	ldr	r0, [r7, #0]
 8000f64:	f001 feae 	bl	8002cc4 <USB_CoreInit>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2202      	movs	r2, #2
 8000f72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e0d0      	b.n	800111c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 ffc5 	bl	8002f10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e04a      	b.n	8001022 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	4613      	mov	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	333d      	adds	r3, #61	; 0x3d
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	440b      	add	r3, r1
 8000fae:	333c      	adds	r3, #60	; 0x3c
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fb4:	7bfa      	ldrb	r2, [r7, #15]
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	b298      	uxth	r0, r3
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3344      	adds	r3, #68	; 0x44
 8000fc8:	4602      	mov	r2, r0
 8000fca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	3340      	adds	r3, #64	; 0x40
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3348      	adds	r3, #72	; 0x48
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ff4:	7bfa      	ldrb	r2, [r7, #15]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	334c      	adds	r3, #76	; 0x4c
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	3354      	adds	r3, #84	; 0x54
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	3301      	adds	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3af      	bcc.n	8000f8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e044      	b.n	80010bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4613      	mov	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	6879      	ldr	r1, [r7, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4413      	add	r3, r2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	440b      	add	r3, r1
 800106c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3b5      	bcc.n	8001032 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	687e      	ldr	r6, [r7, #4]
 80010ce:	466d      	mov	r5, sp
 80010d0:	f106 0410 	add.w	r4, r6, #16
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e4:	1d33      	adds	r3, r6, #4
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f001 ff5d 	bl	8002fa8 <USB_DevInit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d005      	beq.n	8001100 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2202      	movs	r2, #2
 80010f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e00d      	b.n	800111c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f003 f8ac 	bl	8004272 <USB_DevDisconnect>

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001124 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_PCD_Start+0x1c>
 800113c:	2302      	movs	r3, #2
 800113e:	e020      	b.n	8001182 <HAL_PCD_Start+0x5e>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	2b01      	cmp	r3, #1
 800114e:	d109      	bne.n	8001164 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f001 feaf 	bl	8002ecc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f85c 	bl	8004230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b08d      	sub	sp, #52	; 0x34
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001198:	6a3b      	ldr	r3, [r7, #32]
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f91a 	bl	80043da <USB_GetMode>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 848a 	bne.w	8001ac2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 f87e 	bl	80042b4 <USB_ReadInterrupts>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 8480 	beq.w	8001ac0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 f86b 	bl	80042b4 <USB_ReadInterrupts>
 80011de:	4603      	mov	r3, r0
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d107      	bne.n	80011f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f002 0202 	and.w	r2, r2, #2
 80011f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 f859 	bl	80042b4 <USB_ReadInterrupts>
 8001202:	4603      	mov	r3, r0
 8001204:	f003 0310 	and.w	r3, r3, #16
 8001208:	2b10      	cmp	r3, #16
 800120a:	d161      	bne.n	80012d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	699a      	ldr	r2, [r3, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0210 	bic.w	r2, r2, #16
 800121a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	f003 020f 	and.w	r2, r3, #15
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	3304      	adds	r3, #4
 800123a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	0c5b      	lsrs	r3, r3, #17
 8001240:	f003 030f 	and.w	r3, r3, #15
 8001244:	2b02      	cmp	r3, #2
 8001246:	d124      	bne.n	8001292 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d035      	beq.n	80012c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800125e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	6a38      	ldr	r0, [r7, #32]
 8001268:	f002 fe90 	bl	8003f8c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001278:	441a      	add	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	6a1a      	ldr	r2, [r3, #32]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800128a:	441a      	add	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	621a      	str	r2, [r3, #32]
 8001290:	e016      	b.n	80012c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	0c5b      	lsrs	r3, r3, #17
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	2b06      	cmp	r3, #6
 800129c:	d110      	bne.n	80012c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	6a38      	ldr	r0, [r7, #32]
 80012aa:	f002 fe6f 	bl	8003f8c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	441a      	add	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 ffed 	bl	80042b4 <USB_ReadInterrupts>
 80012da:	4603      	mov	r3, r0
 80012dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012e4:	f040 80a7 	bne.w	8001436 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fff2 	bl	80042da <USB_ReadDevAllOutEpInterrupt>
 80012f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012f8:	e099      	b.n	800142e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 808e 	beq.w	8001422 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f003 f816 	bl	8004342 <USB_ReadDevOutEPInterrupt>
 8001316:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00c      	beq.n	800133c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132e:	461a      	mov	r2, r3
 8001330:	2301      	movs	r3, #1
 8001332:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fec2 	bl	80020c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00c      	beq.n	8001360 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	015a      	lsls	r2, r3, #5
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4413      	add	r3, r2
 800134e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001352:	461a      	mov	r2, r3
 8001354:	2308      	movs	r3, #8
 8001356:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 ff98 	bl	8002290 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	2b00      	cmp	r3, #0
 8001368:	d008      	beq.n	800137c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001376:	461a      	mov	r2, r3
 8001378:	2310      	movs	r3, #16
 800137a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d030      	beq.n	80013e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001386:	6a3b      	ldr	r3, [r7, #32]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	2b80      	cmp	r3, #128	; 0x80
 8001390:	d109      	bne.n	80013a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	3304      	adds	r3, #4
 80013ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	78db      	ldrb	r3, [r3, #3]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d108      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2200      	movs	r2, #0
 80013c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f005 fba5 	bl	8006b20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e2:	461a      	mov	r2, r3
 80013e4:	2302      	movs	r3, #2
 80013e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	015a      	lsls	r2, r3, #5
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013fe:	461a      	mov	r2, r3
 8001400:	2320      	movs	r3, #32
 8001402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d009      	beq.n	8001422 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	4413      	add	r3, r2
 8001416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800141a:	461a      	mov	r2, r3
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	3301      	adds	r3, #1
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f af62 	bne.w	80012fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f002 ff3a 	bl	80042b4 <USB_ReadInterrupts>
 8001440:	4603      	mov	r3, r0
 8001442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001446:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800144a:	f040 80db 	bne.w	8001604 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f002 ff5b 	bl	800430e <USB_ReadDevAllInEpInterrupt>
 8001458:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800145e:	e0cd      	b.n	80015fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 80c2 	beq.w	80015f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f002 ff81 	bl	800437e <USB_ReadDevInEPInterrupt>
 800147c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d057      	beq.n	8001538 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	2201      	movs	r2, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69f9      	ldr	r1, [r7, #28]
 80014a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014a8:	4013      	ands	r3, r2
 80014aa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b8:	461a      	mov	r2, r3
 80014ba:	2301      	movs	r3, #1
 80014bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d132      	bne.n	800152c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	440b      	add	r3, r1
 80014d4:	334c      	adds	r3, #76	; 0x4c
 80014d6:	6819      	ldr	r1, [r3, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4403      	add	r3, r0
 80014e6:	3348      	adds	r3, #72	; 0x48
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4419      	add	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	334c      	adds	r3, #76	; 0x4c
 80014fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	2b00      	cmp	r3, #0
 8001502:	d113      	bne.n	800152c <HAL_PCD_IRQHandler+0x3a2>
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	3354      	adds	r3, #84	; 0x54
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d108      	bne.n	800152c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001524:	461a      	mov	r2, r3
 8001526:	2101      	movs	r1, #1
 8001528:	f002 ff88 	bl	800443c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4619      	mov	r1, r3
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f005 fa79 	bl	8006a2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d008      	beq.n	8001554 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	015a      	lsls	r2, r3, #5
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	4413      	add	r3, r2
 800154a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154e:	461a      	mov	r2, r3
 8001550:	2308      	movs	r3, #8
 8001552:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	4413      	add	r3, r2
 8001566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800156a:	461a      	mov	r2, r3
 800156c:	2310      	movs	r3, #16
 800156e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	015a      	lsls	r2, r3, #5
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	4413      	add	r3, r2
 8001582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001586:	461a      	mov	r2, r3
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d023      	beq.n	80015de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001598:	6a38      	ldr	r0, [r7, #32]
 800159a:	f001 fe69 	bl	8003270 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800159e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a0:	4613      	mov	r3, r2
 80015a2:	00db      	lsls	r3, r3, #3
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	3338      	adds	r3, #56	; 0x38
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	3304      	adds	r3, #4
 80015b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	78db      	ldrb	r3, [r3, #3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d108      	bne.n	80015cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2200      	movs	r2, #0
 80015be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f005 fabc 	bl	8006b44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2302      	movs	r3, #2
 80015dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fcdb 	bl	8001fa6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	3301      	adds	r3, #1
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f47f af2e 	bne.w	8001460 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 fe53 	bl	80042b4 <USB_ReadInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001618:	d122      	bne.n	8001660 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001634:	2b01      	cmp	r3, #1
 8001636:	d108      	bne.n	800164a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001640:	2100      	movs	r1, #0
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fec2 	bl	80023cc <HAL_PCDEx_LPM_Callback>
 8001648:	e002      	b.n	8001650 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f005 fa5a 	bl	8006b04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800165e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fe25 	bl	80042b4 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001674:	d112      	bne.n	800169c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b01      	cmp	r3, #1
 8001684:	d102      	bne.n	800168c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f005 fa16 	bl	8006ab8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800169a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f002 fe07 	bl	80042b4 <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016b0:	f040 80b7 	bne.w	8001822 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2110      	movs	r1, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fdce 	bl	8003270 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d8:	e046      	b.n	8001768 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e6:	461a      	mov	r2, r3
 80016e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f0:	015a      	lsls	r2, r3, #5
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	4413      	add	r3, r2
 80016f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fe:	0151      	lsls	r1, r2, #5
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	440a      	add	r2, r1
 8001704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001708:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800170c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	015a      	lsls	r2, r3, #5
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800171a:	461a      	mov	r2, r3
 800171c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001720:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001732:	0151      	lsls	r1, r2, #5
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	440a      	add	r2, r1
 8001738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800173c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001740:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001752:	0151      	lsls	r1, r2, #5
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	440a      	add	r2, r1
 8001758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800175c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001760:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	3301      	adds	r3, #1
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800176e:	429a      	cmp	r2, r3
 8001770:	d3b3      	bcc.n	80016da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001780:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001784:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179e:	f043 030b 	orr.w	r3, r3, #11
 80017a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b4:	f043 030b 	orr.w	r3, r3, #11
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	e015      	b.n	80017e8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ce:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017d2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e2:	f043 030b 	orr.w	r3, r3, #11
 80017e6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017fa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800180c:	461a      	mov	r2, r3
 800180e:	f002 fe15 	bl	800443c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 fd44 	bl	80042b4 <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001836:	d124      	bne.n	8001882 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fdda 	bl	80043f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fd8f 	bl	800336a <USB_GetDevSpeed>
 800184c:	4603      	mov	r3, r0
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681c      	ldr	r4, [r3, #0]
 8001858:	f001 fa28 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4620      	mov	r0, r4
 8001868:	f001 fa8e 	bl	8002d88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f005 f904 	bl	8006a7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695a      	ldr	r2, [r3, #20]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001880:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fd14 	bl	80042b4 <USB_ReadInterrupts>
 800188c:	4603      	mov	r3, r0
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b08      	cmp	r3, #8
 8001894:	d10a      	bne.n	80018ac <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f005 f8e1 	bl	8006a5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f002 0208 	and.w	r2, r2, #8
 80018aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fcff 	bl	80042b4 <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d122      	bne.n	8001906 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018cc:	2301      	movs	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
 80018d0:	e014      	b.n	80018fc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	4613      	mov	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fb27 	bl	8001f44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001902:	429a      	cmp	r2, r3
 8001904:	d3e5      	bcc.n	80018d2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fcd2 	bl	80042b4 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800191a:	d13b      	bne.n	8001994 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
 8001920:	e02b      	b.n	800197a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	4413      	add	r3, r2
 800192a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3340      	adds	r3, #64	; 0x40
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d115      	bne.n	8001974 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001948:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	da12      	bge.n	8001974 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	4613      	mov	r3, r2
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	333f      	adds	r3, #63	; 0x3f
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	b2db      	uxtb	r3, r3
 8001966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fae8 	bl	8001f44 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	3301      	adds	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001980:	429a      	cmp	r2, r3
 8001982:	d3ce      	bcc.n	8001922 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001992:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f002 fc8b 	bl	80042b4 <USB_ReadInterrupts>
 800199e:	4603      	mov	r3, r0
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019a8:	d155      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019aa:	2301      	movs	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e045      	b.n	8001a3c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d12e      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da2b      	bge.n	8001a36 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d121      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a08:	6a3b      	ldr	r3, [r7, #32]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10a      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	69fa      	ldr	r2, [r7, #28]
 8001a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a32:	6053      	str	r3, [r2, #4]
            break;
 8001a34:	e007      	b.n	8001a46 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3301      	adds	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3b4      	bcc.n	80019b0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695a      	ldr	r2, [r3, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 fc2a 	bl	80042b4 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a6a:	d10a      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f005 f87b 	bl	8006b68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fc14 	bl	80042b4 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d115      	bne.n	8001ac2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f005 f86b 	bl	8006b84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	e000      	b.n	8001ac2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001ac0:	bf00      	nop
    }
  }
}
 8001ac2:	3734      	adds	r7, #52	; 0x34
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd90      	pop	{r4, r7, pc}

08001ac8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_SetAddress+0x1a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e013      	b.n	8001b0a <HAL_PCD_SetAddress+0x42>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	78fa      	ldrb	r2, [r7, #3]
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 fb72 	bl	80041e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	4608      	mov	r0, r1
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4603      	mov	r3, r0
 8001b22:	70fb      	strb	r3, [r7, #3]
 8001b24:	460b      	mov	r3, r1
 8001b26:	803b      	strh	r3, [r7, #0]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da0f      	bge.n	8001b58 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	f003 020f 	and.w	r2, r3, #15
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	3338      	adds	r3, #56	; 0x38
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2201      	movs	r2, #1
 8001b54:	705a      	strb	r2, [r3, #1]
 8001b56:	e00f      	b.n	8001b78 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 020f 	and.w	r2, r3, #15
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3304      	adds	r3, #4
 8001b70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b84:	883a      	ldrh	r2, [r7, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	78ba      	ldrb	r2, [r7, #2]
 8001b8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	785b      	ldrb	r3, [r3, #1]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ba2:	78bb      	ldrb	r3, [r7, #2]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_EP_Open+0xaa>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e00e      	b.n	8001bda <HAL_PCD_EP_Open+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fbf2 	bl	80033b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bd8:	7afb      	ldrb	r3, [r7, #11]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	460b      	mov	r3, r1
 8001bec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da0f      	bge.n	8001c16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4413      	add	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	3338      	adds	r3, #56	; 0x38
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2201      	movs	r2, #1
 8001c12:	705a      	strb	r2, [r3, #1]
 8001c14:	e00f      	b.n	8001c36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 020f 	and.w	r2, r3, #15
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_EP_Close+0x6e>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e00e      	b.n	8001c6e <HAL_PCD_EP_Close+0x8c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fc30 	bl	80034c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	607a      	str	r2, [r7, #4]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	460b      	mov	r3, r1
 8001c84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d102      	bne.n	8001cd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cd2:	7afb      	ldrb	r3, [r7, #11]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	f001 ff0f 	bl	8003b0c <USB_EP0StartXfer>
 8001cee:	e008      	b.n	8001d02 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	6979      	ldr	r1, [r7, #20]
 8001cfe:	f001 fcbd 	bl	800367c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	f003 020f 	and.w	r2, r3, #15
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	7afb      	ldrb	r3, [r7, #11]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	3304      	adds	r3, #4
 8001d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d109      	bne.n	8001db4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	6979      	ldr	r1, [r7, #20]
 8001dae:	f001 fead 	bl	8003b0c <USB_EP0StartXfer>
 8001db2:	e008      	b.n	8001dc6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	f001 fc5b 	bl	800367c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 020f 	and.w	r2, r3, #15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d901      	bls.n	8001dee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e050      	b.n	8001e90 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da0f      	bge.n	8001e16 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 020f 	and.w	r2, r3, #15
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	3338      	adds	r3, #56	; 0x38
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	705a      	strb	r2, [r3, #1]
 8001e14:	e00d      	b.n	8001e32 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_PCD_EP_SetStall+0x82>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e01e      	b.n	8001e90 <HAL_PCD_EP_SetStall+0xc0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68f9      	ldr	r1, [r7, #12]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 f8eb 	bl	800403c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	b2d9      	uxtb	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e80:	461a      	mov	r2, r3
 8001e82:	f002 fadb 	bl	800443c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	f003 020f 	and.w	r2, r3, #15
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d901      	bls.n	8001eb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e042      	b.n	8001f3c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da0f      	bge.n	8001ede <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 020f 	and.w	r2, r3, #15
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	3338      	adds	r3, #56	; 0x38
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	705a      	strb	r2, [r3, #1]
 8001edc:	e00f      	b.n	8001efe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	f003 020f 	and.w	r2, r3, #15
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_PCD_EP_ClrStall+0x86>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e00e      	b.n	8001f3c <HAL_PCD_EP_ClrStall+0xa4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68f9      	ldr	r1, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 f8f3 	bl	8004118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	da0c      	bge.n	8001f72 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e00c      	b.n	8001f8c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f72:	78fb      	ldrb	r3, [r7, #3]
 8001f74:	f003 020f 	and.w	r2, r3, #15
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 ff12 	bl	8003dbc <USB_EPStopXfer>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b08a      	sub	sp, #40	; 0x28
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a1a      	ldr	r2, [r3, #32]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d901      	bls.n	8001fde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e06c      	b.n	80020b8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d902      	bls.n	8001ffa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3303      	adds	r3, #3
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002002:	e02b      	b.n	800205c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	429a      	cmp	r2, r3
 8002018:	d902      	bls.n	8002020 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	3303      	adds	r3, #3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6919      	ldr	r1, [r3, #16]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002038:	b2db      	uxtb	r3, r3
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4603      	mov	r3, r0
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f001 ff66 	bl	8003f10 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	441a      	add	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6a1a      	ldr	r2, [r3, #32]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	441a      	add	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	429a      	cmp	r2, r3
 8002070:	d809      	bhi.n	8002086 <PCD_WriteEmptyTxFifo+0xe0>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800207a:	429a      	cmp	r2, r3
 800207c:	d203      	bcs.n	8002086 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1be      	bne.n	8002004 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	429a      	cmp	r2, r3
 8002090:	d811      	bhi.n	80020b6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	2201      	movs	r2, #1
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	6939      	ldr	r1, [r7, #16]
 80020ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020b2:	4013      	ands	r3, r2
 80020b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	333c      	adds	r3, #60	; 0x3c
 80020d8:	3304      	adds	r3, #4
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d17b      	bne.n	80021ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d015      	beq.n	800212c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	4a61      	ldr	r2, [pc, #388]	; (8002288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	f240 80b9 	bls.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80b3 	beq.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002122:	461a      	mov	r2, r3
 8002124:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002128:	6093      	str	r3, [r2, #8]
 800212a:	e0a7      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	f003 0320 	and.w	r3, r3, #32
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	461a      	mov	r2, r3
 8002144:	2320      	movs	r3, #32
 8002146:	6093      	str	r3, [r2, #8]
 8002148:	e098      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 8093 	bne.w	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4a4b      	ldr	r2, [pc, #300]	; (8002288 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d90f      	bls.n	800217e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002174:	461a      	mov	r2, r3
 8002176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e07e      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	0159      	lsls	r1, r3, #5
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	440b      	add	r3, r1
 80021a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d114      	bne.n	80021e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021c8:	461a      	mov	r2, r3
 80021ca:	2101      	movs	r1, #1
 80021cc:	f002 f936 	bl	800443c <USB_EP0_OutStart>
 80021d0:	e006      	b.n	80021e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	441a      	add	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fc04 	bl	80069f4 <HAL_PCD_DataOutStageCallback>
 80021ec:	e046      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	4a26      	ldr	r2, [pc, #152]	; (800228c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d124      	bne.n	8002240 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220c:	461a      	mov	r2, r3
 800220e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002212:	6093      	str	r3, [r2, #8]
 8002214:	e032      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800222c:	461a      	mov	r2, r3
 800222e:	2320      	movs	r3, #32
 8002230:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f004 fbdb 	bl	80069f4 <HAL_PCD_DataOutStageCallback>
 800223e:	e01d      	b.n	800227c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d114      	bne.n	8002270 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d108      	bne.n	8002270 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002268:	461a      	mov	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f002 f8e6 	bl	800443c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f004 fbbc 	bl	80069f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	4f54300a 	.word	0x4f54300a
 800228c:	4f54310a 	.word	0x4f54310a

08002290 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	333c      	adds	r3, #60	; 0x3c
 80022a8:	3304      	adds	r3, #4
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d90e      	bls.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	461a      	mov	r2, r3
 80022de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f004 fb73 	bl	80069d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d90c      	bls.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d108      	bne.n	800230c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6818      	ldr	r0, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002304:	461a      	mov	r2, r3
 8002306:	2101      	movs	r1, #1
 8002308:	f002 f898 	bl	800443c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	4f54300a 	.word	0x4f54300a

0800231c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	70fb      	strb	r3, [r7, #3]
 8002328:	4613      	mov	r3, r2
 800232a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800233a:	883b      	ldrh	r3, [r7, #0]
 800233c:	0419      	lsls	r1, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	430a      	orrs	r2, r1
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
 8002348:	e028      	b.n	800239c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4413      	add	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e00d      	b.n	800237a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3340      	adds	r3, #64	; 0x40
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	3301      	adds	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	78fb      	ldrb	r3, [r7, #3]
 800237e:	3b01      	subs	r3, #1
 8002380:	429a      	cmp	r2, r3
 8002382:	d3ec      	bcc.n	800235e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002384:	883b      	ldrh	r3, [r7, #0]
 8002386:	0418      	lsls	r0, r3, #16
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	3b01      	subs	r3, #1
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4302      	orrs	r2, r0
 8002394:	3340      	adds	r3, #64	; 0x40
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	460b      	mov	r3, r1
 80023b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e267      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d075      	beq.n	80024ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b04      	cmp	r3, #4
 800240c:	d00c      	beq.n	8002428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b85      	ldr	r3, [pc, #532]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241a:	4b82      	ldr	r3, [pc, #520]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002426:	d10b      	bne.n	8002440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002428:	4b7e      	ldr	r3, [pc, #504]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d05b      	beq.n	80024ec <HAL_RCC_OscConfig+0x108>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d157      	bne.n	80024ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e242      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x74>
 800244a:	4b76      	ldr	r3, [pc, #472]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x98>
 8002462:	4b70      	ldr	r3, [pc, #448]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6f      	ldr	r2, [pc, #444]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6c      	ldr	r2, [pc, #432]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xb0>
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a68      	ldr	r2, [pc, #416]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b66      	ldr	r3, [pc, #408]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a65      	ldr	r2, [pc, #404]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7fe fa46 	bl	800092c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024a4:	f7fe fa42 	bl	800092c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e207      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5b      	ldr	r3, [pc, #364]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xc0>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7fe fa32 	bl	800092c <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f7fe fa2e 	bl	800092c <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1f3      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0xe8>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b47      	ldr	r3, [pc, #284]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002512:	4b44      	ldr	r3, [pc, #272]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b41      	ldr	r3, [pc, #260]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c7      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCC_OscConfig+0x244>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe f9e7 	bl	800092c <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7fe f9e3 	bl	800092c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a8      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4925      	ldr	r1, [pc, #148]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_RCC_OscConfig+0x244>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259c:	f7fe f9c6 	bl	800092c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a4:	f7fe f9c2 	bl	800092c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e187      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d036      	beq.n	800263c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d016      	beq.n	8002604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_RCC_OscConfig+0x248>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe f9a6 	bl	800092c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe f9a2 	bl	800092c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e167      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x240>)
 80025f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x200>
 8002602:	e01b      	b.n	800263c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_OscConfig+0x248>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260a:	f7fe f98f 	bl	800092c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002610:	e00e      	b.n	8002630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002612:	f7fe f98b 	bl	800092c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d907      	bls.n	8002630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e150      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002624:	40023800 	.word	0x40023800
 8002628:	42470000 	.word	0x42470000
 800262c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002630:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ea      	bne.n	8002612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8097 	beq.w	8002778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10f      	bne.n	800267a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4b7d      	ldr	r3, [pc, #500]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002668:	6413      	str	r3, [r2, #64]	; 0x40
 800266a:	4b7a      	ldr	r3, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267a:	4b77      	ldr	r3, [pc, #476]	; (8002858 <HAL_RCC_OscConfig+0x474>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d118      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <HAL_RCC_OscConfig+0x474>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a73      	ldr	r2, [pc, #460]	; (8002858 <HAL_RCC_OscConfig+0x474>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002692:	f7fe f94b 	bl	800092c <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe f947 	bl	800092c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e10c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_OscConfig+0x474>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d106      	bne.n	80026ce <HAL_RCC_OscConfig+0x2ea>
 80026c0:	4b64      	ldr	r3, [pc, #400]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c4:	4a63      	ldr	r2, [pc, #396]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6713      	str	r3, [r2, #112]	; 0x70
 80026cc:	e01c      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x30c>
 80026d6:	4b5f      	ldr	r3, [pc, #380]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a5e      	ldr	r2, [pc, #376]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 0304 	orr.w	r3, r3, #4
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	4a5b      	ldr	r2, [pc, #364]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6713      	str	r3, [r2, #112]	; 0x70
 80026ee:	e00b      	b.n	8002708 <HAL_RCC_OscConfig+0x324>
 80026f0:	4b58      	ldr	r3, [pc, #352]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a57      	ldr	r2, [pc, #348]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
 80026fc:	4b55      	ldr	r3, [pc, #340]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 0304 	bic.w	r3, r3, #4
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe f90c 	bl	800092c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe f908 	bl	800092c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0cb      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	4b49      	ldr	r3, [pc, #292]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ee      	beq.n	8002718 <HAL_RCC_OscConfig+0x334>
 800273a:	e014      	b.n	8002766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273c:	f7fe f8f6 	bl	800092c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002744:	f7fe f8f2 	bl	800092c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e0b5      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ee      	bne.n	8002744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002766:	7dfb      	ldrb	r3, [r7, #23]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d105      	bne.n	8002778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800276c:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a1 	beq.w	80028c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b08      	cmp	r3, #8
 800278c:	d05c      	beq.n	8002848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d141      	bne.n	800281a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_RCC_OscConfig+0x478>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe f8c6 	bl	800092c <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a4:	f7fe f8c2 	bl	800092c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e087      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69da      	ldr	r2, [r3, #28]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	085b      	lsrs	r3, r3, #1
 80027da:	3b01      	subs	r3, #1
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	061b      	lsls	r3, r3, #24
 80027e6:	491b      	ldr	r1, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_RCC_OscConfig+0x478>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f2:	f7fe f89b 	bl	800092c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fa:	f7fe f897 	bl	800092c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e05c      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x416>
 8002818:	e054      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe f884 	bl	800092c <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe f880 	bl	800092c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e045      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x444>
 8002846:	e03d      	b.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d107      	bne.n	8002860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e038      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
 800285c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x4ec>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d028      	beq.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	429a      	cmp	r2, r3
 800287a:	d121      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d11a      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002898:	4293      	cmp	r3, r2
 800289a:	d111      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	3b01      	subs	r3, #1
 80028aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800

080028d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0cc      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b68      	ldr	r3, [pc, #416]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d90c      	bls.n	8002910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b63      	ldr	r3, [pc, #396]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0b8      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d020      	beq.n	800295e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a58      	ldr	r2, [pc, #352]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002940:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800294a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800294c:	4b50      	ldr	r3, [pc, #320]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d044      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e07f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b02      	cmp	r3, #2
 8002988:	d003      	beq.n	8002992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e067      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4934      	ldr	r1, [pc, #208]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c4:	f7fd ffb2 	bl	800092c <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7fd ffae 	bl	800092c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e04f      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d20c      	bcs.n	8002a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCC_ClockConfig+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e032      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a28:	4b19      	ldr	r3, [pc, #100]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4916      	ldr	r1, [pc, #88]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d009      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	490e      	ldr	r1, [pc, #56]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a5a:	f000 f821 	bl	8002aa0 <HAL_RCC_GetSysClockFreq>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	5ccb      	ldrb	r3, [r1, r3]
 8002a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a72:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_RCC_ClockConfig+0x1c8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fd ff12 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08007020 	.word	0x08007020
 8002a98:	20000004 	.word	0x20000004
 8002a9c:	20000008 	.word	0x20000008

08002aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aa4:	b094      	sub	sp, #80	; 0x50
 8002aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002aac:	2300      	movs	r3, #0
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab8:	4b79      	ldr	r3, [pc, #484]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 030c 	and.w	r3, r3, #12
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d00d      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	f200 80e1 	bhi.w	8002c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d003      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x3a>
 8002ad2:	e0db      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ad4:	4b73      	ldr	r3, [pc, #460]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ad8:	e0db      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ada:	4b73      	ldr	r3, [pc, #460]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ade:	e0d8      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aea:	4b6d      	ldr	r3, [pc, #436]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d063      	beq.n	8002bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002af6:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	099b      	lsrs	r3, r3, #6
 8002afc:	2200      	movs	r2, #0
 8002afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	f04f 0000 	mov.w	r0, #0
 8002b1a:	f04f 0100 	mov.w	r1, #0
 8002b1e:	0159      	lsls	r1, r3, #5
 8002b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b24:	0150      	lsls	r0, r2, #5
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	1a51      	subs	r1, r2, r1
 8002b2e:	6139      	str	r1, [r7, #16]
 8002b30:	4629      	mov	r1, r5
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b44:	4659      	mov	r1, fp
 8002b46:	018b      	lsls	r3, r1, #6
 8002b48:	4651      	mov	r1, sl
 8002b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4e:	4651      	mov	r1, sl
 8002b50:	018a      	lsls	r2, r1, #6
 8002b52:	4651      	mov	r1, sl
 8002b54:	ebb2 0801 	subs.w	r8, r2, r1
 8002b58:	4659      	mov	r1, fp
 8002b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b72:	4690      	mov	r8, r2
 8002b74:	4699      	mov	r9, r3
 8002b76:	4623      	mov	r3, r4
 8002b78:	eb18 0303 	adds.w	r3, r8, r3
 8002b7c:	60bb      	str	r3, [r7, #8]
 8002b7e:	462b      	mov	r3, r5
 8002b80:	eb49 0303 	adc.w	r3, r9, r3
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b92:	4629      	mov	r1, r5
 8002b94:	024b      	lsls	r3, r1, #9
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	024a      	lsls	r2, r1, #9
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bb0:	f7fd fb1a 	bl	80001e8 <__aeabi_uldivmod>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4613      	mov	r3, r2
 8002bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bbc:	e058      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	099b      	lsrs	r3, r3, #6
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	4611      	mov	r1, r2
 8002bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bd8:	4642      	mov	r2, r8
 8002bda:	464b      	mov	r3, r9
 8002bdc:	f04f 0000 	mov.w	r0, #0
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bea:	0150      	lsls	r0, r2, #5
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c10:	ebb2 040a 	subs.w	r4, r2, sl
 8002c14:	eb63 050b 	sbc.w	r5, r3, fp
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	00eb      	lsls	r3, r5, #3
 8002c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c26:	00e2      	lsls	r2, r4, #3
 8002c28:	4614      	mov	r4, r2
 8002c2a:	461d      	mov	r5, r3
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	18e3      	adds	r3, r4, r3
 8002c30:	603b      	str	r3, [r7, #0]
 8002c32:	464b      	mov	r3, r9
 8002c34:	eb45 0303 	adc.w	r3, r5, r3
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c46:	4629      	mov	r1, r5
 8002c48:	028b      	lsls	r3, r1, #10
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c50:	4621      	mov	r1, r4
 8002c52:	028a      	lsls	r2, r1, #10
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c64:	f7fd fac0 	bl	80001e8 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c8a:	e002      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3750      	adds	r7, #80	; 0x50
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	f107 001c 	add.w	r0, r7, #28
 8002cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d122      	bne.n	8002d22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f001 fbee 	bl	80044f8 <USB_CoreReset>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e01a      	b.n	8002d58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f001 fbe2 	bl	80044f8 <USB_CoreReset>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
 8002d4a:	e005      	b.n	8002d58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10b      	bne.n	8002d76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f043 0206 	orr.w	r2, r3, #6
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f043 0220 	orr.w	r2, r3, #32
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d82:	b004      	add	sp, #16
 8002d84:	4770      	bx	lr
	...

08002d88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d165      	bne.n	8002e68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <USB_SetTurnaroundTime+0x11c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d906      	bls.n	8002db2 <USB_SetTurnaroundTime+0x2a>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a40      	ldr	r2, [pc, #256]	; (8002ea8 <USB_SetTurnaroundTime+0x120>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d202      	bcs.n	8002db2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002dac:	230f      	movs	r3, #15
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e062      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a3c      	ldr	r2, [pc, #240]	; (8002ea8 <USB_SetTurnaroundTime+0x120>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d306      	bcc.n	8002dc8 <USB_SetTurnaroundTime+0x40>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a3b      	ldr	r2, [pc, #236]	; (8002eac <USB_SetTurnaroundTime+0x124>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d202      	bcs.n	8002dc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002dc2:	230e      	movs	r3, #14
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e057      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a38      	ldr	r2, [pc, #224]	; (8002eac <USB_SetTurnaroundTime+0x124>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d306      	bcc.n	8002dde <USB_SetTurnaroundTime+0x56>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <USB_SetTurnaroundTime+0x128>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d202      	bcs.n	8002dde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002dd8:	230d      	movs	r3, #13
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e04c      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a33      	ldr	r2, [pc, #204]	; (8002eb0 <USB_SetTurnaroundTime+0x128>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d306      	bcc.n	8002df4 <USB_SetTurnaroundTime+0x6c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a32      	ldr	r2, [pc, #200]	; (8002eb4 <USB_SetTurnaroundTime+0x12c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dee:	230c      	movs	r3, #12
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e041      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a2f      	ldr	r2, [pc, #188]	; (8002eb4 <USB_SetTurnaroundTime+0x12c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d906      	bls.n	8002e0a <USB_SetTurnaroundTime+0x82>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <USB_SetTurnaroundTime+0x130>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d802      	bhi.n	8002e0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e04:	230b      	movs	r3, #11
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e036      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <USB_SetTurnaroundTime+0x130>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d906      	bls.n	8002e20 <USB_SetTurnaroundTime+0x98>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <USB_SetTurnaroundTime+0x134>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d802      	bhi.n	8002e20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e1a:	230a      	movs	r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e02b      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <USB_SetTurnaroundTime+0x134>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d906      	bls.n	8002e36 <USB_SetTurnaroundTime+0xae>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <USB_SetTurnaroundTime+0x138>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d202      	bcs.n	8002e36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e30:	2309      	movs	r3, #9
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e020      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <USB_SetTurnaroundTime+0x138>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d306      	bcc.n	8002e4c <USB_SetTurnaroundTime+0xc4>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a20      	ldr	r2, [pc, #128]	; (8002ec4 <USB_SetTurnaroundTime+0x13c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e46:	2308      	movs	r3, #8
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e015      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <USB_SetTurnaroundTime+0x13c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d906      	bls.n	8002e62 <USB_SetTurnaroundTime+0xda>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <USB_SetTurnaroundTime+0x140>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d202      	bcs.n	8002e62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e00a      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e62:	2306      	movs	r3, #6
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e007      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d102      	bne.n	8002e74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e6e:	2309      	movs	r3, #9
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e001      	b.n	8002e78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e74:	2309      	movs	r3, #9
 8002e76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	029b      	lsls	r3, r3, #10
 8002e8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e90:	431a      	orrs	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	00d8acbf 	.word	0x00d8acbf
 8002ea8:	00e4e1c0 	.word	0x00e4e1c0
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	01067380 	.word	0x01067380
 8002eb4:	011a499f 	.word	0x011a499f
 8002eb8:	01312cff 	.word	0x01312cff
 8002ebc:	014ca43f 	.word	0x014ca43f
 8002ec0:	016e3600 	.word	0x016e3600
 8002ec4:	01a6ab1f 	.word	0x01a6ab1f
 8002ec8:	01e84800 	.word	0x01e84800

08002ecc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f023 0201 	bic.w	r2, r3, #1
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d115      	bne.n	8002f5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7fd fd00 	bl	8000944 <HAL_Delay>
      ms++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f001 fa45 	bl	80043da <USB_GetMode>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d01e      	beq.n	8002f94 <USB_SetCurrentMode+0x84>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b31      	cmp	r3, #49	; 0x31
 8002f5a:	d9f0      	bls.n	8002f3e <USB_SetCurrentMode+0x2e>
 8002f5c:	e01a      	b.n	8002f94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d115      	bne.n	8002f90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fd fce7 	bl	8000944 <HAL_Delay>
      ms++;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 fa2c 	bl	80043da <USB_GetMode>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <USB_SetCurrentMode+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b31      	cmp	r3, #49	; 0x31
 8002f8c:	d9f0      	bls.n	8002f70 <USB_SetCurrentMode+0x60>
 8002f8e:	e001      	b.n	8002f94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e005      	b.n	8002fa0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b32      	cmp	r3, #50	; 0x32
 8002f98:	d101      	bne.n	8002f9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fa8:	b084      	sub	sp, #16
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e009      	b.n	8002fdc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3340      	adds	r3, #64	; 0x40
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0e      	cmp	r3, #14
 8002fe0:	d9f2      	bls.n	8002fc8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11c      	bne.n	8003022 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	639a      	str	r2, [r3, #56]	; 0x38
 8003020:	e00b      	b.n	800303a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003040:	461a      	mov	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304c:	4619      	mov	r1, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003054:	461a      	mov	r2, r3
 8003056:	680b      	ldr	r3, [r1, #0]
 8003058:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10c      	bne.n	800307a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d104      	bne.n	8003070 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003066:	2100      	movs	r1, #0
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f965 	bl	8003338 <USB_SetDevSpeed>
 800306e:	e008      	b.n	8003082 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003070:	2101      	movs	r1, #1
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f960 	bl	8003338 <USB_SetDevSpeed>
 8003078:	e003      	b.n	8003082 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800307a:	2103      	movs	r1, #3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f95b 	bl	8003338 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003082:	2110      	movs	r1, #16
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8f3 	bl	8003270 <USB_FlushTxFifo>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f91f 	bl	80032d8 <USB_FlushRxFifo>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030b6:	461a      	mov	r2, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c2:	461a      	mov	r2, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e043      	b.n	8003156 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030e4:	d118      	bne.n	8003118 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	e013      	b.n	800312a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e008      	b.n	800312a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003136:	461a      	mov	r2, r3
 8003138:	2300      	movs	r3, #0
 800313a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800314e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	3301      	adds	r3, #1
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d3b7      	bcc.n	80030ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	e043      	b.n	80031ec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800317a:	d118      	bne.n	80031ae <USB_DevInit+0x206>
    {
      if (i == 0U)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10a      	bne.n	8003198 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	461a      	mov	r2, r3
 8003190:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e013      	b.n	80031c0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	e008      	b.n	80031c0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031cc:	461a      	mov	r2, r3
 80031ce:	2300      	movs	r3, #0
 80031d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031de:	461a      	mov	r2, r3
 80031e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3301      	adds	r3, #1
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3b7      	bcc.n	8003164 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003202:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003206:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003214:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f043 0210 	orr.w	r2, r3, #16
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <USB_DevInit+0x2c4>)
 800322e:	4313      	orrs	r3, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f043 0208 	orr.w	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003254:	f043 0304 	orr.w	r3, r3, #4
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003268:	b004      	add	sp, #16
 800326a:	4770      	bx	lr
 800326c:	803c3800 	.word	0x803c3800

08003270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3301      	adds	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <USB_FlushTxFifo+0x64>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e01b      	b.n	80032c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	daf2      	bge.n	800327e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	019b      	lsls	r3, r3, #6
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3301      	adds	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4a08      	ldr	r2, [pc, #32]	; (80032d4 <USB_FlushTxFifo+0x64>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e006      	b.n	80032c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d0f0      	beq.n	80032a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	00030d40 	.word	0x00030d40

080032d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a11      	ldr	r2, [pc, #68]	; (8003334 <USB_FlushRxFifo+0x5c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e018      	b.n	8003328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	daf2      	bge.n	80032e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2210      	movs	r2, #16
 8003306:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3301      	adds	r3, #1
 800330c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a08      	ldr	r2, [pc, #32]	; (8003334 <USB_FlushRxFifo+0x5c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e006      	b.n	8003328 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b10      	cmp	r3, #16
 8003324:	d0f0      	beq.n	8003308 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	00030d40 	.word	0x00030d40

08003338 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003358:	4313      	orrs	r3, r2
 800335a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 0306 	and.w	r3, r3, #6
 8003382:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
 800338e:	e00a      	b.n	80033a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d002      	beq.n	800339c <USB_GetDevSpeed+0x32>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2b06      	cmp	r3, #6
 800339a:	d102      	bne.n	80033a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800339c:	2302      	movs	r3, #2
 800339e:	75fb      	strb	r3, [r7, #23]
 80033a0:	e001      	b.n	80033a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033a2:	230f      	movs	r3, #15
 80033a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d13a      	bne.n	8003446 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	2101      	movs	r1, #1
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	68f9      	ldr	r1, [r7, #12]
 80033ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d155      	bne.n	80034b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003424:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	059b      	lsls	r3, r3, #22
 800342a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800342c:	4313      	orrs	r3, r2
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0151      	lsls	r1, r2, #5
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	440a      	add	r2, r1
 8003436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e036      	b.n	80034b4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344c:	69da      	ldr	r2, [r3, #28]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	68f9      	ldr	r1, [r7, #12]
 8003460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003464:	4313      	orrs	r3, r2
 8003466:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11a      	bne.n	80034b4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800349a:	430b      	orrs	r3, r1
 800349c:	4313      	orrs	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	0151      	lsls	r1, r2, #5
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	440a      	add	r2, r1
 80034a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d161      	bne.n	80035a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d11f      	bne.n	8003538 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003512:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003516:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	440a      	add	r2, r1
 800352e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003532:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003536:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003558:	4013      	ands	r3, r2
 800355a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	b29b      	uxth	r3, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800357c:	4013      	ands	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	0159      	lsls	r1, r3, #5
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	440b      	add	r3, r1
 8003596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359a:	4619      	mov	r1, r3
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <USB_DeactivateEndpoint+0x1b0>)
 800359e:	4013      	ands	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e060      	b.n	8003666 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ba:	d11f      	bne.n	80035fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0151      	lsls	r1, r2, #5
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	440a      	add	r2, r1
 80035d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	041b      	lsls	r3, r3, #16
 8003614:	43db      	mvns	r3, r3
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	43db      	mvns	r3, r3
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003640:	4013      	ands	r3, r2
 8003642:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0159      	lsls	r1, r3, #5
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	440b      	add	r3, r1
 800365a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365e:	4619      	mov	r1, r3
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <USB_DeactivateEndpoint+0x1b4>)
 8003662:	4013      	ands	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	ec337800 	.word	0xec337800
 8003678:	eff37800 	.word	0xeff37800

0800367c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08a      	sub	sp, #40	; 0x28
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	4613      	mov	r3, r2
 8003688:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	2b01      	cmp	r3, #1
 800369a:	f040 815c 	bne.w	8003956 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d132      	bne.n	800370c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	015a      	lsls	r2, r3, #5
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	4413      	add	r3, r2
 80036d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	0151      	lsls	r1, r2, #5
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	440a      	add	r2, r1
 80036e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	0cdb      	lsrs	r3, r3, #19
 8003706:	04db      	lsls	r3, r3, #19
 8003708:	6113      	str	r3, [r2, #16]
 800370a:	e074      	b.n	80037f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003726:	0cdb      	lsrs	r3, r3, #19
 8003728:	04db      	lsls	r3, r3, #19
 800372a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	0151      	lsls	r1, r2, #5
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	440a      	add	r2, r1
 8003742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003746:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800374a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800374e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6999      	ldr	r1, [r3, #24]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	440b      	add	r3, r1
 8003768:	1e59      	subs	r1, r3, #1
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003774:	4b9d      	ldr	r3, [pc, #628]	; (80039ec <USB_EPStartXfer+0x370>)
 8003776:	400b      	ands	r3, r1
 8003778:	69b9      	ldr	r1, [r7, #24]
 800377a:	0148      	lsls	r0, r1, #5
 800377c:	69f9      	ldr	r1, [r7, #28]
 800377e:	4401      	add	r1, r0
 8003780:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003784:	4313      	orrs	r3, r2
 8003786:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	015a      	lsls	r2, r3, #5
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	0148      	lsls	r0, r1, #5
 80037a2:	69f9      	ldr	r1, [r7, #28]
 80037a4:	4401      	add	r1, r0
 80037a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	791b      	ldrb	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d11f      	bne.n	80037f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	015a      	lsls	r2, r3, #5
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	0151      	lsls	r1, r2, #5
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	440a      	add	r2, r1
 80037cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	0151      	lsls	r1, r2, #5
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	440a      	add	r2, r1
 80037ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d14b      	bne.n	8003894 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003810:	461a      	mov	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	791b      	ldrb	r3, [r3, #4]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d128      	bne.n	8003872 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	0151      	lsls	r1, r2, #5
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	440a      	add	r2, r1
 8003846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	e00f      	b.n	8003872 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	0151      	lsls	r1, r2, #5
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	440a      	add	r2, r1
 8003888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e133      	b.n	8003afc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	791b      	ldrb	r3, [r3, #4]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d015      	beq.n	80038e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 811b 	beq.w	8003afc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	2101      	movs	r1, #1
 80038d8:	fa01 f303 	lsl.w	r3, r1, r3
 80038dc:	69f9      	ldr	r1, [r7, #28]
 80038de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e2:	4313      	orrs	r3, r2
 80038e4:	634b      	str	r3, [r1, #52]	; 0x34
 80038e6:	e109      	b.n	8003afc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d110      	bne.n	800391a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e00f      	b.n	800393a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003938:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	6919      	ldr	r1, [r3, #16]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	b298      	uxth	r0, r3
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4603      	mov	r3, r0
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fade 	bl	8003f10 <USB_WritePacket>
 8003954:	e0d2      	b.n	8003afc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003970:	0cdb      	lsrs	r3, r3, #19
 8003972:	04db      	lsls	r3, r3, #19
 8003974:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003990:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003994:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003998:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d126      	bne.n	80039f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	0148      	lsls	r0, r1, #5
 80039bc:	69f9      	ldr	r1, [r7, #28]
 80039be:	4401      	add	r1, r0
 80039c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039c4:	4313      	orrs	r3, r2
 80039c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039e6:	6113      	str	r3, [r2, #16]
 80039e8:	e03a      	b.n	8003a60 <USB_EPStartXfer+0x3e4>
 80039ea:	bf00      	nop
 80039ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	699a      	ldr	r2, [r3, #24]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4413      	add	r3, r2
 80039fa:	1e5a      	subs	r2, r3, #1
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	8afa      	ldrh	r2, [r7, #22]
 8003a0c:	fb03 f202 	mul.w	r2, r3, r2
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	04d9      	lsls	r1, r3, #19
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <USB_EPStartXfer+0x48c>)
 8003a28:	400b      	ands	r3, r1
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	0148      	lsls	r0, r1, #5
 8003a2e:	69f9      	ldr	r1, [r7, #28]
 8003a30:	4401      	add	r1, r0
 8003a32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a36:	4313      	orrs	r3, r2
 8003a38:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	0148      	lsls	r0, r1, #5
 8003a54:	69f9      	ldr	r1, [r7, #28]
 8003a56:	4401      	add	r1, r0
 8003a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10d      	bne.n	8003a82 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6919      	ldr	r1, [r3, #16]
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	460a      	mov	r2, r1
 8003a80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	791b      	ldrb	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d128      	bne.n	8003adc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d110      	bne.n	8003abc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e00f      	b.n	8003adc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	1ff80000 	.word	0x1ff80000

08003b0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f040 80ce 	bne.w	8003cca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d132      	bne.n	8003b9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	0151      	lsls	r1, r2, #5
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	440a      	add	r2, r1
 8003b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b94:	0cdb      	lsrs	r3, r3, #19
 8003b96:	04db      	lsls	r3, r3, #19
 8003b98:	6113      	str	r3, [r2, #16]
 8003b9a:	e04e      	b.n	8003c3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb6:	0cdb      	lsrs	r3, r3, #19
 8003bb8:	04db      	lsls	r3, r3, #19
 8003bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d903      	bls.n	8003bf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2a:	6939      	ldr	r1, [r7, #16]
 8003c2c:	0148      	lsls	r0, r1, #5
 8003c2e:	6979      	ldr	r1, [r7, #20]
 8003c30:	4401      	add	r1, r0
 8003c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c36:	4313      	orrs	r3, r2
 8003c38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c3a:	79fb      	ldrb	r3, [r7, #7]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d11e      	bne.n	8003c7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e097      	b.n	8003dae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8083 	beq.w	8003dae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	2101      	movs	r1, #1
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	6979      	ldr	r1, [r7, #20]
 8003cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	634b      	str	r3, [r1, #52]	; 0x34
 8003cc8:	e071      	b.n	8003dae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce4:	0cdb      	lsrs	r3, r3, #19
 8003ce6:	04db      	lsls	r3, r3, #19
 8003ce8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d0c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d52:	691a      	ldr	r2, [r3, #16]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d5c:	6939      	ldr	r1, [r7, #16]
 8003d5e:	0148      	lsls	r0, r1, #5
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	4401      	add	r1, r0
 8003d64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10d      	bne.n	8003d8e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	460a      	mov	r2, r1
 8003d8c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003dac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d14a      	bne.n	8003e70 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003df2:	f040 8086 	bne.w	8003f02 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e18:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	015a      	lsls	r2, r3, #5
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4413      	add	r3, r2
 8003e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3301      	adds	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d902      	bls.n	8003e54 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
          break;
 8003e52:	e056      	b.n	8003f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6c:	d0e7      	beq.n	8003e3e <USB_EPStopXfer+0x82>
 8003e6e:	e048      	b.n	8003f02 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e88:	d13b      	bne.n	8003f02 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	0151      	lsls	r1, r2, #5
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	440a      	add	r2, r1
 8003ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ecc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ed0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d902      	bls.n	8003ee8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ee6:	e00c      	b.n	8003f02 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003efc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f00:	d0e7      	beq.n	8003ed2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	460b      	mov	r3, r1
 8003f20:	71fb      	strb	r3, [r7, #7]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d123      	bne.n	8003f7e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f36:	88bb      	ldrh	r3, [r7, #4]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e018      	b.n	8003f76 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	031a      	lsls	r2, r3, #12
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f50:	461a      	mov	r2, r3
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3301      	adds	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	3301      	adds	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3301      	adds	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d3e2      	bcc.n	8003f44 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3724      	adds	r7, #36	; 0x24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b08b      	sub	sp, #44	; 0x2c
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	4613      	mov	r3, r2
 8003f98:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
 8003fb6:	e014      	b.n	8003fe2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	3301      	adds	r3, #1
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	3301      	adds	r3, #1
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	6a3a      	ldr	r2, [r7, #32]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3e6      	bcc.n	8003fb8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fea:	8bfb      	ldrh	r3, [r7, #30]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01e      	beq.n	800402e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f107 0310 	add.w	r3, r7, #16
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	b2da      	uxtb	r2, r3
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	701a      	strb	r2, [r3, #0]
      i++;
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	3301      	adds	r3, #1
 800401a:	623b      	str	r3, [r7, #32]
      pDest++;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004022:	8bfb      	ldrh	r3, [r7, #30]
 8004024:	3b01      	subs	r3, #1
 8004026:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004028:	8bfb      	ldrh	r3, [r7, #30]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1ea      	bne.n	8004004 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004030:	4618      	mov	r0, r3
 8004032:	372c      	adds	r7, #44	; 0x2c
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	785b      	ldrb	r3, [r3, #1]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d12c      	bne.n	80040b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	db12      	blt.n	8004090 <USB_EPSetStall+0x54>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	440a      	add	r2, r1
 8004086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800408a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800408e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e02b      	b.n	800410a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	db12      	blt.n	80040ea <USB_EPSetStall+0xae>
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00f      	beq.n	80040ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	0151      	lsls	r1, r2, #5
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	440a      	add	r2, r1
 80040e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d128      	bne.n	8004186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	791b      	ldrb	r3, [r3, #4]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <USB_EPClearStall+0x4c>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	791b      	ldrb	r3, [r3, #4]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d138      	bne.n	80041d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e027      	b.n	80041d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	791b      	ldrb	r3, [r3, #4]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d003      	beq.n	80041b6 <USB_EPClearStall+0x9e>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d10f      	bne.n	80041d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	011b      	lsls	r3, r3, #4
 8004214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004218:	68f9      	ldr	r1, [r7, #12]
 800421a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f023 0302 	bic.w	r3, r3, #2
 8004262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3714      	adds	r7, #20
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800428c:	f023 0303 	bic.w	r3, r3, #3
 8004290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a0:	f043 0302 	orr.w	r3, r3, #2
 80042a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042cc:	68fb      	ldr	r3, [r7, #12]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b085      	sub	sp, #20
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	4013      	ands	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0c1b      	lsrs	r3, r3, #16
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	b29b      	uxth	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4013      	ands	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004370:	68bb      	ldr	r3, [r7, #8]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800437e:	b480      	push	{r7}
 8004380:	b087      	sub	sp, #28
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	fa22 f303 	lsr.w	r3, r2, r3
 80043ae:	01db      	lsls	r3, r3, #7
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4013      	ands	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043cc:	68bb      	ldr	r3, [r7, #8]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004414:	f023 0307 	bic.w	r3, r3, #7
 8004418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	460b      	mov	r3, r1
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	333c      	adds	r3, #60	; 0x3c
 8004452:	3304      	adds	r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <USB_EP0_OutStart+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d90a      	bls.n	8004476 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800446c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004470:	d101      	bne.n	8004476 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e037      	b.n	80044e6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	2300      	movs	r3, #0
 8004480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004490:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a4:	f043 0318 	orr.w	r3, r3, #24
 80044a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044bc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044be:	7afb      	ldrb	r3, [r7, #11]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10f      	bne.n	80044e4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ca:	461a      	mov	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044de:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	371c      	adds	r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	4f54300a 	.word	0x4f54300a

080044f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	3301      	adds	r3, #1
 8004508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a13      	ldr	r2, [pc, #76]	; (800455c <USB_CoreReset+0x64>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e01b      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	daf2      	bge.n	8004504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f043 0201 	orr.w	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3301      	adds	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <USB_CoreReset+0x64>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d901      	bls.n	8004540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e006      	b.n	800454e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b01      	cmp	r3, #1
 800454a:	d0f0      	beq.n	800452e <USB_CoreReset+0x36>

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	00030d40 	.word	0x00030d40

08004560 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800456c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004570:	f002 fca0 	bl	8006eb4 <USBD_static_malloc>
 8004574:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	32b0      	adds	r2, #176	; 0xb0
 8004586:	2100      	movs	r1, #0
 8004588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800458c:	2302      	movs	r3, #2
 800458e:	e0d4      	b.n	800473a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004590:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004594:	2100      	movs	r1, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f002 fcd0 	bl	8006f3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	32b0      	adds	r2, #176	; 0xb0
 80045a6:	68f9      	ldr	r1, [r7, #12]
 80045a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	32b0      	adds	r2, #176	; 0xb0
 80045b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7c1b      	ldrb	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d138      	bne.n	800463a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <USBD_CDC_Init+0x1e4>)
 80045ca:	7819      	ldrb	r1, [r3, #0]
 80045cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d0:	2202      	movs	r2, #2
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f002 fb4b 	bl	8006c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045d8:	4b5a      	ldr	r3, [pc, #360]	; (8004744 <USBD_CDC_Init+0x1e4>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f003 020f 	and.w	r2, r3, #15
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3324      	adds	r3, #36	; 0x24
 80045ee:	2201      	movs	r2, #1
 80045f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <USBD_CDC_Init+0x1e8>)
 80045f4:	7819      	ldrb	r1, [r3, #0]
 80045f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fa:	2202      	movs	r2, #2
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f002 fb36 	bl	8006c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004602:	4b51      	ldr	r3, [pc, #324]	; (8004748 <USBD_CDC_Init+0x1e8>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800461a:	2201      	movs	r2, #1
 800461c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800461e:	4b4b      	ldr	r3, [pc, #300]	; (800474c <USBD_CDC_Init+0x1ec>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3326      	adds	r3, #38	; 0x26
 8004634:	2210      	movs	r2, #16
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	e035      	b.n	80046a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800463a:	4b42      	ldr	r3, [pc, #264]	; (8004744 <USBD_CDC_Init+0x1e4>)
 800463c:	7819      	ldrb	r1, [r3, #0]
 800463e:	2340      	movs	r3, #64	; 0x40
 8004640:	2202      	movs	r2, #2
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f002 fb13 	bl	8006c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004648:	4b3e      	ldr	r3, [pc, #248]	; (8004744 <USBD_CDC_Init+0x1e4>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	2201      	movs	r2, #1
 8004660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004662:	4b39      	ldr	r3, [pc, #228]	; (8004748 <USBD_CDC_Init+0x1e8>)
 8004664:	7819      	ldrb	r1, [r3, #0]
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	2202      	movs	r2, #2
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f002 faff 	bl	8006c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004670:	4b35      	ldr	r3, [pc, #212]	; (8004748 <USBD_CDC_Init+0x1e8>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004688:	2201      	movs	r2, #1
 800468a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800468c:	4b2f      	ldr	r3, [pc, #188]	; (800474c <USBD_CDC_Init+0x1ec>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3326      	adds	r3, #38	; 0x26
 80046a2:	2210      	movs	r2, #16
 80046a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046a6:	4b29      	ldr	r3, [pc, #164]	; (800474c <USBD_CDC_Init+0x1ec>)
 80046a8:	7819      	ldrb	r1, [r3, #0]
 80046aa:	2308      	movs	r3, #8
 80046ac:	2203      	movs	r2, #3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f002 fadd 	bl	8006c6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <USBD_CDC_Init+0x1ec>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	3324      	adds	r3, #36	; 0x24
 80046ca:	2201      	movs	r2, #1
 80046cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	33b0      	adds	r3, #176	; 0xb0
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004704:	2302      	movs	r3, #2
 8004706:	e018      	b.n	800473a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7c1b      	ldrb	r3, [r3, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004710:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <USBD_CDC_Init+0x1e8>)
 8004712:	7819      	ldrb	r1, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800471a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f002 fb94 	bl	8006e4c <USBD_LL_PrepareReceive>
 8004724:	e008      	b.n	8004738 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004726:	4b08      	ldr	r3, [pc, #32]	; (8004748 <USBD_CDC_Init+0x1e8>)
 8004728:	7819      	ldrb	r1, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004730:	2340      	movs	r3, #64	; 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f002 fb8a 	bl	8006e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000097 	.word	0x20000097
 8004748:	20000098 	.word	0x20000098
 800474c:	20000099 	.word	0x20000099

08004750 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <USBD_CDC_DeInit+0xf8>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f002 faa9 	bl	8006cba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004768:	4b37      	ldr	r3, [pc, #220]	; (8004848 <USBD_CDC_DeInit+0xf8>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	2200      	movs	r2, #0
 8004780:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004782:	4b32      	ldr	r3, [pc, #200]	; (800484c <USBD_CDC_DeInit+0xfc>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f002 fa96 	bl	8006cba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800478e:	4b2f      	ldr	r3, [pc, #188]	; (800484c <USBD_CDC_DeInit+0xfc>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f003 020f 	and.w	r2, r3, #15
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047a6:	2200      	movs	r2, #0
 80047a8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80047aa:	4b29      	ldr	r3, [pc, #164]	; (8004850 <USBD_CDC_DeInit+0x100>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f002 fa82 	bl	8006cba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80047b6:	4b26      	ldr	r3, [pc, #152]	; (8004850 <USBD_CDC_DeInit+0x100>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	3324      	adds	r3, #36	; 0x24
 80047cc:	2200      	movs	r2, #0
 80047ce:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80047d0:	4b1f      	ldr	r3, [pc, #124]	; (8004850 <USBD_CDC_DeInit+0x100>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	f003 020f 	and.w	r2, r3, #15
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3326      	adds	r3, #38	; 0x26
 80047e6:	2200      	movs	r2, #0
 80047e8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	32b0      	adds	r2, #176	; 0xb0
 80047f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01f      	beq.n	800483c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	33b0      	adds	r3, #176	; 0xb0
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	32b0      	adds	r2, #176	; 0xb0
 800481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481e:	4618      	mov	r0, r3
 8004820:	f002 fb56 	bl	8006ed0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	32b0      	adds	r2, #176	; 0xb0
 800482e:	2100      	movs	r1, #0
 8004830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000097 	.word	0x20000097
 800484c:	20000098 	.word	0x20000098
 8004850:	20000099 	.word	0x20000099

08004854 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	32b0      	adds	r2, #176	; 0xb0
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004880:	2303      	movs	r3, #3
 8004882:	e0bf      	b.n	8004a04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800488c:	2b00      	cmp	r3, #0
 800488e:	d050      	beq.n	8004932 <USBD_CDC_Setup+0xde>
 8004890:	2b20      	cmp	r3, #32
 8004892:	f040 80af 	bne.w	80049f4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	88db      	ldrh	r3, [r3, #6]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d03a      	beq.n	8004914 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da1b      	bge.n	80048e0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	33b0      	adds	r3, #176	; 0xb0
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80048be:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	88d2      	ldrh	r2, [r2, #6]
 80048c4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	88db      	ldrh	r3, [r3, #6]
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	bf28      	it	cs
 80048ce:	2307      	movcs	r3, #7
 80048d0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	89fa      	ldrh	r2, [r7, #14]
 80048d6:	4619      	mov	r1, r3
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f001 fd89 	bl	80063f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048de:	e090      	b.n	8004a02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	785a      	ldrb	r2, [r3, #1]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	88db      	ldrh	r3, [r3, #6]
 80048ee:	2b3f      	cmp	r3, #63	; 0x3f
 80048f0:	d803      	bhi.n	80048fa <USBD_CDC_Setup+0xa6>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	88db      	ldrh	r3, [r3, #6]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	e000      	b.n	80048fc <USBD_CDC_Setup+0xa8>
 80048fa:	2240      	movs	r2, #64	; 0x40
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004902:	6939      	ldr	r1, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800490a:	461a      	mov	r2, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f001 fd9b 	bl	8006448 <USBD_CtlPrepareRx>
      break;
 8004912:	e076      	b.n	8004a02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	33b0      	adds	r3, #176	; 0xb0
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	7850      	ldrb	r0, [r2, #1]
 800492a:	2200      	movs	r2, #0
 800492c:	6839      	ldr	r1, [r7, #0]
 800492e:	4798      	blx	r3
      break;
 8004930:	e067      	b.n	8004a02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b0b      	cmp	r3, #11
 8004938:	d851      	bhi.n	80049de <USBD_CDC_Setup+0x18a>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <USBD_CDC_Setup+0xec>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004971 	.word	0x08004971
 8004944:	080049ed 	.word	0x080049ed
 8004948:	080049df 	.word	0x080049df
 800494c:	080049df 	.word	0x080049df
 8004950:	080049df 	.word	0x080049df
 8004954:	080049df 	.word	0x080049df
 8004958:	080049df 	.word	0x080049df
 800495c:	080049df 	.word	0x080049df
 8004960:	080049df 	.word	0x080049df
 8004964:	080049df 	.word	0x080049df
 8004968:	0800499b 	.word	0x0800499b
 800496c:	080049c5 	.word	0x080049c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b03      	cmp	r3, #3
 800497a:	d107      	bne.n	800498c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800497c:	f107 030a 	add.w	r3, r7, #10
 8004980:	2202      	movs	r2, #2
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 fd33 	bl	80063f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800498a:	e032      	b.n	80049f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800498c:	6839      	ldr	r1, [r7, #0]
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 fcbd 	bl	800630e <USBD_CtlError>
            ret = USBD_FAIL;
 8004994:	2303      	movs	r3, #3
 8004996:	75fb      	strb	r3, [r7, #23]
          break;
 8004998:	e02b      	b.n	80049f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d107      	bne.n	80049b6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80049a6:	f107 030d 	add.w	r3, r7, #13
 80049aa:	2201      	movs	r2, #1
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fd1e 	bl	80063f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049b4:	e01d      	b.n	80049f2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fca8 	bl	800630e <USBD_CtlError>
            ret = USBD_FAIL;
 80049be:	2303      	movs	r3, #3
 80049c0:	75fb      	strb	r3, [r7, #23]
          break;
 80049c2:	e016      	b.n	80049f2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d00f      	beq.n	80049f0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80049d0:	6839      	ldr	r1, [r7, #0]
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f001 fc9b 	bl	800630e <USBD_CtlError>
            ret = USBD_FAIL;
 80049d8:	2303      	movs	r3, #3
 80049da:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049dc:	e008      	b.n	80049f0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f001 fc94 	bl	800630e <USBD_CtlError>
          ret = USBD_FAIL;
 80049e6:	2303      	movs	r3, #3
 80049e8:	75fb      	strb	r3, [r7, #23]
          break;
 80049ea:	e002      	b.n	80049f2 <USBD_CDC_Setup+0x19e>
          break;
 80049ec:	bf00      	nop
 80049ee:	e008      	b.n	8004a02 <USBD_CDC_Setup+0x1ae>
          break;
 80049f0:	bf00      	nop
      }
      break;
 80049f2:	e006      	b.n	8004a02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f001 fc89 	bl	800630e <USBD_CtlError>
      ret = USBD_FAIL;
 80049fc:	2303      	movs	r3, #3
 80049fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004a00:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	32b0      	adds	r2, #176	; 0xb0
 8004a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e065      	b.n	8004b02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	32b0      	adds	r2, #176	; 0xb0
 8004a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 020f 	and.w	r2, r3, #15
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3318      	adds	r3, #24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02f      	beq.n	8004ac0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	3318      	adds	r3, #24
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 010f 	and.w	r1, r3, #15
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	440b      	add	r3, r1
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4403      	add	r3, r0
 8004a88:	3348      	adds	r3, #72	; 0x48
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d112      	bne.n	8004ac0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 020f 	and.w	r2, r3, #15
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3318      	adds	r3, #24
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ab2:	78f9      	ldrb	r1, [r7, #3]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f002 f9a6 	bl	8006e0a <USBD_LL_Transmit>
 8004abe:	e01f      	b.n	8004b00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	33b0      	adds	r3, #176	; 0xb0
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	33b0      	adds	r3, #176	; 0xb0
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b084      	sub	sp, #16
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	32b0      	adds	r2, #176	; 0xb0
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	32b0      	adds	r2, #176	; 0xb0
 8004b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e01a      	b.n	8004b72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b3c:	78fb      	ldrb	r3, [r7, #3]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f002 f9a4 	bl	8006e8e <USBD_LL_GetRxDataSize>
 8004b46:	4602      	mov	r2, r0
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	33b0      	adds	r3, #176	; 0xb0
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b6c:	4611      	mov	r1, r2
 8004b6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	32b0      	adds	r2, #176	; 0xb0
 8004b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e025      	b.n	8004be8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	33b0      	adds	r3, #176	; 0xb0
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01a      	beq.n	8004be6 <USBD_CDC_EP0_RxReady+0x6c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bb6:	2bff      	cmp	r3, #255	; 0xff
 8004bb8:	d015      	beq.n	8004be6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	33b0      	adds	r3, #176	; 0xb0
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004bd2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bf8:	2182      	movs	r1, #130	; 0x82
 8004bfa:	4818      	ldr	r0, [pc, #96]	; (8004c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bfc:	f000 fd4f 	bl	800569e <USBD_GetEpDesc>
 8004c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c02:	2101      	movs	r1, #1
 8004c04:	4815      	ldr	r0, [pc, #84]	; (8004c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c06:	f000 fd4a 	bl	800569e <USBD_GetEpDesc>
 8004c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c0c:	2181      	movs	r1, #129	; 0x81
 8004c0e:	4813      	ldr	r0, [pc, #76]	; (8004c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c10:	f000 fd45 	bl	800569e <USBD_GetEpDesc>
 8004c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d006      	beq.n	8004c36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c30:	711a      	strb	r2, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d006      	beq.n	8004c4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c44:	711a      	strb	r2, [r3, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2243      	movs	r2, #67	; 0x43
 8004c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000054 	.word	0x20000054

08004c60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c68:	2182      	movs	r1, #130	; 0x82
 8004c6a:	4818      	ldr	r0, [pc, #96]	; (8004ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c6c:	f000 fd17 	bl	800569e <USBD_GetEpDesc>
 8004c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c72:	2101      	movs	r1, #1
 8004c74:	4815      	ldr	r0, [pc, #84]	; (8004ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c76:	f000 fd12 	bl	800569e <USBD_GetEpDesc>
 8004c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c7c:	2181      	movs	r1, #129	; 0x81
 8004c7e:	4813      	ldr	r0, [pc, #76]	; (8004ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c80:	f000 fd0d 	bl	800569e <USBD_GetEpDesc>
 8004c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2210      	movs	r2, #16
 8004c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d006      	beq.n	8004ca6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	711a      	strb	r2, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f042 0202 	orr.w	r2, r2, #2
 8004ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d006      	beq.n	8004cba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	711a      	strb	r2, [r3, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f042 0202 	orr.w	r2, r2, #2
 8004cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2243      	movs	r2, #67	; 0x43
 8004cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000054 	.word	0x20000054

08004cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cd8:	2182      	movs	r1, #130	; 0x82
 8004cda:	4818      	ldr	r0, [pc, #96]	; (8004d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cdc:	f000 fcdf 	bl	800569e <USBD_GetEpDesc>
 8004ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4815      	ldr	r0, [pc, #84]	; (8004d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ce6:	f000 fcda 	bl	800569e <USBD_GetEpDesc>
 8004cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cec:	2181      	movs	r1, #129	; 0x81
 8004cee:	4813      	ldr	r0, [pc, #76]	; (8004d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cf0:	f000 fcd5 	bl	800569e <USBD_GetEpDesc>
 8004cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2210      	movs	r2, #16
 8004d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d006      	beq.n	8004d16 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d10:	711a      	strb	r2, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d006      	beq.n	8004d2a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d24:	711a      	strb	r2, [r3, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2243      	movs	r2, #67	; 0x43
 8004d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000054 	.word	0x20000054

08004d40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	220a      	movs	r2, #10
 8004d4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d4e:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	20000010 	.word	0x20000010

08004d60 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e009      	b.n	8004d88 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	33b0      	adds	r3, #176	; 0xb0
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	32b0      	adds	r2, #176	; 0xb0
 8004daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dae:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e008      	b.n	8004dcc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	32b0      	adds	r2, #176	; 0xb0
 8004dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d101      	bne.n	8004dfc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e004      	b.n	8004e06 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	32b0      	adds	r2, #176	; 0xb0
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	32b0      	adds	r2, #176	; 0xb0
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e025      	b.n	8004e92 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d11f      	bne.n	8004e90 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <USBD_CDC_TransmitPacket+0x88>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4403      	add	r3, r0
 8004e72:	3318      	adds	r3, #24
 8004e74:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <USBD_CDC_TransmitPacket+0x88>)
 8004e78:	7819      	ldrb	r1, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 ffbf 	bl	8006e0a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000097 	.word	0x20000097

08004ea0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	32b0      	adds	r2, #176	; 0xb0
 8004eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	32b0      	adds	r2, #176	; 0xb0
 8004ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e018      	b.n	8004f00 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	7c1b      	ldrb	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <USBD_CDC_ReceivePacket+0x68>)
 8004ed8:	7819      	ldrb	r1, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 ffb1 	bl	8006e4c <USBD_LL_PrepareReceive>
 8004eea:	e008      	b.n	8004efe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <USBD_CDC_ReceivePacket+0x68>)
 8004eee:	7819      	ldrb	r1, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ef6:	2340      	movs	r3, #64	; 0x40
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 ffa7 	bl	8006e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000098 	.word	0x20000098

08004f0c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	4613      	mov	r3, r2
 8004f18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e01f      	b.n	8004f64 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	79fa      	ldrb	r2, [r7, #7]
 8004f56:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f001 fe21 	bl	8006ba0 <USBD_LL_Init>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e025      	b.n	8004fd0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	32ae      	adds	r2, #174	; 0xae
 8004f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	32ae      	adds	r2, #174	; 0xae
 8004faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f107 020e 	add.w	r2, r7, #14
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4798      	blx	r3
 8004fb8:	4602      	mov	r2, r0
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 fe29 	bl	8006c38 <USBD_LL_Start>
 8004fe6:	4603      	mov	r3, r0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ff8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
 800500e:	460b      	mov	r3, r1
 8005010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	4611      	mov	r1, r2
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4798      	blx	r3
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	460b      	mov	r3, r1
 8005048:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	4611      	mov	r1, r2
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005064:	2303      	movs	r3, #3
 8005066:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005068:	7bfb      	ldrb	r3, [r7, #15]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f001 f908 	bl	800629a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005098:	461a      	mov	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050a6:	f003 031f 	and.w	r3, r3, #31
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d01a      	beq.n	80050e4 <USBD_LL_SetupStage+0x72>
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d822      	bhi.n	80050f8 <USBD_LL_SetupStage+0x86>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <USBD_LL_SetupStage+0x4a>
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d00a      	beq.n	80050d0 <USBD_LL_SetupStage+0x5e>
 80050ba:	e01d      	b.n	80050f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb5f 	bl	8005788 <USBD_StdDevReq>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
      break;
 80050ce:	e020      	b.n	8005112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fbc7 	bl	800586c <USBD_StdItfReq>
 80050de:	4603      	mov	r3, r0
 80050e0:	73fb      	strb	r3, [r7, #15]
      break;
 80050e2:	e016      	b.n	8005112 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fc29 	bl	8005944 <USBD_StdEPReq>
 80050f2:	4603      	mov	r3, r0
 80050f4:	73fb      	strb	r3, [r7, #15]
      break;
 80050f6:	e00c      	b.n	8005112 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005102:	b2db      	uxtb	r3, r3
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f001 fdf6 	bl	8006cf8 <USBD_LL_StallEP>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	bf00      	nop
  }

  return ret;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	460b      	mov	r3, r1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800512e:	7afb      	ldrb	r3, [r7, #11]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d16e      	bne.n	8005212 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800513a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005142:	2b03      	cmp	r3, #3
 8005144:	f040 8098 	bne.w	8005278 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d913      	bls.n	800517c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	1ad2      	subs	r2, r2, r3
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4293      	cmp	r3, r2
 800516c:	bf28      	it	cs
 800516e:	4613      	movcs	r3, r2
 8005170:	461a      	mov	r2, r3
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f001 f984 	bl	8006482 <USBD_CtlContinueRx>
 800517a:	e07d      	b.n	8005278 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2b02      	cmp	r3, #2
 8005188:	d014      	beq.n	80051b4 <USBD_LL_DataOutStage+0x98>
 800518a:	2b02      	cmp	r3, #2
 800518c:	d81d      	bhi.n	80051ca <USBD_LL_DataOutStage+0xae>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <USBD_LL_DataOutStage+0x7c>
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <USBD_LL_DataOutStage+0x82>
 8005196:	e018      	b.n	80051ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005198:	2300      	movs	r3, #0
 800519a:	75bb      	strb	r3, [r7, #22]
            break;
 800519c:	e018      	b.n	80051d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fa5e 	bl	800566a <USBD_CoreFindIF>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75bb      	strb	r3, [r7, #22]
            break;
 80051b2:	e00d      	b.n	80051d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	4619      	mov	r1, r3
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa60 	bl	8005684 <USBD_CoreFindEP>
 80051c4:	4603      	mov	r3, r0
 80051c6:	75bb      	strb	r3, [r7, #22]
            break;
 80051c8:	e002      	b.n	80051d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75bb      	strb	r3, [r7, #22]
            break;
 80051ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051d0:	7dbb      	ldrb	r3, [r7, #22]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d113      	bne.n	800520a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051e2:	7dba      	ldrb	r2, [r7, #22]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	32ae      	adds	r2, #174	; 0xae
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80051f2:	7dba      	ldrb	r2, [r7, #22]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051fa:	7dba      	ldrb	r2, [r7, #22]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	32ae      	adds	r2, #174	; 0xae
 8005200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 f94a 	bl	80064a4 <USBD_CtlSendStatus>
 8005210:	e032      	b.n	8005278 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005212:	7afb      	ldrb	r3, [r7, #11]
 8005214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005218:	b2db      	uxtb	r3, r3
 800521a:	4619      	mov	r1, r3
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 fa31 	bl	8005684 <USBD_CoreFindEP>
 8005222:	4603      	mov	r3, r0
 8005224:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005226:	7dbb      	ldrb	r3, [r7, #22]
 8005228:	2bff      	cmp	r3, #255	; 0xff
 800522a:	d025      	beq.n	8005278 <USBD_LL_DataOutStage+0x15c>
 800522c:	7dbb      	ldrb	r3, [r7, #22]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d122      	bne.n	8005278 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b03      	cmp	r3, #3
 800523c:	d117      	bne.n	800526e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800523e:	7dba      	ldrb	r2, [r7, #22]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	32ae      	adds	r2, #174	; 0xae
 8005244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800524e:	7dba      	ldrb	r2, [r7, #22]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005256:	7dba      	ldrb	r2, [r7, #22]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	32ae      	adds	r2, #174	; 0xae
 800525c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	7afa      	ldrb	r2, [r7, #11]
 8005264:	4611      	mov	r1, r2
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	4798      	blx	r3
 800526a:	4603      	mov	r3, r0
 800526c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800526e:	7dfb      	ldrb	r3, [r7, #23]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	e000      	b.n	800527a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	460b      	mov	r3, r1
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005290:	7afb      	ldrb	r3, [r7, #11]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d16f      	bne.n	8005376 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3314      	adds	r3, #20
 800529a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d15a      	bne.n	800535c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d914      	bls.n	80052dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6879      	ldr	r1, [r7, #4]
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f001 f8ac 	bl	8006426 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052ce:	2300      	movs	r3, #0
 80052d0:	2200      	movs	r2, #0
 80052d2:	2100      	movs	r1, #0
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f001 fdb9 	bl	8006e4c <USBD_LL_PrepareReceive>
 80052da:	e03f      	b.n	800535c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d11c      	bne.n	8005322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d316      	bcc.n	8005322 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052fe:	429a      	cmp	r2, r3
 8005300:	d20f      	bcs.n	8005322 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f001 f88d 	bl	8006426 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005314:	2300      	movs	r3, #0
 8005316:	2200      	movs	r2, #0
 8005318:	2100      	movs	r1, #0
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f001 fd96 	bl	8006e4c <USBD_LL_PrepareReceive>
 8005320:	e01c      	b.n	800535c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d10f      	bne.n	800534e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f001 fcd1 	bl	8006cf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f001 f8b7 	bl	80064ca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d03a      	beq.n	80053dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff fe42 	bl	8004ff0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005374:	e032      	b.n	80053dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005376:	7afb      	ldrb	r3, [r7, #11]
 8005378:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f97f 	bl	8005684 <USBD_CoreFindEP>
 8005386:	4603      	mov	r3, r0
 8005388:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	2bff      	cmp	r3, #255	; 0xff
 800538e:	d025      	beq.n	80053dc <USBD_LL_DataInStage+0x15a>
 8005390:	7dfb      	ldrb	r3, [r7, #23]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d122      	bne.n	80053dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b03      	cmp	r3, #3
 80053a0:	d11c      	bne.n	80053dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80053a2:	7dfa      	ldrb	r2, [r7, #23]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	32ae      	adds	r2, #174	; 0xae
 80053a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d014      	beq.n	80053dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80053b2:	7dfa      	ldrb	r2, [r7, #23]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80053ba:	7dfa      	ldrb	r2, [r7, #23]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	32ae      	adds	r2, #174	; 0xae
 80053c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	7afa      	ldrb	r2, [r7, #11]
 80053c8:	4611      	mov	r1, r2
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	4798      	blx	r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053d2:	7dbb      	ldrb	r3, [r7, #22]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053d8:	7dbb      	ldrb	r3, [r7, #22]
 80053da:	e000      	b.n	80053de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d014      	beq.n	800544c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00e      	beq.n	800544c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6852      	ldr	r2, [r2, #4]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	4611      	mov	r1, r2
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005448:	2303      	movs	r3, #3
 800544a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	2200      	movs	r2, #0
 8005450:	2100      	movs	r1, #0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f001 fc0b 	bl	8006c6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005468:	2340      	movs	r3, #64	; 0x40
 800546a:	2200      	movs	r2, #0
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 fbfd 	bl	8006c6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2240      	movs	r2, #64	; 0x40
 800547e:	621a      	str	r2, [r3, #32]

  return ret;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	460b      	mov	r3, r1
 8005494:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2204      	movs	r2, #4
 80054c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b04      	cmp	r3, #4
 80054e8:	d106      	bne.n	80054f8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b03      	cmp	r3, #3
 8005518:	d110      	bne.n	800553c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00b      	beq.n	800553c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	460b      	mov	r3, r1
 8005550:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	32ae      	adds	r2, #174	; 0xae
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005564:	2303      	movs	r3, #3
 8005566:	e01c      	b.n	80055a2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b03      	cmp	r3, #3
 8005572:	d115      	bne.n	80055a0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	32ae      	adds	r2, #174	; 0xae
 800557e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	32ae      	adds	r2, #174	; 0xae
 8005592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	4611      	mov	r1, r2
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	32ae      	adds	r2, #174	; 0xae
 80055c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e01c      	b.n	8005606 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d115      	bne.n	8005604 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	32ae      	adds	r2, #174	; 0xae
 80055e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	32ae      	adds	r2, #174	; 0xae
 80055f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	78fa      	ldrb	r2, [r7, #3]
 80055fe:	4611      	mov	r1, r2
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6852      	ldr	r2, [r2, #4]
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	4611      	mov	r1, r2
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005660:	7bfb      	ldrb	r3, [r7, #15]
}
 8005662:	4618      	mov	r0, r3
 8005664:	3710      	adds	r7, #16
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005676:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005690:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	460b      	mov	r3, r1
 80056a8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	885b      	ldrh	r3, [r3, #2]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d920      	bls.n	8005708 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056ce:	e013      	b.n	80056f8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056d0:	f107 030a 	add.w	r3, r7, #10
 80056d4:	4619      	mov	r1, r3
 80056d6:	6978      	ldr	r0, [r7, #20]
 80056d8:	f000 f81b 	bl	8005712 <USBD_GetNextDesc>
 80056dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	785b      	ldrb	r3, [r3, #1]
 80056e2:	2b05      	cmp	r3, #5
 80056e4:	d108      	bne.n	80056f8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	789b      	ldrb	r3, [r3, #2]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d008      	beq.n	8005706 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	885b      	ldrh	r3, [r3, #2]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	897b      	ldrh	r3, [r7, #10]
 8005700:	429a      	cmp	r2, r3
 8005702:	d8e5      	bhi.n	80056d0 <USBD_GetEpDesc+0x32>
 8005704:	e000      	b.n	8005708 <USBD_GetEpDesc+0x6a>
          break;
 8005706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005708:	693b      	ldr	r3, [r7, #16]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	b29b      	uxth	r3, r3
 800572a:	4413      	add	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800573e:	68fb      	ldr	r3, [r7, #12]
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	3301      	adds	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800576a:	8a3b      	ldrh	r3, [r7, #16]
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	b21a      	sxth	r2, r3
 8005770:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005774:	4313      	orrs	r3, r2
 8005776:	b21b      	sxth	r3, r3
 8005778:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800577a:	89fb      	ldrh	r3, [r7, #14]
}
 800577c:	4618      	mov	r0, r3
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d005      	beq.n	80057ae <USBD_StdDevReq+0x26>
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d857      	bhi.n	8005856 <USBD_StdDevReq+0xce>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00f      	beq.n	80057ca <USBD_StdDevReq+0x42>
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d153      	bne.n	8005856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	32ae      	adds	r2, #174	; 0xae
 80057b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	4798      	blx	r3
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
      break;
 80057c8:	e04a      	b.n	8005860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b09      	cmp	r3, #9
 80057d0:	d83b      	bhi.n	800584a <USBD_StdDevReq+0xc2>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <USBD_StdDevReq+0x50>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800582d 	.word	0x0800582d
 80057dc:	08005841 	.word	0x08005841
 80057e0:	0800584b 	.word	0x0800584b
 80057e4:	08005837 	.word	0x08005837
 80057e8:	0800584b 	.word	0x0800584b
 80057ec:	0800580b 	.word	0x0800580b
 80057f0:	08005801 	.word	0x08005801
 80057f4:	0800584b 	.word	0x0800584b
 80057f8:	08005823 	.word	0x08005823
 80057fc:	08005815 	.word	0x08005815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa3c 	bl	8005c80 <USBD_GetDescriptor>
          break;
 8005808:	e024      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fba1 	bl	8005f54 <USBD_SetAddress>
          break;
 8005812:	e01f      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fbe0 	bl	8005fdc <USBD_SetConfig>
 800581c:	4603      	mov	r3, r0
 800581e:	73fb      	strb	r3, [r7, #15]
          break;
 8005820:	e018      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fc83 	bl	8006130 <USBD_GetConfig>
          break;
 800582a:	e013      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fcb4 	bl	800619c <USBD_GetStatus>
          break;
 8005834:	e00e      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fce3 	bl	8006204 <USBD_SetFeature>
          break;
 800583e:	e009      	b.n	8005854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fd07 	bl	8006256 <USBD_ClrFeature>
          break;
 8005848:	e004      	b.n	8005854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800584a:	6839      	ldr	r1, [r7, #0]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fd5e 	bl	800630e <USBD_CtlError>
          break;
 8005852:	bf00      	nop
      }
      break;
 8005854:	e004      	b.n	8005860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fd58 	bl	800630e <USBD_CtlError>
      break;
 800585e:	bf00      	nop
  }

  return ret;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop

0800586c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d005      	beq.n	8005892 <USBD_StdItfReq+0x26>
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d852      	bhi.n	8005930 <USBD_StdItfReq+0xc4>
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <USBD_StdItfReq+0x26>
 800588e:	2b20      	cmp	r3, #32
 8005890:	d14e      	bne.n	8005930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005898:	b2db      	uxtb	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	2b02      	cmp	r3, #2
 800589e:	d840      	bhi.n	8005922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	889b      	ldrh	r3, [r3, #4]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d836      	bhi.n	8005918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	889b      	ldrh	r3, [r3, #4]
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff fed9 	bl	800566a <USBD_CoreFindIF>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	2bff      	cmp	r3, #255	; 0xff
 80058c0:	d01d      	beq.n	80058fe <USBD_StdItfReq+0x92>
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d11a      	bne.n	80058fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058c8:	7bba      	ldrb	r2, [r7, #14]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	32ae      	adds	r2, #174	; 0xae
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00f      	beq.n	80058f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058d8:	7bba      	ldrb	r2, [r7, #14]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058e0:	7bba      	ldrb	r2, [r7, #14]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	32ae      	adds	r2, #174	; 0xae
 80058e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058f6:	e004      	b.n	8005902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058fc:	e001      	b.n	8005902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058fe:	2303      	movs	r3, #3
 8005900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	88db      	ldrh	r3, [r3, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d110      	bne.n	800592c <USBD_StdItfReq+0xc0>
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fdc7 	bl	80064a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005916:	e009      	b.n	800592c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fcf7 	bl	800630e <USBD_CtlError>
          break;
 8005920:	e004      	b.n	800592c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fcf2 	bl	800630e <USBD_CtlError>
          break;
 800592a:	e000      	b.n	800592e <USBD_StdItfReq+0xc2>
          break;
 800592c:	bf00      	nop
      }
      break;
 800592e:	e004      	b.n	800593a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fceb 	bl	800630e <USBD_CtlError>
      break;
 8005938:	bf00      	nop
  }

  return ret;
 800593a:	7bfb      	ldrb	r3, [r7, #15]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	889b      	ldrh	r3, [r3, #4]
 8005956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005960:	2b40      	cmp	r3, #64	; 0x40
 8005962:	d007      	beq.n	8005974 <USBD_StdEPReq+0x30>
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	f200 817f 	bhi.w	8005c68 <USBD_StdEPReq+0x324>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d02a      	beq.n	80059c4 <USBD_StdEPReq+0x80>
 800596e:	2b20      	cmp	r3, #32
 8005970:	f040 817a 	bne.w	8005c68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fe83 	bl	8005684 <USBD_CoreFindEP>
 800597e:	4603      	mov	r3, r0
 8005980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005982:	7b7b      	ldrb	r3, [r7, #13]
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	f000 8174 	beq.w	8005c72 <USBD_StdEPReq+0x32e>
 800598a:	7b7b      	ldrb	r3, [r7, #13]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 8170 	bne.w	8005c72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005992:	7b7a      	ldrb	r2, [r7, #13]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800599a:	7b7a      	ldrb	r2, [r7, #13]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	32ae      	adds	r2, #174	; 0xae
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8163 	beq.w	8005c72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80059ac:	7b7a      	ldrb	r2, [r7, #13]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	32ae      	adds	r2, #174	; 0xae
 80059b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
 80059be:	4603      	mov	r3, r0
 80059c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059c2:	e156      	b.n	8005c72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d008      	beq.n	80059de <USBD_StdEPReq+0x9a>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	f300 8145 	bgt.w	8005c5c <USBD_StdEPReq+0x318>
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f000 809b 	beq.w	8005b0e <USBD_StdEPReq+0x1ca>
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d03c      	beq.n	8005a56 <USBD_StdEPReq+0x112>
 80059dc:	e13e      	b.n	8005c5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d002      	beq.n	80059f0 <USBD_StdEPReq+0xac>
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d016      	beq.n	8005a1c <USBD_StdEPReq+0xd8>
 80059ee:	e02c      	b.n	8005a4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059f0:	7bbb      	ldrb	r3, [r7, #14]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <USBD_StdEPReq+0xce>
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d00a      	beq.n	8005a12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	4619      	mov	r1, r3
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f001 f979 	bl	8006cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f975 	bl	8006cf8 <USBD_LL_StallEP>
 8005a0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a10:	e020      	b.n	8005a54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fc7a 	bl	800630e <USBD_CtlError>
              break;
 8005a1a:	e01b      	b.n	8005a54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	885b      	ldrh	r3, [r3, #2]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10e      	bne.n	8005a42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <USBD_StdEPReq+0xfe>
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d008      	beq.n	8005a42 <USBD_StdEPReq+0xfe>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	88db      	ldrh	r3, [r3, #6]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 f95b 	bl	8006cf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fd2e 	bl	80064a4 <USBD_CtlSendStatus>

              break;
 8005a48:	e004      	b.n	8005a54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fc5e 	bl	800630e <USBD_CtlError>
              break;
 8005a52:	bf00      	nop
          }
          break;
 8005a54:	e107      	b.n	8005c66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d002      	beq.n	8005a68 <USBD_StdEPReq+0x124>
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d016      	beq.n	8005a94 <USBD_StdEPReq+0x150>
 8005a66:	e04b      	b.n	8005b00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00d      	beq.n	8005a8a <USBD_StdEPReq+0x146>
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b80      	cmp	r3, #128	; 0x80
 8005a72:	d00a      	beq.n	8005a8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 f93d 	bl	8006cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a7e:	2180      	movs	r1, #128	; 0x80
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 f939 	bl	8006cf8 <USBD_LL_StallEP>
 8005a86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a88:	e040      	b.n	8005b0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fc3e 	bl	800630e <USBD_CtlError>
              break;
 8005a92:	e03b      	b.n	8005b0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	885b      	ldrh	r3, [r3, #2]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d136      	bne.n	8005b0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d004      	beq.n	8005ab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005aa6:	7bbb      	ldrb	r3, [r7, #14]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 f943 	bl	8006d36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fcf7 	bl	80064a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fde2 	bl	8005684 <USBD_CoreFindEP>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ac4:	7b7b      	ldrb	r3, [r7, #13]
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	d01f      	beq.n	8005b0a <USBD_StdEPReq+0x1c6>
 8005aca:	7b7b      	ldrb	r3, [r7, #13]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d11c      	bne.n	8005b0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005ad0:	7b7a      	ldrb	r2, [r7, #13]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ad8:	7b7a      	ldrb	r2, [r7, #13]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	32ae      	adds	r2, #174	; 0xae
 8005ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ae8:	7b7a      	ldrb	r2, [r7, #13]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	32ae      	adds	r2, #174	; 0xae
 8005aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005afe:	e004      	b.n	8005b0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fc03 	bl	800630e <USBD_CtlError>
              break;
 8005b08:	e000      	b.n	8005b0c <USBD_StdEPReq+0x1c8>
              break;
 8005b0a:	bf00      	nop
          }
          break;
 8005b0c:	e0ab      	b.n	8005c66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d002      	beq.n	8005b20 <USBD_StdEPReq+0x1dc>
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d032      	beq.n	8005b84 <USBD_StdEPReq+0x240>
 8005b1e:	e097      	b.n	8005c50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b20:	7bbb      	ldrb	r3, [r7, #14]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <USBD_StdEPReq+0x1f2>
 8005b26:	7bbb      	ldrb	r3, [r7, #14]
 8005b28:	2b80      	cmp	r3, #128	; 0x80
 8005b2a:	d004      	beq.n	8005b36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fbed 	bl	800630e <USBD_CtlError>
                break;
 8005b34:	e091      	b.n	8005c5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da0b      	bge.n	8005b56 <USBD_StdEPReq+0x212>
 8005b3e:	7bbb      	ldrb	r3, [r7, #14]
 8005b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	3310      	adds	r3, #16
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	3304      	adds	r3, #4
 8005b54:	e00b      	b.n	8005b6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fc37 	bl	80063f0 <USBD_CtlSendData>
              break;
 8005b82:	e06a      	b.n	8005c5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da11      	bge.n	8005bb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	f003 020f 	and.w	r2, r3, #15
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d117      	bne.n	8005bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ba6:	6839      	ldr	r1, [r7, #0]
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fbb0 	bl	800630e <USBD_CtlError>
                  break;
 8005bae:	e054      	b.n	8005c5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	f003 020f 	and.w	r2, r3, #15
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	440b      	add	r3, r1
 8005bc2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fb9d 	bl	800630e <USBD_CtlError>
                  break;
 8005bd4:	e041      	b.n	8005c5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0b      	bge.n	8005bf6 <USBD_StdEPReq+0x2b2>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3310      	adds	r3, #16
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	e00b      	b.n	8005c0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <USBD_StdEPReq+0x2d8>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b80      	cmp	r3, #128	; 0x80
 8005c1a:	d103      	bne.n	8005c24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	e00e      	b.n	8005c42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c24:	7bbb      	ldrb	r3, [r7, #14]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f8a3 	bl	8006d74 <USBD_LL_IsStallEP>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fbd1 	bl	80063f0 <USBD_CtlSendData>
              break;
 8005c4e:	e004      	b.n	8005c5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fb5b 	bl	800630e <USBD_CtlError>
              break;
 8005c58:	bf00      	nop
          }
          break;
 8005c5a:	e004      	b.n	8005c66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fb55 	bl	800630e <USBD_CtlError>
          break;
 8005c64:	bf00      	nop
      }
      break;
 8005c66:	e005      	b.n	8005c74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fb4f 	bl	800630e <USBD_CtlError>
      break;
 8005c70:	e000      	b.n	8005c74 <USBD_StdEPReq+0x330>
      break;
 8005c72:	bf00      	nop
  }

  return ret;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	885b      	ldrh	r3, [r3, #2]
 8005c9a:	0a1b      	lsrs	r3, r3, #8
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	2b06      	cmp	r3, #6
 8005ca2:	f200 8128 	bhi.w	8005ef6 <USBD_GetDescriptor+0x276>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <USBD_GetDescriptor+0x2c>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cc9 	.word	0x08005cc9
 8005cb0:	08005ce1 	.word	0x08005ce1
 8005cb4:	08005d21 	.word	0x08005d21
 8005cb8:	08005ef7 	.word	0x08005ef7
 8005cbc:	08005ef7 	.word	0x08005ef7
 8005cc0:	08005e97 	.word	0x08005e97
 8005cc4:	08005ec3 	.word	0x08005ec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	7c12      	ldrb	r2, [r2, #16]
 8005cd4:	f107 0108 	add.w	r1, r7, #8
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	60f8      	str	r0, [r7, #12]
      break;
 8005cde:	e112      	b.n	8005f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	7c1b      	ldrb	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10d      	bne.n	8005d04 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf0:	f107 0208 	add.w	r2, r7, #8
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
 8005cf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	2202      	movs	r2, #2
 8005d00:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d02:	e100      	b.n	8005f06 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f107 0208 	add.w	r2, r7, #8
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	701a      	strb	r2, [r3, #0]
      break;
 8005d1e:	e0f2      	b.n	8005f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	885b      	ldrh	r3, [r3, #2]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	f200 80ac 	bhi.w	8005e84 <USBD_GetDescriptor+0x204>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <USBD_GetDescriptor+0xb4>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d4d 	.word	0x08005d4d
 8005d38:	08005d81 	.word	0x08005d81
 8005d3c:	08005db5 	.word	0x08005db5
 8005d40:	08005de9 	.word	0x08005de9
 8005d44:	08005e1d 	.word	0x08005e1d
 8005d48:	08005e51 	.word	0x08005e51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 0108 	add.w	r1, r7, #8
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6e:	e091      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 facb 	bl	800630e <USBD_CtlError>
            err++;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7e:	e089      	b.n	8005e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	7c12      	ldrb	r2, [r2, #16]
 8005d98:	f107 0108 	add.w	r1, r7, #8
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005da2:	e077      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fab1 	bl	800630e <USBD_CtlError>
            err++;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	3301      	adds	r3, #1
 8005db0:	72fb      	strb	r3, [r7, #11]
          break;
 8005db2:	e06f      	b.n	8005e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	7c12      	ldrb	r2, [r2, #16]
 8005dcc:	f107 0108 	add.w	r1, r7, #8
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dd6:	e05d      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa97 	bl	800630e <USBD_CtlError>
            err++;
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	3301      	adds	r3, #1
 8005de4:	72fb      	strb	r3, [r7, #11]
          break;
 8005de6:	e055      	b.n	8005e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	7c12      	ldrb	r2, [r2, #16]
 8005e00:	f107 0108 	add.w	r1, r7, #8
 8005e04:	4610      	mov	r0, r2
 8005e06:	4798      	blx	r3
 8005e08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e0a:	e043      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fa7d 	bl	800630e <USBD_CtlError>
            err++;
 8005e14:	7afb      	ldrb	r3, [r7, #11]
 8005e16:	3301      	adds	r3, #1
 8005e18:	72fb      	strb	r3, [r7, #11]
          break;
 8005e1a:	e03b      	b.n	8005e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	7c12      	ldrb	r2, [r2, #16]
 8005e34:	f107 0108 	add.w	r1, r7, #8
 8005e38:	4610      	mov	r0, r2
 8005e3a:	4798      	blx	r3
 8005e3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e3e:	e029      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa63 	bl	800630e <USBD_CtlError>
            err++;
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e4e:	e021      	b.n	8005e94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	7c12      	ldrb	r2, [r2, #16]
 8005e68:	f107 0108 	add.w	r1, r7, #8
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3
 8005e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e72:	e00f      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e74:	6839      	ldr	r1, [r7, #0]
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fa49 	bl	800630e <USBD_CtlError>
            err++;
 8005e7c:	7afb      	ldrb	r3, [r7, #11]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	72fb      	strb	r3, [r7, #11]
          break;
 8005e82:	e007      	b.n	8005e94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e84:	6839      	ldr	r1, [r7, #0]
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa41 	bl	800630e <USBD_CtlError>
          err++;
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e92:	bf00      	nop
      }
      break;
 8005e94:	e037      	b.n	8005f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	7c1b      	ldrb	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea6:	f107 0208 	add.w	r2, r7, #8
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4798      	blx	r3
 8005eae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005eb0:	e029      	b.n	8005f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eb2:	6839      	ldr	r1, [r7, #0]
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa2a 	bl	800630e <USBD_CtlError>
        err++;
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec0:	e021      	b.n	8005f06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	7c1b      	ldrb	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	f107 0208 	add.w	r2, r7, #8
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4798      	blx	r3
 8005eda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ee4:	e00f      	b.n	8005f06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ee6:	6839      	ldr	r1, [r7, #0]
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa10 	bl	800630e <USBD_CtlError>
        err++;
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8005ef4:	e007      	b.n	8005f06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa08 	bl	800630e <USBD_CtlError>
      err++;
 8005efe:	7afb      	ldrb	r3, [r7, #11]
 8005f00:	3301      	adds	r3, #1
 8005f02:	72fb      	strb	r3, [r7, #11]
      break;
 8005f04:	bf00      	nop
  }

  if (err != 0U)
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d11e      	bne.n	8005f4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	88db      	ldrh	r3, [r3, #6]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00e      	beq.n	8005f38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	88da      	ldrh	r2, [r3, #6]
 8005f1e:	893b      	ldrh	r3, [r7, #8]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	bf28      	it	cs
 8005f24:	4613      	movcs	r3, r2
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f2a:	893b      	ldrh	r3, [r7, #8]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68f9      	ldr	r1, [r7, #12]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fa5d 	bl	80063f0 <USBD_CtlSendData>
 8005f36:	e009      	b.n	8005f4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f38:	6839      	ldr	r1, [r7, #0]
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9e7 	bl	800630e <USBD_CtlError>
 8005f40:	e004      	b.n	8005f4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 faae 	bl	80064a4 <USBD_CtlSendStatus>
 8005f48:	e000      	b.n	8005f4c <USBD_GetDescriptor+0x2cc>
    return;
 8005f4a:	bf00      	nop
  }
}
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop

08005f54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	889b      	ldrh	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d131      	bne.n	8005fca <USBD_SetAddress+0x76>
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	88db      	ldrh	r3, [r3, #6]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d12d      	bne.n	8005fca <USBD_SetAddress+0x76>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	2b7f      	cmp	r3, #127	; 0x7f
 8005f74:	d829      	bhi.n	8005fca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	885b      	ldrh	r3, [r3, #2]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d104      	bne.n	8005f98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f8e:	6839      	ldr	r1, [r7, #0]
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f9bc 	bl	800630e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	e01d      	b.n	8005fd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	7bfa      	ldrb	r2, [r7, #15]
 8005f9c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 ff11 	bl	8006dcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa7a 	bl	80064a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fbe:	e009      	b.n	8005fd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc8:	e004      	b.n	8005fd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f99e 	bl	800630e <USBD_CtlError>
  }
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	885b      	ldrh	r3, [r3, #2]
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	4b4e      	ldr	r3, [pc, #312]	; (800612c <USBD_SetConfig+0x150>)
 8005ff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	; (800612c <USBD_SetConfig+0x150>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d905      	bls.n	8006008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f985 	bl	800630e <USBD_CtlError>
    return USBD_FAIL;
 8006004:	2303      	movs	r3, #3
 8006006:	e08c      	b.n	8006122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d002      	beq.n	800601a <USBD_SetConfig+0x3e>
 8006014:	2b03      	cmp	r3, #3
 8006016:	d029      	beq.n	800606c <USBD_SetConfig+0x90>
 8006018:	e075      	b.n	8006106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800601a:	4b44      	ldr	r3, [pc, #272]	; (800612c <USBD_SetConfig+0x150>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d020      	beq.n	8006064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006022:	4b42      	ldr	r3, [pc, #264]	; (800612c <USBD_SetConfig+0x150>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800602c:	4b3f      	ldr	r3, [pc, #252]	; (800612c <USBD_SetConfig+0x150>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fe ffe7 	bl	8005006 <USBD_SetClassConfig>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d008      	beq.n	8006054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f962 	bl	800630e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2202      	movs	r2, #2
 800604e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006052:	e065      	b.n	8006120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fa25 	bl	80064a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006062:	e05d      	b.n	8006120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa1d 	bl	80064a4 <USBD_CtlSendStatus>
      break;
 800606a:	e059      	b.n	8006120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800606c:	4b2f      	ldr	r3, [pc, #188]	; (800612c <USBD_SetConfig+0x150>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d112      	bne.n	800609a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800607c:	4b2b      	ldr	r3, [pc, #172]	; (800612c <USBD_SetConfig+0x150>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <USBD_SetConfig+0x150>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fe ffd6 	bl	800503e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa06 	bl	80064a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006098:	e042      	b.n	8006120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800609a:	4b24      	ldr	r3, [pc, #144]	; (800612c <USBD_SetConfig+0x150>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d02a      	beq.n	80060fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7fe ffc4 	bl	800503e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80060b6:	4b1d      	ldr	r3, [pc, #116]	; (800612c <USBD_SetConfig+0x150>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060c0:	4b1a      	ldr	r3, [pc, #104]	; (800612c <USBD_SetConfig+0x150>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fe ff9d 	bl	8005006 <USBD_SetClassConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00f      	beq.n	80060f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f918 	bl	800630e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7fe ffa9 	bl	800503e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060f4:	e014      	b.n	8006120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f9d4 	bl	80064a4 <USBD_CtlSendStatus>
      break;
 80060fc:	e010      	b.n	8006120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9d0 	bl	80064a4 <USBD_CtlSendStatus>
      break;
 8006104:	e00c      	b.n	8006120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f900 	bl	800630e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800610e:	4b07      	ldr	r3, [pc, #28]	; (800612c <USBD_SetConfig+0x150>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fe ff92 	bl	800503e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800611a:	2303      	movs	r3, #3
 800611c:	73fb      	strb	r3, [r7, #15]
      break;
 800611e:	bf00      	nop
  }

  return ret;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000148 	.word	0x20000148

08006130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d004      	beq.n	800614c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f8e2 	bl	800630e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800614a:	e023      	b.n	8006194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	dc02      	bgt.n	800615e <USBD_GetConfig+0x2e>
 8006158:	2b00      	cmp	r3, #0
 800615a:	dc03      	bgt.n	8006164 <USBD_GetConfig+0x34>
 800615c:	e015      	b.n	800618a <USBD_GetConfig+0x5a>
 800615e:	2b03      	cmp	r3, #3
 8006160:	d00b      	beq.n	800617a <USBD_GetConfig+0x4a>
 8006162:	e012      	b.n	800618a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3308      	adds	r3, #8
 800616e:	2201      	movs	r2, #1
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f93c 	bl	80063f0 <USBD_CtlSendData>
        break;
 8006178:	e00c      	b.n	8006194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3304      	adds	r3, #4
 800617e:	2201      	movs	r2, #1
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f934 	bl	80063f0 <USBD_CtlSendData>
        break;
 8006188:	e004      	b.n	8006194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f8be 	bl	800630e <USBD_CtlError>
        break;
 8006192:	bf00      	nop
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d81e      	bhi.n	80061f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	88db      	ldrh	r3, [r3, #6]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d004      	beq.n	80061c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8a5 	bl	800630e <USBD_CtlError>
        break;
 80061c4:	e01a      	b.n	80061fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	f043 0202 	orr.w	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	330c      	adds	r3, #12
 80061e6:	2202      	movs	r2, #2
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f900 	bl	80063f0 <USBD_CtlSendData>
      break;
 80061f0:	e004      	b.n	80061fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f88a 	bl	800630e <USBD_CtlError>
      break;
 80061fa:	bf00      	nop
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	885b      	ldrh	r3, [r3, #2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d107      	bne.n	8006226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f940 	bl	80064a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006224:	e013      	b.n	800624e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	885b      	ldrh	r3, [r3, #2]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d10b      	bne.n	8006246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	889b      	ldrh	r3, [r3, #4]
 8006232:	0a1b      	lsrs	r3, r3, #8
 8006234:	b29b      	uxth	r3, r3
 8006236:	b2da      	uxtb	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f930 	bl	80064a4 <USBD_CtlSendStatus>
}
 8006244:	e003      	b.n	800624e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f860 	bl	800630e <USBD_CtlError>
}
 800624e:	bf00      	nop
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	2b02      	cmp	r3, #2
 800626c:	d80b      	bhi.n	8006286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	885b      	ldrh	r3, [r3, #2]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d10c      	bne.n	8006290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f910 	bl	80064a4 <USBD_CtlSendStatus>
      }
      break;
 8006284:	e004      	b.n	8006290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f840 	bl	800630e <USBD_CtlError>
      break;
 800628e:	e000      	b.n	8006292 <USBD_ClrFeature+0x3c>
      break;
 8006290:	bf00      	nop
  }
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	781a      	ldrb	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	781a      	ldrb	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3301      	adds	r3, #1
 80062c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fa41 	bl	800574c <SWAPBYTE>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3301      	adds	r3, #1
 80062d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff fa34 	bl	800574c <SWAPBYTE>
 80062e4:	4603      	mov	r3, r0
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	3301      	adds	r3, #1
 80062f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fa27 	bl	800574c <SWAPBYTE>
 80062fe:	4603      	mov	r3, r0
 8006300:	461a      	mov	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	80da      	strh	r2, [r3, #6]
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006318:	2180      	movs	r1, #128	; 0x80
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fcec 	bl	8006cf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006320:	2100      	movs	r1, #0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fce8 	bl	8006cf8 <USBD_LL_StallEP>
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d036      	beq.n	80063b4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f000 f836 	bl	80063bc <USBD_GetLen>
 8006350:	4603      	mov	r3, r0
 8006352:	3301      	adds	r3, #1
 8006354:	b29b      	uxth	r3, r3
 8006356:	005b      	lsls	r3, r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	4413      	add	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	7812      	ldrb	r2, [r2, #0]
 8006368:	701a      	strb	r2, [r3, #0]
  idx++;
 800636a:	7dfb      	ldrb	r3, [r7, #23]
 800636c:	3301      	adds	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	2203      	movs	r2, #3
 8006378:	701a      	strb	r2, [r3, #0]
  idx++;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	3301      	adds	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006380:	e013      	b.n	80063aa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	4413      	add	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	7812      	ldrb	r2, [r2, #0]
 800638c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	3301      	adds	r3, #1
 8006392:	613b      	str	r3, [r7, #16]
    idx++;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	3301      	adds	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
    idx++;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	3301      	adds	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1e7      	bne.n	8006382 <USBD_GetString+0x52>
 80063b2:	e000      	b.n	80063b6 <USBD_GetString+0x86>
    return;
 80063b4:	bf00      	nop
  }
}
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063cc:	e005      	b.n	80063da <USBD_GetLen+0x1e>
  {
    len++;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	3301      	adds	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f5      	bne.n	80063ce <USBD_GetLen+0x12>
  }

  return len;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2202      	movs	r2, #2
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	2100      	movs	r1, #0
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fcf7 	bl	8006e0a <USBD_LL_Transmit>

  return USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
 800642e:	60b9      	str	r1, [r7, #8]
 8006430:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	2100      	movs	r1, #0
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fce6 	bl	8006e0a <USBD_LL_Transmit>

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2203      	movs	r2, #3
 8006458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	2100      	movs	r1, #0
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 fcea 	bl	8006e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	2100      	movs	r1, #0
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 fcd9 	bl	8006e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2204      	movs	r2, #4
 80064b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064b4:	2300      	movs	r3, #0
 80064b6:	2200      	movs	r2, #0
 80064b8:	2100      	movs	r1, #0
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fca5 	bl	8006e0a <USBD_LL_Transmit>

  return USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2205      	movs	r2, #5
 80064d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064da:	2300      	movs	r3, #0
 80064dc:	2200      	movs	r2, #0
 80064de:	2100      	movs	r1, #0
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fcb3 	bl	8006e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80064f4:	2200      	movs	r2, #0
 80064f6:	4912      	ldr	r1, [pc, #72]	; (8006540 <MX_USB_DEVICE_Init+0x50>)
 80064f8:	4812      	ldr	r0, [pc, #72]	; (8006544 <MX_USB_DEVICE_Init+0x54>)
 80064fa:	f7fe fd07 	bl	8004f0c <USBD_Init>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006504:	f7fa f90e 	bl	8000724 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006508:	490f      	ldr	r1, [pc, #60]	; (8006548 <MX_USB_DEVICE_Init+0x58>)
 800650a:	480e      	ldr	r0, [pc, #56]	; (8006544 <MX_USB_DEVICE_Init+0x54>)
 800650c:	f7fe fd2e 	bl	8004f6c <USBD_RegisterClass>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006516:	f7fa f905 	bl	8000724 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800651a:	490c      	ldr	r1, [pc, #48]	; (800654c <MX_USB_DEVICE_Init+0x5c>)
 800651c:	4809      	ldr	r0, [pc, #36]	; (8006544 <MX_USB_DEVICE_Init+0x54>)
 800651e:	f7fe fc1f 	bl	8004d60 <USBD_CDC_RegisterInterface>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006528:	f7fa f8fc 	bl	8000724 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800652c:	4805      	ldr	r0, [pc, #20]	; (8006544 <MX_USB_DEVICE_Init+0x54>)
 800652e:	f7fe fd53 	bl	8004fd8 <USBD_Start>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006538:	f7fa f8f4 	bl	8000724 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800653c:	bf00      	nop
 800653e:	bd80      	pop	{r7, pc}
 8006540:	200000b0 	.word	0x200000b0
 8006544:	2000014c 	.word	0x2000014c
 8006548:	2000001c 	.word	0x2000001c
 800654c:	2000009c 	.word	0x2000009c

08006550 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006554:	2200      	movs	r2, #0
 8006556:	4905      	ldr	r1, [pc, #20]	; (800656c <CDC_Init_FS+0x1c>)
 8006558:	4805      	ldr	r0, [pc, #20]	; (8006570 <CDC_Init_FS+0x20>)
 800655a:	f7fe fc1b 	bl	8004d94 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800655e:	4905      	ldr	r1, [pc, #20]	; (8006574 <CDC_Init_FS+0x24>)
 8006560:	4803      	ldr	r0, [pc, #12]	; (8006570 <CDC_Init_FS+0x20>)
 8006562:	f7fe fc39 	bl	8004dd8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006566:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006568:	4618      	mov	r0, r3
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000c28 	.word	0x20000c28
 8006570:	2000014c 	.word	0x2000014c
 8006574:	20000428 	.word	0x20000428

08006578 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800657c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	6039      	str	r1, [r7, #0]
 8006592:	71fb      	strb	r3, [r7, #7]
 8006594:	4613      	mov	r3, r2
 8006596:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b23      	cmp	r3, #35	; 0x23
 800659c:	d84a      	bhi.n	8006634 <CDC_Control_FS+0xac>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <CDC_Control_FS+0x1c>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	08006635 	.word	0x08006635
 80065a8:	08006635 	.word	0x08006635
 80065ac:	08006635 	.word	0x08006635
 80065b0:	08006635 	.word	0x08006635
 80065b4:	08006635 	.word	0x08006635
 80065b8:	08006635 	.word	0x08006635
 80065bc:	08006635 	.word	0x08006635
 80065c0:	08006635 	.word	0x08006635
 80065c4:	08006635 	.word	0x08006635
 80065c8:	08006635 	.word	0x08006635
 80065cc:	08006635 	.word	0x08006635
 80065d0:	08006635 	.word	0x08006635
 80065d4:	08006635 	.word	0x08006635
 80065d8:	08006635 	.word	0x08006635
 80065dc:	08006635 	.word	0x08006635
 80065e0:	08006635 	.word	0x08006635
 80065e4:	08006635 	.word	0x08006635
 80065e8:	08006635 	.word	0x08006635
 80065ec:	08006635 	.word	0x08006635
 80065f0:	08006635 	.word	0x08006635
 80065f4:	08006635 	.word	0x08006635
 80065f8:	08006635 	.word	0x08006635
 80065fc:	08006635 	.word	0x08006635
 8006600:	08006635 	.word	0x08006635
 8006604:	08006635 	.word	0x08006635
 8006608:	08006635 	.word	0x08006635
 800660c:	08006635 	.word	0x08006635
 8006610:	08006635 	.word	0x08006635
 8006614:	08006635 	.word	0x08006635
 8006618:	08006635 	.word	0x08006635
 800661c:	08006635 	.word	0x08006635
 8006620:	08006635 	.word	0x08006635
 8006624:	08006635 	.word	0x08006635
 8006628:	08006635 	.word	0x08006635
 800662c:	08006635 	.word	0x08006635
 8006630:	08006635 	.word	0x08006635
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006634:	bf00      	nop
  }

  return (USBD_OK);
 8006636:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	480f      	ldr	r0, [pc, #60]	; (8006690 <CDC_Receive_FS+0x4c>)
 8006652:	f7fe fbc1 	bl	8004dd8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006656:	480e      	ldr	r0, [pc, #56]	; (8006690 <CDC_Receive_FS+0x4c>)
 8006658:	f7fe fc22 	bl	8004ea0 <USBD_CDC_ReceivePacket>


  memset(rx_buffer,'\0',40); //limpiamos el buffer que va ala archivo main
 800665c:	2228      	movs	r2, #40	; 0x28
 800665e:	2100      	movs	r1, #0
 8006660:	480c      	ldr	r0, [pc, #48]	; (8006694 <CDC_Receive_FS+0x50>)
 8006662:	f000 fc6b 	bl	8006f3c <memset>
  uint8_t len = (uint8_t)*Len;//calculamos cuantos bytes han llegado
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	73fb      	strb	r3, [r7, #15]

  memcpy(rx_buffer,Buf,len);//copio hacia el main
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	461a      	mov	r2, r3
 8006670:	6879      	ldr	r1, [r7, #4]
 8006672:	4808      	ldr	r0, [pc, #32]	; (8006694 <CDC_Receive_FS+0x50>)
 8006674:	f000 fc8e 	bl	8006f94 <memcpy>
  memset(Buf,'\0',len);//limpio para no sobrescribir valores
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	461a      	mov	r2, r3
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fc5c 	bl	8006f3c <memset>

  return (USBD_OK);
 8006684:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	2000014c 	.word	0x2000014c
 8006694:	2000011c 	.word	0x2000011c

08006698 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80066a8:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <CDC_Transmit_FS+0x48>)
 80066aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e00b      	b.n	80066d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6879      	ldr	r1, [r7, #4]
 80066c4:	4806      	ldr	r0, [pc, #24]	; (80066e0 <CDC_Transmit_FS+0x48>)
 80066c6:	f7fe fb65 	bl	8004d94 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80066ca:	4805      	ldr	r0, [pc, #20]	; (80066e0 <CDC_Transmit_FS+0x48>)
 80066cc:	f7fe fba2 	bl	8004e14 <USBD_CDC_TransmitPacket>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2000014c 	.word	0x2000014c

080066e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80066f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	6039      	str	r1, [r7, #0]
 8006712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2212      	movs	r2, #18
 8006718:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800671a:	4b03      	ldr	r3, [pc, #12]	; (8006728 <USBD_FS_DeviceDescriptor+0x20>)
}
 800671c:	4618      	mov	r0, r3
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	200000cc 	.word	0x200000cc

0800672c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	6039      	str	r1, [r7, #0]
 8006736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2204      	movs	r2, #4
 800673c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800673e:	4b03      	ldr	r3, [pc, #12]	; (800674c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	200000e0 	.word	0x200000e0

08006750 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800675c:	79fb      	ldrb	r3, [r7, #7]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006762:	683a      	ldr	r2, [r7, #0]
 8006764:	4907      	ldr	r1, [pc, #28]	; (8006784 <USBD_FS_ProductStrDescriptor+0x34>)
 8006766:	4808      	ldr	r0, [pc, #32]	; (8006788 <USBD_FS_ProductStrDescriptor+0x38>)
 8006768:	f7ff fde2 	bl	8006330 <USBD_GetString>
 800676c:	e004      	b.n	8006778 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	4904      	ldr	r1, [pc, #16]	; (8006784 <USBD_FS_ProductStrDescriptor+0x34>)
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <USBD_FS_ProductStrDescriptor+0x38>)
 8006774:	f7ff fddc 	bl	8006330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20001428 	.word	0x20001428
 8006788:	08006fe0 	.word	0x08006fe0

0800678c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	4904      	ldr	r1, [pc, #16]	; (80067ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800679c:	4804      	ldr	r0, [pc, #16]	; (80067b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800679e:	f7ff fdc7 	bl	8006330 <USBD_GetString>
  return USBD_StrDesc;
 80067a2:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20001428 	.word	0x20001428
 80067b0:	08006ff0 	.word	0x08006ff0

080067b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	6039      	str	r1, [r7, #0]
 80067be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	221a      	movs	r2, #26
 80067c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067c6:	f000 f843 	bl	8006850 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067ca:	4b02      	ldr	r3, [pc, #8]	; (80067d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	200000e4 	.word	0x200000e4

080067d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80067e4:	79fb      	ldrb	r3, [r7, #7]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d105      	bne.n	80067f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	4907      	ldr	r1, [pc, #28]	; (800680c <USBD_FS_ConfigStrDescriptor+0x34>)
 80067ee:	4808      	ldr	r0, [pc, #32]	; (8006810 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067f0:	f7ff fd9e 	bl	8006330 <USBD_GetString>
 80067f4:	e004      	b.n	8006800 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	4904      	ldr	r1, [pc, #16]	; (800680c <USBD_FS_ConfigStrDescriptor+0x34>)
 80067fa:	4805      	ldr	r0, [pc, #20]	; (8006810 <USBD_FS_ConfigStrDescriptor+0x38>)
 80067fc:	f7ff fd98 	bl	8006330 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006800:	4b02      	ldr	r3, [pc, #8]	; (800680c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20001428 	.word	0x20001428
 8006810:	08007004 	.word	0x08007004

08006814 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	4907      	ldr	r1, [pc, #28]	; (8006848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800682a:	4808      	ldr	r0, [pc, #32]	; (800684c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800682c:	f7ff fd80 	bl	8006330 <USBD_GetString>
 8006830:	e004      	b.n	800683c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	4904      	ldr	r1, [pc, #16]	; (8006848 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006836:	4805      	ldr	r0, [pc, #20]	; (800684c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006838:	f7ff fd7a 	bl	8006330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20001428 	.word	0x20001428
 800684c:	08007010 	.word	0x08007010

08006850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006856:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <Get_SerialNum+0x44>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <Get_SerialNum+0x48>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <Get_SerialNum+0x4c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d009      	beq.n	800688a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006876:	2208      	movs	r2, #8
 8006878:	4909      	ldr	r1, [pc, #36]	; (80068a0 <Get_SerialNum+0x50>)
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f000 f814 	bl	80068a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006880:	2204      	movs	r2, #4
 8006882:	4908      	ldr	r1, [pc, #32]	; (80068a4 <Get_SerialNum+0x54>)
 8006884:	68b8      	ldr	r0, [r7, #8]
 8006886:	f000 f80f 	bl	80068a8 <IntToUnicode>
  }
}
 800688a:	bf00      	nop
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	1fff7a10 	.word	0x1fff7a10
 8006898:	1fff7a14 	.word	0x1fff7a14
 800689c:	1fff7a18 	.word	0x1fff7a18
 80068a0:	200000e6 	.word	0x200000e6
 80068a4:	200000f6 	.word	0x200000f6

080068a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	75fb      	strb	r3, [r7, #23]
 80068be:	e027      	b.n	8006910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	0f1b      	lsrs	r3, r3, #28
 80068c4:	2b09      	cmp	r3, #9
 80068c6:	d80b      	bhi.n	80068e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	0f1b      	lsrs	r3, r3, #28
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	7dfb      	ldrb	r3, [r7, #23]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	4619      	mov	r1, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	440b      	add	r3, r1
 80068d8:	3230      	adds	r2, #48	; 0x30
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	e00a      	b.n	80068f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	0f1b      	lsrs	r3, r3, #28
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	005b      	lsls	r3, r3, #1
 80068ea:	4619      	mov	r1, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	440b      	add	r3, r1
 80068f0:	3237      	adds	r2, #55	; 0x37
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	005b      	lsls	r3, r3, #1
 8006900:	3301      	adds	r3, #1
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	4413      	add	r3, r2
 8006906:	2200      	movs	r2, #0
 8006908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800690a:	7dfb      	ldrb	r3, [r7, #23]
 800690c:	3301      	adds	r3, #1
 800690e:	75fb      	strb	r3, [r7, #23]
 8006910:	7dfa      	ldrb	r2, [r7, #23]
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	429a      	cmp	r2, r3
 8006916:	d3d3      	bcc.n	80068c0 <IntToUnicode+0x18>
  }
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08a      	sub	sp, #40	; 0x28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006930:	f107 0314 	add.w	r3, r7, #20
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	605a      	str	r2, [r3, #4]
 800693a:	609a      	str	r2, [r3, #8]
 800693c:	60da      	str	r2, [r3, #12]
 800693e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006948:	d13a      	bne.n	80069c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
 800694e:	4b1e      	ldr	r3, [pc, #120]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6313      	str	r3, [r2, #48]	; 0x30
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800696a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800696c:	2302      	movs	r3, #2
 800696e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006974:	2303      	movs	r3, #3
 8006976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006978:	230a      	movs	r3, #10
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4619      	mov	r1, r3
 8006982:	4812      	ldr	r0, [pc, #72]	; (80069cc <HAL_PCD_MspInit+0xa4>)
 8006984:	f7fa f914 	bl	8000bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	4a0e      	ldr	r2, [pc, #56]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	6353      	str	r3, [r2, #52]	; 0x34
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 800699a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699c:	4a0a      	ldr	r2, [pc, #40]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 800699e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069a2:	6453      	str	r3, [r2, #68]	; 0x44
 80069a4:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <HAL_PCD_MspInit+0xa0>)
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80069b0:	2200      	movs	r2, #0
 80069b2:	2100      	movs	r1, #0
 80069b4:	2043      	movs	r0, #67	; 0x43
 80069b6:	f7fa f8c4 	bl	8000b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80069ba:	2043      	movs	r0, #67	; 0x43
 80069bc:	f7fa f8dd 	bl	8000b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80069c0:	bf00      	nop
 80069c2:	3728      	adds	r7, #40	; 0x28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40023800 	.word	0x40023800
 80069cc:	40020000 	.word	0x40020000

080069d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7fe fb43 	bl	8005072 <USBD_LL_SetupStage>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	f7fe fb7d 	bl	800511c <USBD_LL_DataOutStage>
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b082      	sub	sp, #8
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006a3c:	78fa      	ldrb	r2, [r7, #3]
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	334c      	adds	r3, #76	; 0x4c
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fe fc16 	bl	8005282 <USBD_LL_DataInStage>
}
 8006a56:	bf00      	nop
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fd4a 	bl	8005506 <USBD_LL_SOF>
}
 8006a72:	bf00      	nop
 8006a74:	3708      	adds	r7, #8
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d001      	beq.n	8006a92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006a8e:	f7f9 fe49 	bl	8000724 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fcf4 	bl	800548a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fc9c 	bl	80053e6 <USBD_LL_Reset>
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fe fcef 	bl	80054aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006aec:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <HAL_PCD_SuspendCallback+0x48>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	4a03      	ldr	r2, [pc, #12]	; (8006b00 <HAL_PCD_SuspendCallback+0x48>)
 8006af2:	f043 0306 	orr.w	r3, r3, #6
 8006af6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	e000ed00 	.word	0xe000ed00

08006b04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fcdf 	bl	80054d6 <USBD_LL_Resume>
}
 8006b18:	bf00      	nop
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	4611      	mov	r1, r2
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fe fd37 	bl	80055aa <USBD_LL_IsoOUTIncomplete>
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7fe fcf3 	bl	8005546 <USBD_LL_IsoINIncomplete>
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fd49 	bl	800560e <USBD_LL_DevConnected>
}
 8006b7c:	bf00      	nop
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd46 	bl	8005624 <USBD_LL_DevDisconnected>
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d13c      	bne.n	8006c2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006bb0:	4a20      	ldr	r2, [pc, #128]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a1e      	ldr	r2, [pc, #120]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006bc0:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006bc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006bc8:	4b1a      	ldr	r3, [pc, #104]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bca:	2204      	movs	r2, #4
 8006bcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006bce:	4b19      	ldr	r3, [pc, #100]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bdc:	2202      	movs	r2, #2
 8006bde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006be0:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <USBD_LL_Init+0x94>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006be6:	4b13      	ldr	r3, [pc, #76]	; (8006c34 <USBD_LL_Init+0x94>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006bec:	4b11      	ldr	r3, [pc, #68]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <USBD_LL_Init+0x94>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006bfe:	480d      	ldr	r0, [pc, #52]	; (8006c34 <USBD_LL_Init+0x94>)
 8006c00:	f7fa f973 	bl	8000eea <HAL_PCD_Init>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006c0a:	f7f9 fd8b 	bl	8000724 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006c0e:	2180      	movs	r1, #128	; 0x80
 8006c10:	4808      	ldr	r0, [pc, #32]	; (8006c34 <USBD_LL_Init+0x94>)
 8006c12:	f7fb fbca 	bl	80023aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006c16:	2240      	movs	r2, #64	; 0x40
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4806      	ldr	r0, [pc, #24]	; (8006c34 <USBD_LL_Init+0x94>)
 8006c1c:	f7fb fb7e 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006c20:	2280      	movs	r2, #128	; 0x80
 8006c22:	2101      	movs	r1, #1
 8006c24:	4803      	ldr	r0, [pc, #12]	; (8006c34 <USBD_LL_Init+0x94>)
 8006c26:	f7fb fb79 	bl	800231c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20001628 	.word	0x20001628

08006c38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fa fa68 	bl	8001124 <HAL_PCD_Start>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 f942 	bl	8006ee4 <USBD_Get_USB_Status>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	4608      	mov	r0, r1
 8006c78:	4611      	mov	r1, r2
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	70fb      	strb	r3, [r7, #3]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70bb      	strb	r3, [r7, #2]
 8006c84:	4613      	mov	r3, r2
 8006c86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c96:	78bb      	ldrb	r3, [r7, #2]
 8006c98:	883a      	ldrh	r2, [r7, #0]
 8006c9a:	78f9      	ldrb	r1, [r7, #3]
 8006c9c:	f7fa ff39 	bl	8001b12 <HAL_PCD_EP_Open>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f91c 	bl	8006ee4 <USBD_Get_USB_Status>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fa ff82 	bl	8001be2 <HAL_PCD_EP_Close>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 f8fd 	bl	8006ee4 <USBD_Get_USB_Status>
 8006cea:	4603      	mov	r3, r0
 8006cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d12:	78fa      	ldrb	r2, [r7, #3]
 8006d14:	4611      	mov	r1, r2
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fb f85a 	bl	8001dd0 <HAL_PCD_EP_SetStall>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f8de 	bl	8006ee4 <USBD_Get_USB_Status>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	4611      	mov	r1, r2
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fb f89f 	bl	8001e98 <HAL_PCD_EP_ClrStall>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f8bf 	bl	8006ee4 <USBD_Get_USB_Status>
 8006d66:	4603      	mov	r3, r0
 8006d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da0b      	bge.n	8006da8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	440b      	add	r3, r1
 8006da2:	333e      	adds	r3, #62	; 0x3e
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	e00b      	b.n	8006dc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dae:	68f9      	ldr	r1, [r7, #12]
 8006db0:	4613      	mov	r3, r2
 8006db2:	00db      	lsls	r3, r3, #3
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006dbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006de6:	78fa      	ldrb	r2, [r7, #3]
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fa fe6c 	bl	8001ac8 <HAL_PCD_SetAddress>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f874 	bl	8006ee4 <USBD_Get_USB_Status>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b086      	sub	sp, #24
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
 8006e16:	460b      	mov	r3, r1
 8006e18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e28:	7af9      	ldrb	r1, [r7, #11]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	f7fa ff85 	bl	8001d3c <HAL_PCD_EP_Transmit>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e36:	7dfb      	ldrb	r3, [r7, #23]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f000 f853 	bl	8006ee4 <USBD_Get_USB_Status>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	607a      	str	r2, [r7, #4]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e6a:	7af9      	ldrb	r1, [r7, #11]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	f7fa ff01 	bl	8001c76 <HAL_PCD_EP_Receive>
 8006e74:	4603      	mov	r3, r0
 8006e76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f832 	bl	8006ee4 <USBD_Get_USB_Status>
 8006e80:	4603      	mov	r3, r0
 8006e82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006e84:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f7fa ff31 	bl	8001d0c <HAL_PCD_EP_GetRxCount>
 8006eaa:	4603      	mov	r3, r0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ebc:	4b03      	ldr	r3, [pc, #12]	; (8006ecc <USBD_static_malloc+0x18>)
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	20001b34 	.word	0x20001b34

08006ed0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d817      	bhi.n	8006f28 <USBD_Get_USB_Status+0x44>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <USBD_Get_USB_Status+0x1c>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f11 	.word	0x08006f11
 8006f04:	08006f17 	.word	0x08006f17
 8006f08:	08006f1d 	.word	0x08006f1d
 8006f0c:	08006f23 	.word	0x08006f23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	73fb      	strb	r3, [r7, #15]
    break;
 8006f14:	e00b      	b.n	8006f2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f16:	2303      	movs	r3, #3
 8006f18:	73fb      	strb	r3, [r7, #15]
    break;
 8006f1a:	e008      	b.n	8006f2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f20:	e005      	b.n	8006f2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f22:	2303      	movs	r3, #3
 8006f24:	73fb      	strb	r3, [r7, #15]
    break;
 8006f26:	e002      	b.n	8006f2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	bf00      	nop
  }
  return usb_status;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <memset>:
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d100      	bne.n	8006f46 <memset+0xa>
 8006f44:	4770      	bx	lr
 8006f46:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4a:	e7f9      	b.n	8006f40 <memset+0x4>

08006f4c <__libc_init_array>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4d0d      	ldr	r5, [pc, #52]	; (8006f84 <__libc_init_array+0x38>)
 8006f50:	4c0d      	ldr	r4, [pc, #52]	; (8006f88 <__libc_init_array+0x3c>)
 8006f52:	1b64      	subs	r4, r4, r5
 8006f54:	10a4      	asrs	r4, r4, #2
 8006f56:	2600      	movs	r6, #0
 8006f58:	42a6      	cmp	r6, r4
 8006f5a:	d109      	bne.n	8006f70 <__libc_init_array+0x24>
 8006f5c:	4d0b      	ldr	r5, [pc, #44]	; (8006f8c <__libc_init_array+0x40>)
 8006f5e:	4c0c      	ldr	r4, [pc, #48]	; (8006f90 <__libc_init_array+0x44>)
 8006f60:	f000 f826 	bl	8006fb0 <_init>
 8006f64:	1b64      	subs	r4, r4, r5
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	2600      	movs	r6, #0
 8006f6a:	42a6      	cmp	r6, r4
 8006f6c:	d105      	bne.n	8006f7a <__libc_init_array+0x2e>
 8006f6e:	bd70      	pop	{r4, r5, r6, pc}
 8006f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f74:	4798      	blx	r3
 8006f76:	3601      	adds	r6, #1
 8006f78:	e7ee      	b.n	8006f58 <__libc_init_array+0xc>
 8006f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7e:	4798      	blx	r3
 8006f80:	3601      	adds	r6, #1
 8006f82:	e7f2      	b.n	8006f6a <__libc_init_array+0x1e>
 8006f84:	08007038 	.word	0x08007038
 8006f88:	08007038 	.word	0x08007038
 8006f8c:	08007038 	.word	0x08007038
 8006f90:	0800703c 	.word	0x0800703c

08006f94 <memcpy>:
 8006f94:	440a      	add	r2, r1
 8006f96:	4291      	cmp	r1, r2
 8006f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f9c:	d100      	bne.n	8006fa0 <memcpy+0xc>
 8006f9e:	4770      	bx	lr
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006faa:	4291      	cmp	r1, r2
 8006fac:	d1f9      	bne.n	8006fa2 <memcpy+0xe>
 8006fae:	bd10      	pop	{r4, pc}

08006fb0 <_init>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr

08006fbc <_fini>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

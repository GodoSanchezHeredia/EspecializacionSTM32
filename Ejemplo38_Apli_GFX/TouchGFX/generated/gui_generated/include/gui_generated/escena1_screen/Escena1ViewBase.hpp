/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ESCENA1VIEWBASE_HPP
#define ESCENA1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/escena1_screen/Escena1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>

class Escena1ViewBase : public touchgfx::View<Escena1Presenter>
{
public:
    Escena1ViewBase();
    virtual ~Escena1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void ToggleLed1()
    {
        // Override and implement this function in Escena1
    }
    virtual void ToggleLed2()
    {
        // Override and implement this function in Escena1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Box box1;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::ToggleButton toggleButton2;
    touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  flexButton1;

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Escena1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Escena1ViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // ESCENA1VIEWBASE_HPP

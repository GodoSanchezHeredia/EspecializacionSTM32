
Ejemplo9_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003914  08003914  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003914  08003914  00013914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800391c  0800391c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800391c  0800391c  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003920  08003920  00013920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  0800398c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800398c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009383  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b70  00000000  00000000  0002945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  0002afd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000623  00000000  00000000  0002b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b9f  00000000  00000000  0002be1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b449  00000000  00000000  000439ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092daa  00000000  00000000  0004ee03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026ec  00000000  00000000  000e1bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800388c 	.word	0x0800388c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800388c 	.word	0x0800388c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_ADC1_Init+0x98>)
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <MX_ADC1_Init+0x9c>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_ADC1_Init+0x98>)
 8000596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_ADC1_Init+0x98>)
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_ADC1_Init+0xa0>)
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_ADC1_Init+0x98>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <MX_ADC1_Init+0x98>)
 80005de:	f000 fbaf 	bl	8000d40 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e8:	f000 f96a 	bl	80008c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_ADC1_Init+0x98>)
 80005fe:	f000 fd2f 	bl	8001060 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 f95a 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000084 	.word	0x20000084
 8000618:	40012000 	.word	0x40012000
 800061c:	0f000001 	.word	0x0f000001

08000620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_ADC_MspInit+0x7c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d127      	bne.n	8000692 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000650:	6453      	str	r3, [r2, #68]	; 0x44
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800067a:	2313      	movs	r3, #19
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_ADC_MspInit+0x84>)
 800068e:	f000 fffb 	bl	8001688 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <AnalogRead>:
}

/* USER CODE BEGIN 1 */


uint32_t AnalogRead(uint32_t channel){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]

	   uint32_t ADC_VALUE;

	  ADC_ChannelConfTypeDef sConfig = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]

	    sConfig.Channel = channel;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	    sConfig.Rank = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	613b      	str	r3, [r7, #16]
	    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
	    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4619      	mov	r1, r3
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <AnalogRead+0x60>)
 80006d2:	f000 fcc5 	bl	8001060 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <AnalogRead+0x38>
	    {
	      Error_Handler();
 80006dc:	f000 f8f0 	bl	80008c0 <Error_Handler>
	    }
	    HAL_ADC_Start(&hadc1);
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <AnalogRead+0x60>)
 80006e2:	f000 fb71 	bl	8000dc8 <HAL_ADC_Start>
	    if(HAL_ADC_PollForConversion(&hadc1, 100000)){
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <AnalogRead+0x64>)
 80006e8:	4807      	ldr	r0, [pc, #28]	; (8000708 <AnalogRead+0x60>)
 80006ea:	f000 fc21 	bl	8000f30 <HAL_ADC_PollForConversion>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <AnalogRead+0x54>

	    	ADC_VALUE = HAL_ADC_GetValue(&hadc1);
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <AnalogRead+0x60>)
 80006f6:	f000 fca6 	bl	8001046 <HAL_ADC_GetValue>
 80006fa:	61f8      	str	r0, [r7, #28]
	    }

	    return ADC_VALUE;
 80006fc:	69fb      	ldr	r3, [r7, #28]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000084 	.word	0x20000084
 800070c:	000186a0 	.word	0x000186a0

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_GPIO_Init+0x4c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <MX_GPIO_Init+0x4c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <MX_GPIO_Init+0x4c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_GPIO_Init+0x4c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <MX_GPIO_Init+0x4c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_GPIO_Init+0x4c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	  HAL_UART_Transmit(&huart2, (const uint8_t *)&ch, (uint16_t)1, HAL_MAX_DELAY);
 8000768:	1d39      	adds	r1, r7, #4
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	2201      	movs	r2, #1
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <__io_putchar+0x20>)
 8000772:	f001 fdf2 	bl	800235a <HAL_UART_Transmit>

	  return ch;
 8000776:	687b      	ldr	r3, [r7, #4]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000d8 	.word	0x200000d8

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fa44 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f830 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff ffbe 	bl	8000710 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000794:	f7ff fef2 	bl	800057c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000798:	f000 f9a0 	bl	8000adc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 adc[0] =  	AnalogRead(ADC_CHANNEL_0);
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff ff83 	bl	80006a8 <AnalogRead>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <main+0x64>)
 80007a8:	801a      	strh	r2, [r3, #0]
	 adc[1] = 	AnalogRead(ADC_CHANNEL_1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff7c 	bl	80006a8 <AnalogRead>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <main+0x64>)
 80007b6:	805a      	strh	r2, [r3, #2]
	 adc[2] =	AnalogRead(ADC_CHANNEL_4);
 80007b8:	2004      	movs	r0, #4
 80007ba:	f7ff ff75 	bl	80006a8 <AnalogRead>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x64>)
 80007c4:	809a      	strh	r2, [r3, #4]

	 printf("ADC0->%u   ADC1->%u   ADC4->%u   \n\r",adc[0],adc[1],adc[2]);
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <main+0x64>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	4619      	mov	r1, r3
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <main+0x64>)
 80007ce:	885b      	ldrh	r3, [r3, #2]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <main+0x64>)
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <main+0x68>)
 80007d8:	f002 f9e4 	bl	8002ba4 <iprintf>
	 HAL_Delay(500);
 80007dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007e0:	f000 fa8a 	bl	8000cf8 <HAL_Delay>
	 adc[0] =  	AnalogRead(ADC_CHANNEL_0);
 80007e4:	e7da      	b.n	800079c <main+0x18>
 80007e6:	bf00      	nop
 80007e8:	200000cc 	.word	0x200000cc
 80007ec:	080038a4 	.word	0x080038a4

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2230      	movs	r2, #48	; 0x30
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f002 fa25 	bl	8002c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <SystemClock_Config+0xc8>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	4a26      	ldr	r2, [pc, #152]	; (80008b8 <SystemClock_Config+0xc8>)
 800081e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000822:	6413      	str	r3, [r2, #64]	; 0x40
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <SystemClock_Config+0xc8>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b21      	ldr	r3, [pc, #132]	; (80008bc <SystemClock_Config+0xcc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <SystemClock_Config+0xcc>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <SystemClock_Config+0xcc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000860:	2304      	movs	r3, #4
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000864:	2364      	movs	r3, #100	; 0x64
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f88b 	bl	8001990 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000880:	f000 f81e 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000888:	2302      	movs	r3, #2
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	2103      	movs	r1, #3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 faed 	bl	8001e80 <HAL_RCC_ClockConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008ac:	f000 f808 	bl	80008c0 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3750      	adds	r7, #80	; 0x50
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	; 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <NMI_Handler+0x4>

08000922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000926:	e7fe      	b.n	8000926 <HardFault_Handler+0x4>

08000928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800092c:	e7fe      	b.n	800092c <MemManage_Handler+0x4>

0800092e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <UsageFault_Handler+0x4>

0800093a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f9a6 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00a      	b.n	8000998 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000982:	f3af 8000 	nop.w
 8000986:	4601      	mov	r1, r0
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	60ba      	str	r2, [r7, #8]
 800098e:	b2ca      	uxtb	r2, r1
 8000990:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3301      	adds	r3, #1
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	dbf0      	blt.n	8000982 <_read+0x12>
  }

  return len;
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b086      	sub	sp, #24
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	60f8      	str	r0, [r7, #12]
 80009b2:	60b9      	str	r1, [r7, #8]
 80009b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	e009      	b.n	80009d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	60ba      	str	r2, [r7, #8]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fecb 	bl	8000760 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	3301      	adds	r3, #1
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697a      	ldr	r2, [r7, #20]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dbf1      	blt.n	80009bc <_write+0x12>
  }
  return len;
 80009d8:	687b      	ldr	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <_close>:

int _close(int file)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_isatty>:

int _isatty(int file)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 f936 	bl	8002cec <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20020000 	.word	0x20020000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	200000d4 	.word	0x200000d4
 8000ab4:	20000270 	.word	0x20000270

08000ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART2_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f001 fbd4 	bl	80022c0 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f7ff fecf 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40004400 	.word	0x40004400

08000b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12b      	bne.n	8000baa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <HAL_UART_MspInit+0x8c>)
 8000ba6:	f000 fd6f 	bl	8001688 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ff65 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f002 f883 	bl	8002cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fdc7 	bl	8000784 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c04:	08003924 	.word	0x08003924
  ldr r2, =_sbss
 8000c08:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c0c:	2000026c 	.word	0x2000026c

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 fcef 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	200f      	movs	r0, #15
 8000c44:	f000 f808 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fe40 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 fcf9 	bl	800166e <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 fccf 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	2000011c 	.word	0x2000011c

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	2000011c 	.word	0x2000011c

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e033      	b.n	8000dbe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fc5e 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2200      	movs	r2, #0
 8000d68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d118      	bne.n	8000db0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d86:	f023 0302 	bic.w	r3, r3, #2
 8000d8a:	f043 0202 	orr.w	r2, r3, #2
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 fa96 	bl	80012c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f023 0303 	bic.w	r3, r3, #3
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	641a      	str	r2, [r3, #64]	; 0x40
 8000dae:	e001      	b.n	8000db4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d101      	bne.n	8000de2 <HAL_ADC_Start+0x1a>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e097      	b.n	8000f12 <HAL_ADC_Start+0x14a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2201      	movs	r2, #1
 8000de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d018      	beq.n	8000e2a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0201 	orr.w	r2, r2, #1
 8000e06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e08:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <HAL_ADC_Start+0x158>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <HAL_ADC_Start+0x15c>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9a      	lsrs	r2, r3, #18
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e1c:	e002      	b.n	8000e24 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f9      	bne.n	8000e1e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d15f      	bne.n	8000ef8 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d007      	beq.n	8000e6a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e76:	d106      	bne.n	8000e86 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7c:	f023 0206 	bic.w	r2, r3, #6
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	645a      	str	r2, [r3, #68]	; 0x44
 8000e84:	e002      	b.n	8000e8c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <HAL_ADC_Start+0x160>)
 8000e96:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ea0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 031f 	and.w	r3, r3, #31
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10f      	bne.n	8000ece <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d129      	bne.n	8000f10 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	e020      	b.n	8000f10 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_ADC_Start+0x164>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d11b      	bne.n	8000f10 <HAL_ADC_Start+0x148>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d114      	bne.n	8000f10 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	e00b      	b.n	8000f10 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f043 0210 	orr.w	r2, r3, #16
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f08:	f043 0201 	orr.w	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	40012300 	.word	0x40012300
 8000f2c:	40012000 	.word	0x40012000

08000f30 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4c:	d113      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f5c:	d10b      	bne.n	8000f76 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f043 0220 	orr.w	r2, r3, #32
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e063      	b.n	800103e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000f76:	f7ff feb3 	bl	8000ce0 <HAL_GetTick>
 8000f7a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f7c:	e021      	b.n	8000fc2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d01d      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <HAL_ADC_PollForConversion+0x6c>
 8000f8c:	f7ff fea8 	bl	8000ce0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d212      	bcs.n	8000fc2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d00b      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f043 0204 	orr.w	r2, r3, #4
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e03d      	b.n	800103e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d1d6      	bne.n	8000f7e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f06f 0212 	mvn.w	r2, #18
 8000fd8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d123      	bne.n	800103c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d11f      	bne.n	800103c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001014:	2b00      	cmp	r3, #0
 8001016:	d111      	bne.n	800103c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d105      	bne.n	800103c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f043 0201 	orr.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001074:	2b01      	cmp	r3, #1
 8001076:	d101      	bne.n	800107c <HAL_ADC_ConfigChannel+0x1c>
 8001078:	2302      	movs	r3, #2
 800107a:	e113      	b.n	80012a4 <HAL_ADC_ConfigChannel+0x244>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b09      	cmp	r3, #9
 800108a:	d925      	bls.n	80010d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68d9      	ldr	r1, [r3, #12]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	b29b      	uxth	r3, r3
 8001098:	461a      	mov	r2, r3
 800109a:	4613      	mov	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	3b1e      	subs	r3, #30
 80010a2:	2207      	movs	r2, #7
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43da      	mvns	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	400a      	ands	r2, r1
 80010b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	4603      	mov	r3, r0
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4403      	add	r3, r0
 80010ca:	3b1e      	subs	r3, #30
 80010cc:	409a      	lsls	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	e022      	b.n	800111e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6919      	ldr	r1, [r3, #16]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	2207      	movs	r2, #7
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	400a      	ands	r2, r1
 80010fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6919      	ldr	r1, [r3, #16]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	4603      	mov	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4403      	add	r3, r0
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b06      	cmp	r3, #6
 8001124:	d824      	bhi.n	8001170 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3b05      	subs	r3, #5
 8001138:	221f      	movs	r2, #31
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b05      	subs	r3, #5
 8001162:	fa00 f203 	lsl.w	r2, r0, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
 800116e:	e04c      	b.n	800120a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b0c      	cmp	r3, #12
 8001176:	d824      	bhi.n	80011c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	3b23      	subs	r3, #35	; 0x23
 800118a:	221f      	movs	r2, #31
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43da      	mvns	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	400a      	ands	r2, r1
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	4618      	mov	r0, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b23      	subs	r3, #35	; 0x23
 80011b4:	fa00 f203 	lsl.w	r2, r0, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
 80011c0:	e023      	b.n	800120a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	3b41      	subs	r3, #65	; 0x41
 80011d4:	221f      	movs	r2, #31
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	400a      	ands	r2, r1
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	3b41      	subs	r3, #65	; 0x41
 80011fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_ADC_ConfigChannel+0x250>)
 800120c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_ADC_ConfigChannel+0x254>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d10f      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1d8>
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b12      	cmp	r3, #18
 800121e:	d10b      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_ADC_ConfigChannel+0x254>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_ADC_ConfigChannel+0x23a>
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_ADC_ConfigChannel+0x258>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d003      	beq.n	8001254 <HAL_ADC_ConfigChannel+0x1f4>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b11      	cmp	r3, #17
 8001252:	d122      	bne.n	800129a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a11      	ldr	r2, [pc, #68]	; (80012b8 <HAL_ADC_ConfigChannel+0x258>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d111      	bne.n	800129a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_ADC_ConfigChannel+0x25c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_ADC_ConfigChannel+0x260>)
 800127c:	fba2 2303 	umull	r2, r3, r2, r3
 8001280:	0c9a      	lsrs	r2, r3, #18
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800128c:	e002      	b.n	8001294 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	3b01      	subs	r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f9      	bne.n	800128e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	40012300 	.word	0x40012300
 80012b4:	40012000 	.word	0x40012000
 80012b8:	10000012 	.word	0x10000012
 80012bc:	20000000 	.word	0x20000000
 80012c0:	431bde83 	.word	0x431bde83

080012c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012cc:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <ADC_Init+0x1f0>)
 80012ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6859      	ldr	r1, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	021a      	lsls	r2, r3, #8
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800131c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800133e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6899      	ldr	r1, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <ADC_Init+0x1f4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d022      	beq.n	80013a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800136a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6899      	ldr	r1, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800138c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6899      	ldr	r1, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	e00f      	b.n	80013c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0202 	bic.w	r2, r2, #2
 80013d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7e1b      	ldrb	r3, [r3, #24]
 80013dc:	005a      	lsls	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d01b      	beq.n	8001428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800140e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6859      	ldr	r1, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	3b01      	subs	r3, #1
 800141c:	035a      	lsls	r2, r3, #13
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	e007      	b.n	8001438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	3b01      	subs	r3, #1
 8001454:	051a      	lsls	r2, r3, #20
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800146c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6899      	ldr	r1, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800147a:	025a      	lsls	r2, r3, #9
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	029a      	lsls	r2, r3, #10
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	609a      	str	r2, [r3, #8]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	40012300 	.word	0x40012300
 80014b8:	0f000001 	.word	0x0f000001

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff47 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff5c 	bl	8001504 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffb0 	bl	80015dc <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b089      	sub	sp, #36	; 0x24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e159      	b.n	8001958 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016a4:	2201      	movs	r2, #1
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8148 	bne.w	8001952 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d005      	beq.n	80016da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d130      	bne.n	800173c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	091b      	lsrs	r3, r3, #4
 8001726:	f003 0201 	and.w	r2, r3, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b03      	cmp	r3, #3
 8001746:	d017      	beq.n	8001778 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d123      	bne.n	80017cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001790:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	220f      	movs	r2, #15
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	691a      	ldr	r2, [r3, #16]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3208      	adds	r2, #8
 80017c6:	69b9      	ldr	r1, [r7, #24]
 80017c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a2 	beq.w	8001952 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a56      	ldr	r2, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b54      	ldr	r3, [pc, #336]	; (8001970 <HAL_GPIO_Init+0x2e8>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800182a:	4a52      	ldr	r2, [pc, #328]	; (8001974 <HAL_GPIO_Init+0x2ec>)
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3302      	adds	r3, #2
 8001832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	220f      	movs	r2, #15
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a49      	ldr	r2, [pc, #292]	; (8001978 <HAL_GPIO_Init+0x2f0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x202>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a48      	ldr	r2, [pc, #288]	; (800197c <HAL_GPIO_Init+0x2f4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x1fe>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a47      	ldr	r2, [pc, #284]	; (8001980 <HAL_GPIO_Init+0x2f8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x1fa>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a46      	ldr	r2, [pc, #280]	; (8001984 <HAL_GPIO_Init+0x2fc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x1f6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a45      	ldr	r2, [pc, #276]	; (8001988 <HAL_GPIO_Init+0x300>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x1f2>
 8001876:	2304      	movs	r3, #4
 8001878:	e008      	b.n	800188c <HAL_GPIO_Init+0x204>
 800187a:	2307      	movs	r3, #7
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x204>
 800187e:	2303      	movs	r3, #3
 8001880:	e004      	b.n	800188c <HAL_GPIO_Init+0x204>
 8001882:	2302      	movs	r3, #2
 8001884:	e002      	b.n	800188c <HAL_GPIO_Init+0x204>
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x204>
 800188a:	2300      	movs	r3, #0
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	f002 0203 	and.w	r2, r2, #3
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	4093      	lsls	r3, r2
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189c:	4935      	ldr	r1, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x2ec>)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_GPIO_Init+0x304>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ce:	4a2f      	ldr	r2, [pc, #188]	; (800198c <HAL_GPIO_Init+0x304>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_GPIO_Init+0x304>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_GPIO_Init+0x304>)
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <HAL_GPIO_Init+0x304>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001922:	4a1a      	ldr	r2, [pc, #104]	; (800198c <HAL_GPIO_Init+0x304>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_GPIO_Init+0x304>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800194c:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_GPIO_Init+0x304>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2b0f      	cmp	r3, #15
 800195c:	f67f aea2 	bls.w	80016a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40013800 	.word	0x40013800
 8001978:	40020000 	.word	0x40020000
 800197c:	40020400 	.word	0x40020400
 8001980:	40020800 	.word	0x40020800
 8001984:	40020c00 	.word	0x40020c00
 8001988:	40021000 	.word	0x40021000
 800198c:	40013c00 	.word	0x40013c00

08001990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e267      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d075      	beq.n	8001a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d00c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ba:	4b85      	ldr	r3, [pc, #532]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d112      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c6:	4b82      	ldr	r3, [pc, #520]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019d2:	d10b      	bne.n	80019ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	4b7e      	ldr	r3, [pc, #504]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x108>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d157      	bne.n	8001a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e242      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d106      	bne.n	8001a04 <HAL_RCC_OscConfig+0x74>
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	e01d      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x98>
 8001a0e:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6f      	ldr	r2, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b6d      	ldr	r3, [pc, #436]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a6c      	ldr	r2, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0xb0>
 8001a28:	4b69      	ldr	r3, [pc, #420]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a68      	ldr	r2, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a65      	ldr	r2, [pc, #404]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d013      	beq.n	8001a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f94a 	bl	8000ce0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f946 	bl	8000ce0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e207      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0xc0>
 8001a6e:	e014      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f936 	bl	8000ce0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a78:	f7ff f932 	bl	8000ce0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b64      	cmp	r3, #100	; 0x64
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1f3      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0xe8>
 8001a96:	e000      	b.n	8001a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d063      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aa6:	4b4a      	ldr	r3, [pc, #296]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001abe:	4b44      	ldr	r3, [pc, #272]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d116      	bne.n	8001af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aca:	4b41      	ldr	r3, [pc, #260]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1c7      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	e03a      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d020      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff f8eb 	bl	8000ce0 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff f8e7 	bl	8000ce0 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e1a8      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	4b28      	ldr	r3, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4925      	ldr	r1, [pc, #148]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	e015      	b.n	8001b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <HAL_RCC_OscConfig+0x244>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7ff f8ca 	bl	8000ce0 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff f8c6 	bl	8000ce0 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e187      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d036      	beq.n	8001be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d016      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f8aa 	bl	8000ce0 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b90:	f7ff f8a6 	bl	8000ce0 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e167      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x200>
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x248>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff f893 	bl	8000ce0 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	e00e      	b.n	8001bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff f88f 	bl	8000ce0 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d907      	bls.n	8001bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e150      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470000 	.word	0x42470000
 8001bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b88      	ldr	r3, [pc, #544]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ea      	bne.n	8001bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10f      	bne.n	8001c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b7d      	ldr	r3, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	4a7c      	ldr	r2, [pc, #496]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c14:	6413      	str	r3, [r2, #64]	; 0x40
 8001c16:	4b7a      	ldr	r3, [pc, #488]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b77      	ldr	r3, [pc, #476]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d118      	bne.n	8001c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a73      	ldr	r2, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f84f 	bl	8000ce0 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c46:	f7ff f84b 	bl	8000ce0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e10c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x474>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d106      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2ea>
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a63      	ldr	r2, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x30c>
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	4a5e      	ldr	r2, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c88:	f043 0304 	orr.w	r3, r3, #4
 8001c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8e:	4b5c      	ldr	r3, [pc, #368]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	4a5b      	ldr	r2, [pc, #364]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x324>
 8001c9c:	4b58      	ldr	r3, [pc, #352]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a57      	ldr	r2, [pc, #348]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f023 0301 	bic.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b55      	ldr	r3, [pc, #340]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cae:	f023 0304 	bic.w	r3, r3, #4
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d015      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff f810 	bl	8000ce0 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7ff f80c 	bl	8000ce0 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0cb      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b49      	ldr	r3, [pc, #292]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0ee      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x334>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7fe fffa 	bl	8000ce0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7fe fff6 	bl	8000ce0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0b5      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ee      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a38      	ldr	r2, [pc, #224]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80a1 	beq.w	8001e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4b34      	ldr	r3, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d05c      	beq.n	8001df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d141      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ffca 	bl	8000ce0 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d50:	f7fe ffc6 	bl	8000ce0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e087      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d62:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	491b      	ldr	r1, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9e:	f7fe ff9f 	bl	8000ce0 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da6:	f7fe ff9b 	bl	8000ce0 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e05c      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x416>
 8001dc4:	e054      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <HAL_RCC_OscConfig+0x478>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff88 	bl	8000ce0 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff84 	bl	8000ce0 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e045      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x470>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x444>
 8001df2:	e03d      	b.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e038      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40007000 	.word	0x40007000
 8001e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_RCC_OscConfig+0x4ec>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d028      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d121      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d11a      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0cc      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d90c      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d044      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e06f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e067      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f5e:	4b37      	ldr	r3, [pc, #220]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f023 0203 	bic.w	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	4934      	ldr	r1, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f70:	f7fe feb6 	bl	8000ce0 <HAL_GetTick>
 8001f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe feb2 	bl	8000ce0 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e04f      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 020c 	and.w	r2, r3, #12
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1eb      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa0:	4b25      	ldr	r3, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d20c      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4602      	mov	r2, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	490a      	ldr	r1, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	5ccb      	ldrb	r3, [r1, r3]
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fe16 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00
 800203c:	40023800 	.word	0x40023800
 8002040:	080038c8 	.word	0x080038c8
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002050:	b094      	sub	sp, #80	; 0x50
 8002052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
 8002058:	2300      	movs	r3, #0
 800205a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800205c:	2300      	movs	r3, #0
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002064:	4b79      	ldr	r3, [pc, #484]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b08      	cmp	r3, #8
 800206e:	d00d      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x40>
 8002070:	2b08      	cmp	r3, #8
 8002072:	f200 80e1 	bhi.w	8002238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x34>
 800207a:	2b04      	cmp	r3, #4
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x3a>
 800207e:	e0db      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_GetSysClockFreq+0x204>)
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002084:	e0db      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002086:	4b73      	ldr	r3, [pc, #460]	; (8002254 <HAL_RCC_GetSysClockFreq+0x208>)
 8002088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800208a:	e0d8      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208c:	4b6f      	ldr	r3, [pc, #444]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002094:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002096:	4b6d      	ldr	r3, [pc, #436]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	2200      	movs	r2, #0
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
 80020b6:	2300      	movs	r3, #0
 80020b8:	637b      	str	r3, [r7, #52]	; 0x34
 80020ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80020be:	4622      	mov	r2, r4
 80020c0:	462b      	mov	r3, r5
 80020c2:	f04f 0000 	mov.w	r0, #0
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	0159      	lsls	r1, r3, #5
 80020cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d0:	0150      	lsls	r0, r2, #5
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4621      	mov	r1, r4
 80020d8:	1a51      	subs	r1, r2, r1
 80020da:	6139      	str	r1, [r7, #16]
 80020dc:	4629      	mov	r1, r5
 80020de:	eb63 0301 	sbc.w	r3, r3, r1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f0:	4659      	mov	r1, fp
 80020f2:	018b      	lsls	r3, r1, #6
 80020f4:	4651      	mov	r1, sl
 80020f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fa:	4651      	mov	r1, sl
 80020fc:	018a      	lsls	r2, r1, #6
 80020fe:	4651      	mov	r1, sl
 8002100:	ebb2 0801 	subs.w	r8, r2, r1
 8002104:	4659      	mov	r1, fp
 8002106:	eb63 0901 	sbc.w	r9, r3, r1
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800211a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800211e:	4690      	mov	r8, r2
 8002120:	4699      	mov	r9, r3
 8002122:	4623      	mov	r3, r4
 8002124:	eb18 0303 	adds.w	r3, r8, r3
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	462b      	mov	r3, r5
 800212c:	eb49 0303 	adc.w	r3, r9, r3
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	f04f 0300 	mov.w	r3, #0
 800213a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800213e:	4629      	mov	r1, r5
 8002140:	024b      	lsls	r3, r1, #9
 8002142:	4621      	mov	r1, r4
 8002144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002148:	4621      	mov	r1, r4
 800214a:	024a      	lsls	r2, r1, #9
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002152:	2200      	movs	r2, #0
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
 8002156:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800215c:	f7fe f890 	bl	8000280 <__aeabi_uldivmod>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4613      	mov	r3, r2
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002168:	e058      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	099b      	lsrs	r3, r3, #6
 8002170:	2200      	movs	r2, #0
 8002172:	4618      	mov	r0, r3
 8002174:	4611      	mov	r1, r2
 8002176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800217a:	623b      	str	r3, [r7, #32]
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
 8002180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002184:	4642      	mov	r2, r8
 8002186:	464b      	mov	r3, r9
 8002188:	f04f 0000 	mov.w	r0, #0
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	0159      	lsls	r1, r3, #5
 8002192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002196:	0150      	lsls	r0, r2, #5
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4641      	mov	r1, r8
 800219e:	ebb2 0a01 	subs.w	sl, r2, r1
 80021a2:	4649      	mov	r1, r9
 80021a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021bc:	ebb2 040a 	subs.w	r4, r2, sl
 80021c0:	eb63 050b 	sbc.w	r5, r3, fp
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	00eb      	lsls	r3, r5, #3
 80021ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021d2:	00e2      	lsls	r2, r4, #3
 80021d4:	4614      	mov	r4, r2
 80021d6:	461d      	mov	r5, r3
 80021d8:	4643      	mov	r3, r8
 80021da:	18e3      	adds	r3, r4, r3
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	464b      	mov	r3, r9
 80021e0:	eb45 0303 	adc.w	r3, r5, r3
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021f2:	4629      	mov	r1, r5
 80021f4:	028b      	lsls	r3, r1, #10
 80021f6:	4621      	mov	r1, r4
 80021f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021fc:	4621      	mov	r1, r4
 80021fe:	028a      	lsls	r2, r1, #10
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002206:	2200      	movs	r2, #0
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	61fa      	str	r2, [r7, #28]
 800220c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002210:	f7fe f836 	bl	8000280 <__aeabi_uldivmod>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4613      	mov	r3, r2
 800221a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetSysClockFreq+0x200>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	3301      	adds	r3, #1
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800222c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800222e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002236:	e002      	b.n	800223e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetSysClockFreq+0x204>)
 800223a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800223c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002240:	4618      	mov	r0, r3
 8002242:	3750      	adds	r7, #80	; 0x50
 8002244:	46bd      	mov	sp, r7
 8002246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	00f42400 	.word	0x00f42400
 8002254:	007a1200 	.word	0x007a1200

08002258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_GetHCLKFreq+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff0 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0a9b      	lsrs	r3, r3, #10
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	080038d8 	.word	0x080038d8

08002298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800229c:	f7ff ffdc 	bl	8002258 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	0b5b      	lsrs	r3, r3, #13
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	080038d8 	.word	0x080038d8

080022c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03f      	b.n	8002352 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fc22 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f929 	bl	800255c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b08a      	sub	sp, #40	; 0x28
 800235e:	af02      	add	r7, sp, #8
 8002360:	60f8      	str	r0, [r7, #12]
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	d17c      	bne.n	8002474 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_UART_Transmit+0x2c>
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e075      	b.n	8002476 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_UART_Transmit+0x3e>
 8002394:	2302      	movs	r3, #2
 8002396:	e06e      	b.n	8002476 <HAL_UART_Transmit+0x11c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2221      	movs	r2, #33	; 0x21
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023ae:	f7fe fc97 	bl	8000ce0 <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	88fa      	ldrh	r2, [r7, #6]
 80023b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	88fa      	ldrh	r2, [r7, #6]
 80023be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d108      	bne.n	80023dc <HAL_UART_Transmit+0x82>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d104      	bne.n	80023dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e003      	b.n	80023e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023ec:	e02a      	b.n	8002444 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2180      	movs	r1, #128	; 0x80
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f840 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e036      	b.n	8002476 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10b      	bne.n	8002426 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800241c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	3302      	adds	r3, #2
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	e007      	b.n	8002436 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	781a      	ldrb	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	3301      	adds	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1cf      	bne.n	80023ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2200      	movs	r2, #0
 8002456:	2140      	movs	r1, #64	; 0x40
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f810 	bl	800247e <UART_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e006      	b.n	8002476 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2220      	movs	r2, #32
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	e000      	b.n	8002476 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002474:	2302      	movs	r3, #2
  }
}
 8002476:	4618      	mov	r0, r3
 8002478:	3720      	adds	r7, #32
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b090      	sub	sp, #64	; 0x40
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248e:	e050      	b.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d04c      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
 800249e:	f7fe fc1f 	bl	8000ce0 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d241      	bcs.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	330c      	adds	r3, #12
 80024cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ce:	637a      	str	r2, [r7, #52]	; 0x34
 80024d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024d6:	e841 2300 	strex	r3, r2, [r1]
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1e5      	bne.n	80024ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3314      	adds	r3, #20
 80024e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	613b      	str	r3, [r7, #16]
   return(result);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3314      	adds	r3, #20
 8002500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002502:	623a      	str	r2, [r7, #32]
 8002504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002506:	69f9      	ldr	r1, [r7, #28]
 8002508:	6a3a      	ldr	r2, [r7, #32]
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1e5      	bne.n	80024e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e00f      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	429a      	cmp	r2, r3
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	429a      	cmp	r2, r3
 800254e:	d09f      	beq.n	8002490 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3740      	adds	r7, #64	; 0x40
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800255c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002560:	b0c0      	sub	sp, #256	; 0x100
 8002562:	af00      	add	r7, sp, #0
 8002564:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002578:	68d9      	ldr	r1, [r3, #12]
 800257a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	ea40 0301 	orr.w	r3, r0, r1
 8002584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	431a      	orrs	r2, r3
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025b4:	f021 010c 	bic.w	r1, r1, #12
 80025b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025c2:	430b      	orrs	r3, r1
 80025c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	6999      	ldr	r1, [r3, #24]
 80025d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	ea40 0301 	orr.w	r3, r0, r1
 80025e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b8f      	ldr	r3, [pc, #572]	; (8002828 <UART_SetConfig+0x2cc>)
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d005      	beq.n	80025fc <UART_SetConfig+0xa0>
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b8d      	ldr	r3, [pc, #564]	; (800282c <UART_SetConfig+0x2d0>)
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d104      	bne.n	8002606 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025fc:	f7ff fe4c 	bl	8002298 <HAL_RCC_GetPCLK2Freq>
 8002600:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002604:	e003      	b.n	800260e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002606:	f7ff fe33 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 800260a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002618:	f040 810c 	bne.w	8002834 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800261c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002626:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800262a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800262e:	4622      	mov	r2, r4
 8002630:	462b      	mov	r3, r5
 8002632:	1891      	adds	r1, r2, r2
 8002634:	65b9      	str	r1, [r7, #88]	; 0x58
 8002636:	415b      	adcs	r3, r3
 8002638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800263a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800263e:	4621      	mov	r1, r4
 8002640:	eb12 0801 	adds.w	r8, r2, r1
 8002644:	4629      	mov	r1, r5
 8002646:	eb43 0901 	adc.w	r9, r3, r1
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800265a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265e:	4690      	mov	r8, r2
 8002660:	4699      	mov	r9, r3
 8002662:	4623      	mov	r3, r4
 8002664:	eb18 0303 	adds.w	r3, r8, r3
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800266c:	462b      	mov	r3, r5
 800266e:	eb49 0303 	adc.w	r3, r9, r3
 8002672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002682:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002686:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800268a:	460b      	mov	r3, r1
 800268c:	18db      	adds	r3, r3, r3
 800268e:	653b      	str	r3, [r7, #80]	; 0x50
 8002690:	4613      	mov	r3, r2
 8002692:	eb42 0303 	adc.w	r3, r2, r3
 8002696:	657b      	str	r3, [r7, #84]	; 0x54
 8002698:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800269c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80026a0:	f7fd fdee 	bl	8000280 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <UART_SetConfig+0x2d4>)
 80026aa:	fba3 2302 	umull	r2, r3, r3, r2
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	011c      	lsls	r4, r3, #4
 80026b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026c4:	4642      	mov	r2, r8
 80026c6:	464b      	mov	r3, r9
 80026c8:	1891      	adds	r1, r2, r2
 80026ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80026cc:	415b      	adcs	r3, r3
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026d4:	4641      	mov	r1, r8
 80026d6:	eb12 0a01 	adds.w	sl, r2, r1
 80026da:	4649      	mov	r1, r9
 80026dc:	eb43 0b01 	adc.w	fp, r3, r1
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026f4:	4692      	mov	sl, r2
 80026f6:	469b      	mov	fp, r3
 80026f8:	4643      	mov	r3, r8
 80026fa:	eb1a 0303 	adds.w	r3, sl, r3
 80026fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002702:	464b      	mov	r3, r9
 8002704:	eb4b 0303 	adc.w	r3, fp, r3
 8002708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002718:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800271c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002720:	460b      	mov	r3, r1
 8002722:	18db      	adds	r3, r3, r3
 8002724:	643b      	str	r3, [r7, #64]	; 0x40
 8002726:	4613      	mov	r3, r2
 8002728:	eb42 0303 	adc.w	r3, r2, r3
 800272c:	647b      	str	r3, [r7, #68]	; 0x44
 800272e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002732:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002736:	f7fd fda3 	bl	8000280 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4611      	mov	r1, r2
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <UART_SetConfig+0x2d4>)
 8002742:	fba3 2301 	umull	r2, r3, r3, r1
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2264      	movs	r2, #100	; 0x64
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	1acb      	subs	r3, r1, r3
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <UART_SetConfig+0x2d4>)
 8002758:	fba3 2302 	umull	r2, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002764:	441c      	add	r4, r3
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002770:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002774:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002780:	415b      	adcs	r3, r3
 8002782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002784:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6339      	str	r1, [r7, #48]	; 0x30
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	637b      	str	r3, [r7, #52]	; 0x34
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027dc:	460b      	mov	r3, r1
 80027de:	18db      	adds	r3, r3, r3
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027e2:	4613      	mov	r3, r2
 80027e4:	eb42 0303 	adc.w	r3, r2, r3
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027f2:	f7fd fd45 	bl	8000280 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <UART_SetConfig+0x2d4>)
 80027fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	2164      	movs	r1, #100	; 0x64
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	3332      	adds	r3, #50	; 0x32
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <UART_SetConfig+0x2d4>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	095b      	lsrs	r3, r3, #5
 8002816:	f003 0207 	and.w	r2, r3, #7
 800281a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4422      	add	r2, r4
 8002822:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002824:	e106      	b.n	8002a34 <UART_SetConfig+0x4d8>
 8002826:	bf00      	nop
 8002828:	40011000 	.word	0x40011000
 800282c:	40011400 	.word	0x40011400
 8002830:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800283e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002842:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002846:	4642      	mov	r2, r8
 8002848:	464b      	mov	r3, r9
 800284a:	1891      	adds	r1, r2, r2
 800284c:	6239      	str	r1, [r7, #32]
 800284e:	415b      	adcs	r3, r3
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002856:	4641      	mov	r1, r8
 8002858:	1854      	adds	r4, r2, r1
 800285a:	4649      	mov	r1, r9
 800285c:	eb43 0501 	adc.w	r5, r3, r1
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	00eb      	lsls	r3, r5, #3
 800286a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800286e:	00e2      	lsls	r2, r4, #3
 8002870:	4614      	mov	r4, r2
 8002872:	461d      	mov	r5, r3
 8002874:	4643      	mov	r3, r8
 8002876:	18e3      	adds	r3, r4, r3
 8002878:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800287c:	464b      	mov	r3, r9
 800287e:	eb45 0303 	adc.w	r3, r5, r3
 8002882:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002892:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80028a2:	4629      	mov	r1, r5
 80028a4:	008b      	lsls	r3, r1, #2
 80028a6:	4621      	mov	r1, r4
 80028a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028ac:	4621      	mov	r1, r4
 80028ae:	008a      	lsls	r2, r1, #2
 80028b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028b4:	f7fd fce4 	bl	8000280 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <UART_SetConfig+0x4e4>)
 80028be:	fba3 2302 	umull	r2, r3, r3, r2
 80028c2:	095b      	lsrs	r3, r3, #5
 80028c4:	011c      	lsls	r4, r3, #4
 80028c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028ca:	2200      	movs	r2, #0
 80028cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	1891      	adds	r1, r2, r2
 80028de:	61b9      	str	r1, [r7, #24]
 80028e0:	415b      	adcs	r3, r3
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028e8:	4641      	mov	r1, r8
 80028ea:	1851      	adds	r1, r2, r1
 80028ec:	6139      	str	r1, [r7, #16]
 80028ee:	4649      	mov	r1, r9
 80028f0:	414b      	adcs	r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	00cb      	lsls	r3, r1, #3
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800290a:	4651      	mov	r1, sl
 800290c:	00ca      	lsls	r2, r1, #3
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	4603      	mov	r3, r0
 8002914:	4642      	mov	r2, r8
 8002916:	189b      	adds	r3, r3, r2
 8002918:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800291c:	464b      	mov	r3, r9
 800291e:	460a      	mov	r2, r1
 8002920:	eb42 0303 	adc.w	r3, r2, r3
 8002924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	67bb      	str	r3, [r7, #120]	; 0x78
 8002932:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002940:	4649      	mov	r1, r9
 8002942:	008b      	lsls	r3, r1, #2
 8002944:	4641      	mov	r1, r8
 8002946:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294a:	4641      	mov	r1, r8
 800294c:	008a      	lsls	r2, r1, #2
 800294e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002952:	f7fd fc95 	bl	8000280 <__aeabi_uldivmod>
 8002956:	4602      	mov	r2, r0
 8002958:	460b      	mov	r3, r1
 800295a:	4611      	mov	r1, r2
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <UART_SetConfig+0x4e4>)
 800295e:	fba3 2301 	umull	r2, r3, r3, r1
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	2264      	movs	r2, #100	; 0x64
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	1acb      	subs	r3, r1, r3
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	3332      	adds	r3, #50	; 0x32
 8002970:	4a33      	ldr	r2, [pc, #204]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297c:	441c      	add	r4, r3
 800297e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002982:	2200      	movs	r2, #0
 8002984:	673b      	str	r3, [r7, #112]	; 0x70
 8002986:	677a      	str	r2, [r7, #116]	; 0x74
 8002988:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800298c:	4642      	mov	r2, r8
 800298e:	464b      	mov	r3, r9
 8002990:	1891      	adds	r1, r2, r2
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	415b      	adcs	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800299c:	4641      	mov	r1, r8
 800299e:	1851      	adds	r1, r2, r1
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	4649      	mov	r1, r9
 80029a4:	414b      	adcs	r3, r1
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029b4:	4659      	mov	r1, fp
 80029b6:	00cb      	lsls	r3, r1, #3
 80029b8:	4651      	mov	r1, sl
 80029ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029be:	4651      	mov	r1, sl
 80029c0:	00ca      	lsls	r2, r1, #3
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	4603      	mov	r3, r0
 80029c8:	4642      	mov	r2, r8
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80029ce:	464b      	mov	r3, r9
 80029d0:	460a      	mov	r2, r1
 80029d2:	eb42 0303 	adc.w	r3, r2, r3
 80029d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	663b      	str	r3, [r7, #96]	; 0x60
 80029e2:	667a      	str	r2, [r7, #100]	; 0x64
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029f0:	4649      	mov	r1, r9
 80029f2:	008b      	lsls	r3, r1, #2
 80029f4:	4641      	mov	r1, r8
 80029f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029fa:	4641      	mov	r1, r8
 80029fc:	008a      	lsls	r2, r1, #2
 80029fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a02:	f7fd fc3d 	bl	8000280 <__aeabi_uldivmod>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	2164      	movs	r1, #100	; 0x64
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	3332      	adds	r3, #50	; 0x32
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <UART_SetConfig+0x4e4>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4422      	add	r2, r4
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a40:	51eb851f 	.word	0x51eb851f

08002a44 <std>:
 8002a44:	2300      	movs	r3, #0
 8002a46:	b510      	push	{r4, lr}
 8002a48:	4604      	mov	r4, r0
 8002a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a52:	6083      	str	r3, [r0, #8]
 8002a54:	8181      	strh	r1, [r0, #12]
 8002a56:	6643      	str	r3, [r0, #100]	; 0x64
 8002a58:	81c2      	strh	r2, [r0, #14]
 8002a5a:	6183      	str	r3, [r0, #24]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	2208      	movs	r2, #8
 8002a60:	305c      	adds	r0, #92	; 0x5c
 8002a62:	f000 f8f4 	bl	8002c4e <memset>
 8002a66:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <std+0x38>)
 8002a68:	6263      	str	r3, [r4, #36]	; 0x24
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <std+0x3c>)
 8002a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <std+0x40>)
 8002a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <std+0x44>)
 8002a74:	6224      	str	r4, [r4, #32]
 8002a76:	6323      	str	r3, [r4, #48]	; 0x30
 8002a78:	bd10      	pop	{r4, pc}
 8002a7a:	bf00      	nop
 8002a7c:	08002bc9 	.word	0x08002bc9
 8002a80:	08002beb 	.word	0x08002beb
 8002a84:	08002c23 	.word	0x08002c23
 8002a88:	08002c47 	.word	0x08002c47

08002a8c <stdio_exit_handler>:
 8002a8c:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <stdio_exit_handler+0xc>)
 8002a8e:	4903      	ldr	r1, [pc, #12]	; (8002a9c <stdio_exit_handler+0x10>)
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <stdio_exit_handler+0x14>)
 8002a92:	f000 b869 	b.w	8002b68 <_fwalk_sglue>
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c
 8002a9c:	080035e9 	.word	0x080035e9
 8002aa0:	20000018 	.word	0x20000018

08002aa4 <cleanup_stdio>:
 8002aa4:	6841      	ldr	r1, [r0, #4]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <cleanup_stdio+0x34>)
 8002aa8:	4299      	cmp	r1, r3
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
 8002aae:	d001      	beq.n	8002ab4 <cleanup_stdio+0x10>
 8002ab0:	f000 fd9a 	bl	80035e8 <_fflush_r>
 8002ab4:	68a1      	ldr	r1, [r4, #8]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <cleanup_stdio+0x38>)
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	d002      	beq.n	8002ac2 <cleanup_stdio+0x1e>
 8002abc:	4620      	mov	r0, r4
 8002abe:	f000 fd93 	bl	80035e8 <_fflush_r>
 8002ac2:	68e1      	ldr	r1, [r4, #12]
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <cleanup_stdio+0x3c>)
 8002ac6:	4299      	cmp	r1, r3
 8002ac8:	d004      	beq.n	8002ad4 <cleanup_stdio+0x30>
 8002aca:	4620      	mov	r0, r4
 8002acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ad0:	f000 bd8a 	b.w	80035e8 <_fflush_r>
 8002ad4:	bd10      	pop	{r4, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000120 	.word	0x20000120
 8002adc:	20000188 	.word	0x20000188
 8002ae0:	200001f0 	.word	0x200001f0

08002ae4 <global_stdio_init.part.0>:
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <global_stdio_init.part.0+0x30>)
 8002ae8:	4c0b      	ldr	r4, [pc, #44]	; (8002b18 <global_stdio_init.part.0+0x34>)
 8002aea:	4a0c      	ldr	r2, [pc, #48]	; (8002b1c <global_stdio_init.part.0+0x38>)
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	4620      	mov	r0, r4
 8002af0:	2200      	movs	r2, #0
 8002af2:	2104      	movs	r1, #4
 8002af4:	f7ff ffa6 	bl	8002a44 <std>
 8002af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002afc:	2201      	movs	r2, #1
 8002afe:	2109      	movs	r1, #9
 8002b00:	f7ff ffa0 	bl	8002a44 <std>
 8002b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002b08:	2202      	movs	r2, #2
 8002b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b0e:	2112      	movs	r1, #18
 8002b10:	f7ff bf98 	b.w	8002a44 <std>
 8002b14:	20000258 	.word	0x20000258
 8002b18:	20000120 	.word	0x20000120
 8002b1c:	08002a8d 	.word	0x08002a8d

08002b20 <__sfp_lock_acquire>:
 8002b20:	4801      	ldr	r0, [pc, #4]	; (8002b28 <__sfp_lock_acquire+0x8>)
 8002b22:	f000 b90d 	b.w	8002d40 <__retarget_lock_acquire_recursive>
 8002b26:	bf00      	nop
 8002b28:	20000261 	.word	0x20000261

08002b2c <__sfp_lock_release>:
 8002b2c:	4801      	ldr	r0, [pc, #4]	; (8002b34 <__sfp_lock_release+0x8>)
 8002b2e:	f000 b908 	b.w	8002d42 <__retarget_lock_release_recursive>
 8002b32:	bf00      	nop
 8002b34:	20000261 	.word	0x20000261

08002b38 <__sinit>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	f7ff fff0 	bl	8002b20 <__sfp_lock_acquire>
 8002b40:	6a23      	ldr	r3, [r4, #32]
 8002b42:	b11b      	cbz	r3, 8002b4c <__sinit+0x14>
 8002b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b48:	f7ff bff0 	b.w	8002b2c <__sfp_lock_release>
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__sinit+0x28>)
 8002b4e:	6223      	str	r3, [r4, #32]
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__sinit+0x2c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f5      	bne.n	8002b44 <__sinit+0xc>
 8002b58:	f7ff ffc4 	bl	8002ae4 <global_stdio_init.part.0>
 8002b5c:	e7f2      	b.n	8002b44 <__sinit+0xc>
 8002b5e:	bf00      	nop
 8002b60:	08002aa5 	.word	0x08002aa5
 8002b64:	20000258 	.word	0x20000258

08002b68 <_fwalk_sglue>:
 8002b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	4688      	mov	r8, r1
 8002b70:	4614      	mov	r4, r2
 8002b72:	2600      	movs	r6, #0
 8002b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b78:	f1b9 0901 	subs.w	r9, r9, #1
 8002b7c:	d505      	bpl.n	8002b8a <_fwalk_sglue+0x22>
 8002b7e:	6824      	ldr	r4, [r4, #0]
 8002b80:	2c00      	cmp	r4, #0
 8002b82:	d1f7      	bne.n	8002b74 <_fwalk_sglue+0xc>
 8002b84:	4630      	mov	r0, r6
 8002b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b8a:	89ab      	ldrh	r3, [r5, #12]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d907      	bls.n	8002ba0 <_fwalk_sglue+0x38>
 8002b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b94:	3301      	adds	r3, #1
 8002b96:	d003      	beq.n	8002ba0 <_fwalk_sglue+0x38>
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4638      	mov	r0, r7
 8002b9c:	47c0      	blx	r8
 8002b9e:	4306      	orrs	r6, r0
 8002ba0:	3568      	adds	r5, #104	; 0x68
 8002ba2:	e7e9      	b.n	8002b78 <_fwalk_sglue+0x10>

08002ba4 <iprintf>:
 8002ba4:	b40f      	push	{r0, r1, r2, r3}
 8002ba6:	b507      	push	{r0, r1, r2, lr}
 8002ba8:	4906      	ldr	r1, [pc, #24]	; (8002bc4 <iprintf+0x20>)
 8002baa:	ab04      	add	r3, sp, #16
 8002bac:	6808      	ldr	r0, [r1, #0]
 8002bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bb2:	6881      	ldr	r1, [r0, #8]
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	f000 f9e7 	bl	8002f88 <_vfiprintf_r>
 8002bba:	b003      	add	sp, #12
 8002bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bc0:	b004      	add	sp, #16
 8002bc2:	4770      	bx	lr
 8002bc4:	20000064 	.word	0x20000064

08002bc8 <__sread>:
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	460c      	mov	r4, r1
 8002bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd0:	f000 f868 	bl	8002ca4 <_read_r>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	bfab      	itete	ge
 8002bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bda:	89a3      	ldrhlt	r3, [r4, #12]
 8002bdc:	181b      	addge	r3, r3, r0
 8002bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002be2:	bfac      	ite	ge
 8002be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8002be6:	81a3      	strhlt	r3, [r4, #12]
 8002be8:	bd10      	pop	{r4, pc}

08002bea <__swrite>:
 8002bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	461f      	mov	r7, r3
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	4605      	mov	r5, r0
 8002bf6:	460c      	mov	r4, r1
 8002bf8:	4616      	mov	r6, r2
 8002bfa:	d505      	bpl.n	8002c08 <__swrite+0x1e>
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	2302      	movs	r3, #2
 8002c02:	2200      	movs	r2, #0
 8002c04:	f000 f83c 	bl	8002c80 <_lseek_r>
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	4632      	mov	r2, r6
 8002c16:	463b      	mov	r3, r7
 8002c18:	4628      	mov	r0, r5
 8002c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c1e:	f000 b853 	b.w	8002cc8 <_write_r>

08002c22 <__sseek>:
 8002c22:	b510      	push	{r4, lr}
 8002c24:	460c      	mov	r4, r1
 8002c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2a:	f000 f829 	bl	8002c80 <_lseek_r>
 8002c2e:	1c43      	adds	r3, r0, #1
 8002c30:	89a3      	ldrh	r3, [r4, #12]
 8002c32:	bf15      	itete	ne
 8002c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c3e:	81a3      	strheq	r3, [r4, #12]
 8002c40:	bf18      	it	ne
 8002c42:	81a3      	strhne	r3, [r4, #12]
 8002c44:	bd10      	pop	{r4, pc}

08002c46 <__sclose>:
 8002c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4a:	f000 b809 	b.w	8002c60 <_close_r>

08002c4e <memset>:
 8002c4e:	4402      	add	r2, r0
 8002c50:	4603      	mov	r3, r0
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d100      	bne.n	8002c58 <memset+0xa>
 8002c56:	4770      	bx	lr
 8002c58:	f803 1b01 	strb.w	r1, [r3], #1
 8002c5c:	e7f9      	b.n	8002c52 <memset+0x4>
	...

08002c60 <_close_r>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4d06      	ldr	r5, [pc, #24]	; (8002c7c <_close_r+0x1c>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	4604      	mov	r4, r0
 8002c68:	4608      	mov	r0, r1
 8002c6a:	602b      	str	r3, [r5, #0]
 8002c6c:	f7fd feb9 	bl	80009e2 <_close>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_close_r+0x1a>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_close_r+0x1a>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	2000025c 	.word	0x2000025c

08002c80 <_lseek_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	; (8002ca0 <_lseek_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fd fece 	bl	8000a30 <_lseek>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_lseek_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_lseek_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	2000025c 	.word	0x2000025c

08002ca4 <_read_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d07      	ldr	r5, [pc, #28]	; (8002cc4 <_read_r+0x20>)
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4608      	mov	r0, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	602a      	str	r2, [r5, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7fd fe5c 	bl	8000970 <_read>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_read_r+0x1e>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_read_r+0x1e>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	2000025c 	.word	0x2000025c

08002cc8 <_write_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	4d07      	ldr	r5, [pc, #28]	; (8002ce8 <_write_r+0x20>)
 8002ccc:	4604      	mov	r4, r0
 8002cce:	4608      	mov	r0, r1
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	602a      	str	r2, [r5, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	f7fd fe67 	bl	80009aa <_write>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	d102      	bne.n	8002ce6 <_write_r+0x1e>
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	b103      	cbz	r3, 8002ce6 <_write_r+0x1e>
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
 8002ce8:	2000025c 	.word	0x2000025c

08002cec <__errno>:
 8002cec:	4b01      	ldr	r3, [pc, #4]	; (8002cf4 <__errno+0x8>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000064 	.word	0x20000064

08002cf8 <__libc_init_array>:
 8002cf8:	b570      	push	{r4, r5, r6, lr}
 8002cfa:	4d0d      	ldr	r5, [pc, #52]	; (8002d30 <__libc_init_array+0x38>)
 8002cfc:	4c0d      	ldr	r4, [pc, #52]	; (8002d34 <__libc_init_array+0x3c>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	2600      	movs	r6, #0
 8002d04:	42a6      	cmp	r6, r4
 8002d06:	d109      	bne.n	8002d1c <__libc_init_array+0x24>
 8002d08:	4d0b      	ldr	r5, [pc, #44]	; (8002d38 <__libc_init_array+0x40>)
 8002d0a:	4c0c      	ldr	r4, [pc, #48]	; (8002d3c <__libc_init_array+0x44>)
 8002d0c:	f000 fdbe 	bl	800388c <_init>
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	2600      	movs	r6, #0
 8002d16:	42a6      	cmp	r6, r4
 8002d18:	d105      	bne.n	8002d26 <__libc_init_array+0x2e>
 8002d1a:	bd70      	pop	{r4, r5, r6, pc}
 8002d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d20:	4798      	blx	r3
 8002d22:	3601      	adds	r6, #1
 8002d24:	e7ee      	b.n	8002d04 <__libc_init_array+0xc>
 8002d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d2a:	4798      	blx	r3
 8002d2c:	3601      	adds	r6, #1
 8002d2e:	e7f2      	b.n	8002d16 <__libc_init_array+0x1e>
 8002d30:	0800391c 	.word	0x0800391c
 8002d34:	0800391c 	.word	0x0800391c
 8002d38:	0800391c 	.word	0x0800391c
 8002d3c:	08003920 	.word	0x08003920

08002d40 <__retarget_lock_acquire_recursive>:
 8002d40:	4770      	bx	lr

08002d42 <__retarget_lock_release_recursive>:
 8002d42:	4770      	bx	lr

08002d44 <_free_r>:
 8002d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d46:	2900      	cmp	r1, #0
 8002d48:	d044      	beq.n	8002dd4 <_free_r+0x90>
 8002d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d4e:	9001      	str	r0, [sp, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f1a1 0404 	sub.w	r4, r1, #4
 8002d56:	bfb8      	it	lt
 8002d58:	18e4      	addlt	r4, r4, r3
 8002d5a:	f000 f8df 	bl	8002f1c <__malloc_lock>
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <_free_r+0x94>)
 8002d60:	9801      	ldr	r0, [sp, #4]
 8002d62:	6813      	ldr	r3, [r2, #0]
 8002d64:	b933      	cbnz	r3, 8002d74 <_free_r+0x30>
 8002d66:	6063      	str	r3, [r4, #4]
 8002d68:	6014      	str	r4, [r2, #0]
 8002d6a:	b003      	add	sp, #12
 8002d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d70:	f000 b8da 	b.w	8002f28 <__malloc_unlock>
 8002d74:	42a3      	cmp	r3, r4
 8002d76:	d908      	bls.n	8002d8a <_free_r+0x46>
 8002d78:	6825      	ldr	r5, [r4, #0]
 8002d7a:	1961      	adds	r1, r4, r5
 8002d7c:	428b      	cmp	r3, r1
 8002d7e:	bf01      	itttt	eq
 8002d80:	6819      	ldreq	r1, [r3, #0]
 8002d82:	685b      	ldreq	r3, [r3, #4]
 8002d84:	1949      	addeq	r1, r1, r5
 8002d86:	6021      	streq	r1, [r4, #0]
 8002d88:	e7ed      	b.n	8002d66 <_free_r+0x22>
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b10b      	cbz	r3, 8002d94 <_free_r+0x50>
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	d9fa      	bls.n	8002d8a <_free_r+0x46>
 8002d94:	6811      	ldr	r1, [r2, #0]
 8002d96:	1855      	adds	r5, r2, r1
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d10b      	bne.n	8002db4 <_free_r+0x70>
 8002d9c:	6824      	ldr	r4, [r4, #0]
 8002d9e:	4421      	add	r1, r4
 8002da0:	1854      	adds	r4, r2, r1
 8002da2:	42a3      	cmp	r3, r4
 8002da4:	6011      	str	r1, [r2, #0]
 8002da6:	d1e0      	bne.n	8002d6a <_free_r+0x26>
 8002da8:	681c      	ldr	r4, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	6053      	str	r3, [r2, #4]
 8002dae:	440c      	add	r4, r1
 8002db0:	6014      	str	r4, [r2, #0]
 8002db2:	e7da      	b.n	8002d6a <_free_r+0x26>
 8002db4:	d902      	bls.n	8002dbc <_free_r+0x78>
 8002db6:	230c      	movs	r3, #12
 8002db8:	6003      	str	r3, [r0, #0]
 8002dba:	e7d6      	b.n	8002d6a <_free_r+0x26>
 8002dbc:	6825      	ldr	r5, [r4, #0]
 8002dbe:	1961      	adds	r1, r4, r5
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	bf04      	itt	eq
 8002dc4:	6819      	ldreq	r1, [r3, #0]
 8002dc6:	685b      	ldreq	r3, [r3, #4]
 8002dc8:	6063      	str	r3, [r4, #4]
 8002dca:	bf04      	itt	eq
 8002dcc:	1949      	addeq	r1, r1, r5
 8002dce:	6021      	streq	r1, [r4, #0]
 8002dd0:	6054      	str	r4, [r2, #4]
 8002dd2:	e7ca      	b.n	8002d6a <_free_r+0x26>
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bd30      	pop	{r4, r5, pc}
 8002dd8:	20000264 	.word	0x20000264

08002ddc <sbrk_aligned>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	4e0e      	ldr	r6, [pc, #56]	; (8002e18 <sbrk_aligned+0x3c>)
 8002de0:	460c      	mov	r4, r1
 8002de2:	6831      	ldr	r1, [r6, #0]
 8002de4:	4605      	mov	r5, r0
 8002de6:	b911      	cbnz	r1, 8002dee <sbrk_aligned+0x12>
 8002de8:	f000 fcbc 	bl	8003764 <_sbrk_r>
 8002dec:	6030      	str	r0, [r6, #0]
 8002dee:	4621      	mov	r1, r4
 8002df0:	4628      	mov	r0, r5
 8002df2:	f000 fcb7 	bl	8003764 <_sbrk_r>
 8002df6:	1c43      	adds	r3, r0, #1
 8002df8:	d00a      	beq.n	8002e10 <sbrk_aligned+0x34>
 8002dfa:	1cc4      	adds	r4, r0, #3
 8002dfc:	f024 0403 	bic.w	r4, r4, #3
 8002e00:	42a0      	cmp	r0, r4
 8002e02:	d007      	beq.n	8002e14 <sbrk_aligned+0x38>
 8002e04:	1a21      	subs	r1, r4, r0
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 fcac 	bl	8003764 <_sbrk_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d101      	bne.n	8002e14 <sbrk_aligned+0x38>
 8002e10:	f04f 34ff 	mov.w	r4, #4294967295
 8002e14:	4620      	mov	r0, r4
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	20000268 	.word	0x20000268

08002e1c <_malloc_r>:
 8002e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e20:	1ccd      	adds	r5, r1, #3
 8002e22:	f025 0503 	bic.w	r5, r5, #3
 8002e26:	3508      	adds	r5, #8
 8002e28:	2d0c      	cmp	r5, #12
 8002e2a:	bf38      	it	cc
 8002e2c:	250c      	movcc	r5, #12
 8002e2e:	2d00      	cmp	r5, #0
 8002e30:	4607      	mov	r7, r0
 8002e32:	db01      	blt.n	8002e38 <_malloc_r+0x1c>
 8002e34:	42a9      	cmp	r1, r5
 8002e36:	d905      	bls.n	8002e44 <_malloc_r+0x28>
 8002e38:	230c      	movs	r3, #12
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	2600      	movs	r6, #0
 8002e3e:	4630      	mov	r0, r6
 8002e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f18 <_malloc_r+0xfc>
 8002e48:	f000 f868 	bl	8002f1c <__malloc_lock>
 8002e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e50:	461c      	mov	r4, r3
 8002e52:	bb5c      	cbnz	r4, 8002eac <_malloc_r+0x90>
 8002e54:	4629      	mov	r1, r5
 8002e56:	4638      	mov	r0, r7
 8002e58:	f7ff ffc0 	bl	8002ddc <sbrk_aligned>
 8002e5c:	1c43      	adds	r3, r0, #1
 8002e5e:	4604      	mov	r4, r0
 8002e60:	d155      	bne.n	8002f0e <_malloc_r+0xf2>
 8002e62:	f8d8 4000 	ldr.w	r4, [r8]
 8002e66:	4626      	mov	r6, r4
 8002e68:	2e00      	cmp	r6, #0
 8002e6a:	d145      	bne.n	8002ef8 <_malloc_r+0xdc>
 8002e6c:	2c00      	cmp	r4, #0
 8002e6e:	d048      	beq.n	8002f02 <_malloc_r+0xe6>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	4631      	mov	r1, r6
 8002e74:	4638      	mov	r0, r7
 8002e76:	eb04 0903 	add.w	r9, r4, r3
 8002e7a:	f000 fc73 	bl	8003764 <_sbrk_r>
 8002e7e:	4581      	cmp	r9, r0
 8002e80:	d13f      	bne.n	8002f02 <_malloc_r+0xe6>
 8002e82:	6821      	ldr	r1, [r4, #0]
 8002e84:	1a6d      	subs	r5, r5, r1
 8002e86:	4629      	mov	r1, r5
 8002e88:	4638      	mov	r0, r7
 8002e8a:	f7ff ffa7 	bl	8002ddc <sbrk_aligned>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d037      	beq.n	8002f02 <_malloc_r+0xe6>
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	442b      	add	r3, r5
 8002e96:	6023      	str	r3, [r4, #0]
 8002e98:	f8d8 3000 	ldr.w	r3, [r8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d038      	beq.n	8002f12 <_malloc_r+0xf6>
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	42a2      	cmp	r2, r4
 8002ea4:	d12b      	bne.n	8002efe <_malloc_r+0xe2>
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	e00f      	b.n	8002ecc <_malloc_r+0xb0>
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	1b52      	subs	r2, r2, r5
 8002eb0:	d41f      	bmi.n	8002ef2 <_malloc_r+0xd6>
 8002eb2:	2a0b      	cmp	r2, #11
 8002eb4:	d917      	bls.n	8002ee6 <_malloc_r+0xca>
 8002eb6:	1961      	adds	r1, r4, r5
 8002eb8:	42a3      	cmp	r3, r4
 8002eba:	6025      	str	r5, [r4, #0]
 8002ebc:	bf18      	it	ne
 8002ebe:	6059      	strne	r1, [r3, #4]
 8002ec0:	6863      	ldr	r3, [r4, #4]
 8002ec2:	bf08      	it	eq
 8002ec4:	f8c8 1000 	streq.w	r1, [r8]
 8002ec8:	5162      	str	r2, [r4, r5]
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	4638      	mov	r0, r7
 8002ece:	f104 060b 	add.w	r6, r4, #11
 8002ed2:	f000 f829 	bl	8002f28 <__malloc_unlock>
 8002ed6:	f026 0607 	bic.w	r6, r6, #7
 8002eda:	1d23      	adds	r3, r4, #4
 8002edc:	1af2      	subs	r2, r6, r3
 8002ede:	d0ae      	beq.n	8002e3e <_malloc_r+0x22>
 8002ee0:	1b9b      	subs	r3, r3, r6
 8002ee2:	50a3      	str	r3, [r4, r2]
 8002ee4:	e7ab      	b.n	8002e3e <_malloc_r+0x22>
 8002ee6:	42a3      	cmp	r3, r4
 8002ee8:	6862      	ldr	r2, [r4, #4]
 8002eea:	d1dd      	bne.n	8002ea8 <_malloc_r+0x8c>
 8002eec:	f8c8 2000 	str.w	r2, [r8]
 8002ef0:	e7ec      	b.n	8002ecc <_malloc_r+0xb0>
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	6864      	ldr	r4, [r4, #4]
 8002ef6:	e7ac      	b.n	8002e52 <_malloc_r+0x36>
 8002ef8:	4634      	mov	r4, r6
 8002efa:	6876      	ldr	r6, [r6, #4]
 8002efc:	e7b4      	b.n	8002e68 <_malloc_r+0x4c>
 8002efe:	4613      	mov	r3, r2
 8002f00:	e7cc      	b.n	8002e9c <_malloc_r+0x80>
 8002f02:	230c      	movs	r3, #12
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4638      	mov	r0, r7
 8002f08:	f000 f80e 	bl	8002f28 <__malloc_unlock>
 8002f0c:	e797      	b.n	8002e3e <_malloc_r+0x22>
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	e7dc      	b.n	8002ecc <_malloc_r+0xb0>
 8002f12:	605b      	str	r3, [r3, #4]
 8002f14:	deff      	udf	#255	; 0xff
 8002f16:	bf00      	nop
 8002f18:	20000264 	.word	0x20000264

08002f1c <__malloc_lock>:
 8002f1c:	4801      	ldr	r0, [pc, #4]	; (8002f24 <__malloc_lock+0x8>)
 8002f1e:	f7ff bf0f 	b.w	8002d40 <__retarget_lock_acquire_recursive>
 8002f22:	bf00      	nop
 8002f24:	20000260 	.word	0x20000260

08002f28 <__malloc_unlock>:
 8002f28:	4801      	ldr	r0, [pc, #4]	; (8002f30 <__malloc_unlock+0x8>)
 8002f2a:	f7ff bf0a 	b.w	8002d42 <__retarget_lock_release_recursive>
 8002f2e:	bf00      	nop
 8002f30:	20000260 	.word	0x20000260

08002f34 <__sfputc_r>:
 8002f34:	6893      	ldr	r3, [r2, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	b410      	push	{r4}
 8002f3c:	6093      	str	r3, [r2, #8]
 8002f3e:	da08      	bge.n	8002f52 <__sfputc_r+0x1e>
 8002f40:	6994      	ldr	r4, [r2, #24]
 8002f42:	42a3      	cmp	r3, r4
 8002f44:	db01      	blt.n	8002f4a <__sfputc_r+0x16>
 8002f46:	290a      	cmp	r1, #10
 8002f48:	d103      	bne.n	8002f52 <__sfputc_r+0x1e>
 8002f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f4e:	f000 bb73 	b.w	8003638 <__swbuf_r>
 8002f52:	6813      	ldr	r3, [r2, #0]
 8002f54:	1c58      	adds	r0, r3, #1
 8002f56:	6010      	str	r0, [r2, #0]
 8002f58:	7019      	strb	r1, [r3, #0]
 8002f5a:	4608      	mov	r0, r1
 8002f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <__sfputs_r>:
 8002f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f64:	4606      	mov	r6, r0
 8002f66:	460f      	mov	r7, r1
 8002f68:	4614      	mov	r4, r2
 8002f6a:	18d5      	adds	r5, r2, r3
 8002f6c:	42ac      	cmp	r4, r5
 8002f6e:	d101      	bne.n	8002f74 <__sfputs_r+0x12>
 8002f70:	2000      	movs	r0, #0
 8002f72:	e007      	b.n	8002f84 <__sfputs_r+0x22>
 8002f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f78:	463a      	mov	r2, r7
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f7ff ffda 	bl	8002f34 <__sfputc_r>
 8002f80:	1c43      	adds	r3, r0, #1
 8002f82:	d1f3      	bne.n	8002f6c <__sfputs_r+0xa>
 8002f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f88 <_vfiprintf_r>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	460d      	mov	r5, r1
 8002f8e:	b09d      	sub	sp, #116	; 0x74
 8002f90:	4614      	mov	r4, r2
 8002f92:	4698      	mov	r8, r3
 8002f94:	4606      	mov	r6, r0
 8002f96:	b118      	cbz	r0, 8002fa0 <_vfiprintf_r+0x18>
 8002f98:	6a03      	ldr	r3, [r0, #32]
 8002f9a:	b90b      	cbnz	r3, 8002fa0 <_vfiprintf_r+0x18>
 8002f9c:	f7ff fdcc 	bl	8002b38 <__sinit>
 8002fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fa2:	07d9      	lsls	r1, r3, #31
 8002fa4:	d405      	bmi.n	8002fb2 <_vfiprintf_r+0x2a>
 8002fa6:	89ab      	ldrh	r3, [r5, #12]
 8002fa8:	059a      	lsls	r2, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_vfiprintf_r+0x2a>
 8002fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fae:	f7ff fec7 	bl	8002d40 <__retarget_lock_acquire_recursive>
 8002fb2:	89ab      	ldrh	r3, [r5, #12]
 8002fb4:	071b      	lsls	r3, r3, #28
 8002fb6:	d501      	bpl.n	8002fbc <_vfiprintf_r+0x34>
 8002fb8:	692b      	ldr	r3, [r5, #16]
 8002fba:	b99b      	cbnz	r3, 8002fe4 <_vfiprintf_r+0x5c>
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f000 fb78 	bl	80036b4 <__swsetup_r>
 8002fc4:	b170      	cbz	r0, 8002fe4 <_vfiprintf_r+0x5c>
 8002fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fc8:	07dc      	lsls	r4, r3, #31
 8002fca:	d504      	bpl.n	8002fd6 <_vfiprintf_r+0x4e>
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b01d      	add	sp, #116	; 0x74
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	89ab      	ldrh	r3, [r5, #12]
 8002fd8:	0598      	lsls	r0, r3, #22
 8002fda:	d4f7      	bmi.n	8002fcc <_vfiprintf_r+0x44>
 8002fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fde:	f7ff feb0 	bl	8002d42 <__retarget_lock_release_recursive>
 8002fe2:	e7f3      	b.n	8002fcc <_vfiprintf_r+0x44>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8002fe8:	2320      	movs	r3, #32
 8002fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ff2:	2330      	movs	r3, #48	; 0x30
 8002ff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80031a8 <_vfiprintf_r+0x220>
 8002ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ffc:	f04f 0901 	mov.w	r9, #1
 8003000:	4623      	mov	r3, r4
 8003002:	469a      	mov	sl, r3
 8003004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003008:	b10a      	cbz	r2, 800300e <_vfiprintf_r+0x86>
 800300a:	2a25      	cmp	r2, #37	; 0x25
 800300c:	d1f9      	bne.n	8003002 <_vfiprintf_r+0x7a>
 800300e:	ebba 0b04 	subs.w	fp, sl, r4
 8003012:	d00b      	beq.n	800302c <_vfiprintf_r+0xa4>
 8003014:	465b      	mov	r3, fp
 8003016:	4622      	mov	r2, r4
 8003018:	4629      	mov	r1, r5
 800301a:	4630      	mov	r0, r6
 800301c:	f7ff ffa1 	bl	8002f62 <__sfputs_r>
 8003020:	3001      	adds	r0, #1
 8003022:	f000 80a9 	beq.w	8003178 <_vfiprintf_r+0x1f0>
 8003026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003028:	445a      	add	r2, fp
 800302a:	9209      	str	r2, [sp, #36]	; 0x24
 800302c:	f89a 3000 	ldrb.w	r3, [sl]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 80a1 	beq.w	8003178 <_vfiprintf_r+0x1f0>
 8003036:	2300      	movs	r3, #0
 8003038:	f04f 32ff 	mov.w	r2, #4294967295
 800303c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003040:	f10a 0a01 	add.w	sl, sl, #1
 8003044:	9304      	str	r3, [sp, #16]
 8003046:	9307      	str	r3, [sp, #28]
 8003048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800304c:	931a      	str	r3, [sp, #104]	; 0x68
 800304e:	4654      	mov	r4, sl
 8003050:	2205      	movs	r2, #5
 8003052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003056:	4854      	ldr	r0, [pc, #336]	; (80031a8 <_vfiprintf_r+0x220>)
 8003058:	f7fd f8c2 	bl	80001e0 <memchr>
 800305c:	9a04      	ldr	r2, [sp, #16]
 800305e:	b9d8      	cbnz	r0, 8003098 <_vfiprintf_r+0x110>
 8003060:	06d1      	lsls	r1, r2, #27
 8003062:	bf44      	itt	mi
 8003064:	2320      	movmi	r3, #32
 8003066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800306a:	0713      	lsls	r3, r2, #28
 800306c:	bf44      	itt	mi
 800306e:	232b      	movmi	r3, #43	; 0x2b
 8003070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003074:	f89a 3000 	ldrb.w	r3, [sl]
 8003078:	2b2a      	cmp	r3, #42	; 0x2a
 800307a:	d015      	beq.n	80030a8 <_vfiprintf_r+0x120>
 800307c:	9a07      	ldr	r2, [sp, #28]
 800307e:	4654      	mov	r4, sl
 8003080:	2000      	movs	r0, #0
 8003082:	f04f 0c0a 	mov.w	ip, #10
 8003086:	4621      	mov	r1, r4
 8003088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800308c:	3b30      	subs	r3, #48	; 0x30
 800308e:	2b09      	cmp	r3, #9
 8003090:	d94d      	bls.n	800312e <_vfiprintf_r+0x1a6>
 8003092:	b1b0      	cbz	r0, 80030c2 <_vfiprintf_r+0x13a>
 8003094:	9207      	str	r2, [sp, #28]
 8003096:	e014      	b.n	80030c2 <_vfiprintf_r+0x13a>
 8003098:	eba0 0308 	sub.w	r3, r0, r8
 800309c:	fa09 f303 	lsl.w	r3, r9, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	9304      	str	r3, [sp, #16]
 80030a4:	46a2      	mov	sl, r4
 80030a6:	e7d2      	b.n	800304e <_vfiprintf_r+0xc6>
 80030a8:	9b03      	ldr	r3, [sp, #12]
 80030aa:	1d19      	adds	r1, r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	9103      	str	r1, [sp, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	bfbb      	ittet	lt
 80030b4:	425b      	neglt	r3, r3
 80030b6:	f042 0202 	orrlt.w	r2, r2, #2
 80030ba:	9307      	strge	r3, [sp, #28]
 80030bc:	9307      	strlt	r3, [sp, #28]
 80030be:	bfb8      	it	lt
 80030c0:	9204      	strlt	r2, [sp, #16]
 80030c2:	7823      	ldrb	r3, [r4, #0]
 80030c4:	2b2e      	cmp	r3, #46	; 0x2e
 80030c6:	d10c      	bne.n	80030e2 <_vfiprintf_r+0x15a>
 80030c8:	7863      	ldrb	r3, [r4, #1]
 80030ca:	2b2a      	cmp	r3, #42	; 0x2a
 80030cc:	d134      	bne.n	8003138 <_vfiprintf_r+0x1b0>
 80030ce:	9b03      	ldr	r3, [sp, #12]
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	9203      	str	r2, [sp, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfb8      	it	lt
 80030da:	f04f 33ff 	movlt.w	r3, #4294967295
 80030de:	3402      	adds	r4, #2
 80030e0:	9305      	str	r3, [sp, #20]
 80030e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031b8 <_vfiprintf_r+0x230>
 80030e6:	7821      	ldrb	r1, [r4, #0]
 80030e8:	2203      	movs	r2, #3
 80030ea:	4650      	mov	r0, sl
 80030ec:	f7fd f878 	bl	80001e0 <memchr>
 80030f0:	b138      	cbz	r0, 8003102 <_vfiprintf_r+0x17a>
 80030f2:	9b04      	ldr	r3, [sp, #16]
 80030f4:	eba0 000a 	sub.w	r0, r0, sl
 80030f8:	2240      	movs	r2, #64	; 0x40
 80030fa:	4082      	lsls	r2, r0
 80030fc:	4313      	orrs	r3, r2
 80030fe:	3401      	adds	r4, #1
 8003100:	9304      	str	r3, [sp, #16]
 8003102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003106:	4829      	ldr	r0, [pc, #164]	; (80031ac <_vfiprintf_r+0x224>)
 8003108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800310c:	2206      	movs	r2, #6
 800310e:	f7fd f867 	bl	80001e0 <memchr>
 8003112:	2800      	cmp	r0, #0
 8003114:	d03f      	beq.n	8003196 <_vfiprintf_r+0x20e>
 8003116:	4b26      	ldr	r3, [pc, #152]	; (80031b0 <_vfiprintf_r+0x228>)
 8003118:	bb1b      	cbnz	r3, 8003162 <_vfiprintf_r+0x1da>
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	3307      	adds	r3, #7
 800311e:	f023 0307 	bic.w	r3, r3, #7
 8003122:	3308      	adds	r3, #8
 8003124:	9303      	str	r3, [sp, #12]
 8003126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003128:	443b      	add	r3, r7
 800312a:	9309      	str	r3, [sp, #36]	; 0x24
 800312c:	e768      	b.n	8003000 <_vfiprintf_r+0x78>
 800312e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003132:	460c      	mov	r4, r1
 8003134:	2001      	movs	r0, #1
 8003136:	e7a6      	b.n	8003086 <_vfiprintf_r+0xfe>
 8003138:	2300      	movs	r3, #0
 800313a:	3401      	adds	r4, #1
 800313c:	9305      	str	r3, [sp, #20]
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 0c0a 	mov.w	ip, #10
 8003144:	4620      	mov	r0, r4
 8003146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800314a:	3a30      	subs	r2, #48	; 0x30
 800314c:	2a09      	cmp	r2, #9
 800314e:	d903      	bls.n	8003158 <_vfiprintf_r+0x1d0>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d0c6      	beq.n	80030e2 <_vfiprintf_r+0x15a>
 8003154:	9105      	str	r1, [sp, #20]
 8003156:	e7c4      	b.n	80030e2 <_vfiprintf_r+0x15a>
 8003158:	fb0c 2101 	mla	r1, ip, r1, r2
 800315c:	4604      	mov	r4, r0
 800315e:	2301      	movs	r3, #1
 8003160:	e7f0      	b.n	8003144 <_vfiprintf_r+0x1bc>
 8003162:	ab03      	add	r3, sp, #12
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462a      	mov	r2, r5
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <_vfiprintf_r+0x22c>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	4630      	mov	r0, r6
 800316e:	f3af 8000 	nop.w
 8003172:	4607      	mov	r7, r0
 8003174:	1c78      	adds	r0, r7, #1
 8003176:	d1d6      	bne.n	8003126 <_vfiprintf_r+0x19e>
 8003178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800317a:	07d9      	lsls	r1, r3, #31
 800317c:	d405      	bmi.n	800318a <_vfiprintf_r+0x202>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	059a      	lsls	r2, r3, #22
 8003182:	d402      	bmi.n	800318a <_vfiprintf_r+0x202>
 8003184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003186:	f7ff fddc 	bl	8002d42 <__retarget_lock_release_recursive>
 800318a:	89ab      	ldrh	r3, [r5, #12]
 800318c:	065b      	lsls	r3, r3, #25
 800318e:	f53f af1d 	bmi.w	8002fcc <_vfiprintf_r+0x44>
 8003192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003194:	e71c      	b.n	8002fd0 <_vfiprintf_r+0x48>
 8003196:	ab03      	add	r3, sp, #12
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	462a      	mov	r2, r5
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <_vfiprintf_r+0x22c>)
 800319e:	a904      	add	r1, sp, #16
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 f879 	bl	8003298 <_printf_i>
 80031a6:	e7e4      	b.n	8003172 <_vfiprintf_r+0x1ea>
 80031a8:	080038e0 	.word	0x080038e0
 80031ac:	080038ea 	.word	0x080038ea
 80031b0:	00000000 	.word	0x00000000
 80031b4:	08002f63 	.word	0x08002f63
 80031b8:	080038e6 	.word	0x080038e6

080031bc <_printf_common>:
 80031bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031c0:	4616      	mov	r6, r2
 80031c2:	4699      	mov	r9, r3
 80031c4:	688a      	ldr	r2, [r1, #8]
 80031c6:	690b      	ldr	r3, [r1, #16]
 80031c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bfb8      	it	lt
 80031d0:	4613      	movlt	r3, r2
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031d8:	4607      	mov	r7, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	b10a      	cbz	r2, 80031e2 <_printf_common+0x26>
 80031de:	3301      	adds	r3, #1
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	0699      	lsls	r1, r3, #26
 80031e6:	bf42      	ittt	mi
 80031e8:	6833      	ldrmi	r3, [r6, #0]
 80031ea:	3302      	addmi	r3, #2
 80031ec:	6033      	strmi	r3, [r6, #0]
 80031ee:	6825      	ldr	r5, [r4, #0]
 80031f0:	f015 0506 	ands.w	r5, r5, #6
 80031f4:	d106      	bne.n	8003204 <_printf_common+0x48>
 80031f6:	f104 0a19 	add.w	sl, r4, #25
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	6832      	ldr	r2, [r6, #0]
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	42ab      	cmp	r3, r5
 8003202:	dc26      	bgt.n	8003252 <_printf_common+0x96>
 8003204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003208:	1e13      	subs	r3, r2, #0
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	bf18      	it	ne
 800320e:	2301      	movne	r3, #1
 8003210:	0692      	lsls	r2, r2, #26
 8003212:	d42b      	bmi.n	800326c <_printf_common+0xb0>
 8003214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003218:	4649      	mov	r1, r9
 800321a:	4638      	mov	r0, r7
 800321c:	47c0      	blx	r8
 800321e:	3001      	adds	r0, #1
 8003220:	d01e      	beq.n	8003260 <_printf_common+0xa4>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	6922      	ldr	r2, [r4, #16]
 8003226:	f003 0306 	and.w	r3, r3, #6
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf02      	ittt	eq
 800322e:	68e5      	ldreq	r5, [r4, #12]
 8003230:	6833      	ldreq	r3, [r6, #0]
 8003232:	1aed      	subeq	r5, r5, r3
 8003234:	68a3      	ldr	r3, [r4, #8]
 8003236:	bf0c      	ite	eq
 8003238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800323c:	2500      	movne	r5, #0
 800323e:	4293      	cmp	r3, r2
 8003240:	bfc4      	itt	gt
 8003242:	1a9b      	subgt	r3, r3, r2
 8003244:	18ed      	addgt	r5, r5, r3
 8003246:	2600      	movs	r6, #0
 8003248:	341a      	adds	r4, #26
 800324a:	42b5      	cmp	r5, r6
 800324c:	d11a      	bne.n	8003284 <_printf_common+0xc8>
 800324e:	2000      	movs	r0, #0
 8003250:	e008      	b.n	8003264 <_printf_common+0xa8>
 8003252:	2301      	movs	r3, #1
 8003254:	4652      	mov	r2, sl
 8003256:	4649      	mov	r1, r9
 8003258:	4638      	mov	r0, r7
 800325a:	47c0      	blx	r8
 800325c:	3001      	adds	r0, #1
 800325e:	d103      	bne.n	8003268 <_printf_common+0xac>
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003268:	3501      	adds	r5, #1
 800326a:	e7c6      	b.n	80031fa <_printf_common+0x3e>
 800326c:	18e1      	adds	r1, r4, r3
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	2030      	movs	r0, #48	; 0x30
 8003272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003276:	4422      	add	r2, r4
 8003278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800327c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003280:	3302      	adds	r3, #2
 8003282:	e7c7      	b.n	8003214 <_printf_common+0x58>
 8003284:	2301      	movs	r3, #1
 8003286:	4622      	mov	r2, r4
 8003288:	4649      	mov	r1, r9
 800328a:	4638      	mov	r0, r7
 800328c:	47c0      	blx	r8
 800328e:	3001      	adds	r0, #1
 8003290:	d0e6      	beq.n	8003260 <_printf_common+0xa4>
 8003292:	3601      	adds	r6, #1
 8003294:	e7d9      	b.n	800324a <_printf_common+0x8e>
	...

08003298 <_printf_i>:
 8003298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	7e0f      	ldrb	r7, [r1, #24]
 800329e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032a0:	2f78      	cmp	r7, #120	; 0x78
 80032a2:	4691      	mov	r9, r2
 80032a4:	4680      	mov	r8, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	469a      	mov	sl, r3
 80032aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032ae:	d807      	bhi.n	80032c0 <_printf_i+0x28>
 80032b0:	2f62      	cmp	r7, #98	; 0x62
 80032b2:	d80a      	bhi.n	80032ca <_printf_i+0x32>
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	f000 80d4 	beq.w	8003462 <_printf_i+0x1ca>
 80032ba:	2f58      	cmp	r7, #88	; 0x58
 80032bc:	f000 80c0 	beq.w	8003440 <_printf_i+0x1a8>
 80032c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032c8:	e03a      	b.n	8003340 <_printf_i+0xa8>
 80032ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032ce:	2b15      	cmp	r3, #21
 80032d0:	d8f6      	bhi.n	80032c0 <_printf_i+0x28>
 80032d2:	a101      	add	r1, pc, #4	; (adr r1, 80032d8 <_printf_i+0x40>)
 80032d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032d8:	08003331 	.word	0x08003331
 80032dc:	08003345 	.word	0x08003345
 80032e0:	080032c1 	.word	0x080032c1
 80032e4:	080032c1 	.word	0x080032c1
 80032e8:	080032c1 	.word	0x080032c1
 80032ec:	080032c1 	.word	0x080032c1
 80032f0:	08003345 	.word	0x08003345
 80032f4:	080032c1 	.word	0x080032c1
 80032f8:	080032c1 	.word	0x080032c1
 80032fc:	080032c1 	.word	0x080032c1
 8003300:	080032c1 	.word	0x080032c1
 8003304:	08003449 	.word	0x08003449
 8003308:	08003371 	.word	0x08003371
 800330c:	08003403 	.word	0x08003403
 8003310:	080032c1 	.word	0x080032c1
 8003314:	080032c1 	.word	0x080032c1
 8003318:	0800346b 	.word	0x0800346b
 800331c:	080032c1 	.word	0x080032c1
 8003320:	08003371 	.word	0x08003371
 8003324:	080032c1 	.word	0x080032c1
 8003328:	080032c1 	.word	0x080032c1
 800332c:	0800340b 	.word	0x0800340b
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	602a      	str	r2, [r5, #0]
 8003338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800333c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003340:	2301      	movs	r3, #1
 8003342:	e09f      	b.n	8003484 <_printf_i+0x1ec>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	682b      	ldr	r3, [r5, #0]
 8003348:	0607      	lsls	r7, r0, #24
 800334a:	f103 0104 	add.w	r1, r3, #4
 800334e:	6029      	str	r1, [r5, #0]
 8003350:	d501      	bpl.n	8003356 <_printf_i+0xbe>
 8003352:	681e      	ldr	r6, [r3, #0]
 8003354:	e003      	b.n	800335e <_printf_i+0xc6>
 8003356:	0646      	lsls	r6, r0, #25
 8003358:	d5fb      	bpl.n	8003352 <_printf_i+0xba>
 800335a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800335e:	2e00      	cmp	r6, #0
 8003360:	da03      	bge.n	800336a <_printf_i+0xd2>
 8003362:	232d      	movs	r3, #45	; 0x2d
 8003364:	4276      	negs	r6, r6
 8003366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336a:	485a      	ldr	r0, [pc, #360]	; (80034d4 <_printf_i+0x23c>)
 800336c:	230a      	movs	r3, #10
 800336e:	e012      	b.n	8003396 <_printf_i+0xfe>
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	1d19      	adds	r1, r3, #4
 8003376:	6029      	str	r1, [r5, #0]
 8003378:	0605      	lsls	r5, r0, #24
 800337a:	d501      	bpl.n	8003380 <_printf_i+0xe8>
 800337c:	681e      	ldr	r6, [r3, #0]
 800337e:	e002      	b.n	8003386 <_printf_i+0xee>
 8003380:	0641      	lsls	r1, r0, #25
 8003382:	d5fb      	bpl.n	800337c <_printf_i+0xe4>
 8003384:	881e      	ldrh	r6, [r3, #0]
 8003386:	4853      	ldr	r0, [pc, #332]	; (80034d4 <_printf_i+0x23c>)
 8003388:	2f6f      	cmp	r7, #111	; 0x6f
 800338a:	bf0c      	ite	eq
 800338c:	2308      	moveq	r3, #8
 800338e:	230a      	movne	r3, #10
 8003390:	2100      	movs	r1, #0
 8003392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003396:	6865      	ldr	r5, [r4, #4]
 8003398:	60a5      	str	r5, [r4, #8]
 800339a:	2d00      	cmp	r5, #0
 800339c:	bfa2      	ittt	ge
 800339e:	6821      	ldrge	r1, [r4, #0]
 80033a0:	f021 0104 	bicge.w	r1, r1, #4
 80033a4:	6021      	strge	r1, [r4, #0]
 80033a6:	b90e      	cbnz	r6, 80033ac <_printf_i+0x114>
 80033a8:	2d00      	cmp	r5, #0
 80033aa:	d04b      	beq.n	8003444 <_printf_i+0x1ac>
 80033ac:	4615      	mov	r5, r2
 80033ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80033b2:	fb03 6711 	mls	r7, r3, r1, r6
 80033b6:	5dc7      	ldrb	r7, [r0, r7]
 80033b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033bc:	4637      	mov	r7, r6
 80033be:	42bb      	cmp	r3, r7
 80033c0:	460e      	mov	r6, r1
 80033c2:	d9f4      	bls.n	80033ae <_printf_i+0x116>
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d10b      	bne.n	80033e0 <_printf_i+0x148>
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	07de      	lsls	r6, r3, #31
 80033cc:	d508      	bpl.n	80033e0 <_printf_i+0x148>
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6861      	ldr	r1, [r4, #4]
 80033d2:	4299      	cmp	r1, r3
 80033d4:	bfde      	ittt	le
 80033d6:	2330      	movle	r3, #48	; 0x30
 80033d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033e0:	1b52      	subs	r2, r2, r5
 80033e2:	6122      	str	r2, [r4, #16]
 80033e4:	f8cd a000 	str.w	sl, [sp]
 80033e8:	464b      	mov	r3, r9
 80033ea:	aa03      	add	r2, sp, #12
 80033ec:	4621      	mov	r1, r4
 80033ee:	4640      	mov	r0, r8
 80033f0:	f7ff fee4 	bl	80031bc <_printf_common>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d14a      	bne.n	800348e <_printf_i+0x1f6>
 80033f8:	f04f 30ff 	mov.w	r0, #4294967295
 80033fc:	b004      	add	sp, #16
 80033fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	f043 0320 	orr.w	r3, r3, #32
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	4833      	ldr	r0, [pc, #204]	; (80034d8 <_printf_i+0x240>)
 800340c:	2778      	movs	r7, #120	; 0x78
 800340e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003412:	6823      	ldr	r3, [r4, #0]
 8003414:	6829      	ldr	r1, [r5, #0]
 8003416:	061f      	lsls	r7, r3, #24
 8003418:	f851 6b04 	ldr.w	r6, [r1], #4
 800341c:	d402      	bmi.n	8003424 <_printf_i+0x18c>
 800341e:	065f      	lsls	r7, r3, #25
 8003420:	bf48      	it	mi
 8003422:	b2b6      	uxthmi	r6, r6
 8003424:	07df      	lsls	r7, r3, #31
 8003426:	bf48      	it	mi
 8003428:	f043 0320 	orrmi.w	r3, r3, #32
 800342c:	6029      	str	r1, [r5, #0]
 800342e:	bf48      	it	mi
 8003430:	6023      	strmi	r3, [r4, #0]
 8003432:	b91e      	cbnz	r6, 800343c <_printf_i+0x1a4>
 8003434:	6823      	ldr	r3, [r4, #0]
 8003436:	f023 0320 	bic.w	r3, r3, #32
 800343a:	6023      	str	r3, [r4, #0]
 800343c:	2310      	movs	r3, #16
 800343e:	e7a7      	b.n	8003390 <_printf_i+0xf8>
 8003440:	4824      	ldr	r0, [pc, #144]	; (80034d4 <_printf_i+0x23c>)
 8003442:	e7e4      	b.n	800340e <_printf_i+0x176>
 8003444:	4615      	mov	r5, r2
 8003446:	e7bd      	b.n	80033c4 <_printf_i+0x12c>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	6826      	ldr	r6, [r4, #0]
 800344c:	6961      	ldr	r1, [r4, #20]
 800344e:	1d18      	adds	r0, r3, #4
 8003450:	6028      	str	r0, [r5, #0]
 8003452:	0635      	lsls	r5, r6, #24
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	d501      	bpl.n	800345c <_printf_i+0x1c4>
 8003458:	6019      	str	r1, [r3, #0]
 800345a:	e002      	b.n	8003462 <_printf_i+0x1ca>
 800345c:	0670      	lsls	r0, r6, #25
 800345e:	d5fb      	bpl.n	8003458 <_printf_i+0x1c0>
 8003460:	8019      	strh	r1, [r3, #0]
 8003462:	2300      	movs	r3, #0
 8003464:	6123      	str	r3, [r4, #16]
 8003466:	4615      	mov	r5, r2
 8003468:	e7bc      	b.n	80033e4 <_printf_i+0x14c>
 800346a:	682b      	ldr	r3, [r5, #0]
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	602a      	str	r2, [r5, #0]
 8003470:	681d      	ldr	r5, [r3, #0]
 8003472:	6862      	ldr	r2, [r4, #4]
 8003474:	2100      	movs	r1, #0
 8003476:	4628      	mov	r0, r5
 8003478:	f7fc feb2 	bl	80001e0 <memchr>
 800347c:	b108      	cbz	r0, 8003482 <_printf_i+0x1ea>
 800347e:	1b40      	subs	r0, r0, r5
 8003480:	6060      	str	r0, [r4, #4]
 8003482:	6863      	ldr	r3, [r4, #4]
 8003484:	6123      	str	r3, [r4, #16]
 8003486:	2300      	movs	r3, #0
 8003488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800348c:	e7aa      	b.n	80033e4 <_printf_i+0x14c>
 800348e:	6923      	ldr	r3, [r4, #16]
 8003490:	462a      	mov	r2, r5
 8003492:	4649      	mov	r1, r9
 8003494:	4640      	mov	r0, r8
 8003496:	47d0      	blx	sl
 8003498:	3001      	adds	r0, #1
 800349a:	d0ad      	beq.n	80033f8 <_printf_i+0x160>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	079b      	lsls	r3, r3, #30
 80034a0:	d413      	bmi.n	80034ca <_printf_i+0x232>
 80034a2:	68e0      	ldr	r0, [r4, #12]
 80034a4:	9b03      	ldr	r3, [sp, #12]
 80034a6:	4298      	cmp	r0, r3
 80034a8:	bfb8      	it	lt
 80034aa:	4618      	movlt	r0, r3
 80034ac:	e7a6      	b.n	80033fc <_printf_i+0x164>
 80034ae:	2301      	movs	r3, #1
 80034b0:	4632      	mov	r2, r6
 80034b2:	4649      	mov	r1, r9
 80034b4:	4640      	mov	r0, r8
 80034b6:	47d0      	blx	sl
 80034b8:	3001      	adds	r0, #1
 80034ba:	d09d      	beq.n	80033f8 <_printf_i+0x160>
 80034bc:	3501      	adds	r5, #1
 80034be:	68e3      	ldr	r3, [r4, #12]
 80034c0:	9903      	ldr	r1, [sp, #12]
 80034c2:	1a5b      	subs	r3, r3, r1
 80034c4:	42ab      	cmp	r3, r5
 80034c6:	dcf2      	bgt.n	80034ae <_printf_i+0x216>
 80034c8:	e7eb      	b.n	80034a2 <_printf_i+0x20a>
 80034ca:	2500      	movs	r5, #0
 80034cc:	f104 0619 	add.w	r6, r4, #25
 80034d0:	e7f5      	b.n	80034be <_printf_i+0x226>
 80034d2:	bf00      	nop
 80034d4:	080038f1 	.word	0x080038f1
 80034d8:	08003902 	.word	0x08003902

080034dc <__sflush_r>:
 80034dc:	898a      	ldrh	r2, [r1, #12]
 80034de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e2:	4605      	mov	r5, r0
 80034e4:	0710      	lsls	r0, r2, #28
 80034e6:	460c      	mov	r4, r1
 80034e8:	d458      	bmi.n	800359c <__sflush_r+0xc0>
 80034ea:	684b      	ldr	r3, [r1, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dc05      	bgt.n	80034fc <__sflush_r+0x20>
 80034f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	dc02      	bgt.n	80034fc <__sflush_r+0x20>
 80034f6:	2000      	movs	r0, #0
 80034f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034fe:	2e00      	cmp	r6, #0
 8003500:	d0f9      	beq.n	80034f6 <__sflush_r+0x1a>
 8003502:	2300      	movs	r3, #0
 8003504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003508:	682f      	ldr	r7, [r5, #0]
 800350a:	6a21      	ldr	r1, [r4, #32]
 800350c:	602b      	str	r3, [r5, #0]
 800350e:	d032      	beq.n	8003576 <__sflush_r+0x9a>
 8003510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003512:	89a3      	ldrh	r3, [r4, #12]
 8003514:	075a      	lsls	r2, r3, #29
 8003516:	d505      	bpl.n	8003524 <__sflush_r+0x48>
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	1ac0      	subs	r0, r0, r3
 800351c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800351e:	b10b      	cbz	r3, 8003524 <__sflush_r+0x48>
 8003520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003522:	1ac0      	subs	r0, r0, r3
 8003524:	2300      	movs	r3, #0
 8003526:	4602      	mov	r2, r0
 8003528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800352a:	6a21      	ldr	r1, [r4, #32]
 800352c:	4628      	mov	r0, r5
 800352e:	47b0      	blx	r6
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	d106      	bne.n	8003544 <__sflush_r+0x68>
 8003536:	6829      	ldr	r1, [r5, #0]
 8003538:	291d      	cmp	r1, #29
 800353a:	d82b      	bhi.n	8003594 <__sflush_r+0xb8>
 800353c:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <__sflush_r+0x108>)
 800353e:	410a      	asrs	r2, r1
 8003540:	07d6      	lsls	r6, r2, #31
 8003542:	d427      	bmi.n	8003594 <__sflush_r+0xb8>
 8003544:	2200      	movs	r2, #0
 8003546:	6062      	str	r2, [r4, #4]
 8003548:	04d9      	lsls	r1, r3, #19
 800354a:	6922      	ldr	r2, [r4, #16]
 800354c:	6022      	str	r2, [r4, #0]
 800354e:	d504      	bpl.n	800355a <__sflush_r+0x7e>
 8003550:	1c42      	adds	r2, r0, #1
 8003552:	d101      	bne.n	8003558 <__sflush_r+0x7c>
 8003554:	682b      	ldr	r3, [r5, #0]
 8003556:	b903      	cbnz	r3, 800355a <__sflush_r+0x7e>
 8003558:	6560      	str	r0, [r4, #84]	; 0x54
 800355a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800355c:	602f      	str	r7, [r5, #0]
 800355e:	2900      	cmp	r1, #0
 8003560:	d0c9      	beq.n	80034f6 <__sflush_r+0x1a>
 8003562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003566:	4299      	cmp	r1, r3
 8003568:	d002      	beq.n	8003570 <__sflush_r+0x94>
 800356a:	4628      	mov	r0, r5
 800356c:	f7ff fbea 	bl	8002d44 <_free_r>
 8003570:	2000      	movs	r0, #0
 8003572:	6360      	str	r0, [r4, #52]	; 0x34
 8003574:	e7c0      	b.n	80034f8 <__sflush_r+0x1c>
 8003576:	2301      	movs	r3, #1
 8003578:	4628      	mov	r0, r5
 800357a:	47b0      	blx	r6
 800357c:	1c41      	adds	r1, r0, #1
 800357e:	d1c8      	bne.n	8003512 <__sflush_r+0x36>
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0c5      	beq.n	8003512 <__sflush_r+0x36>
 8003586:	2b1d      	cmp	r3, #29
 8003588:	d001      	beq.n	800358e <__sflush_r+0xb2>
 800358a:	2b16      	cmp	r3, #22
 800358c:	d101      	bne.n	8003592 <__sflush_r+0xb6>
 800358e:	602f      	str	r7, [r5, #0]
 8003590:	e7b1      	b.n	80034f6 <__sflush_r+0x1a>
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003598:	81a3      	strh	r3, [r4, #12]
 800359a:	e7ad      	b.n	80034f8 <__sflush_r+0x1c>
 800359c:	690f      	ldr	r7, [r1, #16]
 800359e:	2f00      	cmp	r7, #0
 80035a0:	d0a9      	beq.n	80034f6 <__sflush_r+0x1a>
 80035a2:	0793      	lsls	r3, r2, #30
 80035a4:	680e      	ldr	r6, [r1, #0]
 80035a6:	bf08      	it	eq
 80035a8:	694b      	ldreq	r3, [r1, #20]
 80035aa:	600f      	str	r7, [r1, #0]
 80035ac:	bf18      	it	ne
 80035ae:	2300      	movne	r3, #0
 80035b0:	eba6 0807 	sub.w	r8, r6, r7
 80035b4:	608b      	str	r3, [r1, #8]
 80035b6:	f1b8 0f00 	cmp.w	r8, #0
 80035ba:	dd9c      	ble.n	80034f6 <__sflush_r+0x1a>
 80035bc:	6a21      	ldr	r1, [r4, #32]
 80035be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80035c0:	4643      	mov	r3, r8
 80035c2:	463a      	mov	r2, r7
 80035c4:	4628      	mov	r0, r5
 80035c6:	47b0      	blx	r6
 80035c8:	2800      	cmp	r0, #0
 80035ca:	dc06      	bgt.n	80035da <__sflush_r+0xfe>
 80035cc:	89a3      	ldrh	r3, [r4, #12]
 80035ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d2:	81a3      	strh	r3, [r4, #12]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	e78e      	b.n	80034f8 <__sflush_r+0x1c>
 80035da:	4407      	add	r7, r0
 80035dc:	eba8 0800 	sub.w	r8, r8, r0
 80035e0:	e7e9      	b.n	80035b6 <__sflush_r+0xda>
 80035e2:	bf00      	nop
 80035e4:	dfbffffe 	.word	0xdfbffffe

080035e8 <_fflush_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	690b      	ldr	r3, [r1, #16]
 80035ec:	4605      	mov	r5, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	b913      	cbnz	r3, 80035f8 <_fflush_r+0x10>
 80035f2:	2500      	movs	r5, #0
 80035f4:	4628      	mov	r0, r5
 80035f6:	bd38      	pop	{r3, r4, r5, pc}
 80035f8:	b118      	cbz	r0, 8003602 <_fflush_r+0x1a>
 80035fa:	6a03      	ldr	r3, [r0, #32]
 80035fc:	b90b      	cbnz	r3, 8003602 <_fflush_r+0x1a>
 80035fe:	f7ff fa9b 	bl	8002b38 <__sinit>
 8003602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f3      	beq.n	80035f2 <_fflush_r+0xa>
 800360a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800360c:	07d0      	lsls	r0, r2, #31
 800360e:	d404      	bmi.n	800361a <_fflush_r+0x32>
 8003610:	0599      	lsls	r1, r3, #22
 8003612:	d402      	bmi.n	800361a <_fflush_r+0x32>
 8003614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003616:	f7ff fb93 	bl	8002d40 <__retarget_lock_acquire_recursive>
 800361a:	4628      	mov	r0, r5
 800361c:	4621      	mov	r1, r4
 800361e:	f7ff ff5d 	bl	80034dc <__sflush_r>
 8003622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003624:	07da      	lsls	r2, r3, #31
 8003626:	4605      	mov	r5, r0
 8003628:	d4e4      	bmi.n	80035f4 <_fflush_r+0xc>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	059b      	lsls	r3, r3, #22
 800362e:	d4e1      	bmi.n	80035f4 <_fflush_r+0xc>
 8003630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003632:	f7ff fb86 	bl	8002d42 <__retarget_lock_release_recursive>
 8003636:	e7dd      	b.n	80035f4 <_fflush_r+0xc>

08003638 <__swbuf_r>:
 8003638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363a:	460e      	mov	r6, r1
 800363c:	4614      	mov	r4, r2
 800363e:	4605      	mov	r5, r0
 8003640:	b118      	cbz	r0, 800364a <__swbuf_r+0x12>
 8003642:	6a03      	ldr	r3, [r0, #32]
 8003644:	b90b      	cbnz	r3, 800364a <__swbuf_r+0x12>
 8003646:	f7ff fa77 	bl	8002b38 <__sinit>
 800364a:	69a3      	ldr	r3, [r4, #24]
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	89a3      	ldrh	r3, [r4, #12]
 8003650:	071a      	lsls	r2, r3, #28
 8003652:	d525      	bpl.n	80036a0 <__swbuf_r+0x68>
 8003654:	6923      	ldr	r3, [r4, #16]
 8003656:	b31b      	cbz	r3, 80036a0 <__swbuf_r+0x68>
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	6922      	ldr	r2, [r4, #16]
 800365c:	1a98      	subs	r0, r3, r2
 800365e:	6963      	ldr	r3, [r4, #20]
 8003660:	b2f6      	uxtb	r6, r6
 8003662:	4283      	cmp	r3, r0
 8003664:	4637      	mov	r7, r6
 8003666:	dc04      	bgt.n	8003672 <__swbuf_r+0x3a>
 8003668:	4621      	mov	r1, r4
 800366a:	4628      	mov	r0, r5
 800366c:	f7ff ffbc 	bl	80035e8 <_fflush_r>
 8003670:	b9e0      	cbnz	r0, 80036ac <__swbuf_r+0x74>
 8003672:	68a3      	ldr	r3, [r4, #8]
 8003674:	3b01      	subs	r3, #1
 8003676:	60a3      	str	r3, [r4, #8]
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	6022      	str	r2, [r4, #0]
 800367e:	701e      	strb	r6, [r3, #0]
 8003680:	6962      	ldr	r2, [r4, #20]
 8003682:	1c43      	adds	r3, r0, #1
 8003684:	429a      	cmp	r2, r3
 8003686:	d004      	beq.n	8003692 <__swbuf_r+0x5a>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	07db      	lsls	r3, r3, #31
 800368c:	d506      	bpl.n	800369c <__swbuf_r+0x64>
 800368e:	2e0a      	cmp	r6, #10
 8003690:	d104      	bne.n	800369c <__swbuf_r+0x64>
 8003692:	4621      	mov	r1, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f7ff ffa7 	bl	80035e8 <_fflush_r>
 800369a:	b938      	cbnz	r0, 80036ac <__swbuf_r+0x74>
 800369c:	4638      	mov	r0, r7
 800369e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036a0:	4621      	mov	r1, r4
 80036a2:	4628      	mov	r0, r5
 80036a4:	f000 f806 	bl	80036b4 <__swsetup_r>
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d0d5      	beq.n	8003658 <__swbuf_r+0x20>
 80036ac:	f04f 37ff 	mov.w	r7, #4294967295
 80036b0:	e7f4      	b.n	800369c <__swbuf_r+0x64>
	...

080036b4 <__swsetup_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <__swsetup_r+0xac>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	460c      	mov	r4, r1
 80036be:	b118      	cbz	r0, 80036c8 <__swsetup_r+0x14>
 80036c0:	6a03      	ldr	r3, [r0, #32]
 80036c2:	b90b      	cbnz	r3, 80036c8 <__swsetup_r+0x14>
 80036c4:	f7ff fa38 	bl	8002b38 <__sinit>
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036ce:	0718      	lsls	r0, r3, #28
 80036d0:	d422      	bmi.n	8003718 <__swsetup_r+0x64>
 80036d2:	06d9      	lsls	r1, r3, #27
 80036d4:	d407      	bmi.n	80036e6 <__swsetup_r+0x32>
 80036d6:	2309      	movs	r3, #9
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036de:	81a3      	strh	r3, [r4, #12]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	e034      	b.n	8003750 <__swsetup_r+0x9c>
 80036e6:	0758      	lsls	r0, r3, #29
 80036e8:	d512      	bpl.n	8003710 <__swsetup_r+0x5c>
 80036ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036ec:	b141      	cbz	r1, 8003700 <__swsetup_r+0x4c>
 80036ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036f2:	4299      	cmp	r1, r3
 80036f4:	d002      	beq.n	80036fc <__swsetup_r+0x48>
 80036f6:	4628      	mov	r0, r5
 80036f8:	f7ff fb24 	bl	8002d44 <_free_r>
 80036fc:	2300      	movs	r3, #0
 80036fe:	6363      	str	r3, [r4, #52]	; 0x34
 8003700:	89a3      	ldrh	r3, [r4, #12]
 8003702:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003706:	81a3      	strh	r3, [r4, #12]
 8003708:	2300      	movs	r3, #0
 800370a:	6063      	str	r3, [r4, #4]
 800370c:	6923      	ldr	r3, [r4, #16]
 800370e:	6023      	str	r3, [r4, #0]
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	f043 0308 	orr.w	r3, r3, #8
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	b94b      	cbnz	r3, 8003730 <__swsetup_r+0x7c>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d003      	beq.n	8003730 <__swsetup_r+0x7c>
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f850 	bl	80037d0 <__smakebuf_r>
 8003730:	89a0      	ldrh	r0, [r4, #12]
 8003732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003736:	f010 0301 	ands.w	r3, r0, #1
 800373a:	d00a      	beq.n	8003752 <__swsetup_r+0x9e>
 800373c:	2300      	movs	r3, #0
 800373e:	60a3      	str	r3, [r4, #8]
 8003740:	6963      	ldr	r3, [r4, #20]
 8003742:	425b      	negs	r3, r3
 8003744:	61a3      	str	r3, [r4, #24]
 8003746:	6923      	ldr	r3, [r4, #16]
 8003748:	b943      	cbnz	r3, 800375c <__swsetup_r+0xa8>
 800374a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800374e:	d1c4      	bne.n	80036da <__swsetup_r+0x26>
 8003750:	bd38      	pop	{r3, r4, r5, pc}
 8003752:	0781      	lsls	r1, r0, #30
 8003754:	bf58      	it	pl
 8003756:	6963      	ldrpl	r3, [r4, #20]
 8003758:	60a3      	str	r3, [r4, #8]
 800375a:	e7f4      	b.n	8003746 <__swsetup_r+0x92>
 800375c:	2000      	movs	r0, #0
 800375e:	e7f7      	b.n	8003750 <__swsetup_r+0x9c>
 8003760:	20000064 	.word	0x20000064

08003764 <_sbrk_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	4d06      	ldr	r5, [pc, #24]	; (8003780 <_sbrk_r+0x1c>)
 8003768:	2300      	movs	r3, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	602b      	str	r3, [r5, #0]
 8003770:	f7fd f96c 	bl	8000a4c <_sbrk>
 8003774:	1c43      	adds	r3, r0, #1
 8003776:	d102      	bne.n	800377e <_sbrk_r+0x1a>
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	b103      	cbz	r3, 800377e <_sbrk_r+0x1a>
 800377c:	6023      	str	r3, [r4, #0]
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	2000025c 	.word	0x2000025c

08003784 <__swhatbuf_r>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	460c      	mov	r4, r1
 8003788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800378c:	2900      	cmp	r1, #0
 800378e:	b096      	sub	sp, #88	; 0x58
 8003790:	4615      	mov	r5, r2
 8003792:	461e      	mov	r6, r3
 8003794:	da0d      	bge.n	80037b2 <__swhatbuf_r+0x2e>
 8003796:	89a3      	ldrh	r3, [r4, #12]
 8003798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800379c:	f04f 0100 	mov.w	r1, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037a6:	2340      	movne	r3, #64	; 0x40
 80037a8:	2000      	movs	r0, #0
 80037aa:	6031      	str	r1, [r6, #0]
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	b016      	add	sp, #88	; 0x58
 80037b0:	bd70      	pop	{r4, r5, r6, pc}
 80037b2:	466a      	mov	r2, sp
 80037b4:	f000 f848 	bl	8003848 <_fstat_r>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	dbec      	blt.n	8003796 <__swhatbuf_r+0x12>
 80037bc:	9901      	ldr	r1, [sp, #4]
 80037be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80037c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80037c6:	4259      	negs	r1, r3
 80037c8:	4159      	adcs	r1, r3
 80037ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ce:	e7eb      	b.n	80037a8 <__swhatbuf_r+0x24>

080037d0 <__smakebuf_r>:
 80037d0:	898b      	ldrh	r3, [r1, #12]
 80037d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037d4:	079d      	lsls	r5, r3, #30
 80037d6:	4606      	mov	r6, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	d507      	bpl.n	80037ec <__smakebuf_r+0x1c>
 80037dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037e0:	6023      	str	r3, [r4, #0]
 80037e2:	6123      	str	r3, [r4, #16]
 80037e4:	2301      	movs	r3, #1
 80037e6:	6163      	str	r3, [r4, #20]
 80037e8:	b002      	add	sp, #8
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	ab01      	add	r3, sp, #4
 80037ee:	466a      	mov	r2, sp
 80037f0:	f7ff ffc8 	bl	8003784 <__swhatbuf_r>
 80037f4:	9900      	ldr	r1, [sp, #0]
 80037f6:	4605      	mov	r5, r0
 80037f8:	4630      	mov	r0, r6
 80037fa:	f7ff fb0f 	bl	8002e1c <_malloc_r>
 80037fe:	b948      	cbnz	r0, 8003814 <__smakebuf_r+0x44>
 8003800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003804:	059a      	lsls	r2, r3, #22
 8003806:	d4ef      	bmi.n	80037e8 <__smakebuf_r+0x18>
 8003808:	f023 0303 	bic.w	r3, r3, #3
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7e3      	b.n	80037dc <__smakebuf_r+0xc>
 8003814:	89a3      	ldrh	r3, [r4, #12]
 8003816:	6020      	str	r0, [r4, #0]
 8003818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	9b00      	ldr	r3, [sp, #0]
 8003820:	6163      	str	r3, [r4, #20]
 8003822:	9b01      	ldr	r3, [sp, #4]
 8003824:	6120      	str	r0, [r4, #16]
 8003826:	b15b      	cbz	r3, 8003840 <__smakebuf_r+0x70>
 8003828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800382c:	4630      	mov	r0, r6
 800382e:	f000 f81d 	bl	800386c <_isatty_r>
 8003832:	b128      	cbz	r0, 8003840 <__smakebuf_r+0x70>
 8003834:	89a3      	ldrh	r3, [r4, #12]
 8003836:	f023 0303 	bic.w	r3, r3, #3
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	81a3      	strh	r3, [r4, #12]
 8003840:	89a3      	ldrh	r3, [r4, #12]
 8003842:	431d      	orrs	r5, r3
 8003844:	81a5      	strh	r5, [r4, #12]
 8003846:	e7cf      	b.n	80037e8 <__smakebuf_r+0x18>

08003848 <_fstat_r>:
 8003848:	b538      	push	{r3, r4, r5, lr}
 800384a:	4d07      	ldr	r5, [pc, #28]	; (8003868 <_fstat_r+0x20>)
 800384c:	2300      	movs	r3, #0
 800384e:	4604      	mov	r4, r0
 8003850:	4608      	mov	r0, r1
 8003852:	4611      	mov	r1, r2
 8003854:	602b      	str	r3, [r5, #0]
 8003856:	f7fd f8d0 	bl	80009fa <_fstat>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	d102      	bne.n	8003864 <_fstat_r+0x1c>
 800385e:	682b      	ldr	r3, [r5, #0]
 8003860:	b103      	cbz	r3, 8003864 <_fstat_r+0x1c>
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	bd38      	pop	{r3, r4, r5, pc}
 8003866:	bf00      	nop
 8003868:	2000025c 	.word	0x2000025c

0800386c <_isatty_r>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4d06      	ldr	r5, [pc, #24]	; (8003888 <_isatty_r+0x1c>)
 8003870:	2300      	movs	r3, #0
 8003872:	4604      	mov	r4, r0
 8003874:	4608      	mov	r0, r1
 8003876:	602b      	str	r3, [r5, #0]
 8003878:	f7fd f8cf 	bl	8000a1a <_isatty>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d102      	bne.n	8003886 <_isatty_r+0x1a>
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	b103      	cbz	r3, 8003886 <_isatty_r+0x1a>
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	bd38      	pop	{r3, r4, r5, pc}
 8003888:	2000025c 	.word	0x2000025c

0800388c <_init>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr

08003898 <_fini>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr
